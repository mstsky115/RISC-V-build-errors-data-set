[    0s] Memory limit set to 10955196KB
[    1s] Using BUILD_ROOT=/var/cache/obs/worker/root_3
[    1s] Using BUILD_ARCH=riscv64
[    1s] 
[    4s] 
[    4s] oe-RISCV-worker29 started "build _service:extract_file:pylint.spec" at Thu Apr 21 16:24:14 UTC 2022.
[    4s] 
[    4s] Building pylint for project 'openEuler:Mainline:RISC-V' repository 'advanced_riscv64' arch 'riscv64' srcmd5 '59d4ef7b265b688c81d0320067995e98'
[    4s] 
[    5s] processing recipe /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:pylint.spec ...
[    9s] running changelog2spec --target rpm --file /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:pylint.spec
[   10s] init_buildsystem --configdir /var/run/obs/worker/3/build/configs --cachedir /var/cache/build --clean --rpmlist /var/cache/obs/worker/root_3/.build.rpmlist /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:pylint.spec build ...
[   98s] cycle: bash -> coreutils
[   98s]   breaking dependency coreutils -> bash
[   98s] cycle: bash -> coreutils -> info
[   98s]   breaking dependency coreutils -> info
[   98s] cycle: glibc -> filesystem -> bash -> coreutils
[   98s]   breaking dependency filesystem -> bash
[   98s] cycle: glibc -> filesystem -> coreutils
[   98s]   breaking dependency coreutils -> glibc
[   98s] cycle: glibc -> filesystem -> coreutils -> libacl
[   98s]   breaking dependency coreutils -> libacl
[   98s] cycle: glibc -> filesystem -> coreutils -> attr
[   98s]   breaking dependency coreutils -> attr
[   98s] cycle: coreutils -> libcap -> bash
[   98s]   breaking dependency coreutils -> libcap
[   98s] cycle: glibc -> filesystem -> coreutils -> openssl-libs
[   98s]   breaking dependency coreutils -> openssl-libs
[   98s] cycle: glibc -> filesystem -> coreutils -> libselinux
[   98s]   breaking dependency libselinux -> glibc
[   98s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2
[   98s]   breaking dependency pcre2 -> glibc
[   98s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2 -> readline
[   98s]   breaking dependency readline -> glibc
[   98s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2 -> readline -> ncurses-libs
[   98s]   breaking dependency coreutils -> libselinux
[   98s] cycle: glibc -> filesystem -> coreutils -> ncurses
[   98s]   breaking dependency ncurses -> glibc
[   98s] cycle: glibc -> filesystem -> coreutils -> ncurses -> ncurses-libs
[   98s]   breaking dependency ncurses -> ncurses-libs
[   98s] cycle: filesystem -> coreutils -> ncurses -> libgcc
[   98s]   breaking dependency ncurses -> libgcc
[   98s] cycle: perl-Carp -> perl-libs
[   98s]   breaking dependency perl-libs -> perl-Carp
[   98s] cycle: perl-libs -> perl-Exporter
[   98s]   breaking dependency perl-libs -> perl-Exporter
[   98s] cycle: perl-Carp -> perl-Exporter
[   98s]   breaking dependency perl-Exporter -> perl-Carp
[   98s] cycle: nss-util -> nss
[   98s]   breaking dependency nss -> nss-util
[   98s] cycle: nss-softokn -> nss-util -> nss
[   98s]   breaking dependency nss -> nss-softokn
[   98s] cycle: systemd -> cryptsetup -> device-mapper
[   98s]   breaking dependency systemd -> cryptsetup
[   98s] cycle: audit -> systemd -> pam
[   98s]   breaking dependency systemd -> pam
[   99s] [1/84] preinstalling dbus...
[  100s] [2/84] preinstalling libffi-devel...
[  102s] [3/84] preinstalling nodejs-source-map...
[  103s] [4/84] preinstalling python3-pip...
[  108s] [5/84] preinstalling python3-setuptools_scm...
[  109s] [6/84] preinstalling ncurses...
[  117s] [7/84] preinstalling coreutils...
[  121s] [8/84] preinstalling filesystem...
[  124s] [9/84] preinstalling glibc...
[  128s] [10/84] preinstalling libgcc...
[  129s] [11/84] preinstalling diffutils...
[  130s] [12/84] preinstalling libcap-ng...
[  131s] [13/84] preinstalling libgpg-error...
[  132s] [14/84] preinstalling libpcap...
[  133s] [15/84] preinstalling libsmartcols...
[  134s] [16/84] preinstalling libuuid...
[  135s] [17/84] preinstalling libxcrypt...
[  136s] [18/84] preinstalling lz4...
[  136s] [19/84] preinstalling m4...
[  138s] [20/84] preinstalling ncurses-libs...
[  139s] [21/84] preinstalling nspr...
[  140s] [22/84] preinstalling xz-libs...
[  141s] [23/84] preinstalling zlib...
[  142s] [24/84] preinstalling attr...
[  143s] [25/84] preinstalling libdb...
[  148s] [26/84] preinstalling zstd...
[  149s] [27/84] preinstalling audit-libs...
[  150s] [28/84] preinstalling file...
[  151s] [29/84] preinstalling iptables-libs...
[  152s] [30/84] preinstalling libacl...
[  153s] [31/84] preinstalling libgcrypt...
[  154s] [32/84] preinstalling openssl-libs...
[  156s] [33/84] preinstalling readline...
[  157s] [34/84] preinstalling bash...
[  160s] [35/84] preinstalling cmake...
[  171s] [36/84] preinstalling perl-libs...
[  174s] [37/84] preinstalling dnf...
[  175s] [38/84] preinstalling pcre2...
[  176s] [39/84] preinstalling perl-Exporter...
[  177s] [40/84] preinstalling bzip2...
[  178s] [41/84] preinstalling elfutils...
[  179s] [42/84] preinstalling hostname...
[  180s] [43/84] preinstalling libcap...
[  181s] [44/84] preinstalling pcre...
[  182s] [45/84] preinstalling popt...
[  183s] [46/84] preinstalling acl...
[  184s] [47/84] preinstalling libblkid...
[  185s] [48/84] preinstalling openssl...
[  186s] [49/84] preinstalling sqlite...
[  187s] [50/84] preinstalling tar...
[  189s] [51/84] preinstalling info...
[  190s] [52/84] preinstalling libgcrypt-devel...
[  191s] [53/84] preinstalling lua...
[  192s] [54/84] preinstalling libselinux...
[  193s] [55/84] preinstalling perl-Carp...
[  193s] [56/84] preinstalling copy-jdk-configs...
[  194s] [57/84] preinstalling libfdisk...
[  195s] [58/84] preinstalling perl-Digest-MD5...
[  196s] [59/84] preinstalling grep...
[  197s] [60/84] preinstalling rpm-libs...
[  198s] [61/84] preinstalling chkconfig...
[  199s] [62/84] preinstalling sed...
[  200s] [63/84] preinstalling libmount...
[  202s] [64/84] preinstalling libsemanage...
[  203s] [65/84] preinstalling perl-constant...
[  204s] [66/84] preinstalling findutils...
[  206s] [67/84] preinstalling xz...
[  207s] [68/84] preinstalling perl-Getopt-Long...
[  208s] [69/84] preinstalling glib2...
[  212s] [70/84] preinstalling nss...
[  214s] [71/84] preinstalling perl-Data-Dumper...
[  214s] [72/84] preinstalling systemd-libs...
[  216s] [73/84] preinstalling systemd...
[  220s] [74/84] preinstalling dbus-libs...
[  221s] [75/84] preinstalling nss-util...
[  222s] [76/84] preinstalling audit...
[  223s] [77/84] preinstalling nss-softokn...
[  225s] [78/84] preinstalling pam...
[  226s] [79/84] preinstalling rpm...
[  228s] [80/84] preinstalling openEuler-rpm-config...
[  229s] [81/84] preinstalling util-linux...
[  233s] [82/84] preinstalling device-mapper...
[  235s] [83/84] preinstalling cryptsetup...
[  237s] [84/84] preinstalling lvm2...
[  240s] 
[  242s] initializing rpm db...
[  254s] reordering...cycle: coreutils -> bash
[  254s]   breaking dependency coreutils -> bash
[  254s] cycle: coreutils -> info
[  254s]   breaking dependency coreutils -> info
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> gmp
[  254s]   breaking dependency coreutils -> gmp
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils
[  254s]   breaking dependency coreutils -> glibc
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> libacl
[  254s]   breaking dependency coreutils -> libacl
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> attr
[  254s]   breaking dependency coreutils -> attr
[  254s] cycle: coreutils -> libcap
[  254s]   breaking dependency coreutils -> libcap
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs
[  254s]   breaking dependency openssl-libs -> glibc
[  254s] cycle: coreutils -> openssl-libs -> ca-certificates
[  254s]   breaking dependency ca-certificates -> coreutils
[  254s] cycle: coreutils -> openssl-libs -> ca-certificates -> bash
[  254s]   breaking dependency ca-certificates -> bash
[  254s] cycle: coreutils -> openssl-libs -> ca-certificates -> grep
[  254s]   breaking dependency grep -> coreutils
[  254s] cycle: coreutils -> openssl-libs -> ca-certificates -> grep -> bash
[  254s]   breaking dependency ca-certificates -> grep
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> ca-certificates -> p11-kit
[  254s]   breaking dependency p11-kit -> glibc
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> ca-certificates -> p11-kit -> libffi
[  254s]   breaking dependency openssl-libs -> ca-certificates
[  254s] cycle: coreutils -> openssl-libs -> crypto-policies -> bash
[  254s]   breaking dependency crypto-policies -> bash
[  254s] cycle: coreutils -> openssl-libs -> crypto-policies
[  254s]   breaking dependency crypto-policies -> coreutils
[  254s] cycle: coreutils -> openssl-libs -> crypto-policies -> grep -> bash
[  254s]   breaking dependency bash -> coreutils
[  254s] cycle: filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep -> bash
[  254s]   breaking dependency grep -> bash
[  254s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep
[  254s]   breaking dependency glibc -> basesystem
[  254s] cycle: glibc -> glibc-common -> bash -> filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep
[  254s]   breaking dependency glibc-common -> bash
[  254s] cycle: glibc -> glibc-common -> coreutils -> openssl-libs -> crypto-policies -> grep
[  254s]   breaking dependency glibc-common -> coreutils
[  254s] cycle: glibc -> glibc-common
[  254s]   breaking dependency glibc-common -> glibc
[  254s] cycle: glibc -> glibc-common -> libselinux
[  254s]   breaking dependency libselinux -> glibc
[  254s] cycle: glibc -> glibc-common -> libselinux -> pcre2
[  254s]   breaking dependency pcre2 -> glibc
[  254s] cycle: glibc -> glibc-common -> libselinux -> pcre2 -> readline
[  254s]   breaking dependency readline -> glibc
[  254s] cycle: glibc -> glibc-common -> libselinux -> pcre2 -> readline -> ncurses-libs
[  254s]   breaking dependency libselinux -> pcre2
[  254s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> coreutils -> openssl-libs -> crypto-policies -> grep
[  254s]   breaking dependency libsepol -> coreutils
[  254s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> bash -> filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep
[  254s]   breaking dependency filesystem -> coreutils
[  254s] cycle: bash -> filesystem
[  254s]   breaking dependency filesystem -> bash
[  254s] cycle: filesystem -> setup
[  254s]   breaking dependency filesystem -> setup
[  254s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> bash
[  254s]   breaking dependency bash -> glibc
[  254s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> bash -> ncurses-libs
[  254s]   breaking dependency libsepol -> bash
[  254s] cycle: glibc -> glibc-common -> libselinux -> libsepol
[  254s]   breaking dependency glibc -> glibc-common
[  254s] cycle: systemd -> cryptsetup -> device-mapper
[  254s]   breaking dependency systemd -> cryptsetup
[  254s] cycle: perl-libs -> perl-Carp
[  254s]   breaking dependency perl-libs -> perl-Carp
[  254s] cycle: perl-libs -> perl-Exporter
[  254s]   breaking dependency perl-libs -> perl-Exporter
[  254s] cycle: perl-Carp -> perl-Exporter
[  254s]   breaking dependency perl-Exporter -> perl-Carp
[  254s] cycle: perl -> perl-PathTools
[  254s]   breaking dependency perl -> perl-PathTools
[  254s] cycle: perl -> perl-ExtUtils-MakeMaker
[  254s]   breaking dependency perl -> perl-ExtUtils-MakeMaker
[  254s] cycle: perl -> perl-File-Path -> perl-PathTools
[  254s]   breaking dependency perl -> perl-File-Path
[  254s] cycle: perl -> perl-Getopt-Long -> perl-Pod-Usage
[  254s]   breaking dependency perl -> perl-Getopt-Long
[  254s] cycle: perl -> perl-Locale-Maketext
[  254s]   breaking dependency perl -> perl-Locale-Maketext
[  254s] cycle: perl -> perl-Pod-Simple
[  254s]   breaking dependency perl -> perl-Pod-Simple
[  254s] cycle: perl -> perl-Socket
[  254s]   breaking dependency perl -> perl-Socket
[  254s] cycle: perl -> perl-Storable
[  254s]   breaking dependency perl -> perl-Storable
[  254s] cycle: perl -> perl-Text-Tabs+Wrap
[  254s]   breaking dependency perl -> perl-Text-Tabs+Wrap
[  254s] cycle: perl -> perl-Time-Local -> perl-constant
[  254s]   breaking dependency perl -> perl-Time-Local
[  254s] cycle: perl -> perl-constant
[  254s]   breaking dependency perl -> perl-constant
[  254s] cycle: perl -> perl-threads
[  254s]   breaking dependency perl -> perl-threads
[  254s] cycle: perl -> perl-threads-shared
[  254s]   breaking dependency perl -> perl-threads-shared
[  254s] cycle: perl -> perl-Archive-Tar
[  254s]   breaking dependency perl -> perl-Archive-Tar
[  254s] cycle: perl -> perl-B-Debug
[  254s]   breaking dependency perl -> perl-B-Debug
[  254s] cycle: perl -> perl-CPAN-Meta -> perl-CPAN-Meta-Requirements
[  254s]   breaking dependency perl -> perl-CPAN-Meta
[  254s] cycle: perl -> perl-CPAN-Meta-Requirements
[  254s]   breaking dependency perl -> perl-CPAN-Meta-Requirements
[  254s] cycle: perl -> perl-CPAN-Meta-YAML
[  254s]   breaking dependency perl -> perl-CPAN-Meta-YAML
[  254s] cycle: perl -> perl-Compress-Raw-Bzip2
[  254s]   breaking dependency perl -> perl-Compress-Raw-Bzip2
[  254s] cycle: perl -> perl-Compress-Raw-Zlib
[  254s]   breaking dependency perl -> perl-Compress-Raw-Zlib
[  254s] cycle: perl -> perl-Config-Perl-V
[  254s]   breaking dependency perl -> perl-Config-Perl-V
[  254s] cycle: perl -> perl-DB_File
[  254s]   breaking dependency perl -> perl-DB_File
[  254s] cycle: perl -> perl-Data-Dumper
[  254s]   breaking dependency perl -> perl-Data-Dumper
[  254s] cycle: perl -> perl-Devel-PPPort
[  254s]   breaking dependency perl -> perl-Devel-PPPort
[  254s] cycle: perl -> perl-Digest -> perl-MIME-Base64
[  254s]   breaking dependency perl -> perl-Digest
[  254s] cycle: perl -> perl-Digest-MD5 -> perl-Digest -> perl-MIME-Base64
[  254s]   breaking dependency perl -> perl-Digest-MD5
[  254s] cycle: perl -> perl-Digest-SHA
[  254s]   breaking dependency perl -> perl-Digest-SHA
[  254s] cycle: perl -> perl-Encode
[  254s]   breaking dependency perl -> perl-Encode
[  254s] cycle: perl -> perl-Env
[  254s]   breaking dependency perl -> perl-Env
[  254s] cycle: perl -> perl-ExtUtils-Command
[  254s]   breaking dependency perl -> perl-ExtUtils-Command
[  254s] cycle: perl -> perl-ExtUtils-Install
[  254s]   breaking dependency perl -> perl-ExtUtils-Install
[  254s] cycle: perl -> perl-ExtUtils-Manifest
[  254s]   breaking dependency perl -> perl-ExtUtils-Manifest
[  254s] cycle: perl -> perl-ExtUtils-ParseXS
[  254s]   breaking dependency perl -> perl-ExtUtils-ParseXS
[  254s] cycle: perl -> perl-File-Fetch -> perl-PathTools
[  254s]   breaking dependency perl -> perl-File-Fetch
[  254s] cycle: perl -> perl-File-Temp -> perl-PathTools
[  254s]   breaking dependency perl -> perl-File-Temp
[  254s] cycle: perl -> perl-Filter
[  254s]   breaking dependency perl -> perl-Filter
[  254s] cycle: perl -> perl-Filter-Simple -> perl-Filter
[  254s]   breaking dependency perl -> perl-Filter-Simple
[  254s] cycle: perl -> perl-HTTP-Tiny
[  254s]   breaking dependency perl -> perl-HTTP-Tiny
[  254s] cycle: perl -> perl-IO-Compress
[  254s]   breaking dependency perl -> perl-IO-Compress
[  254s] cycle: perl -> perl-IO-Socket-IP
[  254s]   breaking dependency perl -> perl-IO-Socket-IP
[  254s] cycle: perl -> perl-IPC-Cmd -> perl-ExtUtils-MakeMaker
[  254s]   breaking dependency perl -> perl-IPC-Cmd
[  254s] cycle: perl -> perl-IPC-SysV
[  254s]   breaking dependency perl -> perl-IPC-SysV
[  254s] cycle: perl -> perl-JSON-PP
[  254s]   breaking dependency perl -> perl-JSON-PP
[  254s] cycle: perl -> perl-Locale-Codes -> perl-constant
[  254s]   breaking dependency perl -> perl-Locale-Codes
[  254s] cycle: perl -> perl-MIME-Base64
[  254s]   breaking dependency perl -> perl-MIME-Base64
[  254s] cycle: perl -> perl-Math-BigInt
[  254s]   breaking dependency perl -> perl-Math-BigInt
[  254s] cycle: perl -> perl-Math-BigInt-FastCalc -> perl-Math-BigInt
[  254s]   breaking dependency perl -> perl-Math-BigInt-FastCalc
[  254s] cycle: perl -> perl-Math-BigRat -> perl-Math-BigInt
[  254s]   breaking dependency perl -> perl-Math-BigRat
[  254s] cycle: perl -> perl-Module-CoreList
[  254s]   breaking dependency perl -> perl-Module-CoreList
[  254s] cycle: perl -> perl-Module-Load -> perl-PathTools
[  254s]   breaking dependency perl -> perl-Module-Load
[  254s] cycle: perl -> perl-Module-Load-Conditional
[  254s]   breaking dependency perl -> perl-Module-Load-Conditional
[  254s] cycle: perl -> perl-Module-Metadata
[  254s]   breaking dependency perl -> perl-Module-Metadata
[  254s] cycle: perl -> perl-Params-Check
[  254s]   breaking dependency perl -> perl-Params-Check
[  254s] cycle: perl -> perl-PerlIO-via-QuotedPrint -> perl-MIME-Base64
[  254s]   breaking dependency perl -> perl-PerlIO-via-QuotedPrint
[  254s] cycle: perl -> perl-Pod-Checker
[  254s]   breaking dependency perl -> perl-Pod-Checker
[  254s] cycle: perl -> perl-Pod-Escapes
[  254s]   breaking dependency perl -> perl-Pod-Escapes
[  254s] cycle: perl -> perl-Pod-Parser
[  254s]   breaking dependency perl -> perl-Pod-Parser
[  254s] cycle: perl -> perl-Pod-Perldoc
[  254s]   breaking dependency perl -> perl-Pod-Perldoc
[  254s] cycle: perl -> perl-Pod-Usage
[  254s]   breaking dependency perl -> perl-Pod-Usage
[  254s] cycle: perl -> perl-Sys-Syslog
[  254s]   breaking dependency perl -> perl-Sys-Syslog
[  254s] cycle: perl -> perl-Term-Cap
[  254s]   breaking dependency perl -> perl-Term-Cap
[  254s] cycle: perl -> perl-Test-Harness
[  254s]   breaking dependency perl -> perl-Test-Harness
[  254s] cycle: perl -> perl-Test-Simple
[  254s]   breaking dependency perl -> perl-Test-Simple
[  254s] cycle: perl -> perl-Text-Balanced
[  254s]   breaking dependency perl -> perl-Text-Balanced
[  254s] cycle: perl -> perl-Thread-Queue -> perl-threads-shared
[  254s]   breaking dependency perl -> perl-Thread-Queue
[  254s] cycle: perl -> perl-Unicode-Collate -> perl-PathTools
[  254s]   breaking dependency perl -> perl-Unicode-Collate
[  254s] cycle: perl -> perl-autodie
[  254s]   breaking dependency perl -> perl-autodie
[  254s] cycle: perl -> perl-bignum -> perl-Math-BigInt
[  254s]   breaking dependency perl -> perl-bignum
[  254s] cycle: perl -> perl-devel
[  254s]   breaking dependency perl -> perl-devel
[  254s] cycle: perl -> perl-Encode-devel
[  254s]   breaking dependency perl -> perl-Encode-devel
[  254s] cycle: perl -> perl-experimental
[  254s]   breaking dependency perl -> perl-experimental
[  254s] cycle: perl -> perl-libnet -> perl-Digest-MD5 -> perl-Digest -> perl-MIME-Base64
[  254s]   breaking dependency perl -> perl-libnet
[  254s] cycle: perl -> perl-podlators
[  254s]   breaking dependency perl -> perl-podlators
[  254s] cycle: perl -> perl-version
[  254s]   breaking dependency perl -> perl-version
[  254s] cycle: glib2 -> gamin
[  254s]   breaking dependency glib2 -> gamin
[  254s] cycle: systemd -> gnutls -> unbound-libs -> shadow -> pam -> audit
[  254s]   breaking dependency systemd -> gnutls
[  254s] cycle: systemd -> pam -> audit
[  254s]   breaking dependency systemd -> pam
[  254s] cycle: systemd -> shadow -> pam -> audit
[  254s]   breaking dependency systemd -> shadow
[  254s] cycle: pam -> libpwquality
[  254s]   breaking dependency pam -> libpwquality
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage
[  254s]   breaking dependency perl-Pod-Usage -> perl-Getopt-Long
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Encode
[  254s]   breaking dependency perl-podlators -> perl-Encode
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators
[  254s]   breaking dependency perl-podlators -> perl-Getopt-Long
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Pod-Simple -> perl-Encode
[  254s]   breaking dependency perl-Encode -> perl-Getopt-Long
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Pod-Simple
[  254s]   breaking dependency perl-podlators -> perl-Pod-Simple
[  254s] cycle: perl-Pod-Usage -> perl-podlators
[  254s]   breaking dependency perl-podlators -> perl-Pod-Usage
[  254s] cycle: groff -> perl-Getopt-Long -> perl-Pod-Usage -> perl-Pod-Perldoc
[  254s]   breaking dependency groff -> perl-Getopt-Long
[  254s] cycle: libxcrypt-devel -> glibc-devel
[  254s]   breaking dependency glibc-devel -> libxcrypt-devel
[  254s] cycle: cmake-data -> cmake
[  254s]   breaking dependency cmake -> cmake-data
[  254s] cycle: nss-util -> nss
[  254s]   breaking dependency nss -> nss-util
[  254s] cycle: nss-softokn -> nss-util -> nss
[  254s]   breaking dependency nss -> nss-softokn
[  254s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-Pod-Perldoc -> perl-Pod-Simple
[  254s]   breaking dependency perl-Pod-Perldoc -> perl-Pod-Simple
[  254s] cycle: openssh -> openssh-server
[  254s]   breaking dependency openssh-server -> openssh
[  254s] cycle: git -> perl-Git
[  254s]   breaking dependency git -> perl-Git
[  254s] cycle: perl-ExtUtils-Install -> perl-ExtUtils-MakeMaker
[  254s]   breaking dependency perl-ExtUtils-MakeMaker -> perl-ExtUtils-Install
[  255s] done
[  255s] querying package ids...
[  290s] [1/369] installing cmake-filesystem-3.22.0-1.oe1
[  291s] [2/369] installing fonts-filesystem-2.0.2-2.oe1
[  292s] [3/369] installing fuse-common-3.9.2-5.oe1
[  293s] [4/369] installing kernel-headers-5.10-3.oe1
[  300s] [5/369] installing libreport-filesystem-2.13.1-5.oe1
[  301s] [6/369] installing ncurses-base-6.1-14.oe1
[  303s] [7/369] installing openEuler-gpg-keys-1.0-2.5.oe1
[  303s] [8/369] installing python-setuptools-59.4.0-3.oe1
[  305s] [9/369] installing qt5-srpm-macros-5.15.2-1.oe1
[  306s] [10/369] installing tzdata-2021a-2.oe1
[  314s] [11/369] installing dnf-data-4.10.0-1.oe1
[  315s] [12/369] installing openEuler-repos-1.0-2.5.oe1
[  316s] [13/369] installing wqy-zenhei-fonts-0.9.46-21.oe1
[  326s] [14/369] installing openEuler-release-20.03LTS-40.oe1
[  328s] [15/369] installing filesystem-3.9-3.oe1
[  339s] warning: group mail does not exist - using root
[  339s] [16/369] installing emacs-filesystem-1:27.1-5.oe1
[  341s] [17/369] installing libgcc-10.3.1-20220105.6.oe1
[  342s] [18/369] installing setup-2.13.3-4.oe1
[  344s] [19/369] installing glibc-2.34-64.oe1
[  350s] [20/369] installing brotli-1.0.9-2.oe1
[  352s] [21/369] installing chrpath-0.16-12.oe1
[  353s] [22/369] installing cpio-2.13-4.oe1
[  355s] [23/369] installing diffutils-3.7-4.oe1
[  357s] [24/369] installing expat-2.2.10-1.oe1
[  359s] [25/369] installing json-c-0.15-1.oe1
[  360s] [26/369] installing keyutils-libs-1.6.3-3.oe1
[  361s] [27/369] installing libICE-1.0.10-2.oe1
[  362s] [28/369] installing libXau-1.0.9-2.oe1
[  363s] [29/369] installing libaio-0.3.112-1.oe1
[  365s] [30/369] installing libargon2-20190702-1.oe1
[  367s] [31/369] installing libatomic-10.3.1-20220105.6.oe1
[  368s] [32/369] installing libcap-ng-0.7.11-1.oe1
[  369s] [33/369] installing libev-4.24-11.oe1
[  370s] [34/369] installing libffi-3.3-31.oe1
[  371s] [35/369] installing libgomp-10.3.1-20220105.6.oe1
[  373s] [36/369] installing libgpg-error-1.41-1.oe1
[  374s] [37/369] installing libnghttp2-1.42.0-1.oe1
[  376s] [38/369] installing libpcap-14:1.9.1-7.oe1
[  377s] [39/369] installing libpipeline-1.5.3-1.oe1
[  379s] [40/369] installing libsigsegv-2.11-10.oe1
[  380s] [41/369] installing libsmartcols-2.36.1-3.oe1
[  382s] [42/369] installing libtasn1-4.16.0-2.oe1
[  383s] [43/369] installing libtool-ltdl-2.4.6-34.oe1
[  384s] [44/369] installing libunistring-0.9.10-8.oe1
[  386s] [45/369] installing libuuid-2.36.1-3.oe1
[  388s] [46/369] installing libuv-1:1.40.0-1.oe1
[  390s] [47/369] installing libxcrypt-4.4.8-4.oe1
[  392s] [48/369] installing libyaml-0.2.5-1.oe1
[  393s] [49/369] installing lz4-1.9.3-1.oe1
[  395s] [50/369] installing m4-1.4.18-14.oe1
[  396s] [51/369] installing nspr-4.32.0-1.oe1
[  397s] [52/369] installing pkgconf-1.7.3-1.oe1
[  399s] [53/369] installing rhash-1.3.5-5.oe1
[  400s] [54/369] installing which-2.21-14.oe1
[  404s] [55/369] installing xz-libs-5.2.5-1.oe1
[  406s] [56/369] installing zlib-1.2.11-18.oe1
[  407s] [57/369] installing attr-2.4.48-12.oe1
[  409s] [58/369] installing basesystem-12-2.oe1
[  410s] [59/369] installing libstdc++-10.3.1-20220105.6.oe1
[  412s] [60/369] installing ncurses-libs-6.1-14.oe1
[  414s] [61/369] installing libsepol-3.1-4.oe1
[  416s] [62/369] installing libstdc++-devel-10.3.1-20220105.6.oe1
[  425s] [63/369] installing audit-libs-1:3.0-2.oe1
[  427s] [64/369] installing elfutils-libelf-0.185-3.oe1
[  429s] [65/369] installing file-libs-5.39-6.oe1
[  433s] [66/369] installing gmp-1:6.2.1-3.oe1
[  435s] [67/369] installing iptables-libs-1.8.1-4.oe1
[  436s] [68/369] installing less-563-2.oe1
[  438s] [69/369] installing libacl-2.2.53-7.oe1
[  441s] [70/369] installing libassuan-2.5.4-1.oe1
[  442s] [71/369] installing libedit-3.1-27.oe1
[  443s] [72/369] installing libffi-devel-3.3-31.oe1
[  444s] [73/369] installing libgcrypt-1.8.7-1.oe1
[  446s] [74/369] installing libpng-2:1.6.37-1.oe1
[  447s] [75/369] installing libxcb-1.14-1.oe1
[  448s] [76/369] installing readline-8.0-2.oe1
[  450s] [77/369] installing fuse-2.9.9-6.oe1
[  451s] [78/369] installing gc-8.0.4-2.oe1
[  453s] [79/369] installing libSM-1.2.3-2.oe1
[  454s] [80/369] installing libdb-5.3.28-35.oe1
[  459s] [81/369] installing libselinux-3.1-3.oe1
[  460s] [82/369] installing libxml2-2.9.12-5.oe1
[  469s] [83/369] installing bash-5.1-1.oe1
[  474s] [84/369] installing perl-libs-4:5.28.0-435.oe1
[  481s] [85/369] installing zstd-1.4.8-2.oe1
[  484s] [86/369] installing ncurses-6.1-14.oe1
[  496s] [87/369] installing thin-provisioning-tools-0.8.5-1.oe1
[  501s] [88/369] installing perl-parent-1:0.237-4.oe1
[  502s] [89/369] installing perl-perlfaq-5.20180915-5.oe1
[  503s] [90/369] installing libX11-1.6.9-2.oe1
[  506s] [91/369] installing mpfr-4.1.0-1.oe1
[  509s] [92/369] installing nettle-3.6-6.oe1
[  511s] [93/369] installing pcre2-10.36-1.oe1
[  514s] [94/369] installing perl-Exporter-5.74-1.oe1
[  515s] [95/369] installing file-5.39-6.oe1
[  517s] [96/369] installing gdbm-1:1.18.1-1.oe1
[  518s] [97/369] installing patch-2.7.6-12.oe1
[  519s] [98/369] installing qrencode-4.1.1-1
[  521s] [99/369] installing sed-4.8-2.oe1
[  522s] [100/369] installing acl-2.2.53-7.oe1
[  523s] [101/369] installing libcomps-0.1.15-1.oe1
[  526s] [102/369] installing pcre-8.44-1.oe1
[  528s] [103/369] installing glibc-common-2.34-64.oe1
[  540s] [104/369] installing crontabs-1.11-21.oe1
[  541s] [105/369] installing libXext-1.3.4-2.oe1
[  544s] [106/369] installing libXpm-3.5.12-11.oe1
[  546s] [107/369] installing libXrender-0.9.10-10.oe1
[  548s] [108/369] installing perl-Carp-1.50-418.oe1
[  549s] [109/369] installing perl-Perl-OSType-1.010-421.oe1
[  550s] [110/369] installing perl-Term-ANSIColor-4.06-511.oe1
[  551s] [111/369] installing libmpc-1.2.0-2.oe1
[  553s] [112/369] installing grep-3.6-1.oe1
[  556s] [113/369] installing libXt-1.2.0-0.oe1
[  557s] [114/369] installing gawk-5.0.1-2.oe1
[  560s] [115/369] installing perl-Text-ParseWords-3.30-419.oe1
[  562s] [116/369] installing crypto-policies-20180925-3.git71ca85f.oe1
[  569s] [117/369] installing libXmu-1.1.3-1.oe1
[  574s] [118/369] installing cpp-10.3.1-20220105.6.oe1
[  585s] [119/369] installing openssl-libs-1:1.1.1f-2.oe1
[  589s] [120/369] installing libXaw-1.0.13-13.oe1
[  590s] [121/369] installing ima-evm-utils-libs-1.2.1-8.oe1
[  592s] [122/369] installing libevent-2.1.12-4
[  595s] [123/369] installing kmod-libs-27-4.oe1
[  597s] [124/369] installing kmod-27-4.oe1
[  600s] [125/369] installing nodejs-libs-1:16.10.0-1.oe1
[  642s] [126/369] installing coreutils-8.31-4.oe1
[  649s] [127/369] installing elfutils-default-yama-scope-0.185-3.oe1
[  651s] /usr/lib/systemd/systemd-sysctl: error while loading shared libraries: libseccomp.so.2: cannot open shared object file: No such file or directory
[  651s] [128/369] installing publicsuffix-list-20200718-1.oe1
[  652s] [129/369] installing uname-build-checks-1.0-0.4.oe1
[  653s] [130/369] installing bzip2-1.0.8-3.oe1
[  656s] [131/369] installing gzip-1.10-1.oe1
[  657s] [132/369] installing hostname-3.21-2.oe1
[  659s] [133/369] installing libcap-2.32-2.oe1
[  661s] [134/369] installing libseccomp-2.4.3-2.oe1
[  663s] [135/369] installing npth-1.5-7.oe1
[  665s] [136/369] installing popt-1.18-1.oe1
[  667s] [137/369] installing fipscheck-1.5.0-7.oe1
[  670s] [138/369] installing libblkid-2.36.1-3.oe1
[  675s] [139/369] installing libidn2-2.3.0-1.oe1
[  677s] [140/369] installing libksba-1.3.5-12.oe1
[  680s] [141/369] installing tar-2:1.32-3.oe1
[  683s] [142/369] installing tcl-1:8.6.10-3.oe1
[  688s] [143/369] installing info-6.7-2.oe1
[  689s] [144/369] installing jsoncpp-1.9.4-1.oe1
[  693s] [145/369] installing libgpg-error-devel-1.41-1.oe1
[  695s] [146/369] installing lua-5.3.5-6.oe1
[  697s] [147/369] installing slang-2.3.2-8.oe1
[  702s] [148/369] installing xz-5.2.5-1.oe1
[  704s] [149/369] installing perl-Scalar-List-Utils-3:1.52-2.oe1
[  706s] [150/369] installing perl-Time-HiRes-1.9760-2.oe1
[  708s] [151/369] installing perl-Unicode-Normalize-1.26-419.oe1
[  711s] [152/369] installing systemd-libs-243-22.oe1
[  716s] [153/369] installing guile-5:2.0.14-15.oe1
[  731s] [154/369] installing dbus-libs-1:1.12.20-3.oe1
[  733s] [155/369] installing zip-3.0-29.oe1
[  738s] [156/369] installing libfdisk-2.36.1-3.oe1
[  742s] [157/369] installing newt-0.52.21-4.oe1
[  747s] [158/369] installing p11-kit-0.23.22-1.oe1
[  750s] [159/369] installing procps-ng-3.3.16-15.oe1
[  752s] [160/369] installing elfutils-libs-0.185-3.oe1
[  755s] [161/369] installing libmount-2.36.1-3.oe1
[  756s] [162/369] installing lua-posix-33.3.1-12.oe1
[  760s] [163/369] installing unzip-6.0-47.oe1
[  762s] [164/369] installing cracklib-2.9.7-6.oe1
[  769s] [165/369] installing e2fsprogs-1.45.6-3.oe1
[  773s] [166/369] installing findutils-2:4.7.0-7.oe1
[  777s] [167/369] installing libsemanage-3.1-4.oe1
[  780s] [168/369] installing make-1:4.2.1-15.oe1
[  783s] [169/369] installing sqlite-3.24.0-9.oe1
[  787s] [170/369] installing logrotate-3.15.1-2.oe1
[  789s] [171/369] installing freetype-2.10.2-3.oe1
[  792s] [172/369] installing glibc-devel-2.34-64.oe1
[  806s] [173/369] installing libgcrypt-devel-1.8.7-1.oe1
[  809s] [174/369] installing gnupg2-2.2.27-2.oe1
[  815s] [175/369] installing libarchive-3.5.1-1.oe1
[  818s] [176/369] installing dbus-tools-1:1.12.20-3.oe1
[  820s] [177/369] installing libxcrypt-devel-4.4.8-4.oe1
[  822s] [178/369] installing copy-jdk-configs-4.0-1.oe1
[  824s] [179/369] installing gpgme-1.15.1-1.oe1
[  827s] [180/369] installing obs-env-1.0-5.oe1
[  838s] [181/369] installing chkconfig-1.14-2.oe1
[  841s] [182/369] installing elfutils-0.185-3.oe1
[  843s] [183/369] installing fontconfig-2.13.92-1.oe1
[  849s] [184/369] installing glib2-2.66.8-1.oe1
[  858s] [185/369] installing rpm-libs-4.15.1-25.oe1
[  860s] [186/369] installing libcroco-0.6.12-13.oe1
[  863s] [187/369] installing gamin-0.1.10-38.oe1
[  869s] [188/369] installing libsecret-0.18.6-5.oe1
[  873s] [189/369] installing libverto-0.3.1-2.oe1
[  875s] [190/369] installing libXft-2.3.3-1.oe1
[  878s] [191/369] installing libmodulemd-2.13.0-1.oe1
[  880s] [192/369] installing binutils-2.37-6.oe1
[  891s] [193/369] installing p11-kit-trust-0.23.22-1.oe1
[  893s] [194/369] installing babeltrace-1.5.8-1.oe1
[  896s] [195/369] installing ca-certificates-2020.2.46-2.oe1
[  906s] [196/369] installing tk-1:8.6.10-2.oe1
[  914s] [197/369] installing gettext-0.20.1-2.oe1
[  918s] [198/369] installing krb5-libs-1.18.2-3.oe1
[  921s] [199/369] installing gcc-10.3.1-20220105.6.oe1
[  946s] [200/369] installing python-pip-wheel-19.2.3-2.fc32
[  950s] [201/369] installing libtirpc-1.3.1-1.oe1
[  952s] [202/369] installing cyrus-sasl-lib-2.1.27-10.oe1
[  954s] [203/369] installing libssh-0.9.5-1.oe1
[  961s] [204/369] installing gcc-c++-10.3.1-20220105.6.oe1
[  973s] [205/369] installing openldap-2.4.46-15.oe1
[  975s] [206/369] installing libnsl2-1.3.0-2.oe1
[  980s] [207/369] installing python3-3.8.5-13.oe1
[ 1007s] [208/369] installing python3-atomicwrites-1.3.0-6.fc32
[ 1009s] [209/369] installing python3-attrs-19.3.0-1.fc32
[ 1011s] [210/369] installing python3-mccabe-0.6.1-14.fc32
[ 1013s] [211/369] installing python3-more-itertools-7.2.0-3.fc32
[ 1014s] [212/369] installing python3-pluggy-0.12.0-4.fc32
[ 1017s] [213/369] installing python3-pyparsing-2.4.5-1.fc32
[ 1019s] [214/369] installing python3-setuptools-59.4.0-3.oe1
[ 1026s] [215/369] installing python3-setuptools_scm-3.3.3-6.fc32
[ 1028s] [216/369] installing python3-six-1.15.0-3.oe1
[ 1030s] [217/369] installing python3-toml-0.10.0-6.fc32
[ 1031s] [218/369] installing python3-wcwidth-0.1.7-14.fc32
[ 1033s] [219/369] installing python3-lazy-object-proxy-1.4.3-1.fc32
[ 1035s] [220/369] installing python3-wrapt-1.11.2-4.fc32
[ 1037s] [221/369] installing python3-gpgme-1.15.1-1.oe1
[ 1040s] [222/369] installing python3-libcomps-0.1.15-1.oe1
[ 1042s] [223/369] installing libpsl-0.21.1-1.oe1
[ 1044s] [224/369] installing gdb-headless-9.2-5.oe1
[ 1052s] [225/369] installing python3-isort-4.3.21-6.fc32
[ 1055s] [226/369] installing python3-py-1.8.0-7.fc32
[ 1058s] [227/369] installing systemtap-sdt-devel-4.1-3.oe1
[ 1059s] [228/369] installing gdb-9.2-5.oe1
[ 1061s] [229/369] installing python3-packaging-19.2-1.fc32
[ 1063s] [230/369] installing python3-pip-19.2.3-2.fc32
[ 1072s] [231/369] installing python3-rpm-generators-10-2.fc32
[ 1074s] [232/369] installing python3-astroid-2.3.3-1.gitace7b29.fc32
[ 1078s] [233/369] installing libcurl-7.79.1-1.oe1
[ 1081s] [234/369] installing curl-7.79.1-1.oe1
[ 1083s] [235/369] installing librepo-1.14.2-2.oe1
[ 1085s] [236/369] installing python3-pytest-4.6.7-1.fc32
[ 1093s] [237/369] installing python3-pytest-runner-4.0-8.fc32
[ 1096s] [238/369] installing rpm-4.15.1-25.oe1
[ 1102s] [239/369] installing efi-srpm-macros-4-3.oe1
[ 1104s] [240/369] installing cmake-rpm-macros-3.22.0-1.oe1
[ 1106s] [241/369] installing libsolv-0.7.20-1.oe1
[ 1108s] [242/369] installing python3-rpm-4.15.1-25.oe1
[ 1111s] [243/369] installing openEuler-rpm-config-30-22.oe1
[ 1113s] [244/369] installing cmake-3.22.0-1.oe1
[ 1128s] [245/369] installing libdnf-0.65.0-2.oe1
[ 1131s] [246/369] installing cmake-data-3.22.0-1.oe1
[ 1149s] [247/369] installing python3-devel-3.8.5-13.oe1
[ 1191s] [248/369] installing python3-libdnf-0.65.0-2.oe1
[ 1196s] [249/369] installing perl-4:5.28.0-435.oe1
[ 1204s] [250/369] installing perl-B-Debug-1.26-4.oe1
[ 1206s] [251/369] installing perl-Env-1.04-397.oe1
[ 1211s] [252/369] installing perl-Devel-PPPort-3.42-4.oe1
[ 1215s] [253/369] installing perl-Pod-Escapes-1:1.07-419.oe1
[ 1216s] [254/369] installing perl-Text-Tabs+Wrap-2013.0523-419.oe1
[ 1217s] [255/369] installing perl-Algorithm-Diff-1.1903-14.oe1
[ 1219s] [256/369] installing perl-Params-Check-1:0.38-418.oe1
[ 1220s] [257/369] installing perl-Term-Cap-1.17-510.oe1
[ 1224s] [258/369] installing perl-TermReadKey-2.38-2.oe1
[ 1226s] [259/369] installing perl-Text-Balanced-2.03-420.oe1
[ 1227s] [260/369] installing perl-threads-1:2.22-419.oe1
[ 1230s] [261/369] installing openssl-1:1.1.1f-2.oe1
[ 1232s] [262/369] installing perl-Config-Perl-V-0.30-5.oe1
[ 1234s] [263/369] installing perl-Error-1:0.17029-1.oe1
[ 1235s] [264/369] installing perl-Filter-2:1.59-2.oe1
[ 1239s] [265/369] installing perl-IPC-SysV-2.07-5.oe1
[ 1241s] [266/369] installing perl-Locale-Maketext-1:1.28-1.oe1
[ 1243s] [267/369] installing perl-constant-1.33-421.oe1
[ 1249s] [268/369] installing perl-MIME-Base64-3.15-418.oe1
[ 1251s] [269/369] installing perl-CPAN-Meta-YAML-0.018-420.oe1
[ 1253s] [270/369] installing perl-Socket-4:2.029-2.oe1
[ 1255s] [271/369] installing perl-Storable-1:3.15-2.oe1
[ 1258s] [272/369] installing python3-hawkey-0.65.0-2.oe1
[ 1260s] [273/369] installing perl-PerlIO-via-QuotedPrint-0.08-397.oe1
[ 1262s] [274/369] installing perl-Digest-1.17-419.oe1
[ 1264s] [275/369] installing perl-Filter-Simple-1:0.94-1.oe1
[ 1265s] [276/369] installing perl-IO-Socket-IP-0.39-420.oe1
[ 1267s] [277/369] installing perl-Text-Diff-1.45-7.oe1
[ 1269s] [278/369] installing perl-Time-Local-2:1.280-6.oe1
[ 1270s] [279/369] installing perl-version-8:0.99.24-3.oe1
[ 1273s] [280/369] installing perl-IPC-System-Simple-1.25-19.oe1
[ 1275s] [281/369] installing perl-threads-shared-1.59-2.oe1
[ 1277s] [282/369] installing perl-Compress-Raw-Bzip2-2.100-1.oe1
[ 1281s] [283/369] installing perl-Compress-Raw-Zlib-1:2.100-1.oe1
[ 1290s] [284/369] installing perl-Locale-Codes-3.58-2.oe1
[ 1296s] [285/369] installing perl-Math-BigInt-1:1.9998.13-5.oe1
[ 1298s] [286/369] installing perl-PathTools-3.75-4.oe1
[ 1299s] [287/369] installing python3-dnf-4.10.0-1.oe1
[ 1308s] [288/369] installing perl-Data-Dumper-2.172-3.oe1
[ 1310s] [289/369] installing perl-Sys-Syslog-0.35-420.oe1
[ 1313s] [290/369] installing perl-Encode-4:2.98-9.oe1
[ 1318s] [291/369] installing autogen-5.18.16-1.oe1
[ 1321s] [292/369] installing nodejs-1:16.10.0-1.oe1
[ 1323s] [293/369] installing systemd-243-22.oe1
[ 1347s] /var/tmp/rpm-tmp.jbasBj: line 8: groupadd: command not found
[ 1347s] /var/tmp/rpm-tmp.jbasBj: line 10: groupadd: command not found
[ 1347s] /var/tmp/rpm-tmp.jbasBj: line 13: groupadd: command not found
[ 1347s] /var/tmp/rpm-tmp.jbasBj: line 16: groupadd: command not found
[ 1347s] [294/369] installing dbus-common-1:1.12.20-3.oe1
[ 1350s] [295/369] installing nodejs-source-map-0.5.6-1.oe1
[ 1353s] [296/369] installing perl-Module-Load-1:0.32-418.oe1
[ 1355s] [297/369] installing nodejs-packaging-20-1.oe1
[ 1358s] [298/369] installing dnf-4.10.0-1.oe1
[ 1365s] Failed to preset unit, unit dnf-automatic.timer does not exist.
[ 1365s] Failed to preset unit, unit dnf-automatic-notifyonly.timer does not exist.
[ 1365s] Failed to preset unit, unit dnf-automatic-download.timer does not exist.
[ 1365s] Failed to preset unit, unit dnf-automatic-install.timer does not exist.
[ 1365s] [299/369] installing perl-File-Which-1.23-1.oe1
[ 1367s] [300/369] installing perl-Thread-Queue-3.13-3.oe1
[ 1370s] [301/369] installing perl-experimental-0.020-2.oe1
[ 1372s] [302/369] installing perl-Digest-MD5-2.55-419.oe1
[ 1374s] [303/369] installing perl-File-Path-2.16-4.oe1
[ 1377s] [304/369] installing perl-Math-BigInt-FastCalc-0.500.700-4.oe1
[ 1380s] [305/369] installing perl-Module-Metadata-1.000036-3.oe1
[ 1384s] [306/369] installing perl-CPAN-Meta-Requirements-2.140-419.oe1
[ 1386s] [307/369] installing perl-Encode-devel-4:2.98-9.oe1
[ 1388s] [308/369] installing perl-HTTP-Tiny-0.076-3.oe1
[ 1390s] [309/369] installing perl-Math-BigRat-0.2614-2.oe1
[ 1393s] [310/369] installing audit-1:3.0-2.oe1
[ 1399s] [311/369] installing perl-DB_File-1.842-2.oe1
[ 1404s] [312/369] installing perl-autodie-2.29-398.oe1
[ 1406s] [313/369] installing perl-Unicode-Collate-1.25-4.oe1
[ 1412s] [314/369] installing perl-IO-Compress-2.081-6.oe1
[ 1415s] [315/369] installing perl-podlators-1:4.14-1.oe1
[ 1422s] [316/369] installing perl-ExtUtils-Command-1:7.60-1.oe1
[ 1424s] [317/369] installing perl-ExtUtils-Manifest-1:1.71-4.oe1
[ 1428s] [318/369] installing perl-bignum-0.50-4.oe1
[ 1430s] [319/369] installing perl-File-Temp-1:0.230.800-4.oe1
[ 1432s] [320/369] installing perl-libnet-3.11-420.oe1
[ 1436s] [321/369] installing pam-1.5.1-1.oe1
[ 1442s] [322/369] installing libpwquality-1.4.4-1.oe1
[ 1444s] [323/369] installing perl-File-HomeDir-1.004-4.oe1
[ 1446s] [324/369] installing shadow-2:4.8.1-5.oe1
[ 1449s] [325/369] installing perl-Test-Simple-2:1.302175-2.oe1
[ 1452s] [326/369] installing libutempter-1.1.6-16.oe1
[ 1456s] [327/369] installing unbound-libs-1.10.1-4.oe1
[ 1465s] [328/369] installing dbus-daemon-1:1.12.20-3.oe1
[ 1477s] [329/369] installing openssh-server-8.2p1-10.oe1
[ 1484s] Created symlink /etc/systemd/system/multi-user.target.wants/sshd.service -> /usr/lib/systemd/system/sshd.service.
[ 1484s] [330/369] installing groff-1.22.4-4.oe1
[ 1495s] [331/369] installing dbus-1:1.12.20-3.oe1
[ 1498s] [332/369] installing man-db-2.9.3-2.oe1
[ 1509s] [333/369] installing perl-Pod-Perldoc-1:3.28-3.oe1
[ 1511s] [334/369] installing gnutls-3.6.15-3.oe1
[ 1518s] [335/369] installing util-linux-2.36.1-3.oe1
[ 1531s] [336/369] installing nss-help-3.72.0-2.oe1
[ 1534s] [337/369] installing perl-Pod-Usage-4:1.69-418.oe1
[ 1537s] [338/369] installing device-mapper-8:1.02.172-1.oe1
[ 1541s] [339/369] installing openssh-8.2p1-10.oe1
[ 1544s] [340/369] installing perl-Getopt-Long-1:2.52-1.oe1
[ 1547s] [341/369] installing cryptsetup-2.3.3-3.oe1
[ 1559s] [342/369] installing device-mapper-event-8:1.02.172-1.oe1
[ 1563s] Created symlink /etc/systemd/system/sockets.target.wants/dm-event.socket -> /usr/lib/systemd/system/dm-event.socket.
[ 1563s] [343/369] installing nss-3.72.0-2.oe1
[ 1575s] [344/369] installing openssh-clients-8.2p1-10.oe1
[ 1580s] [345/369] installing nss-util-3.72.0-2.oe1
[ 1584s] [346/369] installing perl-ExtUtils-ParseXS-2:3.35-1.oe1
[ 1588s] [347/369] installing perl-Module-CoreList-1:5.20180920-2.oe1
[ 1591s] [348/369] installing perl-Digest-SHA-1:6.02-7.oe1
[ 1594s] [349/369] installing perl-Pod-Parser-1.63-397.oe1
[ 1596s] [350/369] installing perl-Pod-Simple-1:3.35-418.oe1
[ 1598s] [351/369] installing perl-Test-Harness-1:3.43_02-1.oe1
[ 1601s] [352/369] installing perl-Archive-Tar-2.30-421.oe1
[ 1603s] [353/369] installing perl-JSON-PP-1:4.04-2.oe1
[ 1606s] [354/369] installing lvm2-8:2.03.11-1.oe1
[ 1615s] Created symlink /etc/systemd/system/sysinit.target.wants/lvm2-lvmpolld.socket -> /usr/lib/systemd/system/lvm2-lvmpolld.socket.
[ 1615s] [355/369] installing autoconf-2.69-30.oe1
[ 1618s] [356/369] installing git-2.23.0-12.oe1
[ 1631s] [357/369] installing nss-softokn-3.72.0-2.oe1
[ 1635s] [358/369] installing perl-Pod-Checker-4:1.73-398.oe1
[ 1637s] [359/369] installing perl-Git-2.23.0-12.oe1
[ 1639s] [360/369] installing perl-CPAN-Meta-2.150010-419.oe1
[ 1642s] [361/369] installing perl-Module-Load-Conditional-0.68-418.oe1
[ 1644s] [362/369] installing automake-1.16.1-6.oe1
[ 1647s] [363/369] installing perl-ExtUtils-MakeMaker-1:7.60-1.oe1
[ 1651s] [364/369] installing perl-ExtUtils-Install-2.14-419.oe1
[ 1652s] [365/369] installing perl-IPC-Cmd-2:1.04-4.oe1
[ 1654s] [366/369] installing rpm-build-4.15.1-25.oe1
[ 1657s] [367/369] installing gcc_secure-1.0-0.9.oe1
[ 1658s] [368/369] installing perl-File-Fetch-0.56-4.oe1
[ 1660s] [369/369] installing perl-devel-4:5.28.0-435.oe1
[ 1678s] removing nis flags from /var/cache/obs/worker/root_3/etc/nsswitch.conf...
[ 1679s] now finalizing build dir...
[ 1693s] Running build time source services...
[ 1712s] -----------------------------------------------------------------
[ 1712s] ----- building pylint.spec (user abuild)
[ 1712s] -----------------------------------------------------------------
[ 1712s] -----------------------------------------------------------------
[ 1720s] + exec rpmbuild -ba --define '_srcdefattr (-,root,root)' --nosignature --define 'disturl obs://private/openEuler:Mainline:RISC-V/advanced_riscv64/59d4ef7b265b688c81d0320067995e98-pylint' /home/abuild/rpmbuild/SOURCES/pylint.spec
[ 1732s] Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.Tdc2rV
[ 1732s] + umask 022
[ 1732s] + cd /home/abuild/rpmbuild/BUILD
[ 1732s] + cd /home/abuild/rpmbuild/BUILD
[ 1732s] + rm -rf pylint-2.6.0
[ 1732s] + /usr/bin/gzip -dc /home/abuild/rpmbuild/SOURCES/pylint-2.6.0.tar.gz
[ 1732s] + /usr/bin/tar -xof -
[ 1734s] + STATUS=0
[ 1734s] + '[' 0 -ne 0 ']'
[ 1734s] + cd pylint-2.6.0
[ 1734s] + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
[ 1735s] + sed -i 's/\r//g' README.rst
[ 1735s] + RPM_EC=0
[ 1735s] ++ jobs -p
[ 1735s] + exit 0
[ 1735s] Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.bVnil2
[ 1735s] + umask 022
[ 1735s] + cd /home/abuild/rpmbuild/BUILD
[ 1735s] + cd pylint-2.6.0
[ 1735s] + CFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/generic-hardened-cc1 -fasynchronous-unwind-tables -fstack-clash-protection'
[ 1735s] + LDFLAGS='-Wl,-z,relro   -Wl,-z,now -specs=/usr/lib/rpm/generic-hardened-ld'
[ 1735s] + /usr/bin/python3 setup.py build '--executable=/usr/bin/python3 -s'
[ 1743s] running build
[ 1743s] running build_py
[ 1743s] creating build
[ 1743s] creating build/lib
[ 1743s] creating build/lib/pylint
[ 1743s] copying pylint/graph.py -> build/lib/pylint
[ 1743s] copying pylint/constants.py -> build/lib/pylint
[ 1743s] copying pylint/__pkginfo__.py -> build/lib/pylint
[ 1743s] copying pylint/__main__.py -> build/lib/pylint
[ 1743s] copying pylint/exceptions.py -> build/lib/pylint
[ 1743s] copying pylint/testutils.py -> build/lib/pylint
[ 1743s] copying pylint/__init__.py -> build/lib/pylint
[ 1743s] copying pylint/epylint.py -> build/lib/pylint
[ 1743s] copying pylint/interfaces.py -> build/lib/pylint
[ 1743s] creating build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/inspector.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/vcgutils.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/writer.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/utils.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/diadefslib.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/main.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/__init__.py -> build/lib/pylint/pyreverse
[ 1743s] copying pylint/pyreverse/diagrams.py -> build/lib/pylint/pyreverse
[ 1743s] creating build/lib/pylint/lint
[ 1743s] copying pylint/lint/check_parallel.py -> build/lib/pylint/lint
[ 1743s] copying pylint/lint/utils.py -> build/lib/pylint/lint
[ 1743s] copying pylint/lint/pylinter.py -> build/lib/pylint/lint
[ 1743s] copying pylint/lint/report_functions.py -> build/lib/pylint/lint
[ 1743s] copying pylint/lint/__init__.py -> build/lib/pylint/lint
[ 1744s] copying pylint/lint/run.py -> build/lib/pylint/lint
[ 1744s] creating build/lib/pylint/message
[ 1744s] copying pylint/message/message_id_store.py -> build/lib/pylint/message
[ 1744s] copying pylint/message/message_definition_store.py -> build/lib/pylint/message
[ 1744s] copying pylint/message/message_handler_mix_in.py -> build/lib/pylint/message
[ 1744s] copying pylint/message/message.py -> build/lib/pylint/message
[ 1744s] copying pylint/message/message_definition.py -> build/lib/pylint/message
[ 1744s] copying pylint/message/__init__.py -> build/lib/pylint/message
[ 1744s] creating build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/docstyle.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/emptystring.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/bad_builtin.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/docparams.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/_check_docs_utils.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/check_elif.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/overlapping_exceptions.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/broad_try_clause.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/mccabe.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/check_docs.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/redefined_variable_type.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/__init__.py -> build/lib/pylint/extensions
[ 1744s] copying pylint/extensions/comparetozero.py -> build/lib/pylint/extensions
[ 1744s] creating build/lib/pylint/utils
[ 1744s] copying pylint/utils/ast_walker.py -> build/lib/pylint/utils
[ 1744s] copying pylint/utils/pragma_parser.py -> build/lib/pylint/utils
[ 1744s] copying pylint/utils/utils.py -> build/lib/pylint/utils
[ 1744s] copying pylint/utils/file_state.py -> build/lib/pylint/utils
[ 1744s] copying pylint/utils/__init__.py -> build/lib/pylint/utils
[ 1744s] creating build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/similar.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/design_analysis.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/refactoring.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/python3.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/typecheck.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/format.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/imports.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/async.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/misc.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/classes.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/logging.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/strings.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/base_checker.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/exceptions.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/utils.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/newstyle.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/stdlib.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/base.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/__init__.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/variables.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/raw_metrics.py -> build/lib/pylint/checkers
[ 1744s] copying pylint/checkers/spelling.py -> build/lib/pylint/checkers
[ 1744s] creating build/lib/pylint/config
[ 1744s] copying pylint/config/option_manager_mixin.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/find_default_config_files.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/option_parser.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/option.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/man_help_formatter.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/configuration_mixin.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/options_provider_mixin.py -> build/lib/pylint/config
[ 1744s] copying pylint/config/__init__.py -> build/lib/pylint/config
[ 1744s] creating build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/reports_handler_mix_in.py -> build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/text.py -> build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/json_reporter.py -> build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/base_reporter.py -> build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/__init__.py -> build/lib/pylint/reporters
[ 1744s] copying pylint/reporters/collecting_reporter.py -> build/lib/pylint/reporters
[ 1744s] creating build/lib/pylint/reporters/ureports
[ 1744s] copying pylint/reporters/ureports/text_writer.py -> build/lib/pylint/reporters/ureports
[ 1744s] copying pylint/reporters/ureports/nodes.py -> build/lib/pylint/reporters/ureports
[ 1744s] copying pylint/reporters/ureports/__init__.py -> build/lib/pylint/reporters/ureports
[ 1745s] running build_scripts
[ 1745s] creating build/scripts-3.8
[ 1745s] copying and adjusting bin/pylint -> build/scripts-3.8
[ 1745s] copying and adjusting bin/symilar -> build/scripts-3.8
[ 1745s] copying and adjusting bin/epylint -> build/scripts-3.8
[ 1745s] copying and adjusting bin/pyreverse -> build/scripts-3.8
[ 1745s] changing mode of build/scripts-3.8/pylint from 644 to 755
[ 1745s] changing mode of build/scripts-3.8/symilar from 644 to 755
[ 1745s] changing mode of build/scripts-3.8/epylint from 644 to 755
[ 1745s] changing mode of build/scripts-3.8/pyreverse from 644 to 755
[ 1745s] + sleep 1
[ 1746s] + RPM_EC=0
[ 1746s] ++ jobs -p
[ 1746s] + exit 0
[ 1746s] Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.fZeJNI
[ 1746s] + umask 022
[ 1746s] + cd /home/abuild/rpmbuild/BUILD
[ 1746s] + '[' /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64 '!=' / ']'
[ 1746s] + rm -rf /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64
[ 1746s] ++ dirname /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64
[ 1747s] + mkdir -p /home/abuild/rpmbuild/BUILDROOT
[ 1747s] + mkdir /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64
[ 1747s] + cd pylint-2.6.0
[ 1747s] + CFLAGS='-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/generic-hardened-cc1 -fasynchronous-unwind-tables -fstack-clash-protection'
[ 1747s] + LDFLAGS='-Wl,-z,relro   -Wl,-z,now -specs=/usr/lib/rpm/generic-hardened-ld'
[ 1747s] + /usr/bin/python3 setup.py install -O1 --skip-build --root /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64
[ 1755s] running install
[ 1755s] running install_lib
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/graph.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/constants.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/__pkginfo__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/__main__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/testutils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/epylint.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] copying build/lib/pylint/interfaces.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/inspector.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/vcgutils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/writer.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/utils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/diadefslib.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/main.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] copying build/lib/pylint/pyreverse/diagrams.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/check_parallel.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/utils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/pylinter.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/report_functions.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] copying build/lib/pylint/lint/run.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/message_id_store.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/message_definition_store.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/message_handler_mix_in.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/message.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/message_definition.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] copying build/lib/pylint/message/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/docstyle.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/emptystring.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/bad_builtin.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/docparams.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/_check_docs_utils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/check_elif.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/overlapping_exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/broad_try_clause.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/mccabe.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/check_docs.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/redefined_variable_type.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] copying build/lib/pylint/extensions/comparetozero.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] copying build/lib/pylint/utils/ast_walker.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] copying build/lib/pylint/utils/pragma_parser.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] copying build/lib/pylint/utils/utils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] copying build/lib/pylint/utils/file_state.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] copying build/lib/pylint/utils/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/similar.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/design_analysis.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/refactoring.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/python3.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/typecheck.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/format.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/imports.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/async.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/misc.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/classes.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/logging.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/strings.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/base_checker.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/utils.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/newstyle.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/stdlib.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/base.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/variables.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/raw_metrics.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] copying build/lib/pylint/checkers/spelling.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/option_manager_mixin.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/find_default_config_files.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/option_parser.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/option.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/man_help_formatter.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/configuration_mixin.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/options_provider_mixin.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] copying build/lib/pylint/config/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/reports_handler_mix_in.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/text.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/json_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/base_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] copying build/lib/pylint/reporters/collecting_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters
[ 1755s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports
[ 1755s] copying build/lib/pylint/reporters/ureports/text_writer.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports
[ 1755s] copying build/lib/pylint/reporters/ureports/nodes.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports
[ 1755s] copying build/lib/pylint/reporters/ureports/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports
[ 1755s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/graph.py to graph.cpython-38.pyc
[ 1755s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/constants.py to constants.cpython-38.pyc
[ 1755s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__pkginfo__.py to __pkginfo__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__main__.py to __main__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/exceptions.py to exceptions.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/testutils.py to testutils.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__init__.py to __init__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/epylint.py to epylint.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/interfaces.py to interfaces.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/inspector.py to inspector.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/vcgutils.py to vcgutils.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/writer.py to writer.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/utils.py to utils.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/diadefslib.py to diadefslib.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/main.py to main.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/__init__.py to __init__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/pyreverse/diagrams.py to diagrams.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/check_parallel.py to check_parallel.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/utils.py to utils.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/pylinter.py to pylinter.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/report_functions.py to report_functions.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/__init__.py to __init__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/run.py to run.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/message_id_store.py to message_id_store.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/message_definition_store.py to message_definition_store.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/message_handler_mix_in.py to message_handler_mix_in.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/message.py to message.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/message_definition.py to message_definition.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/message/__init__.py to __init__.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/docstyle.py to docstyle.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/emptystring.py to emptystring.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/bad_builtin.py to bad_builtin.cpython-38.pyc
[ 1756s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/docparams.py to docparams.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/_check_docs_utils.py to _check_docs_utils.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/check_elif.py to check_elif.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/overlapping_exceptions.py to overlapping_exceptions.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/broad_try_clause.py to broad_try_clause.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/mccabe.py to mccabe.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/check_docs.py to check_docs.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/redefined_variable_type.py to redefined_variable_type.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/__init__.py to __init__.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/extensions/comparetozero.py to comparetozero.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/ast_walker.py to ast_walker.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/pragma_parser.py to pragma_parser.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/utils.py to utils.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/file_state.py to file_state.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/__init__.py to __init__.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/similar.py to similar.cpython-38.pyc
[ 1757s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/design_analysis.py to design_analysis.cpython-38.pyc
[ 1758s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/refactoring.py to refactoring.cpython-38.pyc
[ 1758s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/python3.py to python3.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/typecheck.py to typecheck.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/format.py to format.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/imports.py to imports.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/async.py to async.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/misc.py to misc.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/classes.py to classes.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/logging.py to logging.cpython-38.pyc
[ 1759s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/strings.py to strings.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/base_checker.py to base_checker.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/exceptions.py to exceptions.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/utils.py to utils.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/newstyle.py to newstyle.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/stdlib.py to stdlib.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/base.py to base.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/__init__.py to __init__.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/variables.py to variables.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/raw_metrics.py to raw_metrics.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/checkers/spelling.py to spelling.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/option_manager_mixin.py to option_manager_mixin.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/find_default_config_files.py to find_default_config_files.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/option_parser.py to option_parser.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/option.py to option.cpython-38.pyc
[ 1760s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/man_help_formatter.py to man_help_formatter.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/configuration_mixin.py to configuration_mixin.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/options_provider_mixin.py to options_provider_mixin.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/__init__.py to __init__.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/reports_handler_mix_in.py to reports_handler_mix_in.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/text.py to text.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/json_reporter.py to json_reporter.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/base_reporter.py to base_reporter.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/__init__.py to __init__.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/collecting_reporter.py to collecting_reporter.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports/text_writer.py to text_writer.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports/nodes.py to nodes.cpython-38.pyc
[ 1761s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/reporters/ureports/__init__.py to __init__.cpython-38.pyc
[ 1761s] writing byte-compilation script '/tmp/tmpdx6u70f2.py'
[ 1761s] /usr/bin/python3 /tmp/tmpdx6u70f2.py
[ 1767s] removing /tmp/tmpdx6u70f2.py
[ 1767s] running install_egg_info
[ 1767s] running egg_info
[ 1767s] writing pylint.egg-info/PKG-INFO
[ 1767s] writing dependency_links to pylint.egg-info/dependency_links.txt
[ 1767s] writing entry points to pylint.egg-info/entry_points.txt
[ 1767s] writing requirements to pylint.egg-info/requires.txt
[ 1767s] writing top-level names to pylint.egg-info/top_level.txt
[ 1768s] reading manifest file 'pylint.egg-info/SOURCES.txt'
[ 1768s] reading manifest template 'MANIFEST.in'
[ 1770s] /usr/lib/python3.8/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[ 1770s]   warnings.warn(
[ 1770s] /usr/lib/python3.8/site-packages/setuptools/command/egg_info.py:624: SetuptoolsDeprecationWarning: Custom 'build_py' does not implement 'get_data_files_without_manifest'.
[ 1770s] Please extend command classes from setuptools instead of distutils.
[ 1770s]   warnings.warn(
[ 1770s] warning: no previously-included files matching '*.pyc' found under directory 'tests'
[ 1770s] adding license file 'COPYING'
[ 1771s] writing manifest file 'pylint.egg-info/SOURCES.txt'
[ 1771s] Copying pylint.egg-info to /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint-2.6.0-py3.8.egg-info
[ 1771s] running install_scripts
[ 1771s] creating /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] copying build/scripts-3.8/pylint -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] copying build/scripts-3.8/symilar -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] copying build/scripts-3.8/epylint -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] copying build/scripts-3.8/pyreverse -> /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] changing mode of /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pylint to 755
[ 1771s] changing mode of /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/symilar to 755
[ 1771s] changing mode of /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/epylint to 755
[ 1771s] changing mode of /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pyreverse to 755
[ 1771s] Installing epylint script to /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] Installing pylint script to /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] Installing pyreverse script to /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] Installing symilar script to /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin
[ 1771s] + rm -rf /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/test
[ 1771s] + mkdir -pm 755 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1
[ 1772s] + install -pm 644 man/epylint.1 man/pylint.1 man/pyreverse.1 man/symilar.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/
[ 1772s] + for NAME in epylint pylint pyreverse symilar
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/epylint /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/epylint-3.8
[ 1772s] + ln -s epylint-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/epylint-3
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/epylint.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/epylint-3.8.1
[ 1772s] + ln -s epylint-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/epylint-3.1
[ 1772s] + ln -s epylint-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/epylint
[ 1772s] + ln -s epylint-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/epylint.1
[ 1772s] + for NAME in epylint pylint pyreverse symilar
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pylint /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pylint-3.8
[ 1772s] + ln -s pylint-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pylint-3
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pylint.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pylint-3.8.1
[ 1772s] + ln -s pylint-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pylint-3.1
[ 1772s] + ln -s pylint-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pylint
[ 1772s] + ln -s pylint-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pylint.1
[ 1772s] + for NAME in epylint pylint pyreverse symilar
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pyreverse /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pyreverse-3.8
[ 1772s] + ln -s pyreverse-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pyreverse-3
[ 1772s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pyreverse.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pyreverse-3.8.1
[ 1772s] + ln -s pyreverse-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pyreverse-3.1
[ 1772s] + ln -s pyreverse-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/pyreverse
[ 1773s] + ln -s pyreverse-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/pyreverse.1
[ 1773s] + for NAME in epylint pylint pyreverse symilar
[ 1773s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/symilar /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/symilar-3.8
[ 1773s] + ln -s symilar-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/symilar-3
[ 1773s] + mv /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/symilar.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/symilar-3.8.1
[ 1773s] + ln -s symilar-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/symilar-3.1
[ 1773s] + ln -s symilar-3.8 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/bin/symilar
[ 1773s] + ln -s symilar-3.8.1 /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/share/man/man1/symilar.1
[ 1773s] + /usr/lib/rpm/find-debuginfo.sh -j8 --strict-build-id -i --build-id-seed 2.6.0-3.oe1 --unique-debug-suffix -2.6.0-3.oe1.riscv64 --unique-debug-src-base pylint-2.6.0-3.oe1.riscv64 -S debugsourcefiles.list /home/abuild/rpmbuild/BUILD/pylint-2.6.0
[ 1775s] find: 'debug': No such file or directory
[ 1775s] + /usr/lib/rpm/check-buildroot
[ 1776s] + /usr/lib/rpm/brp-ldconfig
[ 1776s] + /usr/lib/rpm/brp-compress
[ 1780s] + /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip
[ 1782s] + /usr/lib/rpm/brp-python-bytecompile /usr/bin/python 1 1
[ 1788s] Bytecompiling .py files below /home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8 using /usr/bin/python3.8
[ 1803s] + /usr/lib/rpm/brp-python-hardlink
[ 1828s] Executing(%check): /bin/sh -e /var/tmp/rpm-tmp.vlQ9JD
[ 1828s] + umask 022
[ 1828s] + cd /home/abuild/rpmbuild/BUILD
[ 1828s] + cd pylint-2.6.0
[ 1828s] + export PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages
[ 1828s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages
[ 1828s] + /usr/bin/python3 bin/pylint -rn --rcfile=pylintrc --load-plugins=pylint.extensions.docparams, pylint.extensions.mccabe pylint
[ 1842s] Traceback (most recent call last):
[ 1842s]   File "bin/pylint", line 4, in <module>
[ 1842s]     run_pylint()
[ 1842s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__init__.py", line 22, in run_pylint
[ 1842s]     PylintRun(sys.argv[1:])
[ 1842s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/run.py", line 298, in __init__
[ 1842s]     linter.read_config_file(verbose=self.verbose)
[ 1842s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/config/option_manager_mixin.py", line 261, in read_config_file
[ 1842s]     raise OSError("The config file {:s} doesn't exist!".format(config_file))
[ 1842s] OSError: The config file pylintrc doesn't exist!
[ 1842s] + :
[ 1842s] + /usr/bin/python3 -m pytest -v -k 'not (test_baseline_benchmark_j1 or test_baseline_lots_of_files_j1 or test_baseline_lots_of_files_j10  or test_baseline_benchmark_check_parallel_j10 or test_by_module_statement_value or import_outside_toplevel  or test_can_list_directories_without_dunder_init or missing_kwoa_py3 or unused_typing_imports or star_needs_assignment_target_py35)'
[ 1863s] ============================= test session starts ==============================
[ 1863s] platform linux -- Python 3.8.5, pytest-4.6.7, py-1.8.0, pluggy-0.12.0 -- /usr/bin/python3
[ 1863s] cachedir: .pytest_cache
[ 1863s] rootdir: /home/abuild/rpmbuild/BUILD/pylint-2.6.0, inifile: pytest.ini
[ 1956s] collecting ... collected 1407 items / 220 deselected / 1187 selected
[ 1956s] 
[ 1959s] tests/test_config.py::test_can_read_ini PASSED                           [  0%]
[ 1961s] tests/test_config.py::test_can_read_setup_cfg PASSED                     [  0%]
[ 1963s] tests/test_config.py::test_can_read_toml PASSED                          [  0%]
[ 1966s] tests/test_config.py::test_can_read_toml_rich_types PASSED               [  0%]
[ 1967s] tests/test_func.py::test_functionality[func_e0204.py] PASSED             [  0%]
[ 1976s] tests/test_func.py::test_functionality[func_w0405.py] PASSED             [  0%]
[ 1976s] tests/test_func.py::test_functionality[func_loopvar_in_dict_comp_py27.py] PASSED [  0%]
[ 1977s] tests/test_func.py::test_functionality[func_noerror_mcs_attr_access.py] PASSED [  0%]
[ 1978s] tests/test_func.py::test_functionality[func_noerror_property_affectation_py26.py] PASSED [  0%]
[ 1982s] tests/test_func.py::test_functionality[func_bug113231.py] PASSED         [  0%]
[ 1982s] tests/test_func.py::test_functionality[func_w0801.py] PASSED             [  0%]
[ 1983s] tests/test_func.py::test_functionality[func_w0611.py] PASSED             [  1%]
[ 1983s] tests/test_func.py::test_functionality[func_noerror_class_attributes.py] PASSED [  1%]
[ 1985s] tests/test_func.py::test_functionality[func_logging_not_lazy_with_logger.py] PASSED [  1%]
[ 1986s] tests/test_func.py::test_functionality[func_noerror_classes_protected_member_access.py] PASSED [  1%]
[ 1990s] tests/test_func.py::test_functionality[func_w0612.py] PASSED             [  1%]
[ 1990s] tests/test_func.py::test_functionality[func_i0012.py] PASSED             [  1%]
[ 1991s] tests/test_func.py::test_functionality[func_e0012.py] PASSED             [  1%]
[ 1991s] tests/test_func.py::test_functionality[func_excess_escapes.py] PASSED    [  1%]
[ 1992s] tests/test_func.py::test_functionality[func_w0401.py] PASSED             [  1%]
[ 1993s] tests/test_func.py::test_functionality[func_dotted_ancestor.py] PASSED   [  1%]
[ 1996s] tests/test_func.py::test_functionality[func_w0401_package] FAILED        [  1%]
[ 2005s] tests/test_func.py::test_functionality[func_w0404.py] PASSED             [  1%]
[ 2006s] tests/test_func.py::test_functionality[func_noerror_e1101_9588_base_attr_aug_assign.py] PASSED [  2%]
[ 2006s] tests/test_func.py::test_functionality[func_noerror_builtin_module_test.py] PASSED [  2%]
[ 2007s] tests/test_func.py::test_functionality[func_typecheck_callfunc_assigment.py] PASSED [  2%]
[ 2009s] tests/test_func.py::test_functionality[func_w0233.py] PASSED             [  2%]
[ 2010s] tests/test_func.py::test_functionality[func_unused_import_py30.py] PASSED [  2%]
[ 2010s] tests/test_func.py::test_functionality[func_noerror_overloaded_operator.py] PASSED [  2%]
[ 2011s] tests/test_func.py::test_functionality[func_noerror_base_init_vars.py] PASSED [  2%]
[ 2011s] tests/test_func.py::test_functionality[func_w0406.py] PASSED             [  2%]
[ 2012s] tests/test_func.py::test_functionality[func_noerror_classes_meth_could_be_a_function.py] PASSED [  2%]
[ 2013s] tests/test_func.py::test_functionality[func_e12xx.py] PASSED             [  2%]
[ 2013s] tests/test_func.py::test_functionality[func_noerror_external_classmethod_crash.py] PASSED [  2%]
[ 2013s] tests/test_func.py::test_functionality[func_disable_linebased.py] PASSED [  2%]
[ 2014s] tests/test_func.py::test_functionality[func_noerror_yield_assign_py25.py] PASSED [  3%]
[ 2014s] tests/test_func.py::test_functionality[func_nonregr___file___global.py] PASSED [  3%]
[ 2015s] tests/test_func.py::test_functionality[func_i0014.py] PASSED             [  3%]
[ 2017s] tests/test_func.py::test_functionality[func_noerror_access_attr_before_def_false_positive.py] PASSED [  3%]
[ 2017s] tests/test_func.py::test_functionality[func_variables_unused_name_from_wilcard_import.py] PASSED [  3%]
[ 2017s] tests/test_func.py::test_functionality[func_module___dict__.py] PASSED   [  3%]
[ 2018s] tests/test_func.py::test_functionality[func_i0020.py] PASSED             [  3%]
[ 2018s] tests/test_func.py::test_functionality[func_noerror_lambda_use_before_assign.py] PASSED [  3%]
[ 2018s] tests/test_func.py::test_functionality[func_i0013.py] PASSED             [  3%]
[ 2019s] tests/test_func.py::test_functionality[func_i0022.py] PASSED             [  3%]
[ 2019s] tests/test_func.py::test_functionality[func_noerror_yield_return_mix.py] PASSED [  3%]
[ 2019s] tests/test_func.py::test_functionality[func_first_arg.py] PASSED         [  3%]
[ 2020s] tests/test_func.py::test_functionality[func_w0401_disabled.py] PASSED    [  4%]
[ 2021s] tests/test_func.py::test_functionality[func_no_dummy_redefined.py] PASSED [  4%]
[ 2022s] tests/test_func.py::test_functionality[func_i0011.py] PASSED             [  4%]
[ 2022s] tests/test_func.py::test_functionality[func_w0613.py] PASSED             [  4%]
[ 2023s] tests/test_func.py::test_functionality[func_noerror_no_warning_docstring.py] PASSED [  4%]
[ 2024s] tests/test_func.py::test_functionality[func_w0401_disabled_in_func.py] PASSED [  4%]
[ 2025s] tests/test_func.py::test_functionality[func_e13xx.py] PASSED             [  4%]
[ 2025s] tests/test_func.py::test_functionality[func_noerror___init___return_from_inner_function.py] PASSED [  4%]
[ 2026s] tests/test_func.py::test_functionality[func_noerror_decorator_scope.py] PASSED [  4%]
[ 2026s] tests/test_func.py::test_functionality[func_noerror_inner_classes.py] PASSED [  4%]
[ 2027s] tests/test_func.py::test_functionality[func_nameerror_on_string_substitution.py] PASSED [  4%]
[ 2027s] tests/test_func.py::test_functionality[func_noerror_object_as_class_attribute.py] PASSED [  4%]
[ 2031s] tests/test_functional.py::test_functional[missing_docstring_new_style] FAILED [  5%]
[ 2033s] tests/test_functional.py::test_functional[membership_protocol_py2] SKIPPED [  5%]
[ 2038s] tests/test_functional.py::test_functional[member_checks_opaque] FAILED   [  5%]
[ 2042s] tests/test_functional.py::test_functional[misplaced_future] FAILED       [  5%]
[ 2045s] tests/test_functional.py::test_functional[member_checks_py37] FAILED     [  5%]
[ 2049s] tests/test_functional.py::test_functional[member_checks_no_hints] FAILED [  5%]
[ 2051s] tests/test_functional.py::test_functional[messages_managed_by_id] FAILED [  5%]
[ 2054s] tests/test_functional.py::test_functional[missing_self_argument] FAILED  [  5%]
[ 2058s] tests/test_functional.py::test_functional[missing_docstring] FAILED      [  5%]
[ 2061s] tests/test_functional.py::test_functional[mapping_context] FAILED        [  5%]
[ 2064s] tests/test_functional.py::test_functional[mapping_context_py3] FAILED    [  5%]
[ 2068s] tests/test_functional.py::test_functional[misplaced_comparison_constant] FAILED [  5%]
[ 2071s] tests/test_functional.py::test_functional[missing_parentheses_for_call_in_test] FAILED [  6%]
[ 2075s] tests/test_functional.py::test_functional[misplaced_format_function] FAILED [  6%]
[ 2078s] tests/test_functional.py::test_functional[member_checks_ignore_none] FAILED [  6%]
[ 2083s] tests/test_functional.py::test_functional[missing_module_docstring_disabled] FAILED [  6%]
[ 2087s] tests/test_functional.py::test_functional[misplaced_bare_raise] FAILED   [  6%]
[ 2091s] tests/test_functional.py::test_functional[member_checks] FAILED          [  6%]
[ 2095s] tests/test_functional.py::test_functional[member_checks_inference_improvements] FAILED [  6%]
[ 2098s] tests/test_functional.py::test_functional[membership_protocol_py3] FAILED [  6%]
[ 2100s] tests/test_functional.py::test_functional[mapping_context_py2] SKIPPED   [  6%]
[ 2103s] tests/test_functional.py::test_functional[member_checks_hints] FAILED    [  6%]
[ 2107s] tests/test_functional.py::test_functional[missing_final_newline] FAILED  [  6%]
[ 2111s] tests/test_functional.py::test_functional[membership_protocol] FAILED    [  6%]
[ 2115s] tests/test_functional.py::test_functional[method_hidden] FAILED          [  7%]
[ 2118s] tests/test_functional.py::test_functional[multiple_imports] FAILED       [  7%]
[ 2122s] tests/test_functional.py::test_functional[monkeypatch_method] FAILED     [  7%]
[ 2125s] tests/test_functional.py::test_functional[globals] FAILED                [  7%]
[ 2128s] tests/test_functional.py::test_functional[genexp_in_class_scope] FAILED  [  7%]
[ 2131s] tests/test_functional.py::test_functional[genexpr_variable_scope] FAILED [  7%]
[ 2135s] tests/test_functional.py::test_functional[generated_members] FAILED      [  7%]
[ 2138s] tests/test_functional.py::test_functional[keyword_arg_before_vararg] FAILED [  7%]
[ 2142s] tests/test_functional.py::test_functional[future_unicode_literals] FAILED [  7%]
[ 2145s] tests/test_functional.py::test_functional[function_redefined] FAILED     [  7%]
[ 2149s] tests/test_functional.py::test_functional[fixme_bad_formatting_1139] FAILED [  7%]
[ 2154s] tests/test_functional.py::test_functional[fixme] FAILED                  [  8%]
[ 2157s] tests/test_functional.py::test_functional[function_redefined_2540] FAILED [  8%]
[ 2161s] tests/test_functional.py::test_functional[fallback_import_enabled] FAILED [  8%]
[ 2164s] tests/test_functional.py::test_functional[f_string_without_interpolation] FAILED [  8%]
[ 2167s] tests/test_functional.py::test_functional[formatted_string_literal_with_if_py36] FAILED [  8%]
[ 2170s] tests/test_functional.py::test_functional[fallback_import_disabled] FAILED [  8%]
[ 2174s] tests/test_functional.py::test_functional[future_import] FAILED          [  8%]
[ 2177s] tests/test_functional.py::test_functional[typing_use] FAILED             [  8%]
[ 2181s] tests/test_functional.py::test_functional[ternary] FAILED                [  8%]
[ 2183s] tests/test_functional.py::test_functional[tokenize_error_jython] SKIPPED [  8%]
[ 2186s] tests/test_functional.py::test_functional[try_except_raise] FAILED       [  8%]
[ 2189s] tests/test_functional.py::test_functional[tokenize_error] FAILED         [  8%]
[ 2192s] tests/test_functional.py::test_functional[try_except_raise_crash] FAILED [  9%]
[ 2195s] tests/test_functional.py::test_functional[trailing_whitespaces] FAILED   [  9%]
[ 2199s] tests/test_functional.py::test_functional[trailing_newlines] FAILED      [  9%]
[ 2203s] tests/test_functional.py::test_functional[trailing_comma_tuple] FAILED   [  9%]
[ 2207s] tests/test_functional.py::test_functional[test_compile] FAILED           [  9%]
[ 2211s] tests/test_functional.py::test_functional[signature_differs] FAILED      [  9%]
[ 2214s] tests/test_functional.py::test_functional[simplifiable_if_statement] FAILED [  9%]
[ 2218s] tests/test_functional.py::test_functional[self_assigning_variable] FAILED [  9%]
[ 2220s] tests/test_functional.py::test_functional[singledispatch_functions] SKIPPED [  9%]
[ 2223s] tests/test_functional.py::test_functional[suspicious_str_strip_call_py3] FAILED [  9%]
[ 2227s] tests/test_functional.py::test_functional[slots_checks] FAILED           [  9%]
[ 2230s] tests/test_functional.py::test_functional[singleton_comparison] FAILED   [  9%]
[ 2234s] tests/test_functional.py::test_functional[string_formatting] FAILED      [ 10%]
[ 2237s] tests/test_functional.py::test_functional[superfluous_parens] FAILED     [ 10%]
[ 2241s] tests/test_functional.py::test_functional[statement_without_effect_py36] FAILED [ 10%]
[ 2245s] tests/test_functional.py::test_functional[string_formatting_failed_inference_py35] FAILED [ 10%]
[ 2249s] tests/test_functional.py::test_functional[stop_iteration_inside_generator] FAILED [ 10%]
[ 2265s] tests/test_functional.py::test_functional[string_formatting_disable] FAILED [ 10%]
[ 2268s] tests/test_functional.py::test_functional[star_needs_assignment_target] FAILED [ 10%]
[ 2272s] tests/test_functional.py::test_functional[sys_stream_regression_1004] FAILED [ 10%]
[ 2274s] tests/test_functional.py::test_functional[suspicious_str_strip_call] SKIPPED [ 10%]
[ 2275s] tests/test_functional.py::test_functional[string_formatting_py27] SKIPPED [ 10%]
[ 2279s] tests/test_functional.py::test_functional[simplifiable_if_expression] FAILED [ 10%]
[ 2281s] tests/test_functional.py::test_functional[syntax_error_jython] SKIPPED   [ 10%]
[ 2284s] tests/test_functional.py::test_functional[self_cls_assignment] FAILED    [ 11%]
[ 2287s] tests/test_functional.py::test_functional[string_formatting_failed_inference] FAILED [ 11%]
[ 2290s] tests/test_functional.py::test_functional[subprocess_run_check35] FAILED [ 11%]
[ 2293s] tests/test_functional.py::test_functional[statement_without_effect] FAILED [ 11%]
[ 2312s] tests/test_functional.py::test_functional[super_with_arguments] FAILED   [ 11%]
[ 2316s] tests/test_functional.py::test_functional[super_checks] FAILED           [ 11%]
[ 2319s] tests/test_functional.py::test_functional[syntax_error] FAILED           [ 11%]
[ 2322s] tests/test_functional.py::test_functional[socketerror_import] FAILED     [ 11%]
[ 2324s] tests/test_functional.py::test_functional[singledispatch_functions_py3] FAILED [ 11%]
[ 2328s] tests/test_functional.py::test_functional[subprocess_popen_preexec_fn] FAILED [ 11%]
[ 2331s] tests/test_functional.py::test_functional[simplify_chained_comparison] FAILED [ 11%]
[ 2335s] tests/test_functional.py::test_functional[string_formatting_py3] FAILED  [ 11%]
[ 2337s] tests/test_functional.py::test_functional[exception_message] SKIPPED     [ 12%]
[ 2340s] tests/test_functional.py::test_functional[exec_used_py3] FAILED          [ 12%]
[ 2343s] tests/test_functional.py::test_functional[eval_used] FAILED              [ 12%]
[ 2347s] tests/test_functional.py::test_functional[exception_is_binary_op] FAILED [ 12%]
[ 2349s] tests/test_functional.py::test_functional[exec_used_py2] SKIPPED         [ 12%]
[ 2358s] tests/test_functional.py::test_functional[import_error] FAILED           [ 12%]
[ 2361s] tests/test_functional.py::test_functional[indexing_exception] SKIPPED    [ 12%]
[ 2364s] tests/test_functional.py::test_functional[invalid_exceptions_raised] FAILED [ 12%]
[ 2368s] tests/test_functional.py::test_functional[invalid_length_hint_returned] FAILED [ 12%]
[ 2371s] tests/test_functional.py::test_functional[inconsistent_mro] FAILED       [ 12%]
[ 2374s] tests/test_functional.py::test_functional[invalid_length_returned] FAILED [ 12%]
[ 2378s] tests/test_functional.py::test_functional[invalid_repr_returned] FAILED  [ 12%]
[ 2382s] tests/test_functional.py::test_functional[iterable_context] FAILED       [ 13%]
[ 2385s] tests/test_functional.py::test_functional[implicit_str_concat_multiline] FAILED [ 13%]
[ 2389s] tests/test_functional.py::test_functional[invalid_metaclass_py3] FAILED  [ 13%]
[ 2394s] tests/test_functional.py::test_functional[init_is_generator] FAILED      [ 13%]
[ 2396s] tests/test_functional.py::test_functional[iterable_context_py2] SKIPPED  [ 13%]
[ 2399s] tests/test_functional.py::test_functional[implicit_str_concat] FAILED    [ 13%]
[ 2402s] tests/test_functional.py::test_functional[init_subclass_classmethod_py36] FAILED [ 13%]
[ 2405s] tests/test_functional.py::test_functional[invalid_format_returned] FAILED [ 13%]
[ 2409s] tests/test_functional.py::test_functional[invalid_all_object] FAILED     [ 13%]
[ 2412s] tests/test_functional.py::test_functional[invalid_getnewargs_ex_returned] FAILED [ 13%]
[ 2416s] tests/test_functional.py::test_functional[invalid_overridden_method] FAILED [ 13%]
[ 2420s] tests/test_functional.py::test_functional[invalid_exceptions_caught] FAILED [ 13%]
[ 2423s] tests/test_functional.py::test_functional[invalid_unary_operand_type] FAILED [ 14%]
[ 2426s] tests/test_functional.py::test_functional[init_not_called] FAILED        [ 14%]
[ 2430s] tests/test_functional.py::test_functional[invalid_slice_index] FAILED    [ 14%]
[ 2433s] tests/test_functional.py::test_functional[isinstance_second_argument] FAILED [ 14%]
[ 2437s] tests/test_functional.py::test_functional[invalid_metaclass] FAILED      [ 14%]
[ 2440s] tests/test_functional.py::test_functional[invalid_hash_returned] FAILED  [ 14%]
[ 2443s] tests/test_functional.py::test_functional[invalid_name] FAILED           [ 14%]
[ 2447s] tests/test_functional.py::test_functional[invalid_bytes_returned] FAILED [ 14%]
[ 2450s] tests/test_functional.py::test_functional[invalid_sequence_index] FAILED [ 14%]
[ 2454s] tests/test_functional.py::test_functional[iterable_context_py3] FAILED   [ 14%]
[ 2457s] tests/test_functional.py::test_functional[invalid_index_returned] FAILED [ 14%]
[ 2460s] tests/test_functional.py::test_functional[invalid_bool_returned] FAILED  [ 14%]
[ 2464s] tests/test_functional.py::test_functional[inherit_non_class] FAILED      [ 15%]
[ 2467s] tests/test_functional.py::test_functional[invalid_envvar_value] FAILED   [ 15%]
[ 2471s] tests/test_functional.py::test_functional[implicit_str_concat_utf8] FAILED [ 15%]
[ 2474s] tests/test_functional.py::test_functional[invalid_str_returned] FAILED   [ 15%]
[ 2477s] tests/test_functional.py::test_functional[invalid_getnewargs_returned] FAILED [ 15%]
[ 2480s] tests/test_functional.py::test_functional[inconsistent_quotes] FAILED    [ 15%]
[ 2484s] tests/test_functional.py::test_functional[implicit_str_concat_latin1] FAILED [ 15%]
[ 2488s] tests/test_functional.py::test_functional[invalid_star_assignment_target] FAILED [ 15%]
[ 2491s] tests/test_functional.py::test_functional[inconsistent_quotes2] FAILED   [ 15%]
[ 2494s] tests/test_functional.py::test_functional[inconsistent_returns] FAILED   [ 15%]
[ 2499s] tests/test_functional.py::test_functional[iterable_context_py36] FAILED  [ 15%]
[ 2503s] tests/test_functional.py::test_functional[protocol_classes] FAILED       [ 16%]
[ 2506s] tests/test_functional.py::test_functional[preferred_module] FAILED       [ 16%]
[ 2510s] tests/test_functional.py::test_functional[property_with_parameters] FAILED [ 16%]
[ 2514s] tests/test_functional.py::test_functional[protected_access_access_different_scopes] FAILED [ 16%]
[ 2518s] tests/test_functional.py::test_functional[pragma_after_backslash] FAILED [ 16%]
[ 2521s] tests/test_functional.py::test_functional[postponed_evaluation_not_activated] FAILED [ 16%]
[ 2524s] tests/test_functional.py::test_functional[postponed_evaluation_activated] FAILED [ 16%]
[ 2527s] tests/test_functional.py::test_functional[print_always_warns] SKIPPED    [ 16%]
[ 2530s] tests/test_functional.py::test_functional[logical_tautology] FAILED      [ 16%]
[ 2533s] tests/test_functional.py::test_functional[long_utf8_lines] FAILED        [ 16%]
[ 2537s] tests/test_functional.py::test_functional[line_endings] FAILED           [ 16%]
[ 2541s] tests/test_functional.py::test_functional[logging_format_interpolation] FAILED [ 16%]
[ 2544s] tests/test_functional.py::test_functional[logging_format_interpolation_py36] FAILED [ 17%]
[ 2547s] tests/test_functional.py::test_functional[literal_comparison] FAILED     [ 17%]
[ 2550s] tests/test_functional.py::test_functional[logging_not_lazy] FAILED       [ 17%]
[ 2553s] tests/test_functional.py::test_functional[long_lines_with_utf8] FAILED   [ 17%]
[ 2557s] tests/test_functional.py::test_functional[line_too_long] FAILED          [ 17%]
[ 2560s] tests/test_functional.py::test_functional[lost_exception] FAILED         [ 17%]
[ 2564s] tests/test_functional.py::test_functional[len_checks] FAILED             [ 17%]
[ 2568s] tests/test_functional.py::test_functional[logging_fstring_interpolation_py36] FAILED [ 17%]
[ 2571s] tests/test_functional.py::test_functional[line_too_long_end_of_module] FAILED [ 17%]
[ 2574s] tests/test_functional.py::test_functional[class_scope] FAILED            [ 17%]
[ 2578s] tests/test_functional.py::test_functional[consider_swap_variables] FAILED [ 17%]
[ 2582s] tests/test_functional.py::test_functional[consider_iterating_dictionary] FAILED [ 17%]
[ 2585s] tests/test_functional.py::test_functional[ctor_arguments] FAILED         [ 18%]
[ 2588s] tests/test_functional.py::test_functional[consider_using_sys_exit_local_scope] FAILED [ 18%]
[ 2591s] tests/test_functional.py::test_functional[class_members_py36] FAILED     [ 18%]
[ 2595s] tests/test_functional.py::test_functional[class_variable_slots_conflict_exempted] FAILED [ 18%]
[ 2599s] tests/test_functional.py::test_functional[confidence_filter] FAILED      [ 18%]
[ 2602s] tests/test_functional.py::test_functional[consider_using_enumerate] FAILED [ 18%]
[ 2605s] tests/test_functional.py::test_functional[confusing_with_statement] FAILED [ 18%]
[ 2608s] tests/test_functional.py::test_functional[comparison_with_callable] FAILED [ 18%]
[ 2612s] tests/test_functional.py::test_functional[consider_using_set_comprehension] FAILED [ 18%]
[ 2616s] tests/test_functional.py::test_functional[consider_using_in] FAILED      [ 18%]
[ 2619s] tests/test_functional.py::test_functional[cellvar_escaping_loop] FAILED  [ 18%]
[ 2623s] tests/test_functional.py::test_functional[consider_using_get] FAILED     [ 18%]
[ 2626s] tests/test_functional.py::test_functional[consider_using_dict_comprehension] FAILED [ 19%]
[ 2630s] tests/test_functional.py::test_functional[consider_merging_isinstance] FAILED [ 19%]
[ 2633s] tests/test_functional.py::test_functional[consider_using_sys_exit_exempted] FAILED [ 19%]
[ 2637s] tests/test_functional.py::test_functional[consider_using_sys_exit] FAILED [ 19%]
[ 2640s] tests/test_functional.py::test_functional[class_members_py30] FAILED     [ 19%]
[ 2642s] tests/test_functional.py::test_functional[continue_in_finally] SKIPPED   [ 19%]
[ 2645s] tests/test_functional.py::test_functional[consider_join] FAILED          [ 19%]
[ 2648s] tests/test_functional.py::test_functional[control_pragmas] FAILED        [ 19%]
[ 2652s] tests/test_functional.py::test_functional[crash_missing_module_type] FAILED [ 19%]
[ 2655s] tests/test_functional.py::test_functional[recursion_error_2667] FAILED   [ 19%]
[ 2658s] tests/test_functional.py::test_functional[regression_3091] FAILED        [ 19%]
[ 2662s] tests/test_functional.py::test_functional[recursion_error_crash] FAILED  [ 19%]
[ 2667s] tests/test_functional.py::test_functional[raising_format_tuple] FAILED   [ 20%]
[ 2670s] tests/test_functional.py::test_functional[recursion_regression_2960] FAILED [ 20%]
[ 2673s] tests/test_functional.py::test_functional[regression_no_member_1078] FAILED [ 20%]
[ 2677s] tests/test_functional.py::test_functional[regression_2443_duplicate_bases] FAILED [ 20%]
[ 2679s] tests/test_functional.py::test_functional[regression_property_no_member_870] FAILED [ 20%]
[ 2683s] tests/test_functional.py::test_functional[recursion_error_2899] FAILED   [ 20%]
[ 2686s] tests/test_functional.py::test_functional[regression_too_many_arguments_2335] FAILED [ 20%]
[ 2689s] tests/test_functional.py::test_functional[recursion_error_crash_2683] FAILED [ 20%]
[ 2693s] tests/test_functional.py::test_functional[regression_3231_no_member_property] FAILED [ 20%]
[ 2696s] tests/test_functional.py::test_functional[regression_2937_ifexp] FAILED  [ 20%]
[ 2699s] tests/test_functional.py::test_functional[reused_outer_loop_variable] FAILED [ 20%]
[ 2702s] tests/test_functional.py::test_functional[redeclared_assigned_name] FAILED [ 20%]
[ 2704s] tests/test_functional.py::test_functional[recursion_error_crash_astroid_623] FAILED [ 21%]
[ 2709s] tests/test_functional.py::test_functional[reimported] FAILED             [ 21%]
[ 2712s] tests/test_functional.py::test_functional[redundant_unittest_assert] FAILED [ 21%]
[ 2714s] tests/test_functional.py::test_functional[recursion_error_2861] FAILED   [ 21%]
[ 2718s] tests/test_functional.py::test_functional[raising_self] FAILED           [ 21%]
[ 2721s] tests/test_functional.py::test_functional[return_in_init] FAILED         [ 21%]
[ 2724s] tests/test_functional.py::test_functional[raise_missing_from] FAILED     [ 21%]
[ 2727s] tests/test_functional.py::test_functional[regression_infer_call_result_3690] FAILED [ 21%]
[ 2731s] tests/test_functional.py::test_functional[redefined_argument_from_local] FAILED [ 21%]
[ 2734s] tests/test_functional.py::test_functional[reused_outer_loop_variable_py3] FAILED [ 21%]
[ 2738s] tests/test_functional.py::test_functional[regression_1326_crash_uninferable] FAILED [ 21%]
[ 2741s] tests/test_functional.py::test_functional[recursion_error_3159] FAILED   [ 21%]
[ 2744s] tests/test_functional.py::test_functional[regression_property_slots_2439] FAILED [ 22%]
[ 2748s] tests/test_functional.py::test_functional[return_outside_function] FAILED [ 22%]
[ 2751s] tests/test_functional.py::test_functional[recursion_error_940] FAILED    [ 22%]
[ 2755s] tests/test_functional.py::test_functional[regression_3416_unused_argument_raise] FAILED [ 22%]
[ 2759s] tests/test_functional.py::test_functional[recursion_error_3152] FAILED   [ 22%]
[ 2762s] tests/test_functional.py::test_functional[repeated_keyword] FAILED       [ 22%]
[ 2765s] tests/test_functional.py::test_functional[recursion_error_2906] FAILED   [ 22%]
[ 2768s] tests/test_functional.py::test_functional[regression_posonly_args] FAILED [ 22%]
[ 2772s] tests/test_functional.py::test_functional[redefined_outer_name_type_checking] FAILED [ 22%]
[ 2775s] tests/test_functional.py::test_functional[regression_property_no_member_844] FAILED [ 22%]
[ 2779s] tests/test_functional.py::test_functional[redefined_builtin] FAILED      [ 22%]
[ 2782s] tests/test_functional.py::test_functional[regression_property_no_member_3269] FAILED [ 22%]
[ 2786s] tests/test_functional.py::test_functional[recursion_error_2836] FAILED   [ 23%]
[ 2789s] tests/test_functional.py::test_functional[raising_non_exception_py3] FAILED [ 23%]
[ 2792s] tests/test_functional.py::test_functional[regression_no_value_for_parameter] FAILED [ 23%]
[ 2796s] tests/test_functional.py::test_functional[regression_property_no_member_2641] FAILED [ 23%]
[ 2826s] tests/test_functional.py::test_functional[old_division_manually] FAILED  [ 23%]
[ 2849s] tests/test_functional.py::test_functional[old_division_floats] FAILED    [ 23%]
[ 2852s] tests/test_functional.py::test_functional[blacklisted_name] FAILED       [ 23%]
[ 2856s] tests/test_functional.py::test_functional[bad_exception_context] FAILED  [ 23%]
[ 2860s] tests/test_functional.py::test_functional[bad_reversed_sequence] FAILED  [ 23%]
[ 2864s] tests/test_functional.py::test_functional[bad_thread_instantiation] FAILED [ 23%]
[ 2868s] tests/test_functional.py::test_functional[bad_indentation] FAILED        [ 23%]
[ 2870s] tests/test_functional.py::test_functional[boolean_datetime] SKIPPED      [ 24%]
[ 2874s] tests/test_functional.py::test_functional[bare_except] FAILED            [ 24%]
[ 2878s] tests/test_functional.py::test_functional[bad_inline_option] FAILED      [ 24%]
[ 2882s] tests/test_functional.py::test_functional[bad_staticmethod_argument] FAILED [ 24%]
[ 2886s] tests/test_functional.py::test_functional[broad_except] FAILED           [ 24%]
[ 2891s] tests/test_functional.py::test_functional[bugfix_local_scope_metaclass_1177] FAILED [ 24%]
[ 2894s] tests/test_functional.py::test_functional[bad_open_mode_py3] FAILED      [ 24%]
[ 2898s] tests/test_functional.py::test_functional[bad_except_order] FAILED       [ 24%]
[ 2901s] tests/test_functional.py::test_functional[wrong_import_order2] FAILED    [ 24%]
[ 2905s] tests/test_functional.py::test_functional[wrong_import_position12] FAILED [ 24%]
[ 2909s] tests/test_functional.py::test_functional[wrong_import_position2] FAILED [ 24%]
[ 2912s] tests/test_functional.py::test_functional[wrong_import_position_exclude_dunder_main] FAILED [ 24%]
[ 2916s] tests/test_functional.py::test_functional[wrong_import_position5] FAILED [ 25%]
[ 2920s] tests/test_functional.py::test_functional[wrong_import_position6] FAILED [ 25%]
[ 2923s] tests/test_functional.py::test_functional[wrong_import_position11] FAILED [ 25%]
[ 2927s] tests/test_functional.py::test_functional[with_used_before_assign] FAILED [ 25%]
[ 2931s] tests/test_functional.py::test_functional[wildcard_import] FAILED        [ 25%]
[ 2935s] tests/test_functional.py::test_functional[wrong_import_position13] FAILED [ 25%]
[ 2938s] tests/test_functional.py::test_functional[wrong_import_position7] FAILED [ 25%]
[ 2942s] tests/test_functional.py::test_functional[wrong_import_position3] FAILED [ 25%]
[ 2945s] tests/test_functional.py::test_functional[wrong_import_position8] FAILED [ 25%]
[ 2949s] tests/test_functional.py::test_functional[wrong_import_position4] FAILED [ 25%]
[ 2952s] tests/test_functional.py::test_functional[wrong_import_position14] FAILED [ 25%]
[ 2956s] tests/test_functional.py::test_functional[wrong_import_position9] FAILED [ 25%]
[ 2960s] tests/test_functional.py::test_functional[wrong_import_position10] FAILED [ 26%]
[ 2963s] tests/test_functional.py::test_functional[wrong_import_position] FAILED  [ 26%]
[ 2967s] tests/test_functional.py::test_functional[with_using_generator] FAILED   [ 26%]
[ 2971s] tests/test_functional.py::test_functional[wrong_exception_operation] FAILED [ 26%]
[ 2976s] tests/test_functional.py::test_functional[wildcard_import_allowed] FAILED [ 26%]
[ 2980s] tests/test_functional.py::test_functional[wrong_import_position15] FAILED [ 26%]
[ 2983s] tests/test_functional.py::test_functional[yield_outside_func] FAILED     [ 26%]
[ 2988s] tests/test_functional.py::test_functional[yield_from_outside_func] FAILED [ 26%]
[ 2992s] tests/test_functional.py::test_functional[yield_inside_async_function_py36] FAILED [ 26%]
[ 2996s] tests/test_functional.py::test_functional[yield_from_iterable_py33] FAILED [ 26%]
[ 2999s] tests/test_functional.py::test_functional[yield_inside_async_function] SKIPPED [ 26%]
[ 3002s] tests/test_functional.py::test_functional[no_self_argument_py37] FAILED  [ 26%]
[ 3006s] tests/test_functional.py::test_functional[namePresetCamelCase] FAILED    [ 27%]
[ 3009s] tests/test_functional.py::test_functional[no_self_use] FAILED            [ 27%]
[ 3013s] tests/test_functional.py::test_functional[no_name_in_module] FAILED      [ 27%]
[ 3018s] tests/test_functional.py::test_functional[no_else_break] FAILED          [ 27%]
[ 3022s] tests/test_functional.py::test_functional[name_preset_snake_case] FAILED [ 27%]
[ 3026s] tests/test_functional.py::test_functional[no_else_return] FAILED         [ 27%]
[ 3030s] tests/test_functional.py::test_functional[not_async_context_manager_py37] FAILED [ 27%]
[ 3034s] tests/test_functional.py::test_functional[nonexistent_operator] FAILED   [ 27%]
[ 3038s] tests/test_functional.py::test_functional[not_in_loop] FAILED            [ 27%]
[ 3042s] tests/test_functional.py::test_functional[nested_func_defined_in_loop] FAILED [ 27%]
[ 3046s] tests/test_functional.py::test_functional[not_callable] FAILED           [ 27%]
[ 3050s] tests/test_functional.py::test_functional[no_self_use_py3] FAILED        [ 27%]
[ 3054s] tests/test_functional.py::test_functional[name_styles] FAILED            [ 28%]
[ 3058s] tests/test_functional.py::test_functional[names_in__all__] FAILED        [ 28%]
[ 3062s] tests/test_functional.py::test_functional[none_dunder_protocols_py36] FAILED [ 28%]
[ 3065s] tests/test_functional.py::test_functional[nonlocal_and_global] FAILED    [ 28%]
[ 3069s] tests/test_functional.py::test_functional[no_staticmethod_decorator] FAILED [ 28%]
[ 3072s] tests/test_functional.py::test_functional[not_context_manager] FAILED    [ 28%]
[ 3075s] tests/test_functional.py::test_functional[no_else_continue] FAILED       [ 28%]
[ 3078s] tests/test_functional.py::test_functional[non_str_assignment_to_dunder_name] FAILED [ 28%]
[ 3083s] tests/test_functional.py::test_functional[no_else_raise] FAILED          [ 28%]
[ 3086s] tests/test_functional.py::test_functional[no_classmethod_decorator] FAILED [ 28%]
[ 3089s] tests/test_functional.py::test_functional[non_iterator_returned] FAILED  [ 28%]
[ 3093s] tests/test_functional.py::test_functional[not_async_context_manager] FAILED [ 28%]
[ 3097s] tests/test_functional.py::test_functional[no_method_argument_py38] FAILED [ 29%]
[ 3101s] tests/test_functional.py::test_functional[non_ascii_name] FAILED         [ 29%]
[ 3104s] tests/test_functional.py::test_functional[nonlocal_without_binding] FAILED [ 29%]
[ 3107s] tests/test_functional.py::test_functional[name_good_bad_names_regex] FAILED [ 29%]
[ 3111s] tests/test_functional.py::test_functional[namedtuple_member_inference] FAILED [ 29%]
[ 3114s] tests/test_functional.py::test_functional[nested_blocks_issue1088] FAILED [ 29%]
[ 3117s] tests/test_functional.py::test_functional[deprecated_methods_py38] FAILED [ 29%]
[ 3122s] tests/test_functional.py::test_functional[dangerous_default_value_py30] FAILED [ 29%]
[ 3126s] tests/test_functional.py::test_functional[duplicate_except] FAILED       [ 29%]
[ 3130s] tests/test_functional.py::test_functional[disable_msg_github_issue_1389] FAILED [ 29%]
[ 3134s] tests/test_functional.py::test_functional[deprecated_module_py36] FAILED [ 29%]
[ 3137s] tests/test_functional.py::test_functional[docstrings] FAILED             [ 29%]
[ 3141s] tests/test_functional.py::test_functional[duplicate_bases] FAILED        [ 30%]
[ 3145s] tests/test_functional.py::test_functional[disable_wrong_import_position] FAILED [ 30%]
[ 3150s] tests/test_functional.py::test_functional[duplicate_argument_name_py3] FAILED [ 30%]
[ 3154s] tests/test_functional.py::test_functional[disable_wrong_import_order] FAILED [ 30%]
[ 3157s] tests/test_functional.py::test_functional[duplicate_argument_name] FAILED [ 30%]
[ 3160s] tests/test_functional.py::test_functional[duplicate_dict_literal_key] FAILED [ 30%]
[ 3163s] tests/test_functional.py::test_functional[deprecated_module_uninstalled] FAILED [ 30%]
[ 3167s] tests/test_functional.py::test_functional[dict_iter_missing_items] FAILED [ 30%]
[ 3190s] tests/test_functional.py::test_functional[deprecated_module_py4] FAILED  [ 30%]
[ 3192s] tests/test_functional.py::test_functional[deprecated_method_getmoduleinfo] SKIPPED [ 30%]
[ 3198s] tests/test_functional.py::test_functional[deprecated_methods_py36] FAILED [ 30%]
[ 3201s] tests/test_functional.py::test_functional[disable_ungrouped_imports] FAILED [ 31%]
[ 3203s] tests/test_functional.py::test_functional[deprecated_methods_py3] SKIPPED [ 31%]
[ 3205s] tests/test_functional.py::test_functional[deprecated_module_py3] SKIPPED [ 31%]
[ 3209s] tests/test_functional.py::test_functional[duplicate_string_formatting_argument] FAILED [ 31%]
[ 3213s] tests/test_functional.py::test_functional[defined_and_used_on_same_line] FAILED [ 31%]
[ 3216s] tests/test_functional.py::test_functional[too_many_arguments_issue_1045] FAILED [ 31%]
[ 3220s] tests/test_functional.py::test_functional[too_many_branches] FAILED      [ 31%]
[ 3224s] tests/test_functional.py::test_functional[too_many_ancestors] FAILED     [ 31%]
[ 3228s] tests/test_functional.py::test_functional[too_many_nested_blocks] FAILED [ 31%]
[ 3231s] tests/test_functional.py::test_functional[too_many_public_methods] FAILED [ 31%]
[ 3235s] tests/test_functional.py::test_functional[too_many_instance_attributes] FAILED [ 31%]
[ 3239s] tests/test_functional.py::test_functional[too_many_statements] FAILED    [ 31%]
[ 3243s] tests/test_functional.py::test_functional[too_many_locals] FAILED        [ 32%]
[ 3248s] tests/test_functional.py::test_functional[too_few_public_methods_37] FAILED [ 32%]
[ 3253s] tests/test_functional.py::test_functional[too_many_return_statements] FAILED [ 32%]
[ 3257s] tests/test_functional.py::test_functional[too_few_public_methods] FAILED [ 32%]
[ 3262s] tests/test_functional.py::test_functional[too_many_lines] FAILED         [ 32%]
[ 3266s] tests/test_functional.py::test_functional[too_many_star_expressions] FAILED [ 32%]
[ 3270s] tests/test_functional.py::test_functional[too_many_arguments_overload] FAILED [ 32%]
[ 3274s] tests/test_functional.py::test_functional[too_many_lines_disabled] FAILED [ 32%]
[ 3278s] tests/test_functional.py::test_functional[too_many_boolean_expressions] FAILED [ 32%]
[ 3283s] tests/test_functional.py::test_functional[too_many_arguments] FAILED     [ 32%]
[ 3287s] tests/test_functional.py::test_functional[used_before_assignment_488] FAILED [ 32%]
[ 3292s] tests/test_functional.py::test_functional[unpacking_non_sequence] FAILED [ 32%]
[ 3296s] tests/test_functional.py::test_functional[unnecessary_lambda] FAILED     [ 33%]
[ 3299s] tests/test_functional.py::test_functional[unknown_encoding_jython] SKIPPED [ 33%]
[ 3303s] tests/test_functional.py::test_functional[unused_variable] FAILED        [ 33%]
[ 3307s] tests/test_functional.py::test_functional[unused_variable_py36] FAILED   [ 33%]
[ 3311s] tests/test_functional.py::test_functional[unsubscriptable_value] FAILED  [ 33%]
[ 3315s] tests/test_functional.py::test_functional[uninferable_all_object] FAILED [ 33%]
[ 3318s] tests/test_functional.py::test_functional[unnecessary_comprehension] FAILED [ 33%]
[ 3322s] tests/test_functional.py::test_functional[useless_else_on_loop] FAILED   [ 33%]
[ 3326s] tests/test_functional.py::test_functional[undefined_variable] FAILED     [ 33%]
[ 3330s] tests/test_functional.py::test_functional[unneeded_not] FAILED           [ 33%]
[ 3334s] tests/test_functional.py::test_functional[unbalanced_tuple_unpacking] FAILED [ 33%]
[ 3339s] tests/test_functional.py::test_functional[used_before_assignment_issue853] FAILED [ 33%]
[ 3343s] tests/test_functional.py::test_functional[using_constant_test] FAILED    [ 34%]
[ 3347s] tests/test_functional.py::test_functional[used_before_assignment_issue1081] FAILED [ 34%]
[ 3351s] tests/test_functional.py::test_functional[unused_import] FAILED          [ 34%]
[ 3353s] tests/test_functional.py::test_functional[unpacked_exceptions] SKIPPED   [ 34%]
[ 3357s] tests/test_functional.py::test_functional[unnecessary_pass] FAILED       [ 34%]
[ 3360s] tests/test_functional.py::test_functional[useless_return] FAILED         [ 34%]
[ 3364s] tests/test_functional.py::test_functional[unused_global_variable4] FAILED [ 34%]
[ 3368s] tests/test_functional.py::test_functional[used_prior_global_declaration] FAILED [ 34%]
[ 3372s] tests/test_functional.py::test_functional[useless-import-alias] FAILED   [ 34%]
[ 3376s] tests/test_functional.py::test_functional[undefined_loop_variable] FAILED [ 34%]
[ 3380s] tests/test_functional.py::test_functional[unpacking] FAILED              [ 34%]
[ 3384s] tests/test_functional.py::test_functional[unreachable] FAILED            [ 34%]
[ 3401s] tests/test_functional.py::test_functional[unused_import_everything_disabled] FAILED [ 35%]
[ 3405s] tests/test_functional.py::test_functional[unexpected_special_method_signature] FAILED [ 35%]
[ 3410s] tests/test_functional.py::test_functional[unused_global_variable2] FAILED [ 35%]
[ 3412s] tests/test_functional.py::test_functional[unknown_encoding_py29] SKIPPED [ 35%]
[ 3416s] tests/test_functional.py::test_functional[used_before_assignment_nonlocal] FAILED [ 35%]
[ 3420s] tests/test_functional.py::test_functional[unsupported_delete_operation] FAILED [ 35%]
[ 3424s] tests/test_functional.py::test_functional[unsubscriptable_value_py37] FAILED [ 35%]
[ 3427s] tests/test_functional.py::test_functional[unused_import_positional_only_py38] FAILED [ 35%]
[ 3431s] tests/test_functional.py::test_functional[unrecognized_inline_option] FAILED [ 35%]
[ 3435s] tests/test_functional.py::test_functional[unsupported_assignment_operation] FAILED [ 35%]
[ 3439s] tests/test_functional.py::test_functional[ungrouped_imports_isort_compatible] FAILED [ 35%]
[ 3442s] tests/test_functional.py::test_functional[unused_global_variable1] FAILED [ 35%]
[ 3446s] tests/test_functional.py::test_functional[useless_super_delegation] FAILED [ 36%]
[ 3448s] tests/test_functional.py::test_functional[unsupported_binary_operation] SKIPPED [ 36%]
[ 3452s] tests/test_functional.py::test_functional[useless_super_delegation_py38] FAILED [ 36%]
[ 3455s] tests/test_functional.py::test_functional[unused_import_assigned_to] FAILED [ 36%]
[ 3460s] tests/test_functional.py::test_functional[unused_global_variable3] FAILED [ 36%]
[ 3464s] tests/test_functional.py::test_functional[unhashable_dict_key] FAILED    [ 36%]
[ 3467s] tests/test_functional.py::test_functional[unidiomatic_typecheck] FAILED  [ 36%]
[ 3471s] tests/test_functional.py::test_functional[unbalanced_tuple_unpacking_py30] FAILED [ 36%]
[ 3474s] tests/test_functional.py::test_functional[undefined_variable_py30] FAILED [ 36%]
[ 3478s] tests/test_functional.py::test_functional[unused_argument] FAILED        [ 36%]
[ 3481s] tests/test_functional.py::test_functional[unused_argument_py3] FAILED    [ 36%]
[ 3484s] tests/test_functional.py::test_functional[ungrouped_imports] FAILED      [ 36%]
[ 3489s] tests/test_functional.py::test_functional[unpacking_generalizations] FAILED [ 37%]
[ 3492s] tests/test_functional.py::test_functional[useless_super_delegation_py3] FAILED [ 37%]
[ 3496s] tests/test_functional.py::test_functional[useless_super_delegation_py35] FAILED [ 37%]
[ 3500s] tests/test_functional.py::test_functional[useless_object_inheritance] FAILED [ 37%]
[ 3503s] tests/test_functional.py::test_functional[arguments] FAILED              [ 37%]
[ 3507s] tests/test_functional.py::test_functional[access_to__name__] FAILED      [ 37%]
[ 3510s] tests/test_functional.py::test_functional[attribute_defined_outside_init] FAILED [ 37%]
[ 3515s] tests/test_functional.py::test_functional[access_to_protected_members] FAILED [ 37%]
[ 3518s] tests/test_functional.py::test_functional[abstract_class_instantiated_py34] FAILED [ 37%]
[ 3521s] tests/test_functional.py::test_functional[abstract_method_py3] FAILED    [ 37%]
[ 3525s] tests/test_functional.py::test_functional[assert_on_tuple] FAILED        [ 37%]
[ 3528s] tests/test_functional.py::test_functional[assignment_from_no_return_py3] FAILED [ 37%]
[ 3531s] tests/test_functional.py::test_functional[arguments_out_of_order] FAILED [ 38%]
[ 3534s] tests/test_functional.py::test_functional[arguments_differ] FAILED       [ 38%]
[ 3538s] tests/test_functional.py::test_functional[abstract_abc_methods] FAILED   [ 38%]
[ 3542s] tests/test_functional.py::test_functional[anomalous_unicode_escape_py3] FAILED [ 38%]
[ 3545s] tests/test_functional.py::test_functional[access_member_before_definition] FAILED [ 38%]
[ 3549s] tests/test_functional.py::test_functional[abstract_class_instantiated_py3] FAILED [ 38%]
[ 3553s] tests/test_functional.py::test_functional[abstract_class_instantiated_in_class] FAILED [ 38%]
[ 3556s] tests/test_functional.py::test_functional[assert_on_string_literal] FAILED [ 38%]
[ 3560s] tests/test_functional.py::test_functional[arguments_differ_py3] FAILED   [ 38%]
[ 3563s] tests/test_functional.py::test_functional[async_functions] FAILED        [ 38%]
[ 3566s] tests/test_functional.py::test_functional[assignment_from_no_return] FAILED [ 38%]
[ 3570s] tests/test_functional.py::test_functional[assigning_non_slot] FAILED     [ 39%]
[ 3570s] tests/test_import_graph.py::test_dependencies_graph PASSED               [ 39%]
[ 3573s] tests/test_import_graph.py::test_checker_dep_graphs FAILED               [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_simple_pragma PASSED                   [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_disable_checker_with_number_in_name PASSED [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_simple_pragma_no_messages PASSED       [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_simple_pragma_multiple_messages PASSED [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_multiple_pragma_multiple_messages PASSED [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_missing_assignment PASSED              [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_missing_keyword PASSED                 [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_unsupported_assignment PASSED          [ 39%]
[ 3573s] tests/test_pragma_parser.py::test_unknown_keyword_with_messages PASSED   [ 39%]
[ 3574s] tests/test_pragma_parser.py::test_unknown_keyword_without_messages PASSED [ 40%]
[ 3574s] tests/test_pragma_parser.py::test_missing_message PASSED                 [ 40%]
[ 3574s] tests/test_pragma_parser.py::test_parse_message_with_dash PASSED         [ 40%]
[ 3577s] tests/test_pylint_runners.py::test_runner[run_pylint] FAILED             [ 40%]
[ 3593s] tests/test_pylint_runners.py::test_runner[run_epylint] FAILED            [ 40%]
[ 3593s] tests/test_pylint_runners.py::test_runner[run_pyreverse] PASSED          [ 40%]
[ 3593s] tests/test_pylint_runners.py::test_runner[run_symilar] PASSED            [ 40%]
[ 3595s] tests/test_regr.py::test_package[package.__init__-<lambda>] PASSED       [ 40%]
[ 3598s] tests/test_regr.py::test_package[precedence_test-<lambda>] PASSED        [ 40%]
[ 3601s] tests/test_regr.py::test_package[import_package_subpackage_module-<lambda>] PASSED [ 40%]
[ 3606s] tests/test_regr.py::test_package[pylint.checkers.__init__-<lambda>] PASSED [ 40%]
[ 3611s] tests/test_regr.py::test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/classdoc_usage.py-<lambda>] FAILED [ 40%]
[ 3615s] tests/test_regr.py::test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/module_global.py-<lambda>] FAILED [ 41%]
[ 3618s] tests/test_regr.py::test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/decimal_inference.py-<lambda>] FAILED [ 41%]
[ 3622s] tests/test_regr.py::test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/absimp/string.py-<lambda>] FAILED [ 41%]
[ 3625s] tests/test_regr.py::test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/bad_package-<lambda>] FAILED [ 41%]
[ 3629s] tests/test_regr.py::test_crash[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/import_assign.py] FAILED [ 41%]
[ 3632s] tests/test_regr.py::test_crash[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/special_attr_scope_lookup_crash.py] FAILED [ 41%]
[ 3635s] tests/test_regr.py::test_crash[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/try_finally_disable_msg_crash] PASSED [ 41%]
[ 3638s] tests/test_regr.py::test_descriptor_crash[special_attr_scope_lookup_crash.py] FAILED [ 41%]
[ 3641s] tests/test_regr.py::test_descriptor_crash[descriptor_crash.py] FAILED    [ 41%]
[ 3644s] tests/test_regr.py::test_descriptor_crash[application_crash.py] FAILED   [ 41%]
[ 3648s] tests/test_regr.py::test_descriptor_crash[try_finally_disable_msg_crash.py] FAILED [ 41%]
[ 3650s] tests/test_regr.py::test_check_package___init__ PASSED                   [ 41%]
[ 3655s] tests/test_regr.py::test_pylint_config_attr PASSED                       [ 42%]
[ 3658s] tests/test_self.py::TestRunTC::test_pkginfo PASSED                       [ 42%]
[ 3664s] tests/test_self.py::TestRunTC::test_all FAILED                           [ 42%]
[ 3668s] tests/test_self.py::TestRunTC::test_no_ext_file FAILED                   [ 42%]
[ 3673s] tests/test_self.py::TestRunTC::test_w0704_ignored FAILED                 [ 42%]
[ 3678s] tests/test_self.py::TestRunTC::test_exit_zero FAILED                     [ 42%]
[ 3681s] tests/test_self.py::TestRunTC::test_generate_config_option PASSED        [ 42%]
[ 3687s] tests/test_self.py::TestRunTC::test_generate_config_option_order PASSED  [ 42%]
[ 3689s] tests/test_self.py::TestRunTC::test_generate_config_disable_symbolic_names PASSED [ 42%]
[ 3692s] tests/test_self.py::TestRunTC::test_generate_rcfile_no_obsolete_methods PASSED [ 42%]
[ 3695s] tests/test_self.py::TestRunTC::test_inexisting_rcfile PASSED             [ 42%]
[ 3697s] tests/test_self.py::TestRunTC::test_help_message_option PASSED           [ 42%]
[ 3700s] tests/test_self.py::TestRunTC::test_error_help_message_option PASSED     [ 43%]
[ 3703s] tests/test_self.py::TestRunTC::test_error_missing_arguments PASSED       [ 43%]
[ 3714s] tests/test_self.py::TestRunTC::test_no_out_encoding FAILED               [ 43%]
[ 3720s] tests/test_self.py::TestRunTC::test_parallel_execution FAILED            [ 43%]
[ 3723s] tests/test_self.py::TestRunTC::test_parallel_execution_missing_arguments PASSED [ 43%]
[ 3737s] tests/test_self.py::TestRunTC::test_py3k_option FAILED                   [ 43%]
[ 3750s] tests/test_self.py::TestRunTC::test_py3k_jobs_option FAILED              [ 43%]
[ 3753s] tests/test_self.py::TestRunTC::test_abbreviations_are_not_supported PASSED [ 43%]
[ 3775s] tests/test_self.py::TestRunTC::test_enable_all_works FAILED              [ 43%]
[ 3786s] tests/test_self.py::TestRunTC::test_wrong_import_position_when_others_disabled FAILED [ 43%]
[ 3791s] tests/test_self.py::TestRunTC::test_import_itself_not_accounted_for_relative_imports FAILED [ 43%]
[ 3793s] tests/test_self.py::TestRunTC::test_reject_empty_indent_strings PASSED   [ 43%]
[ 3798s] tests/test_self.py::TestRunTC::test_json_report_when_file_has_syntax_error FAILED [ 44%]
[ 3801s] tests/test_self.py::TestRunTC::test_json_report_when_file_is_missing PASSED [ 44%]
[ 3808s] tests/test_self.py::TestRunTC::test_json_report_does_not_escape_quotes FAILED [ 44%]
[ 3812s] tests/test_self.py::TestRunTC::test_information_category_disabled_by_default FAILED [ 44%]
[ 3846s] tests/test_self.py::TestRunTC::test_error_mode_shows_no_score FAILED     [ 44%]
[ 3851s] tests/test_self.py::TestRunTC::test_evaluation_score_shown_by_default FAILED [ 44%]
[ 3857s] tests/test_self.py::TestRunTC::test_confidence_levels FAILED             [ 44%]
[ 3863s] tests/test_self.py::TestRunTC::test_bom_marker FAILED                    [ 44%]
[ 3867s] tests/test_self.py::TestRunTC::test_pylintrc_plugin_duplicate_options PASSED [ 44%]
[ 3877s] tests/test_self.py::TestRunTC::test_pylintrc_comments_in_values FAILED   [ 44%]
[ 3879s] tests/test_self.py::TestRunTC::test_no_crash_with_formatting_regex_defaults PASSED [ 44%]
[ 3894s] tests/test_self.py::TestRunTC::test_getdefaultencoding_crashes_with_lc_ctype_utf8 FAILED [ 44%]
[ 3898s] tests/test_self.py::TestRunTC::test_parseable_file_path FAILED           [ 45%]
[ 3914s] tests/test_self.py::TestRunTC::test_stdin[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/mymodule.py-mymodule-/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/mymodule.py] PASSED [ 45%]
[ 3921s] tests/test_self.py::TestRunTC::test_stdin[mymodule.py-mymodule-mymodule.py] PASSED [ 45%]
[ 3924s] tests/test_self.py::TestRunTC::test_stdin_missing_modulename PASSED      [ 45%]
[ 3932s] tests/test_self.py::TestRunTC::test_relative_imports[False] PASSED       [ 45%]
[ 3944s] tests/test_self.py::TestRunTC::test_relative_imports[True] FAILED        [ 45%]
[ 3953s] tests/test_self.py::TestRunTC::test_stdin_syntaxerror PASSED             [ 45%]
[ 3964s] tests/test_self.py::TestRunTC::test_version PASSED                       [ 45%]
[ 3978s] tests/test_self.py::TestRunTC::test_fail_under FAILED                    [ 45%]
[ 3992s] tests/test_self.py::TestRunTC::test_do_not_import_files_from_local_directory FAILED [ 45%]
[ 3997s] tests/test_self.py::TestRunTC::test_allow_import_of_files_found_in_modules_during_parallel_check FAILED [ 45%]
[ 4002s] tests/test_self.py::TestRunTC::test_jobs_score FAILED                    [ 45%]
[ 4011s] tests/test_self.py::TestRunTC::test_duplicate_code_raw_strings FAILED    [ 46%]
[ 4015s] tests/test_self.py::TestRunTC::test_regression_parallel_mode_without_filepath FAILED [ 46%]
[ 4016s] tests/unittest_config.py::test__regexp_validator_valid PASSED            [ 46%]
[ 4016s] tests/unittest_config.py::test__regexp_validator_invalid PASSED          [ 46%]
[ 4016s] tests/unittest_config.py::test__csv_validator_no_spaces PASSED           [ 46%]
[ 4016s] tests/unittest_config.py::test__csv_validator_spaces PASSED              [ 46%]
[ 4016s] tests/unittest_config.py::test__regexp_csv_validator_valid PASSED        [ 46%]
[ 4016s] tests/unittest_config.py::test__regexp_csv_validator_invalid PASSED      [ 46%]
[ 4016s] tests/unittest_pyreverse_diadefs.py::test_option_values PASSED           [ 46%]
[ 4016s] tests/unittest_pyreverse_diadefs.py::test_default_values PASSED          [ 46%]
[ 4017s] tests/unittest_pyreverse_diadefs.py::TestDefaultDiadefGenerator::test_exctract_relations PASSED [ 46%]
[ 4017s] tests/unittest_pyreverse_diadefs.py::TestDefaultDiadefGenerator::test_functional_relation_extraction PASSED [ 47%]
[ 4018s] tests/unittest_pyreverse_diadefs.py::test_known_values1 PASSED           [ 47%]
[ 4018s] tests/unittest_pyreverse_diadefs.py::test_known_values2 PASSED           [ 47%]
[ 4018s] tests/unittest_pyreverse_diadefs.py::test_known_values3 PASSED           [ 47%]
[ 4018s] tests/unittest_pyreverse_diadefs.py::test_known_values4 PASSED           [ 47%]
[ 4018s] tests/unittest_pyreverse_diadefs.py::test_regression_dataclasses_inference PASSED [ 47%]
[ 4019s] tests/unittest_pyreverse_inspector.py::test_class_implements PASSED      [ 47%]
[ 4019s] tests/unittest_pyreverse_inspector.py::test_class_implements_specialization PASSED [ 47%]
[ 4019s] tests/unittest_pyreverse_inspector.py::test_locals_assignment_resolution PASSED [ 47%]
[ 4020s] tests/unittest_pyreverse_inspector.py::test_instance_attrs_resolution PASSED [ 47%]
[ 4020s] tests/unittest_pyreverse_inspector.py::test_concat_interfaces PASSED     [ 47%]
[ 4020s] tests/unittest_pyreverse_inspector.py::test_interfaces PASSED            [ 47%]
[ 4020s] tests/unittest_pyreverse_inspector.py::test_from_directory PASSED        [ 48%]
[ 4021s] tests/unittest_pyreverse_inspector.py::test_project_node PASSED          [ 48%]
[ 4021s] tests/unittest_pyreverse_writer.py::test_dot_files[packages_No_Name.dot] PASSED [ 48%]
[ 4021s] tests/unittest_pyreverse_writer.py::test_dot_files[classes_No_Name.dot] PASSED [ 48%]
[ 4021s] tests/unittest_pyreverse_writer.py::test_get_visibility[names0-special] PASSED [ 48%]
[ 4021s] tests/unittest_pyreverse_writer.py::test_get_visibility[names1-private] PASSED [ 48%]
[ 4022s] tests/unittest_pyreverse_writer.py::test_get_visibility[names2-public] PASSED [ 48%]
[ 4022s] tests/unittest_pyreverse_writer.py::test_get_visibility[names3-protected] PASSED [ 48%]
[ 4024s] tests/unittest_reporters_json.py::test_simple_json_output_no_score PASSED [ 48%]
[ 4025s] tests/unittest_reporting.py::test_template_option PASSED                 [ 48%]
[ 4026s] tests/unittest_reporting.py::test_parseable_output_deprecated PASSED     [ 48%]
[ 4028s] tests/unittest_reporting.py::test_parseable_output_regression PASSED     [ 48%]
[ 4028s] tests/unittest_reporting.py::test_display_results_is_renamed PASSED      [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_missing_docstring_module PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_missing_docstring_empty_module PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_empty_docstring_module PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_empty_docstring_function PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_short_function_no_docstring PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_long_function_no_docstring PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_long_function_nested_statements_no_docstring PASSED [ 49%]
[ 4028s] tests/checkers/unittest_base.py::TestDocstring::test_function_no_docstring_by_name PASSED [ 49%]
[ 4029s] tests/checkers/unittest_base.py::TestDocstring::test_class_no_docstring PASSED [ 49%]
[ 4029s] tests/checkers/unittest_base.py::TestDocstring::test_inner_function_no_docstring PASSED [ 49%]
[ 4029s] tests/checkers/unittest_base.py::TestNameChecker::test_property_names PASSED [ 49%]
[ 4029s] tests/checkers/unittest_base.py::TestNameChecker::test_property_setters PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestNameChecker::test_module_level_names PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestNameChecker::test_assign_to_new_keyword_py3 SKIPPED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestMultiNamingStyle::test_multi_name_detection_majority PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestMultiNamingStyle::test_multi_name_detection_first_invalid PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestMultiNamingStyle::test_multi_name_detection_group PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestMultiNamingStyle::test_multi_name_detection_exempt PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestComparison::test_comparison PASSED  [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestNamePresets::test_camel_case PASSED [ 50%]
[ 4029s] tests/checkers/unittest_base.py::TestNamePresets::test_pascal_case PASSED [ 50%]
[ 4030s] tests/checkers/unittest_base.py::TestNamePresets::test_snake_case PASSED [ 50%]
[ 4030s] tests/checkers/unittest_base.py::TestNamePresets::test_upper_case PASSED [ 50%]
[ 4030s] tests/checkers/unittest_base.py::TestBaseChecker::test_doc PASSED        [ 51%]
[ 4030s] tests/checkers/unittest_classes.py::TestVariablesChecker::test_bitbucket_issue_164 PASSED [ 51%]
[ 4030s] tests/checkers/unittest_classes.py::TestVariablesChecker::test_exclude_protected PASSED [ 51%]
[ 4031s] tests/checkers/unittest_classes.py::TestVariablesChecker::test_regression_non_parent_init_called_tracemalloc PASSED [ 51%]
[ 4033s] tests/checkers/unittest_classes.py::TestVariablesChecker::test_super_init_not_called_regression PASSED [ 51%]
[ 4033s] tests/checkers/unittest_classes.py::TestVariablesChecker::test_uninferable_attribute PASSED [ 51%]
[ 4033s] tests/checkers/unittest_exceptions.py::TestExceptionsChecker::test_raising_bad_type_python3 PASSED [ 51%]
[ 4033s] tests/checkers/unittest_exceptions.py::TestExceptionsChecker::test_bad_exception_context_function PASSED [ 51%]
[ 4033s] tests/checkers/unittest_format.py::TestMultiStatementLine::testSingleLineIfStmts PASSED [ 51%]
[ 4034s] tests/checkers/unittest_format.py::TestMultiStatementLine::testSingleLineClassStmts PASSED [ 51%]
[ 4034s] tests/checkers/unittest_format.py::TestMultiStatementLine::testTryExceptFinallyNoMultipleStatement PASSED [ 51%]
[ 4037s] tests/checkers/unittest_format.py::TestMultiStatementLine::test_ellipsis_is_ignored PASSED [ 51%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testCheckKeywordParensHandlesValidCases PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testCheckKeywordParensHandlesUnnecessaryParens PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testNoSuperfluousParensWalrusOperatorIf PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testPositiveSuperfluousParensWalrusOperatorIf PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testNoSuperfluousParensWalrusOperatorNot PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testCheckIfArgsAreNotUnicode PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testFuturePrintStatementWithoutParensWarning PASSED [ 52%]
[ 4037s] tests/checkers/unittest_format.py::TestSuperfluousParentheses::testKeywordParensFalsePositive PASSED [ 52%]
[ 4038s] tests/checkers/unittest_format.py::TestCheckSpace::test_encoding_token PASSED [ 52%]
[ 4039s] tests/checkers/unittest_format.py::test_disable_global_option_end_of_line FAILED [ 52%]
[ 4040s] tests/checkers/unittest_imports.py::TestImportsChecker::test_import_error_skipped PASSED [ 52%]
[ 4040s] tests/checkers/unittest_imports.py::TestImportsChecker::test_reimported_same_line PASSED [ 52%]
[ 4040s] tests/checkers/unittest_imports.py::TestImportsChecker::test_relative_beyond_top_level PASSED [ 53%]
[ 4040s] tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_init PASSED [ 53%]
[ 4040s] tests/checkers/unittest_imports.py::TestImportsChecker::test_wildcard_import_non_init PASSED [ 53%]
[ 4040s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_detects_standard_logging_module PASSED [ 53%]
[ 4040s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_dont_crash_on_invalid_format_string PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_detects_renamed_standard_logging_module PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_nonstandard_logging_module PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_brace_format_style_matching_arguments PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_brace_format_style_too_few_args PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_brace_format_style_not_enough_arguments PASSED [ 53%]
[ 4041s] tests/checkers/unittest_logging.py::TestLoggingModuleDetection::test_fstr_not_new_format_style_matching_arguments PASSED [ 53%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_fixme_with_message PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_todo_without_message PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_xxx_without_space PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_xxx_middle PASSED       [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_without_space_fixme PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_absent_codetag PASSED   [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_other_present_codetag PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_not_trigger PASSED [ 54%]
[ 4041s] tests/checkers/unittest_misc.py::TestFixme::test_issue_2321_should_trigger PASSED [ 54%]
[ 4042s] tests/checkers/unittest_misc.py::TestFixme::test_dont_trigger_on_todoist PASSED [ 54%]
[ 4042s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_subclasses_methods_in_iterating_context PASSED [ 54%]
[ 4042s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_methods_in_iterating_context PASSED [ 54%]
[ 4043s] tests/checkers/unittest_python3.py::TestPython3Checker::test_map_in_iterating_context PASSED [ 55%]
[ 4043s] tests/checkers/unittest_python3.py::TestPython3Checker::test_zip_in_iterating_context PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_range_in_iterating_context PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_filter_in_iterating_context PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_delslice_method PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_getslice_method PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_setslice_method PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_coerce_method PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_oct_method PASSED [ 55%]
[ 4044s] tests/checkers/unittest_python3.py::TestPython3Checker::test_hex_method PASSED [ 55%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_nonzero_method PASSED [ 55%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_cmp_method PASSED [ 55%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_div_method PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_idiv_method PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_rdiv_method PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_eq_and_hash_method PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_eq_and_hash_is_none PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_eq_without_hash_method PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_relative_import PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_relative_from_import PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_absolute_import PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_import_star_module_level PASSED [ 56%]
[ 4045s] tests/checkers/unittest_python3.py::TestPython3Checker::test_division PASSED [ 56%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_division_with_future_statement PASSED [ 56%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_floor_division PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_division_by_float PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_division_different_types PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_iter_method PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_iter_method_on_dict PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_not_iter_method PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_view_method PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_dict_viewkeys PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_method PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_not_next_method PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_metaclass_assignment PASSED [ 57%]
[ 4046s] tests/checkers/unittest_python3.py::TestPython3Checker::test_metaclass_global_assignment PASSED [ 57%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_xreadlines_attribute PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_exception_message_attribute PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_normal_message_attribute PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_invalid_codec PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_valid_codec PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_visit_call_with_kwarg PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_invalid_open_codec PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_valid_open_codec PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_using_cmp_argument PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_sys_maxint PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_itertools_izip PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_deprecated_types_fields PASSED [ 58%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_sys_maxint_imort_from PASSED [ 59%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_object_maxint PASSED [ 59%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import PASSED [ 59%]
[ 4047s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_turtle PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_dbm PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_conditional PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_try_except_handler PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_try PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_try_finally PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_import_from PASSED [ 59%]
[ 4048s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_string_attribute PASSED [ 59%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_operator_attribute PASSED [ 59%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_comprehension_escape PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_comprehension_escape_newly_introduced PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_exception_escape PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_sys_attribute PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_urllib_attribute PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_string_attribute PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_string_call PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_shadowed_call PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_string_call PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_string_import_from PASSED [ 60%]
[ 4049s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_string_import_from PASSED [ 60%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_str_translate_call_string_literal PASSED [ 60%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_str_translate_call_variable PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_bad_str_translate_call_infer_str PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_str_translate_call_integer PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_str_translate_call_keyword PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_ok_str_translate_call_not_str PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_non_py2_conditional PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_six_conditional PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_versioninfo_conditional PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_versioninfo_tuple_conditional PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_six_ifexp_conditional PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_defined PASSED [ 61%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_defined_too_many_args PASSED [ 62%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_defined_static_method_too_many_args PASSED [ 62%]
[ 4050s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_defined_static_method PASSED [ 62%]
[ 4051s] tests/checkers/unittest_python3.py::TestPython3Checker::test_next_defined_class_method PASSED [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_ignore_comments PASSED          [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_ignore_docsrings PASSED         [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_ignore_imports PASSED           [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_multiline_imports PASSED        [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_ignore_multiline_imports PASSED [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_no_hide_code_with_imports PASSED [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_ignore_nothing PASSED           [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_help PASSED                     [ 62%]
[ 4051s] tests/checkers/unittest_similar.py::test_no_args PASSED                  [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_check_bad_coment SKIPPED [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_check_bad_coment_custom_suggestion_count SKIPPED [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_check_bad_docstring SKIPPED [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_invalid_docstring_characters SKIPPED [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_shebangs SKIPPED [ 63%]
[ 4051s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_python_coding_comments SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_top_level_pylint_enable_disable_comments SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_words_with_numbers SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_wiki_words SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_camel_cased_words SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_words_with_underscores SKIPPED [ 63%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_email_address SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_urls SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_skip_sphinx_directives SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_handle_words_joined_by_forward_slash SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_more_than_one_error_in_same_line_for_same_word_on_docstring SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_spelling.py::TestSpellingChecker::test_more_than_one_error_in_same_line_for_same_word_on_comment SKIPPED [ 64%]
[ 4052s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_deprecated_no_qname_on_unexpected_nodes PASSED [ 64%]
[ 4053s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_copy_environ PASSED [ 64%]
[ 4053s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_copy_environ_hidden PASSED [ 64%]
[ 4053s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_copy_dict PASSED [ 64%]
[ 4053s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_copy_uninferable PASSED [ 64%]
[ 4053s] tests/checkers/unittest_stdlib.py::TestStdlibChecker::test_deepcopy_environ PASSED [ 64%]
[ 4053s] tests/checkers/unittest_strings.py::TestStringChecker::test_format_bytes PASSED [ 65%]
[ 4053s] tests/checkers/unittest_strings.py::TestStringChecker::test_format_types PASSED [ 65%]
[ 4053s] tests/checkers/unittest_strings.py::test_str_eval PASSED                 [ 65%]
[ 4054s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_no_member_in_getattr PASSED [ 65%]
[ 4059s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_no_member_in_getattr_ignored PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_modules_invalid_pattern PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_modules_root_one_applies_as_well PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_modules_patterns PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_classes_no_recursive_pattern PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_classes_qualified_name PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_ignored_classes_only_name PASSED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_nomember_on_c_extension_error_msg SKIPPED [ 65%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_nomember_on_c_extension_info_msg SKIPPED [ 66%]
[ 4060s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_custom_context_manager PASSED [ 66%]
[ 4061s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_invalid_metaclass PASSED [ 66%]
[ 4062s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_invalid_metaclass_function_metaclasses PASSED [ 66%]
[ 4062s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_typing_namedtuple_not_callable_issue1295 PASSED [ 66%]
[ 4062s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_typing_namedtuple_unsubscriptable_object_issue1295 PASSED [ 66%]
[ 4064s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_staticmethod_multiprocessing_call PASSED [ 66%]
[ 4064s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_not_callable_uninferable_property PASSED [ 66%]
[ 4064s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_descriptor_call PASSED [ 66%]
[ 4064s] tests/checkers/unittest_typecheck.py::TestTypeChecker::test_unknown_parent PASSED [ 66%]
[ 4064s] tests/checkers/unittest_utils.py::testIsBuiltin[min-True] PASSED         [ 66%]
[ 4064s] tests/checkers/unittest_utils.py::testIsBuiltin[__builtins__-True] PASSED [ 66%]
[ 4064s] tests/checkers/unittest_utils.py::testIsBuiltin[__path__-False] PASSED   [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testIsBuiltin[__file__-False] PASSED   [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testIsBuiltin[whatever-False] PASSED   [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testIsBuiltin[mybuiltin-False] PASSED  [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testGetArgumentFromCallError[foo(3)-kw0] PASSED [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testGetArgumentFromCallError[foo(one=a, two=b, three=c)-kw1] PASSED [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testGetArgumentFromCallExists[foo(bar=3)-kw0] PASSED [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testGetArgumentFromCallExists[foo(a, b, c)-kw1] PASSED [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::testGetArgumentFromCall PASSED         [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::test_error_of_type PASSED              [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::test_node_ignores_exception PASSED     [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::test_is_subclass_of_node_b_derived_from_node_a PASSED [ 67%]
[ 4065s] tests/checkers/unittest_utils.py::test_is_subclass_of_node_b_not_derived_from_node_a PASSED [ 68%]
[ 4065s] tests/checkers/unittest_utils.py::test_is_subclass_of_not_classdefs PASSED [ 68%]
[ 4065s] tests/checkers/unittest_utils.py::test_parse_format_method_string PASSED [ 68%]
[ 4069s] tests/checkers/unittest_utils.py::test_inherit_from_std_ex_recursive_definition PASSED [ 68%]
[ 4069s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_simple PASSED [ 68%]
[ 4069s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_if_simple PASSED [ 68%]
[ 4069s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_if_elseif_else PASSED [ 68%]
[ 4069s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_while PASSED [ 68%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_while_else PASSED [ 68%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_for PASSED   [ 68%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_for_else PASSED [ 68%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_try PASSED   [ 68%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_else PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_finally PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_try_except_else_finally PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_with PASSED  [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_method PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_decorator PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_class PASSED [ 69%]
[ 4070s] tests/checkers/unittest_utils.py::test_get_node_last_lineno_combined PASSED [ 69%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_bitbucket_issue_78 PASSED [ 69%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_no_name_in_module_skipped PASSED [ 69%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_all_elements_without_parent PASSED [ 69%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_ignored PASSED [ 70%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_custom_modules PASSED [ 70%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_modname_not_ignored PASSED [ 70%]
[ 4070s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_redefined_builtin_in_function PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_unassigned_global PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_listcomp_in_decorator PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_listcomp_in_ancestors PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesChecker::test_return_type_annotation PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_custom_callback_string PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_redefined_builtin_modname_not_ignored PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_redefined_builtin_in_function PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_import_as_underscore PASSED [ 70%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_lambda_in_classdef PASSED [ 71%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_nested_lambda PASSED [ 71%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_ignored_argument_names_no_message PASSED [ 71%]
[ 4071s] tests/checkers/unittest_variables.py::TestVariablesCheckerWithTearDown::test_ignored_argument_names_starred_args PASSED [ 71%]
[ 4073s] tests/checkers/unittest_variables.py::TestMissingSubmodule::test_package_all FAILED [ 71%]
[ 4077s] tests/extensions/test_bad_builtin.py::test_types_redefined FAILED        [ 71%]
[ 4081s] tests/extensions/test_broad_try_clause.py::BroadTryClauseTC::test_broad_try_clause_message FAILED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_sphinx_docstring PASSED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_google_docstring PASSED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_type_doc_google_docstring_exempt_kwonly_args PASSED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_annotations_in_google_docstring PASSED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_default_arg_with_annotations_in_google_docstring PASSED [ 71%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_with_partial_annotations_in_google_docstring PASSED [ 72%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_in_google_docstring PASSED [ 72%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_builtin_annotations_for_returntype_in_google_docstring PASSED [ 72%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_keyword_params_in_google_docstring PASSED [ 72%]
[ 4081s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_func_params_and_wrong_keyword_params_in_google_docstring PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_func_params_in_numpy_docstring PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_tolerate_no_param_documentation_at_all PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_don_t_tolerate_no_param_documentation_at_all PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_tolerate_no_param_documentation_at_all PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_sphinx_docstring PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_google_docstring PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_missing_method_params_in_numpy_docstring PASSED [ 72%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_sphinx_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_google_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_existing_func_params_in_numpy_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_sphinx_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_google_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_wrong_name_of_func_params_in_numpy_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_sphinx_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_google_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_func_params_in_numpy_docstring PASSED [ 73%]
[ 4082s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_sphinx PASSED [ 73%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_google PASSED [ 73%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_numpy PASSED [ 73%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_and_attributes_in_class_numpy PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_sphinx PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_google PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_init_numpy PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_class PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_see_sentence_for_constr_params_in_init PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_sphinx PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_google PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_constr_params_in_class_and_init_numpy PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_kwonlyargs_are_taken_in_account PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_sphinx PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_sphinx PASSED [ 74%]
[ 4083s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_google PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_google PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_args_numpy PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_warns_missing_kwargs_numpy PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_sphinx PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_sphinx PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_google PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_google PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_without_type_numpy PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_google PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_args_with_xref_type_numpy PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_kwargs_without_type_numpy PASSED [ 75%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str,str)] PASSED [ 76%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str,str]] PASSED [ 76%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int)] PASSED [ 76%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[list[tokenize.TokenInfo]] PASSED [ 76%]
[ 4084s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict(str, str)] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[dict[str, str]] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[int or str] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int or str)] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int) or list(int)] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_sphinx[tuple(int or str) or list(int or str)] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str,str)] PASSED [ 76%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str,str]] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int)] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[list[tokenize.TokenInfo]] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict(str, str)] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[dict[str, str]] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[int or str] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int or str)] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int) or list(int)] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_google[tuple(int or str) or list(int or str)] PASSED [ 77%]
[ 4085s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str,str)] PASSED [ 77%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str,str]] PASSED [ 77%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int)] PASSED [ 77%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[list[tokenize.TokenInfo]] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict(str, str)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[dict[str, str]] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[int or str] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int or str)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int) or list(int)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_multiple_types_numpy[tuple(int or str) or list(int or str)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict(str,str)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[dict[str,str]] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[tuple(int)] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_compact_container_types_sphinx[list[tokenize.TokenInfo]] PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_google PASSED [ 78%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_optional_specifier_numpy PASSED [ 79%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_short_name_exception PASSED [ 79%]
[ 4086s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_sphinx PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_in_setter_sphinx PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_google_2 PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_raises_from_setter_numpy_2 PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_sphinx PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_google PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_property_return_type_numpy PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_sphinx PASSED [ 79%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_sphinx PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_annotation_property_return_type_google PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_google PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_finds_missing_property_return_type_numpy PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_sphinx PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_google PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_non_property_return_type_numpy PASSED [ 80%]
[ 4087s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_non_property_annotation_return_type_numpy PASSED [ 80%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_sphinx PASSED [ 80%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google PASSED [ 80%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy PASSED [ 80%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_raise_notimplementederror_sphinx PASSED [ 80%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_google_2 PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs.py::TestParamDocChecker::test_ignores_return_in_abstract_method_numpy_2 PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_space_indentation[abc-0] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_space_indentation[-0] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_space_indentation[  abc-2] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_space_indentation[\n  abc-0] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_space_indentation[   \n  abc-3] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node0-expected0] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node1-expected1] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node2-expected2] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node3-expected3] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node4-expected4] PASSED [ 81%]
[ 4088s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node5-expected5] PASSED [ 82%]
[ 4089s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node6-expected6] PASSED [ 82%]
[ 4089s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node7-expected7] PASSED [ 82%]
[ 4089s] tests/extensions/test_check_docs_utils.py::test_exception[raise_node8-expected8] PASSED [ 82%]
[ 4097s] tests/extensions/test_check_mccabe.py::test_max_mccabe_rate[0-expected0] FAILED [ 82%]
[ 4107s] tests/extensions/test_check_mccabe.py::test_max_mccabe_rate[9-expected1] FAILED [ 82%]
[ 4107s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_no_docstring PASSED [ 82%]
[ 4107s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_unknown_style PASSED [ 82%]
[ 4107s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_warns_unknown_style PASSED [ 82%]
[ 4107s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_missing_sphinx_raises PASSED [ 82%]
[ 4107s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_missing_google_raises PASSED [ 82%]
[ 4108s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_google_attr_raises_exact_exc PASSED [ 82%]
[ 4108s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_google_attr_raises_substr_exc PASSED [ 83%]
[ 4108s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_valid_missing_google_attr_raises PASSED [ 83%]
[ 4108s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_invalid_missing_google_attr_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_google_raises_local_reference PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_google_raises_with_prefix PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_missing_numpy_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignore_spurious_sphinx_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_all_sphinx_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_all_google_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_all_numpy_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_multiple_sphinx_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_multiple_google_raises PASSED [ 83%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_finds_rethrown_sphinx_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_rethrown_google_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_rethrown_numpy_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_finds_rethrown_sphinx_multiple_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_rethrown_google_multiple_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_rethrown_numpy_multiple_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_caught_sphinx_raises PASSED [ 84%]
[ 4109s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_caught_google_raises PASSED [ 84%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_caught_numpy_raises PASSED [ 84%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_numpy_attr_raises_exact_exc PASSED [ 84%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_numpy_attr_raises_substr_exc PASSED [ 84%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_valid_missing_numpy_attr_raises PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_invalid_missing_numpy_attr_raises PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_numpy_raises_with_prefix PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_missing_sphinx_raises_infer_from_instance PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_missing_sphinx_raises_infer_from_function PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_sphinx_attr_raises_exact_exc PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_sphinx_attr_raises_substr_exc PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_valid_missing_sphinx_attr_raises PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_find_invalid_missing_sphinx_attr_raises PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_sphinx_raises_with_prefix PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_raise_uninferable PASSED [ 85%]
[ 4110s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_returns_from_inner_functions PASSED [ 85%]
[ 4111s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_returns_use_only_names PASSED [ 86%]
[ 4111s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_ignores_returns_use_only_exception_instances PASSED [ 86%]
[ 4111s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_no_crash_when_inferring_handlers PASSED [ 86%]
[ 4111s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_no_crash_when_cant_find_exception PASSED [ 86%]
[ 4111s] tests/extensions/test_check_raise_docs.py::TestDocstringCheckerRaise::test_no_error_notimplemented_documented PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_no_docstring PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_no_docstring PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_unknown_style PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_partial_sphinx_returns PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_sphinx_missing_return_type_with_annotations PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_partial_sphinx_returns_type PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_missing_sphinx_returns PASSED [ 86%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_partial_google_returns PASSED [ 87%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_partial_google_returns_type PASSED [ 87%]
[ 4111s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_missing_google_returns PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_partial_numpy_returns_type PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warn_missing_numpy_returns PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_find_sphinx_returns PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_find_google_returns PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_find_numpy_returns PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_find_numpy_returns_with_of PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_sphinx_return_none PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_google_return_none PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_numpy_return_none PASSED [ 87%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_sphinx_return_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_google_return_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_numpy_return_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_sphinx_return_list_of_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_google_return_list_of_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_finds_numpy_return_list_of_custom_class PASSED [ 88%]
[ 4112s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_sphinx_return_list_of_custom_class_without_description PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_google_return_list_of_custom_class_without_description PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_numpy_return_list_of_custom_class_without_description PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_sphinx_redundant_return_doc PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_sphinx_redundant_rtype_doc PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_google_redundant_return_doc PASSED [ 88%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_google_redundant_rtype_doc PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_numpy_redundant_return_doc PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_numpy_redundant_rtype_doc PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_sphinx_redundant_return_doc_multiple_returns PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_google_redundant_return_doc_multiple_returns PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignores_numpy_redundant_return_doc_multiple_returns PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_ignore_sphinx_redundant_return_doc_yield PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_google_redundant_return_doc_yield PASSED [ 89%]
[ 4113s] tests/extensions/test_check_return_docs.py::TestDocstringCheckerReturn::test_warns_numpy_redundant_return_doc_yield PASSED [ 89%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_ignores_no_docstring PASSED [ 89%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_no_docstring PASSED [ 89%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_ignores_unknown_style PASSED [ 89%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_partial_sphinx_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_partial_sphinx_yields_type PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_missing_sphinx_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_partial_google_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_partial_google_yields_type PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_missing_google_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warn_missing_numpy_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_find_sphinx_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_find_google_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_find_numpy_yields PASSED [ 90%]
[ 4114s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_sphinx_yield_custom_class PASSED [ 90%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_google_yield_custom_class PASSED [ 90%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_numpy_yield_custom_class PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_sphinx_yield_list_of_custom_class PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_google_yield_list_of_custom_class PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_finds_numpy_yield_list_of_custom_class PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_sphinx_yield_list_of_custom_class_without_description PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_google_yield_list_of_custom_class_without_description PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_numpy_yield_list_of_custom_class_without_description PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_ignores_google_redundant_yield_doc_multiple_yields PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_ignores_numpy_redundant_yield_doc_multiple_yields PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_google_redundant_yield_doc_return PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_warns_numpy_redundant_yield_doc_return PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_sphinx_missing_yield_type_with_annotations PASSED [ 91%]
[ 4115s] tests/extensions/test_check_yields_docs.py::TestDocstringCheckerYield::test_google_missing_yield_type_with_annotations PASSED [ 92%]
[ 4119s] tests/extensions/test_comparetozero.py::CompareToZeroUsedTC::test_comparetozero_message FAILED [ 92%]
[ 4123s] tests/extensions/test_docstyle.py::test_docstring_message FAILED         [ 92%]
[ 4126s] tests/extensions/test_elseif_used.py::test_elseif_message FAILED         [ 92%]
[ 4129s] tests/extensions/test_emptystring.py::test_emptystring_message FAILED    [ 92%]
[ 4132s] tests/extensions/test_overlapping_exceptions.py::test_overlapping_exceptions FAILED [ 92%]
[ 4136s] tests/extensions/test_overlapping_exceptions.py::test_overlapping_exceptions_py33 FAILED [ 92%]
[ 4139s] tests/extensions/test_redefined.py::test_types_redefined FAILED          [ 92%]
[ 4139s] tests/functional/r/redundant_unittest_assert.py::Tests::test_something SKIPPED [ 92%]
[ 4139s] tests/functional/r/redundant_unittest_assert.py::RegressionWithArgs::test SKIPPED [ 92%]
[ 4139s] tests/lint/unittest_lint.py::test_no_args PASSED                         [ 92%]
[ 4139s] tests/lint/unittest_lint.py::test_one_arg[case0] PASSED                  [ 93%]
[ 4139s] tests/lint/unittest_lint.py::test_one_arg[case1] PASSED                  [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_one_arg[case2] PASSED                  [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_one_arg[case3] PASSED                  [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_one_arg[case4] PASSED                  [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_two_similar_args[case0] PASSED         [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_two_similar_args[case1] PASSED         [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_two_similar_args[case2] PASSED         [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_two_similar_args[case3] PASSED         [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_more_args[case0] PASSED                [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_more_args[case1] PASSED                [ 93%]
[ 4140s] tests/lint/unittest_lint.py::test_more_args[case2] PASSED                [ 93%]
[ 4144s] tests/lint/unittest_lint.py::test_pylint_visit_method_taken_in_account PASSED [ 94%]
[ 4147s] tests/lint/unittest_lint.py::test_enable_message PASSED                  [ 94%]
[ 4152s] tests/lint/unittest_lint.py::test_enable_message_category PASSED         [ 94%]
[ 4155s] tests/lint/unittest_lint.py::test_message_state_scope PASSED             [ 94%]
[ 4157s] tests/lint/unittest_lint.py::test_enable_message_block PASSED            [ 94%]
[ 4159s] tests/lint/unittest_lint.py::test_enable_by_symbol PASSED                [ 94%]
[ 4161s] tests/lint/unittest_lint.py::test_enable_report PASSED                   [ 94%]
[ 4163s] tests/lint/unittest_lint.py::test_report_output_format_aliased PASSED    [ 94%]
[ 4166s] tests/lint/unittest_lint.py::test_set_unsupported_reporter PASSED        [ 94%]
[ 4168s] tests/lint/unittest_lint.py::test_set_option_1 PASSED                    [ 94%]
[ 4170s] tests/lint/unittest_lint.py::test_set_option_2 PASSED                    [ 94%]
[ 4174s] tests/lint/unittest_lint.py::test_enable_checkers PASSED                 [ 94%]
[ 4183s] tests/lint/unittest_lint.py::test_errors_only PASSED                     [ 95%]
[ 4186s] tests/lint/unittest_lint.py::test_disable_similar PASSED                 [ 95%]
[ 4192s] tests/lint/unittest_lint.py::test_disable_alot PASSED                    [ 95%]
[ 4194s] tests/lint/unittest_lint.py::test_addmessage PASSED                      [ 95%]
[ 4197s] tests/lint/unittest_lint.py::test_addmessage_invalid PASSED              [ 95%]
[ 4202s] tests/lint/unittest_lint.py::test_load_plugin_command_line FAILED        [ 95%]
[ 4207s] tests/lint/unittest_lint.py::test_load_plugin_config_file FAILED         [ 95%]
[ 4211s] tests/lint/unittest_lint.py::test_load_plugin_configuration FAILED       [ 95%]
[ 4211s] tests/lint/unittest_lint.py::test_init_hooks_called_before_load_plugins PASSED [ 95%]
[ 4215s] tests/lint/unittest_lint.py::test_analyze_explicit_script FAILED         [ 95%]
[ 4218s] tests/lint/unittest_lint.py::test_python3_checker_disabled PASSED        [ 95%]
[ 4220s] tests/lint/unittest_lint.py::test_full_documentation PASSED              [ 95%]
[ 4222s] tests/lint/unittest_lint.py::test_list_msgs_enabled PASSED               [ 96%]
[ 4223s] tests/lint/unittest_lint.py::test_pylint_home PASSED                     [ 96%]
[ 4223s] tests/lint/unittest_lint.py::test_pylintrc PASSED                        [ 96%]
[ 4223s] tests/lint/unittest_lint.py::test_pylintrc_parentdir PASSED              [ 96%]
[ 4223s] tests/lint/unittest_lint.py::test_pylintrc_parentdir_no_package PASSED   [ 96%]
[ 4223s] tests/lint/unittest_lint.py::TestPreprocessOptions::test_value_equal PASSED [ 96%]
[ 4223s] tests/lint/unittest_lint.py::TestPreprocessOptions::test_value_space PASSED [ 96%]
[ 4223s] tests/lint/unittest_lint.py::TestPreprocessOptions::test_error_missing_expected_value PASSED [ 96%]
[ 4223s] tests/lint/unittest_lint.py::TestPreprocessOptions::test_error_unexpected_value PASSED [ 96%]
[ 4225s] tests/lint/unittest_lint.py::test_custom_should_analyze_file FAILED      [ 96%]
[ 4228s] tests/lint/unittest_lint.py::test_filename_with__init__ FAILED           [ 96%]
[ 4228s] tests/message/unittest_message.py::test_new_message PASSED               [ 96%]
[ 4228s] tests/message/unittest_message_definition.py::test_create_invalid_message_type[Q1234-Bad message type Q in 'Q1234'] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition.py::test_create_invalid_message_type[W12345-Invalid message id 'W12345'] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition.py::TestMessagesDefinition::test_may_be_emitted PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition.py::TestMessagesDefinition::test_repr PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition.py::TestMessagesDefinition::test_str PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition.py::TestMessagesDefinition::test_format_help PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages0-Inconsistent checker part in message id 'W4321' (expected 'x12xx' because we already had ['W1234']).] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages1-Message id 'W1234' cannot have both 'msg-symbol-one' and 'old-symbol' as symbolic name.] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages2-Message id 'W1234' cannot have both 'msg-symbol-one' and 'old-symbol' as symbolic name.] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages3-Message id 'W1201' cannot have both 'old-symbol-one' and 'old-symbol-two' as symbolic name.] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages4-Message symbol 'msg-symbol' cannot be used for 'W1234' and 'W1235' at the same time. If you're creating an 'old_names' use 'old-msg-symbol' as the old symbol.] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages5-Message symbol 'msg-symbol-one' cannot be used for 'W1230' and 'W1234' at the same time. If you're creating an 'old_names' use 'old-msg-symbol-one' as the old symbol.] PASSED [ 97%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages6-Message symbol 'msg-symbol-one' cannot be used for 'W1230' and 'W1234' at the same time. If you're creating an 'old_names' use 'old-msg-symbol-one' as the old symbol.] PASSED [ 98%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error[messages7-Message symbol 'old-symbol-one' cannot be used for 'W1230' and 'W1231' at the same time. If you're creating an 'old_names' use 'old-old-symbol-one' as the old symbol.] PASSED [ 98%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_register_error_new_id_duplicate_of_new PASSED [ 98%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_format_help PASSED [ 98%]
[ 4229s] tests/message/unittest_message_definition_store.py::test_get_msg_display_string PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::test_check_message_id PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::TestMessageDefinitionStore::test_message_help PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::TestMessageDefinitionStore::test_message_help_minmax PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::test_list_messages PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::test_renamed_message_register PASSED [ 98%]
[ 4230s] tests/message/unittest_message_definition_store.py::test_multiple_child_of_old_name PASSED [ 98%]
[ 4230s] tests/message/unittest_message_id_store.py::test_len_str PASSED          [ 98%]
[ 4230s] tests/message/unittest_message_id_store.py::test_get_message_ids PASSED  [ 99%]
[ 4230s] tests/message/unittest_message_id_store.py::test_get_message_ids_not_existing PASSED [ 99%]
[ 4230s] tests/message/unittest_message_id_store.py::test_register_message_definitions PASSED [ 99%]
[ 4230s] tests/message/unittest_message_id_store.py::test_add_msgid_and_symbol PASSED [ 99%]
[ 4230s] tests/message/unittest_message_id_store.py::test_duplicate_symbol PASSED [ 99%]
[ 4230s] tests/message/unittest_message_id_store.py::test_duplicate_msgid PASSED  [ 99%]
[ 4230s] tests/utils/unittest_ast_walker.py::TestASTWalker::test_check_messages PASSED [ 99%]
[ 4230s] tests/utils/unittest_ast_walker.py::TestASTWalker::test_deprecated_methods PASSED [ 99%]
[ 4230s] tests/utils/unittest_utils.py::test__basename_in_blacklist_re_match PASSED [ 99%]
[ 4230s] tests/utils/unittest_utils.py::test__basename_in_blacklist_re_nomatch PASSED [ 99%]
[ 4230s] tests/utils/unittest_utils.py::test_decoding_stream_unknown_encoding PASSED [ 99%]
[ 4231s] tests/utils/unittest_utils.py::test_decoding_stream_known_encoding PASSED [100%]
[ 4231s] 
[ 4231s] =================================== FAILURES ===================================
[ 4231s] ____________________ test_functionality[func_w0401_package] ____________________
[ 4231s] 
[ 4231s] module_file = 'func_w0401_package'
[ 4231s] messages_file = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/messages/func_w0401_package.txt'
[ 4231s] dependencies = [('w0401_cycle.py', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/messages/w0401_cycle.txt')]
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize(
[ 4231s]         "module_file,messages_file,dependencies",
[ 4231s]         gen_tests(FILTER_RGX),
[ 4231s]         ids=[o[0] for o in gen_tests(FILTER_RGX)],
[ 4231s]     )
[ 4231s]     def test_functionality(module_file, messages_file, dependencies):
[ 4231s]     
[ 4231s]         LT = LintTestUpdate() if UPDATE else LintTestUsingModule()
[ 4231s]     
[ 4231s]         LT.module = module_file.replace(".py", "")
[ 4231s]         LT.output = messages_file
[ 4231s]         LT.depends = dependencies or None
[ 4231s]         LT.INPUT_DIR = INPUT_DIR
[ 4231s] >       LT._test_functionality()
[ 4231s] 
[ 4231s] tests/test_func.py:148: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] tests/test_func.py:68: in _test_functionality
[ 4231s]     self._test(tocheck)
[ 4231s] tests/test_func.py:79: in _test
[ 4231s]     self.linter.check(tocheck)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] pylint/utils/utils.py:223: in expand_modules
[ 4231s]     modpath = _modpath_from_file(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] filename = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/input/func_w0401_package/all_the_things.py'
[ 4231s] is_namespace = False
[ 4231s] path = ['.', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0', '/home/abuild/rpmbuild/B... '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests', ...]
[ 4231s] 
[ 4231s]     def _modpath_from_file(filename, is_namespace, path=None):
[ 4231s]         def _is_package_cb(path, parts):
[ 4231s]             return modutils.check_modpath_has_init(path, parts) or is_namespace
[ 4231s]     
[ 4231s] >       return modutils.modpath_from_file_with_callback(
[ 4231s]             filename, path=path, is_package_cb=_is_package_cb
[ 4231s]         )
[ 4231s] E       TypeError: modpath_from_file_with_callback() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:120: TypeError
[ 4231s] ----------------------------- Captured stdout call -----------------------------
[ 4231s] modpath_from_file_with_callback() got an unexpected keyword argument 'path'
[ 4231s] _________________ test_functional[missing_docstring_new_style] _________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:missing_docstring_new_style
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_docstring_new_style.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ____________________ test_functional[member_checks_opaque] _____________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:member_checks_opaque
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_opaque.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ______________________ test_functional[misplaced_future] _______________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:misplaced_future
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/misplaced_future.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] _____________________ test_functional[member_checks_py37] ______________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:member_checks_py37
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_py37.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ___________________ test_functional[member_checks_no_hints] ____________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:member_checks_no_hints
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_no_hints.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ___________________ test_functional[messages_managed_by_id] ____________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:messages_managed_by_id
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/messages_managed_by_id.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ____________________ test_functional[missing_self_argument] ____________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:missing_self_argument
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4231s]             else testutils.LintModuleTest(test_file)
[ 4231s]         )
[ 4231s]         LintTest.setUp()
[ 4231s] >       LintTest._runTest()
[ 4231s] 
[ 4231s] tests/test_functional.py:102: 
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] pylint/testutils.py:595: in _runTest
[ 4231s]     self._linter.check(modules_to_check)
[ 4231s] pylint/lint/pylinter.py:862: in check
[ 4231s]     self._check_files(
[ 4231s] pylint/lint/pylinter.py:895: in _check_files
[ 4231s]     for name, filepath, modname in file_descrs:
[ 4231s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4231s]     for descr in self._expand_files(files_or_modules):
[ 4231s] pylint/lint/pylinter.py:960: in _expand_files
[ 4231s]     result, errors = utils.expand_modules(
[ 4231s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4231s] 
[ 4231s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_self_argument.py']
[ 4231s] black_list = ('CVS',), black_list_re = []
[ 4231s] 
[ 4231s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4231s]         """take a list of files/modules/packages and return the list of tuple
[ 4231s]         (file, module name) which have to be actually checked
[ 4231s]         """
[ 4231s]         result = []
[ 4231s]         errors = []
[ 4231s]         path = sys.path.copy()
[ 4231s]     
[ 4231s]         for something in files_or_modules:
[ 4231s]             if os.path.basename(something) in black_list:
[ 4231s]                 continue
[ 4231s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4231s]                 continue
[ 4231s]     
[ 4231s]             module_path = get_python_path(something)
[ 4231s]             additional_search_path = [".", module_path] + path
[ 4231s]             if os.path.exists(something):
[ 4231s]                 # this is a file or a directory
[ 4231s]                 try:
[ 4231s]                     modname = ".".join(
[ 4231s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4231s]                     )
[ 4231s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4231s] 
[ 4231s] pylint/utils/utils.py:159: TypeError
[ 4231s] ______________________ test_functional[missing_docstring] ______________________
[ 4231s] 
[ 4231s] test_file = FunctionalTest:missing_docstring
[ 4231s] 
[ 4231s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4231s]     def test_functional(test_file):
[ 4231s]         LintTest = (
[ 4231s]             LintModuleOutputUpdate(test_file)
[ 4231s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_docstring.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] _______________________ test_functional[mapping_context] _______________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:mapping_context
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/mapping_context.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] _____________________ test_functional[mapping_context_py3] _____________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:mapping_context_py3
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/mapping_context_py3.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ________________ test_functional[misplaced_comparison_constant] ________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:misplaced_comparison_constant
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/misplaced_comparison_constant.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ____________ test_functional[missing_parentheses_for_call_in_test] _____________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:missing_parentheses_for_call_in_test
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_parentheses_for_call_in_test.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] __________________ test_functional[misplaced_format_function] __________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:misplaced_format_function
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/misplaced_format_function.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] __________________ test_functional[member_checks_ignore_none] __________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:member_checks_ignore_none
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_ignore_none.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ______________ test_functional[missing_module_docstring_disabled] ______________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:missing_module_docstring_disabled
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_module_docstring_disabled.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ____________________ test_functional[misplaced_bare_raise] _____________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:misplaced_bare_raise
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/misplaced_bare_raise.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ________________________ test_functional[member_checks] ________________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:member_checks
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ____________ test_functional[member_checks_inference_improvements] _____________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:member_checks_inference_improvements
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_inference_improvements.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] ___________________ test_functional[membership_protocol_py3] ___________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:membership_protocol_py3
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4232s]     self._check_files(
[ 4232s] pylint/lint/pylinter.py:895: in _check_files
[ 4232s]     for name, filepath, modname in file_descrs:
[ 4232s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4232s]     for descr in self._expand_files(files_or_modules):
[ 4232s] pylint/lint/pylinter.py:960: in _expand_files
[ 4232s]     result, errors = utils.expand_modules(
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] 
[ 4232s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/membership_protocol_py3.py']
[ 4232s] black_list = ('CVS',), black_list_re = []
[ 4232s] 
[ 4232s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4232s]         """take a list of files/modules/packages and return the list of tuple
[ 4232s]         (file, module name) which have to be actually checked
[ 4232s]         """
[ 4232s]         result = []
[ 4232s]         errors = []
[ 4232s]         path = sys.path.copy()
[ 4232s]     
[ 4232s]         for something in files_or_modules:
[ 4232s]             if os.path.basename(something) in black_list:
[ 4232s]                 continue
[ 4232s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4232s]                 continue
[ 4232s]     
[ 4232s]             module_path = get_python_path(something)
[ 4232s]             additional_search_path = [".", module_path] + path
[ 4232s]             if os.path.exists(something):
[ 4232s]                 # this is a file or a directory
[ 4232s]                 try:
[ 4232s]                     modname = ".".join(
[ 4232s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4232s]                     )
[ 4232s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4232s] 
[ 4232s] pylint/utils/utils.py:159: TypeError
[ 4232s] _____________________ test_functional[member_checks_hints] _____________________
[ 4232s] 
[ 4232s] test_file = FunctionalTest:member_checks_hints
[ 4232s] 
[ 4232s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4232s]     def test_functional(test_file):
[ 4232s]         LintTest = (
[ 4232s]             LintModuleOutputUpdate(test_file)
[ 4232s]             if UPDATE
[ 4232s]             else testutils.LintModuleTest(test_file)
[ 4232s]         )
[ 4232s]         LintTest.setUp()
[ 4232s] >       LintTest._runTest()
[ 4232s] 
[ 4232s] tests/test_functional.py:102: 
[ 4232s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4232s] pylint/testutils.py:595: in _runTest
[ 4232s]     self._linter.check(modules_to_check)
[ 4232s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/member_checks_hints.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ____________________ test_functional[missing_final_newline] ____________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:missing_final_newline
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/missing_final_newline.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] _____________________ test_functional[membership_protocol] _____________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:membership_protocol
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/membership_protocol.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ________________________ test_functional[method_hidden] ________________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:method_hidden
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/method_hidden.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ______________________ test_functional[multiple_imports] _______________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:multiple_imports
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/multiple_imports.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] _____________________ test_functional[monkeypatch_method] ______________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:monkeypatch_method
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/m/monkeypatch_method.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ___________________________ test_functional[globals] ___________________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:globals
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/g/globals.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ____________________ test_functional[genexp_in_class_scope] ____________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:genexp_in_class_scope
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/g/genexp_in_class_scope.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ___________________ test_functional[genexpr_variable_scope] ____________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:genexpr_variable_scope
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/g/genexpr_variable_scope.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ______________________ test_functional[generated_members] ______________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:generated_members
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/g/generated_members.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] __________________ test_functional[keyword_arg_before_vararg] __________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:keyword_arg_before_vararg
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/k/keyword_arg_before_vararg.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] ___________________ test_functional[future_unicode_literals] ___________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:future_unicode_literals
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] 
[ 4233s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/future_unicode_literals.py']
[ 4233s] black_list = ('CVS',), black_list_re = []
[ 4233s] 
[ 4233s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4233s]         """take a list of files/modules/packages and return the list of tuple
[ 4233s]         (file, module name) which have to be actually checked
[ 4233s]         """
[ 4233s]         result = []
[ 4233s]         errors = []
[ 4233s]         path = sys.path.copy()
[ 4233s]     
[ 4233s]         for something in files_or_modules:
[ 4233s]             if os.path.basename(something) in black_list:
[ 4233s]                 continue
[ 4233s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4233s]                 continue
[ 4233s]     
[ 4233s]             module_path = get_python_path(something)
[ 4233s]             additional_search_path = [".", module_path] + path
[ 4233s]             if os.path.exists(something):
[ 4233s]                 # this is a file or a directory
[ 4233s]                 try:
[ 4233s]                     modname = ".".join(
[ 4233s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4233s]                     )
[ 4233s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4233s] 
[ 4233s] pylint/utils/utils.py:159: TypeError
[ 4233s] _____________________ test_functional[function_redefined] ______________________
[ 4233s] 
[ 4233s] test_file = FunctionalTest:function_redefined
[ 4233s] 
[ 4233s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4233s]     def test_functional(test_file):
[ 4233s]         LintTest = (
[ 4233s]             LintModuleOutputUpdate(test_file)
[ 4233s]             if UPDATE
[ 4233s]             else testutils.LintModuleTest(test_file)
[ 4233s]         )
[ 4233s]         LintTest.setUp()
[ 4233s] >       LintTest._runTest()
[ 4233s] 
[ 4233s] tests/test_functional.py:102: 
[ 4233s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4233s] pylint/testutils.py:595: in _runTest
[ 4233s]     self._linter.check(modules_to_check)
[ 4233s] pylint/lint/pylinter.py:862: in check
[ 4233s]     self._check_files(
[ 4233s] pylint/lint/pylinter.py:895: in _check_files
[ 4233s]     for name, filepath, modname in file_descrs:
[ 4233s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4233s]     for descr in self._expand_files(files_or_modules):
[ 4233s] pylint/lint/pylinter.py:960: in _expand_files
[ 4233s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/function_redefined.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] __________________ test_functional[fixme_bad_formatting_1139] __________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:fixme_bad_formatting_1139
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/fixme_bad_formatting_1139.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ____________________________ test_functional[fixme] ____________________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:fixme
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/fixme.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ___________________ test_functional[function_redefined_2540] ___________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:function_redefined_2540
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/function_redefined_2540.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ___________________ test_functional[fallback_import_enabled] ___________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:fallback_import_enabled
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/fallback_import_enabled.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] _______________ test_functional[f_string_without_interpolation] ________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:f_string_without_interpolation
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/f_string_without_interpolation.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ____________ test_functional[formatted_string_literal_with_if_py36] ____________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:formatted_string_literal_with_if_py36
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/formatted_string_literal_with_if_py36.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] __________________ test_functional[fallback_import_disabled] ___________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:fallback_import_disabled
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/fallback_import_disabled.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ________________________ test_functional[future_import] ________________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:future_import
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/f/future_import.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] _________________________ test_functional[typing_use] __________________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:typing_use
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/typing_use.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4234s]                 continue
[ 4234s]     
[ 4234s]             module_path = get_python_path(something)
[ 4234s]             additional_search_path = [".", module_path] + path
[ 4234s]             if os.path.exists(something):
[ 4234s]                 # this is a file or a directory
[ 4234s]                 try:
[ 4234s]                     modname = ".".join(
[ 4234s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4234s]                     )
[ 4234s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4234s] 
[ 4234s] pylint/utils/utils.py:159: TypeError
[ 4234s] ___________________________ test_functional[ternary] ___________________________
[ 4234s] 
[ 4234s] test_file = FunctionalTest:ternary
[ 4234s] 
[ 4234s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4234s]     def test_functional(test_file):
[ 4234s]         LintTest = (
[ 4234s]             LintModuleOutputUpdate(test_file)
[ 4234s]             if UPDATE
[ 4234s]             else testutils.LintModuleTest(test_file)
[ 4234s]         )
[ 4234s]         LintTest.setUp()
[ 4234s] >       LintTest._runTest()
[ 4234s] 
[ 4234s] tests/test_functional.py:102: 
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] pylint/testutils.py:595: in _runTest
[ 4234s]     self._linter.check(modules_to_check)
[ 4234s] pylint/lint/pylinter.py:862: in check
[ 4234s]     self._check_files(
[ 4234s] pylint/lint/pylinter.py:895: in _check_files
[ 4234s]     for name, filepath, modname in file_descrs:
[ 4234s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4234s]     for descr in self._expand_files(files_or_modules):
[ 4234s] pylint/lint/pylinter.py:960: in _expand_files
[ 4234s]     result, errors = utils.expand_modules(
[ 4234s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4234s] 
[ 4234s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/ternary.py']
[ 4234s] black_list = ('CVS',), black_list_re = []
[ 4234s] 
[ 4234s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4234s]         """take a list of files/modules/packages and return the list of tuple
[ 4234s]         (file, module name) which have to be actually checked
[ 4234s]         """
[ 4234s]         result = []
[ 4234s]         errors = []
[ 4234s]         path = sys.path.copy()
[ 4234s]     
[ 4234s]         for something in files_or_modules:
[ 4234s]             if os.path.basename(something) in black_list:
[ 4234s]                 continue
[ 4234s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ______________________ test_functional[try_except_raise] _______________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:try_except_raise
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/try_except_raise.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] _______________________ test_functional[tokenize_error] ________________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:tokenize_error
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/tokenize_error.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ___________________ test_functional[try_except_raise_crash] ____________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:try_except_raise_crash
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/try_except_raise_crash.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ____________________ test_functional[trailing_whitespaces] _____________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:trailing_whitespaces
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/trailing_whitespaces.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ______________________ test_functional[trailing_newlines] ______________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:trailing_newlines
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/trailing_newlines.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ____________________ test_functional[trailing_comma_tuple] _____________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:trailing_comma_tuple
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/trailing_comma_tuple.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ________________________ test_functional[test_compile] _________________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:test_compile
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/t/test_compile.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ______________________ test_functional[signature_differs] ______________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:signature_differs
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/signature_differs.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] __________________ test_functional[simplifiable_if_statement] __________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:simplifiable_if_statement
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/simplifiable_if_statement.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ___________________ test_functional[self_assigning_variable] ___________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:self_assigning_variable
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/self_assigning_variable.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ________________ test_functional[suspicious_str_strip_call_py3] ________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:suspicious_str_strip_call_py3
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/suspicious_str_strip_call_py3.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4235s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4235s] 
[ 4235s] pylint/utils/utils.py:159: TypeError
[ 4235s] ________________________ test_functional[slots_checks] _________________________
[ 4235s] 
[ 4235s] test_file = FunctionalTest:slots_checks
[ 4235s] 
[ 4235s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4235s]     def test_functional(test_file):
[ 4235s]         LintTest = (
[ 4235s]             LintModuleOutputUpdate(test_file)
[ 4235s]             if UPDATE
[ 4235s]             else testutils.LintModuleTest(test_file)
[ 4235s]         )
[ 4235s]         LintTest.setUp()
[ 4235s] >       LintTest._runTest()
[ 4235s] 
[ 4235s] tests/test_functional.py:102: 
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] pylint/testutils.py:595: in _runTest
[ 4235s]     self._linter.check(modules_to_check)
[ 4235s] pylint/lint/pylinter.py:862: in check
[ 4235s]     self._check_files(
[ 4235s] pylint/lint/pylinter.py:895: in _check_files
[ 4235s]     for name, filepath, modname in file_descrs:
[ 4235s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4235s]     for descr in self._expand_files(files_or_modules):
[ 4235s] pylint/lint/pylinter.py:960: in _expand_files
[ 4235s]     result, errors = utils.expand_modules(
[ 4235s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4235s] 
[ 4235s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/slots_checks.py']
[ 4235s] black_list = ('CVS',), black_list_re = []
[ 4235s] 
[ 4235s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4235s]         """take a list of files/modules/packages and return the list of tuple
[ 4235s]         (file, module name) which have to be actually checked
[ 4235s]         """
[ 4235s]         result = []
[ 4235s]         errors = []
[ 4235s]         path = sys.path.copy()
[ 4235s]     
[ 4235s]         for something in files_or_modules:
[ 4235s]             if os.path.basename(something) in black_list:
[ 4235s]                 continue
[ 4235s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4235s]                 continue
[ 4235s]     
[ 4235s]             module_path = get_python_path(something)
[ 4235s]             additional_search_path = [".", module_path] + path
[ 4235s]             if os.path.exists(something):
[ 4235s]                 # this is a file or a directory
[ 4235s]                 try:
[ 4235s]                     modname = ".".join(
[ 4235s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4235s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ____________________ test_functional[singleton_comparison] _____________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:singleton_comparison
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/singleton_comparison.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ______________________ test_functional[string_formatting] ______________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:string_formatting
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/string_formatting.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _____________________ test_functional[superfluous_parens] ______________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:superfluous_parens
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/superfluous_parens.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ________________ test_functional[statement_without_effect_py36] ________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:statement_without_effect_py36
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/statement_without_effect_py36.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ___________ test_functional[string_formatting_failed_inference_py35] ___________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:string_formatting_failed_inference_py35
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/string_formatting_failed_inference_py35.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _______________ test_functional[stop_iteration_inside_generator] _______________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:stop_iteration_inside_generator
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/stop_iteration_inside_generator.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] __________________ test_functional[string_formatting_disable] __________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:string_formatting_disable
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/string_formatting_disable.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ________________ test_functional[star_needs_assignment_target] _________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:star_needs_assignment_target
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/star_needs_assignment_target.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _________________ test_functional[sys_stream_regression_1004] __________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:sys_stream_regression_1004
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/sys_stream_regression_1004.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _________________ test_functional[simplifiable_if_expression] __________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:simplifiable_if_expression
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/simplifiable_if_expression.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _____________________ test_functional[self_cls_assignment] _____________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:self_cls_assignment
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/self_cls_assignment.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] _____________ test_functional[string_formatting_failed_inference] ______________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:string_formatting_failed_inference
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4236s] pylint/lint/pylinter.py:960: in _expand_files
[ 4236s]     result, errors = utils.expand_modules(
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] 
[ 4236s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/string_formatting_failed_inference.py']
[ 4236s] black_list = ('CVS',), black_list_re = []
[ 4236s] 
[ 4236s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4236s]         """take a list of files/modules/packages and return the list of tuple
[ 4236s]         (file, module name) which have to be actually checked
[ 4236s]         """
[ 4236s]         result = []
[ 4236s]         errors = []
[ 4236s]         path = sys.path.copy()
[ 4236s]     
[ 4236s]         for something in files_or_modules:
[ 4236s]             if os.path.basename(something) in black_list:
[ 4236s]                 continue
[ 4236s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4236s]                 continue
[ 4236s]     
[ 4236s]             module_path = get_python_path(something)
[ 4236s]             additional_search_path = [".", module_path] + path
[ 4236s]             if os.path.exists(something):
[ 4236s]                 # this is a file or a directory
[ 4236s]                 try:
[ 4236s]                     modname = ".".join(
[ 4236s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4236s]                     )
[ 4236s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4236s] 
[ 4236s] pylint/utils/utils.py:159: TypeError
[ 4236s] ___________________ test_functional[subprocess_run_check35] ____________________
[ 4236s] 
[ 4236s] test_file = FunctionalTest:subprocess_run_check35
[ 4236s] 
[ 4236s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4236s]     def test_functional(test_file):
[ 4236s]         LintTest = (
[ 4236s]             LintModuleOutputUpdate(test_file)
[ 4236s]             if UPDATE
[ 4236s]             else testutils.LintModuleTest(test_file)
[ 4236s]         )
[ 4236s]         LintTest.setUp()
[ 4236s] >       LintTest._runTest()
[ 4236s] 
[ 4236s] tests/test_functional.py:102: 
[ 4236s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4236s] pylint/testutils.py:595: in _runTest
[ 4236s]     self._linter.check(modules_to_check)
[ 4236s] pylint/lint/pylinter.py:862: in check
[ 4236s]     self._check_files(
[ 4236s] pylint/lint/pylinter.py:895: in _check_files
[ 4236s]     for name, filepath, modname in file_descrs:
[ 4236s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4236s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/subprocess_run_check35.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] __________________ test_functional[statement_without_effect] ___________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:statement_without_effect
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/statement_without_effect.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ____________________ test_functional[super_with_arguments] _____________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:super_with_arguments
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/super_with_arguments.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ________________________ test_functional[super_checks] _________________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:super_checks
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/super_checks.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ________________________ test_functional[syntax_error] _________________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:syntax_error
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/syntax_error.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] _____________________ test_functional[socketerror_import] ______________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:socketerror_import
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/socketerror_import.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ________________ test_functional[singledispatch_functions_py3] _________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:singledispatch_functions_py3
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/singledispatch_functions_py3.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] _________________ test_functional[subprocess_popen_preexec_fn] _________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:subprocess_popen_preexec_fn
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/subprocess_popen_preexec_fn.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] _________________ test_functional[simplify_chained_comparison] _________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:simplify_chained_comparison
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/simplify_chained_comparison.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ____________________ test_functional[string_formatting_py3] ____________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:string_formatting_py3
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/s/string_formatting_py3.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] ________________________ test_functional[exec_used_py3] ________________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:exec_used_py3
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/e/exec_used_py3.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4237s]         result = []
[ 4237s]         errors = []
[ 4237s]         path = sys.path.copy()
[ 4237s]     
[ 4237s]         for something in files_or_modules:
[ 4237s]             if os.path.basename(something) in black_list:
[ 4237s]                 continue
[ 4237s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4237s]                 continue
[ 4237s]     
[ 4237s]             module_path = get_python_path(something)
[ 4237s]             additional_search_path = [".", module_path] + path
[ 4237s]             if os.path.exists(something):
[ 4237s]                 # this is a file or a directory
[ 4237s]                 try:
[ 4237s]                     modname = ".".join(
[ 4237s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4237s]                     )
[ 4237s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4237s] 
[ 4237s] pylint/utils/utils.py:159: TypeError
[ 4237s] __________________________ test_functional[eval_used] __________________________
[ 4237s] 
[ 4237s] test_file = FunctionalTest:eval_used
[ 4237s] 
[ 4237s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4237s]     def test_functional(test_file):
[ 4237s]         LintTest = (
[ 4237s]             LintModuleOutputUpdate(test_file)
[ 4237s]             if UPDATE
[ 4237s]             else testutils.LintModuleTest(test_file)
[ 4237s]         )
[ 4237s]         LintTest.setUp()
[ 4237s] >       LintTest._runTest()
[ 4237s] 
[ 4237s] tests/test_functional.py:102: 
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] pylint/testutils.py:595: in _runTest
[ 4237s]     self._linter.check(modules_to_check)
[ 4237s] pylint/lint/pylinter.py:862: in check
[ 4237s]     self._check_files(
[ 4237s] pylint/lint/pylinter.py:895: in _check_files
[ 4237s]     for name, filepath, modname in file_descrs:
[ 4237s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4237s]     for descr in self._expand_files(files_or_modules):
[ 4237s] pylint/lint/pylinter.py:960: in _expand_files
[ 4237s]     result, errors = utils.expand_modules(
[ 4237s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4237s] 
[ 4237s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/e/eval_used.py']
[ 4237s] black_list = ('CVS',), black_list_re = []
[ 4237s] 
[ 4237s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4237s]         """take a list of files/modules/packages and return the list of tuple
[ 4237s]         (file, module name) which have to be actually checked
[ 4237s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ___________________ test_functional[exception_is_binary_op] ____________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:exception_is_binary_op
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/e/exception_is_binary_op.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ________________________ test_functional[import_error] _________________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:import_error
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/import_error.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] __________________ test_functional[invalid_exceptions_raised] __________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:invalid_exceptions_raised
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_exceptions_raised.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ________________ test_functional[invalid_length_hint_returned] _________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:invalid_length_hint_returned
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_length_hint_returned.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ______________________ test_functional[inconsistent_mro] _______________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:inconsistent_mro
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/inconsistent_mro.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ___________________ test_functional[invalid_length_returned] ___________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:invalid_length_returned
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_length_returned.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ____________________ test_functional[invalid_repr_returned] ____________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:invalid_repr_returned
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_repr_returned.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ______________________ test_functional[iterable_context] _______________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:iterable_context
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/iterable_context.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ________________ test_functional[implicit_str_concat_multiline] ________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:implicit_str_concat_multiline
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/implicit_str_concat_multiline.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ____________________ test_functional[invalid_metaclass_py3] ____________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:invalid_metaclass_py3
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_metaclass_py3.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] ______________________ test_functional[init_is_generator] ______________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:init_is_generator
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4238s] pylint/lint/pylinter.py:862: in check
[ 4238s]     self._check_files(
[ 4238s] pylint/lint/pylinter.py:895: in _check_files
[ 4238s]     for name, filepath, modname in file_descrs:
[ 4238s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4238s]     for descr in self._expand_files(files_or_modules):
[ 4238s] pylint/lint/pylinter.py:960: in _expand_files
[ 4238s]     result, errors = utils.expand_modules(
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] 
[ 4238s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/init_is_generator.py']
[ 4238s] black_list = ('CVS',), black_list_re = []
[ 4238s] 
[ 4238s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4238s]         """take a list of files/modules/packages and return the list of tuple
[ 4238s]         (file, module name) which have to be actually checked
[ 4238s]         """
[ 4238s]         result = []
[ 4238s]         errors = []
[ 4238s]         path = sys.path.copy()
[ 4238s]     
[ 4238s]         for something in files_or_modules:
[ 4238s]             if os.path.basename(something) in black_list:
[ 4238s]                 continue
[ 4238s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4238s]                 continue
[ 4238s]     
[ 4238s]             module_path = get_python_path(something)
[ 4238s]             additional_search_path = [".", module_path] + path
[ 4238s]             if os.path.exists(something):
[ 4238s]                 # this is a file or a directory
[ 4238s]                 try:
[ 4238s]                     modname = ".".join(
[ 4238s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4238s]                     )
[ 4238s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4238s] 
[ 4238s] pylint/utils/utils.py:159: TypeError
[ 4238s] _____________________ test_functional[implicit_str_concat] _____________________
[ 4238s] 
[ 4238s] test_file = FunctionalTest:implicit_str_concat
[ 4238s] 
[ 4238s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4238s]     def test_functional(test_file):
[ 4238s]         LintTest = (
[ 4238s]             LintModuleOutputUpdate(test_file)
[ 4238s]             if UPDATE
[ 4238s]             else testutils.LintModuleTest(test_file)
[ 4238s]         )
[ 4238s]         LintTest.setUp()
[ 4238s] >       LintTest._runTest()
[ 4238s] 
[ 4238s] tests/test_functional.py:102: 
[ 4238s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4238s] pylint/testutils.py:595: in _runTest
[ 4238s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/implicit_str_concat.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _______________ test_functional[init_subclass_classmethod_py36] ________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:init_subclass_classmethod_py36
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/init_subclass_classmethod_py36.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] ___________________ test_functional[invalid_format_returned] ___________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_format_returned
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_format_returned.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _____________________ test_functional[invalid_all_object] ______________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_all_object
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_all_object.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _______________ test_functional[invalid_getnewargs_ex_returned] ________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_getnewargs_ex_returned
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_getnewargs_ex_returned.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] __________________ test_functional[invalid_overridden_method] __________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_overridden_method
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_overridden_method.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] __________________ test_functional[invalid_exceptions_caught] __________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_exceptions_caught
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_exceptions_caught.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _________________ test_functional[invalid_unary_operand_type] __________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_unary_operand_type
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_unary_operand_type.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _______________________ test_functional[init_not_called] _______________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:init_not_called
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/init_not_called.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _____________________ test_functional[invalid_slice_index] _____________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_slice_index
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_slice_index.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] _________________ test_functional[isinstance_second_argument] __________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:isinstance_second_argument
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/isinstance_second_argument.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] ______________________ test_functional[invalid_metaclass] ______________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_metaclass
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_metaclass.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4239s]                     )
[ 4239s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4239s] 
[ 4239s] pylint/utils/utils.py:159: TypeError
[ 4239s] ____________________ test_functional[invalid_hash_returned] ____________________
[ 4239s] 
[ 4239s] test_file = FunctionalTest:invalid_hash_returned
[ 4239s] 
[ 4239s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4239s]     def test_functional(test_file):
[ 4239s]         LintTest = (
[ 4239s]             LintModuleOutputUpdate(test_file)
[ 4239s]             if UPDATE
[ 4239s]             else testutils.LintModuleTest(test_file)
[ 4239s]         )
[ 4239s]         LintTest.setUp()
[ 4239s] >       LintTest._runTest()
[ 4239s] 
[ 4239s] tests/test_functional.py:102: 
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] pylint/testutils.py:595: in _runTest
[ 4239s]     self._linter.check(modules_to_check)
[ 4239s] pylint/lint/pylinter.py:862: in check
[ 4239s]     self._check_files(
[ 4239s] pylint/lint/pylinter.py:895: in _check_files
[ 4239s]     for name, filepath, modname in file_descrs:
[ 4239s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4239s]     for descr in self._expand_files(files_or_modules):
[ 4239s] pylint/lint/pylinter.py:960: in _expand_files
[ 4239s]     result, errors = utils.expand_modules(
[ 4239s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4239s] 
[ 4239s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_hash_returned.py']
[ 4239s] black_list = ('CVS',), black_list_re = []
[ 4239s] 
[ 4239s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4239s]         """take a list of files/modules/packages and return the list of tuple
[ 4239s]         (file, module name) which have to be actually checked
[ 4239s]         """
[ 4239s]         result = []
[ 4239s]         errors = []
[ 4239s]         path = sys.path.copy()
[ 4239s]     
[ 4239s]         for something in files_or_modules:
[ 4239s]             if os.path.basename(something) in black_list:
[ 4239s]                 continue
[ 4239s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4239s]                 continue
[ 4239s]     
[ 4239s]             module_path = get_python_path(something)
[ 4239s]             additional_search_path = [".", module_path] + path
[ 4239s]             if os.path.exists(something):
[ 4239s]                 # this is a file or a directory
[ 4239s]                 try:
[ 4239s]                     modname = ".".join(
[ 4239s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ________________________ test_functional[invalid_name] _________________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_name
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_name.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ___________________ test_functional[invalid_bytes_returned] ____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_bytes_returned
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_bytes_returned.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ___________________ test_functional[invalid_sequence_index] ____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_sequence_index
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_sequence_index.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ____________________ test_functional[iterable_context_py3] _____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:iterable_context_py3
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/iterable_context_py3.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ___________________ test_functional[invalid_index_returned] ____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_index_returned
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_index_returned.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ____________________ test_functional[invalid_bool_returned] ____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_bool_returned
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_bool_returned.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ______________________ test_functional[inherit_non_class] ______________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:inherit_non_class
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/inherit_non_class.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ____________________ test_functional[invalid_envvar_value] _____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_envvar_value
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_envvar_value.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] __________________ test_functional[implicit_str_concat_utf8] ___________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:implicit_str_concat_utf8
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/implicit_str_concat_utf8.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] ____________________ test_functional[invalid_str_returned] _____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_str_returned
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_str_returned.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] _________________ test_functional[invalid_getnewargs_returned] _________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:invalid_getnewargs_returned
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4240s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4240s]     for descr in self._expand_files(files_or_modules):
[ 4240s] pylint/lint/pylinter.py:960: in _expand_files
[ 4240s]     result, errors = utils.expand_modules(
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] 
[ 4240s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_getnewargs_returned.py']
[ 4240s] black_list = ('CVS',), black_list_re = []
[ 4240s] 
[ 4240s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4240s]         """take a list of files/modules/packages and return the list of tuple
[ 4240s]         (file, module name) which have to be actually checked
[ 4240s]         """
[ 4240s]         result = []
[ 4240s]         errors = []
[ 4240s]         path = sys.path.copy()
[ 4240s]     
[ 4240s]         for something in files_or_modules:
[ 4240s]             if os.path.basename(something) in black_list:
[ 4240s]                 continue
[ 4240s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4240s]                 continue
[ 4240s]     
[ 4240s]             module_path = get_python_path(something)
[ 4240s]             additional_search_path = [".", module_path] + path
[ 4240s]             if os.path.exists(something):
[ 4240s]                 # this is a file or a directory
[ 4240s]                 try:
[ 4240s]                     modname = ".".join(
[ 4240s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4240s]                     )
[ 4240s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4240s] 
[ 4240s] pylint/utils/utils.py:159: TypeError
[ 4240s] _____________________ test_functional[inconsistent_quotes] _____________________
[ 4240s] 
[ 4240s] test_file = FunctionalTest:inconsistent_quotes
[ 4240s] 
[ 4240s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4240s]     def test_functional(test_file):
[ 4240s]         LintTest = (
[ 4240s]             LintModuleOutputUpdate(test_file)
[ 4240s]             if UPDATE
[ 4240s]             else testutils.LintModuleTest(test_file)
[ 4240s]         )
[ 4240s]         LintTest.setUp()
[ 4240s] >       LintTest._runTest()
[ 4240s] 
[ 4240s] tests/test_functional.py:102: 
[ 4240s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4240s] pylint/testutils.py:595: in _runTest
[ 4240s]     self._linter.check(modules_to_check)
[ 4240s] pylint/lint/pylinter.py:862: in check
[ 4240s]     self._check_files(
[ 4240s] pylint/lint/pylinter.py:895: in _check_files
[ 4240s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/inconsistent_quotes.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] _________________ test_functional[implicit_str_concat_latin1] __________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:implicit_str_concat_latin1
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/implicit_str_concat_latin1.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] _______________ test_functional[invalid_star_assignment_target] ________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:invalid_star_assignment_target
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/invalid_star_assignment_target.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ____________________ test_functional[inconsistent_quotes2] _____________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:inconsistent_quotes2
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/inconsistent_quotes2.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ____________________ test_functional[inconsistent_returns] _____________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:inconsistent_returns
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/inconsistent_returns.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ____________________ test_functional[iterable_context_py36] ____________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:iterable_context_py36
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/i/iterable_context_py36.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ______________________ test_functional[protocol_classes] _______________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:protocol_classes
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/protocol_classes.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ______________________ test_functional[preferred_module] _______________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:preferred_module
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/preferred_module.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] __________________ test_functional[property_with_parameters] ___________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:property_with_parameters
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/property_with_parameters.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] __________ test_functional[protected_access_access_different_scopes] ___________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:protected_access_access_different_scopes
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/protected_access_access_different_scopes.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] ___________________ test_functional[pragma_after_backslash] ____________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:pragma_after_backslash
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/pragma_after_backslash.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] _____________ test_functional[postponed_evaluation_not_activated] ______________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:postponed_evaluation_not_activated
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/postponed_evaluation_not_activated.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4241s]             module_path = get_python_path(something)
[ 4241s]             additional_search_path = [".", module_path] + path
[ 4241s]             if os.path.exists(something):
[ 4241s]                 # this is a file or a directory
[ 4241s]                 try:
[ 4241s]                     modname = ".".join(
[ 4241s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4241s]                     )
[ 4241s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4241s] 
[ 4241s] pylint/utils/utils.py:159: TypeError
[ 4241s] _______________ test_functional[postponed_evaluation_activated] ________________
[ 4241s] 
[ 4241s] test_file = FunctionalTest:postponed_evaluation_activated
[ 4241s] 
[ 4241s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4241s]     def test_functional(test_file):
[ 4241s]         LintTest = (
[ 4241s]             LintModuleOutputUpdate(test_file)
[ 4241s]             if UPDATE
[ 4241s]             else testutils.LintModuleTest(test_file)
[ 4241s]         )
[ 4241s]         LintTest.setUp()
[ 4241s] >       LintTest._runTest()
[ 4241s] 
[ 4241s] tests/test_functional.py:102: 
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] pylint/testutils.py:595: in _runTest
[ 4241s]     self._linter.check(modules_to_check)
[ 4241s] pylint/lint/pylinter.py:862: in check
[ 4241s]     self._check_files(
[ 4241s] pylint/lint/pylinter.py:895: in _check_files
[ 4241s]     for name, filepath, modname in file_descrs:
[ 4241s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4241s]     for descr in self._expand_files(files_or_modules):
[ 4241s] pylint/lint/pylinter.py:960: in _expand_files
[ 4241s]     result, errors = utils.expand_modules(
[ 4241s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4241s] 
[ 4241s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/p/postponed_evaluation_activated.py']
[ 4241s] black_list = ('CVS',), black_list_re = []
[ 4241s] 
[ 4241s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4241s]         """take a list of files/modules/packages and return the list of tuple
[ 4241s]         (file, module name) which have to be actually checked
[ 4241s]         """
[ 4241s]         result = []
[ 4241s]         errors = []
[ 4241s]         path = sys.path.copy()
[ 4241s]     
[ 4241s]         for something in files_or_modules:
[ 4241s]             if os.path.basename(something) in black_list:
[ 4241s]                 continue
[ 4241s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4241s]                 continue
[ 4241s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ______________________ test_functional[logical_tautology] ______________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:logical_tautology
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/logical_tautology.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] _______________________ test_functional[long_utf8_lines] _______________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:long_utf8_lines
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/long_utf8_lines.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ________________________ test_functional[line_endings] _________________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:line_endings
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/line_endings.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ________________ test_functional[logging_format_interpolation] _________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:logging_format_interpolation
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/logging_format_interpolation.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ______________ test_functional[logging_format_interpolation_py36] ______________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:logging_format_interpolation_py36
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/logging_format_interpolation_py36.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] _____________________ test_functional[literal_comparison] ______________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:literal_comparison
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/literal_comparison.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ______________________ test_functional[logging_not_lazy] _______________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:logging_not_lazy
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/logging_not_lazy.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ____________________ test_functional[long_lines_with_utf8] _____________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:long_lines_with_utf8
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/long_lines_with_utf8.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] ________________________ test_functional[line_too_long] ________________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:line_too_long
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/line_too_long.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] _______________________ test_functional[lost_exception] ________________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:lost_exception
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/lost_exception.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] _________________________ test_functional[len_checks] __________________________
[ 4242s] 
[ 4242s] test_file = FunctionalTest:len_checks
[ 4242s] 
[ 4242s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4242s]     def test_functional(test_file):
[ 4242s]         LintTest = (
[ 4242s]             LintModuleOutputUpdate(test_file)
[ 4242s]             if UPDATE
[ 4242s]             else testutils.LintModuleTest(test_file)
[ 4242s]         )
[ 4242s]         LintTest.setUp()
[ 4242s] >       LintTest._runTest()
[ 4242s] 
[ 4242s] tests/test_functional.py:102: 
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] pylint/testutils.py:595: in _runTest
[ 4242s]     self._linter.check(modules_to_check)
[ 4242s] pylint/lint/pylinter.py:862: in check
[ 4242s]     self._check_files(
[ 4242s] pylint/lint/pylinter.py:895: in _check_files
[ 4242s]     for name, filepath, modname in file_descrs:
[ 4242s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4242s]     for descr in self._expand_files(files_or_modules):
[ 4242s] pylint/lint/pylinter.py:960: in _expand_files
[ 4242s]     result, errors = utils.expand_modules(
[ 4242s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4242s] 
[ 4242s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/len_checks.py']
[ 4242s] black_list = ('CVS',), black_list_re = []
[ 4242s] 
[ 4242s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4242s]         """take a list of files/modules/packages and return the list of tuple
[ 4242s]         (file, module name) which have to be actually checked
[ 4242s]         """
[ 4242s]         result = []
[ 4242s]         errors = []
[ 4242s]         path = sys.path.copy()
[ 4242s]     
[ 4242s]         for something in files_or_modules:
[ 4242s]             if os.path.basename(something) in black_list:
[ 4242s]                 continue
[ 4242s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4242s]                 continue
[ 4242s]     
[ 4242s]             module_path = get_python_path(something)
[ 4242s]             additional_search_path = [".", module_path] + path
[ 4242s]             if os.path.exists(something):
[ 4242s]                 # this is a file or a directory
[ 4242s]                 try:
[ 4242s]                     modname = ".".join(
[ 4242s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4242s]                     )
[ 4242s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4242s] 
[ 4242s] pylint/utils/utils.py:159: TypeError
[ 4242s] _____________ test_functional[logging_fstring_interpolation_py36] ______________
[ 4242s] 
[ 4243s] test_file = FunctionalTest:logging_fstring_interpolation_py36
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/logging_fstring_interpolation_py36.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] _________________ test_functional[line_too_long_end_of_module] _________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:line_too_long_end_of_module
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/l/line_too_long_end_of_module.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] _________________________ test_functional[class_scope] _________________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:class_scope
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/class_scope.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] ___________________ test_functional[consider_swap_variables] ___________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:consider_swap_variables
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_swap_variables.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] ________________ test_functional[consider_iterating_dictionary] ________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:consider_iterating_dictionary
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_iterating_dictionary.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] _______________________ test_functional[ctor_arguments] ________________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:ctor_arguments
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/ctor_arguments.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] _____________ test_functional[consider_using_sys_exit_local_scope] _____________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:consider_using_sys_exit_local_scope
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_sys_exit_local_scope.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] _____________________ test_functional[class_members_py36] ______________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:class_members_py36
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/class_members_py36.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] ___________ test_functional[class_variable_slots_conflict_exempted] ____________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:class_variable_slots_conflict_exempted
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/class_variable_slots_conflict_exempted.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] ______________________ test_functional[confidence_filter] ______________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:confidence_filter
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/confidence_filter.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] __________________ test_functional[consider_using_enumerate] ___________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:consider_using_enumerate
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_enumerate.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] __________________ test_functional[confusing_with_statement] ___________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:confusing_with_statement
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/confusing_with_statement.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4243s]     
[ 4243s]             module_path = get_python_path(something)
[ 4243s]             additional_search_path = [".", module_path] + path
[ 4243s]             if os.path.exists(something):
[ 4243s]                 # this is a file or a directory
[ 4243s]                 try:
[ 4243s]                     modname = ".".join(
[ 4243s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4243s]                     )
[ 4243s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4243s] 
[ 4243s] pylint/utils/utils.py:159: TypeError
[ 4243s] __________________ test_functional[comparison_with_callable] ___________________
[ 4243s] 
[ 4243s] test_file = FunctionalTest:comparison_with_callable
[ 4243s] 
[ 4243s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4243s]     def test_functional(test_file):
[ 4243s]         LintTest = (
[ 4243s]             LintModuleOutputUpdate(test_file)
[ 4243s]             if UPDATE
[ 4243s]             else testutils.LintModuleTest(test_file)
[ 4243s]         )
[ 4243s]         LintTest.setUp()
[ 4243s] >       LintTest._runTest()
[ 4243s] 
[ 4243s] tests/test_functional.py:102: 
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] pylint/testutils.py:595: in _runTest
[ 4243s]     self._linter.check(modules_to_check)
[ 4243s] pylint/lint/pylinter.py:862: in check
[ 4243s]     self._check_files(
[ 4243s] pylint/lint/pylinter.py:895: in _check_files
[ 4243s]     for name, filepath, modname in file_descrs:
[ 4243s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4243s]     for descr in self._expand_files(files_or_modules):
[ 4243s] pylint/lint/pylinter.py:960: in _expand_files
[ 4243s]     result, errors = utils.expand_modules(
[ 4243s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4243s] 
[ 4243s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/comparison_with_callable.py']
[ 4243s] black_list = ('CVS',), black_list_re = []
[ 4243s] 
[ 4243s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4243s]         """take a list of files/modules/packages and return the list of tuple
[ 4243s]         (file, module name) which have to be actually checked
[ 4243s]         """
[ 4243s]         result = []
[ 4243s]         errors = []
[ 4243s]         path = sys.path.copy()
[ 4243s]     
[ 4243s]         for something in files_or_modules:
[ 4243s]             if os.path.basename(something) in black_list:
[ 4243s]                 continue
[ 4243s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4243s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ______________ test_functional[consider_using_set_comprehension] _______________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_set_comprehension
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_set_comprehension.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ______________________ test_functional[consider_using_in] ______________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_in
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_in.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ____________________ test_functional[cellvar_escaping_loop] ____________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:cellvar_escaping_loop
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/cellvar_escaping_loop.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] _____________________ test_functional[consider_using_get] ______________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_get
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_get.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ______________ test_functional[consider_using_dict_comprehension] ______________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_dict_comprehension
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_dict_comprehension.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] _________________ test_functional[consider_merging_isinstance] _________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_merging_isinstance
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_merging_isinstance.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ______________ test_functional[consider_using_sys_exit_exempted] _______________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_sys_exit_exempted
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_sys_exit_exempted.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ___________________ test_functional[consider_using_sys_exit] ___________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_using_sys_exit
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_using_sys_exit.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] _____________________ test_functional[class_members_py30] ______________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:class_members_py30
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/class_members_py30.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] ________________________ test_functional[consider_join] ________________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:consider_join
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/consider_join.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] _______________________ test_functional[control_pragmas] _______________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:control_pragmas
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/control_pragmas.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4244s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4244s]                     )
[ 4244s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4244s] 
[ 4244s] pylint/utils/utils.py:159: TypeError
[ 4244s] __________________ test_functional[crash_missing_module_type] __________________
[ 4244s] 
[ 4244s] test_file = FunctionalTest:crash_missing_module_type
[ 4244s] 
[ 4244s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4244s]     def test_functional(test_file):
[ 4244s]         LintTest = (
[ 4244s]             LintModuleOutputUpdate(test_file)
[ 4244s]             if UPDATE
[ 4244s]             else testutils.LintModuleTest(test_file)
[ 4244s]         )
[ 4244s]         LintTest.setUp()
[ 4244s] >       LintTest._runTest()
[ 4244s] 
[ 4244s] tests/test_functional.py:102: 
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] pylint/testutils.py:595: in _runTest
[ 4244s]     self._linter.check(modules_to_check)
[ 4244s] pylint/lint/pylinter.py:862: in check
[ 4244s]     self._check_files(
[ 4244s] pylint/lint/pylinter.py:895: in _check_files
[ 4244s]     for name, filepath, modname in file_descrs:
[ 4244s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4244s]     for descr in self._expand_files(files_or_modules):
[ 4244s] pylint/lint/pylinter.py:960: in _expand_files
[ 4244s]     result, errors = utils.expand_modules(
[ 4244s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4244s] 
[ 4244s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/c/crash_missing_module_type.py']
[ 4244s] black_list = ('CVS',), black_list_re = []
[ 4244s] 
[ 4244s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4244s]         """take a list of files/modules/packages and return the list of tuple
[ 4244s]         (file, module name) which have to be actually checked
[ 4244s]         """
[ 4244s]         result = []
[ 4244s]         errors = []
[ 4244s]         path = sys.path.copy()
[ 4244s]     
[ 4244s]         for something in files_or_modules:
[ 4244s]             if os.path.basename(something) in black_list:
[ 4244s]                 continue
[ 4244s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4244s]                 continue
[ 4244s]     
[ 4244s]             module_path = get_python_path(something)
[ 4244s]             additional_search_path = [".", module_path] + path
[ 4244s]             if os.path.exists(something):
[ 4244s]                 # this is a file or a directory
[ 4244s]                 try:
[ 4244s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ____________________ test_functional[recursion_error_2667] _____________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:recursion_error_2667
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_2667.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] _______________________ test_functional[regression_3091] _______________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_3091
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_3091.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ____________________ test_functional[recursion_error_crash] ____________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:recursion_error_crash
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_crash.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ____________________ test_functional[raising_format_tuple] _____________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:raising_format_tuple
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/raising_format_tuple.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] __________________ test_functional[recursion_regression_2960] __________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:recursion_regression_2960
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_regression_2960.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] __________________ test_functional[regression_no_member_1078] __________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_no_member_1078
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_no_member_1078.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] _______________ test_functional[regression_2443_duplicate_bases] _______________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_2443_duplicate_bases
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_2443_duplicate_bases.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ______________ test_functional[regression_property_no_member_870] ______________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_property_no_member_870
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_property_no_member_870.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ____________________ test_functional[recursion_error_2899] _____________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:recursion_error_2899
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_2899.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] _____________ test_functional[regression_too_many_arguments_2335] ______________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_too_many_arguments_2335
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_too_many_arguments_2335.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] _________________ test_functional[recursion_error_crash_2683] __________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:recursion_error_crash_2683
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_crash_2683.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] _____________ test_functional[regression_3231_no_member_property] ______________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_3231_no_member_property
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_3231_no_member_property.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4245s]     
[ 4245s]         for something in files_or_modules:
[ 4245s]             if os.path.basename(something) in black_list:
[ 4245s]                 continue
[ 4245s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4245s]                 continue
[ 4245s]     
[ 4245s]             module_path = get_python_path(something)
[ 4245s]             additional_search_path = [".", module_path] + path
[ 4245s]             if os.path.exists(something):
[ 4245s]                 # this is a file or a directory
[ 4245s]                 try:
[ 4245s]                     modname = ".".join(
[ 4245s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4245s]                     )
[ 4245s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4245s] 
[ 4245s] pylint/utils/utils.py:159: TypeError
[ 4245s] ____________________ test_functional[regression_2937_ifexp] ____________________
[ 4245s] 
[ 4245s] test_file = FunctionalTest:regression_2937_ifexp
[ 4245s] 
[ 4245s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4245s]     def test_functional(test_file):
[ 4245s]         LintTest = (
[ 4245s]             LintModuleOutputUpdate(test_file)
[ 4245s]             if UPDATE
[ 4245s]             else testutils.LintModuleTest(test_file)
[ 4245s]         )
[ 4245s]         LintTest.setUp()
[ 4245s] >       LintTest._runTest()
[ 4245s] 
[ 4245s] tests/test_functional.py:102: 
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] pylint/testutils.py:595: in _runTest
[ 4245s]     self._linter.check(modules_to_check)
[ 4245s] pylint/lint/pylinter.py:862: in check
[ 4245s]     self._check_files(
[ 4245s] pylint/lint/pylinter.py:895: in _check_files
[ 4245s]     for name, filepath, modname in file_descrs:
[ 4245s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4245s]     for descr in self._expand_files(files_or_modules):
[ 4245s] pylint/lint/pylinter.py:960: in _expand_files
[ 4245s]     result, errors = utils.expand_modules(
[ 4245s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4245s] 
[ 4245s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_2937_ifexp.py']
[ 4245s] black_list = ('CVS',), black_list_re = []
[ 4245s] 
[ 4245s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4245s]         """take a list of files/modules/packages and return the list of tuple
[ 4245s]         (file, module name) which have to be actually checked
[ 4245s]         """
[ 4245s]         result = []
[ 4245s]         errors = []
[ 4245s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] _________________ test_functional[reused_outer_loop_variable] __________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:reused_outer_loop_variable
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/reused_outer_loop_variable.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] __________________ test_functional[redeclared_assigned_name] ___________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:redeclared_assigned_name
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/redeclared_assigned_name.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] ______________ test_functional[recursion_error_crash_astroid_623] ______________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:recursion_error_crash_astroid_623
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_crash_astroid_623.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] _________________________ test_functional[reimported] __________________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:reimported
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/reimported.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] __________________ test_functional[redundant_unittest_assert] __________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:redundant_unittest_assert
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/redundant_unittest_assert.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] ____________________ test_functional[recursion_error_2861] _____________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:recursion_error_2861
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_2861.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] ________________________ test_functional[raising_self] _________________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:raising_self
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/raising_self.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] _______________________ test_functional[return_in_init] ________________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:return_in_init
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/return_in_init.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] _____________________ test_functional[raise_missing_from] ______________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:raise_missing_from
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/raise_missing_from.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] ______________ test_functional[regression_infer_call_result_3690] ______________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:regression_infer_call_result_3690
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_infer_call_result_3690.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4246s]                 # this is a file or a directory
[ 4246s]                 try:
[ 4246s]                     modname = ".".join(
[ 4246s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4246s]                     )
[ 4246s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4246s] 
[ 4246s] pylint/utils/utils.py:159: TypeError
[ 4246s] ________________ test_functional[redefined_argument_from_local] ________________
[ 4246s] 
[ 4246s] test_file = FunctionalTest:redefined_argument_from_local
[ 4246s] 
[ 4246s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4246s]     def test_functional(test_file):
[ 4246s]         LintTest = (
[ 4246s]             LintModuleOutputUpdate(test_file)
[ 4246s]             if UPDATE
[ 4246s]             else testutils.LintModuleTest(test_file)
[ 4246s]         )
[ 4246s]         LintTest.setUp()
[ 4246s] >       LintTest._runTest()
[ 4246s] 
[ 4246s] tests/test_functional.py:102: 
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] pylint/testutils.py:595: in _runTest
[ 4246s]     self._linter.check(modules_to_check)
[ 4246s] pylint/lint/pylinter.py:862: in check
[ 4246s]     self._check_files(
[ 4246s] pylint/lint/pylinter.py:895: in _check_files
[ 4246s]     for name, filepath, modname in file_descrs:
[ 4246s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4246s]     for descr in self._expand_files(files_or_modules):
[ 4246s] pylint/lint/pylinter.py:960: in _expand_files
[ 4246s]     result, errors = utils.expand_modules(
[ 4246s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4246s] 
[ 4246s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/redefined_argument_from_local.py']
[ 4246s] black_list = ('CVS',), black_list_re = []
[ 4246s] 
[ 4246s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4246s]         """take a list of files/modules/packages and return the list of tuple
[ 4246s]         (file, module name) which have to be actually checked
[ 4246s]         """
[ 4246s]         result = []
[ 4246s]         errors = []
[ 4246s]         path = sys.path.copy()
[ 4246s]     
[ 4246s]         for something in files_or_modules:
[ 4246s]             if os.path.basename(something) in black_list:
[ 4246s]                 continue
[ 4246s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4246s]                 continue
[ 4246s]     
[ 4246s]             module_path = get_python_path(something)
[ 4246s]             additional_search_path = [".", module_path] + path
[ 4246s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] _______________ test_functional[reused_outer_loop_variable_py3] ________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:reused_outer_loop_variable_py3
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/reused_outer_loop_variable_py3.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ______________ test_functional[regression_1326_crash_uninferable] ______________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:regression_1326_crash_uninferable
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_1326_crash_uninferable.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ____________________ test_functional[recursion_error_3159] _____________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:recursion_error_3159
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_3159.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] _______________ test_functional[regression_property_slots_2439] ________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:regression_property_slots_2439
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_property_slots_2439.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ___________________ test_functional[return_outside_function] ___________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:return_outside_function
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/return_outside_function.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] _____________________ test_functional[recursion_error_940] _____________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:recursion_error_940
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_940.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ____________ test_functional[regression_3416_unused_argument_raise] ____________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:regression_3416_unused_argument_raise
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_3416_unused_argument_raise.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ____________________ test_functional[recursion_error_3152] _____________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:recursion_error_3152
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_3152.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ______________________ test_functional[repeated_keyword] _______________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:repeated_keyword
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/repeated_keyword.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ____________________ test_functional[recursion_error_2906] _____________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:recursion_error_2906
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_2906.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] ___________________ test_functional[regression_posonly_args] ___________________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:regression_posonly_args
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] pylint/testutils.py:595: in _runTest
[ 4247s]     self._linter.check(modules_to_check)
[ 4247s] pylint/lint/pylinter.py:862: in check
[ 4247s]     self._check_files(
[ 4247s] pylint/lint/pylinter.py:895: in _check_files
[ 4247s]     for name, filepath, modname in file_descrs:
[ 4247s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4247s]     for descr in self._expand_files(files_or_modules):
[ 4247s] pylint/lint/pylinter.py:960: in _expand_files
[ 4247s]     result, errors = utils.expand_modules(
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4247s] 
[ 4247s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_posonly_args.py']
[ 4247s] black_list = ('CVS',), black_list_re = []
[ 4247s] 
[ 4247s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4247s]         """take a list of files/modules/packages and return the list of tuple
[ 4247s]         (file, module name) which have to be actually checked
[ 4247s]         """
[ 4247s]         result = []
[ 4247s]         errors = []
[ 4247s]         path = sys.path.copy()
[ 4247s]     
[ 4247s]         for something in files_or_modules:
[ 4247s]             if os.path.basename(something) in black_list:
[ 4247s]                 continue
[ 4247s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4247s]                 continue
[ 4247s]     
[ 4247s]             module_path = get_python_path(something)
[ 4247s]             additional_search_path = [".", module_path] + path
[ 4247s]             if os.path.exists(something):
[ 4247s]                 # this is a file or a directory
[ 4247s]                 try:
[ 4247s]                     modname = ".".join(
[ 4247s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4247s]                     )
[ 4247s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4247s] 
[ 4247s] pylint/utils/utils.py:159: TypeError
[ 4247s] _____________ test_functional[redefined_outer_name_type_checking] ______________
[ 4247s] 
[ 4247s] test_file = FunctionalTest:redefined_outer_name_type_checking
[ 4247s] 
[ 4247s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4247s]     def test_functional(test_file):
[ 4247s]         LintTest = (
[ 4247s]             LintModuleOutputUpdate(test_file)
[ 4247s]             if UPDATE
[ 4247s]             else testutils.LintModuleTest(test_file)
[ 4247s]         )
[ 4247s]         LintTest.setUp()
[ 4247s] >       LintTest._runTest()
[ 4247s] 
[ 4247s] tests/test_functional.py:102: 
[ 4247s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/redefined_outer_name_type_checking.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ______________ test_functional[regression_property_no_member_844] ______________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:regression_property_no_member_844
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_property_no_member_844.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ______________________ test_functional[redefined_builtin] ______________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:redefined_builtin
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/redefined_builtin.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] _____________ test_functional[regression_property_no_member_3269] ______________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:regression_property_no_member_3269
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_property_no_member_3269.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ____________________ test_functional[recursion_error_2836] _____________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:recursion_error_2836
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/recursion_error_2836.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] __________________ test_functional[raising_non_exception_py3] __________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:raising_non_exception_py3
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/raising_non_exception_py3.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ______________ test_functional[regression_no_value_for_parameter] ______________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:regression_no_value_for_parameter
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_no_value_for_parameter.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] _____________ test_functional[regression_property_no_member_2641] ______________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:regression_property_no_member_2641
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/r/regression_property_no_member_2641.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ____________________ test_functional[old_division_manually] ____________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:old_division_manually
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/o/old_division_manually.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] _____________________ test_functional[old_division_floats] _____________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:old_division_floats
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/o/old_division_floats.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ______________________ test_functional[blacklisted_name] _______________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:blacklisted_name
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/blacklisted_name.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ____________________ test_functional[bad_exception_context] ____________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:bad_exception_context
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_exception_context.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] ____________________ test_functional[bad_reversed_sequence] ____________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:bad_reversed_sequence
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_reversed_sequence.py']
[ 4248s] black_list = ('CVS',), black_list_re = []
[ 4248s] 
[ 4248s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4248s]         """take a list of files/modules/packages and return the list of tuple
[ 4248s]         (file, module name) which have to be actually checked
[ 4248s]         """
[ 4248s]         result = []
[ 4248s]         errors = []
[ 4248s]         path = sys.path.copy()
[ 4248s]     
[ 4248s]         for something in files_or_modules:
[ 4248s]             if os.path.basename(something) in black_list:
[ 4248s]                 continue
[ 4248s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4248s]                 continue
[ 4248s]     
[ 4248s]             module_path = get_python_path(something)
[ 4248s]             additional_search_path = [".", module_path] + path
[ 4248s]             if os.path.exists(something):
[ 4248s]                 # this is a file or a directory
[ 4248s]                 try:
[ 4248s]                     modname = ".".join(
[ 4248s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4248s]                     )
[ 4248s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4248s] 
[ 4248s] pylint/utils/utils.py:159: TypeError
[ 4248s] __________________ test_functional[bad_thread_instantiation] ___________________
[ 4248s] 
[ 4248s] test_file = FunctionalTest:bad_thread_instantiation
[ 4248s] 
[ 4248s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4248s]     def test_functional(test_file):
[ 4248s]         LintTest = (
[ 4248s]             LintModuleOutputUpdate(test_file)
[ 4248s]             if UPDATE
[ 4248s]             else testutils.LintModuleTest(test_file)
[ 4248s]         )
[ 4248s]         LintTest.setUp()
[ 4248s] >       LintTest._runTest()
[ 4248s] 
[ 4248s] tests/test_functional.py:102: 
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] pylint/testutils.py:595: in _runTest
[ 4248s]     self._linter.check(modules_to_check)
[ 4248s] pylint/lint/pylinter.py:862: in check
[ 4248s]     self._check_files(
[ 4248s] pylint/lint/pylinter.py:895: in _check_files
[ 4248s]     for name, filepath, modname in file_descrs:
[ 4248s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4248s]     for descr in self._expand_files(files_or_modules):
[ 4248s] pylint/lint/pylinter.py:960: in _expand_files
[ 4248s]     result, errors = utils.expand_modules(
[ 4248s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4248s] 
[ 4248s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_thread_instantiation.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] _______________________ test_functional[bad_indentation] _______________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bad_indentation
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_indentation.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] _________________________ test_functional[bare_except] _________________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bare_except
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bare_except.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ______________________ test_functional[bad_inline_option] ______________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bad_inline_option
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_inline_option.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] __________________ test_functional[bad_staticmethod_argument] __________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bad_staticmethod_argument
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_staticmethod_argument.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ________________________ test_functional[broad_except] _________________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:broad_except
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/broad_except.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ______________ test_functional[bugfix_local_scope_metaclass_1177] ______________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bugfix_local_scope_metaclass_1177
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bugfix_local_scope_metaclass_1177.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ______________________ test_functional[bad_open_mode_py3] ______________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bad_open_mode_py3
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_open_mode_py3.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ______________________ test_functional[bad_except_order] _______________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:bad_except_order
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/b/bad_except_order.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] _____________________ test_functional[wrong_import_order2] _____________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_order2
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_order2.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ___________________ test_functional[wrong_import_position12] ___________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_position12
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position12.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ___________________ test_functional[wrong_import_position2] ____________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_position2
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position2.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] __________ test_functional[wrong_import_position_exclude_dunder_main] __________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_position_exclude_dunder_main
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position_exclude_dunder_main.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ___________________ test_functional[wrong_import_position5] ____________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_position5
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position5.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4249s]             if os.path.exists(something):
[ 4249s]                 # this is a file or a directory
[ 4249s]                 try:
[ 4249s]                     modname = ".".join(
[ 4249s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4249s]                     )
[ 4249s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4249s] 
[ 4249s] pylint/utils/utils.py:159: TypeError
[ 4249s] ___________________ test_functional[wrong_import_position6] ____________________
[ 4249s] 
[ 4249s] test_file = FunctionalTest:wrong_import_position6
[ 4249s] 
[ 4249s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4249s]     def test_functional(test_file):
[ 4249s]         LintTest = (
[ 4249s]             LintModuleOutputUpdate(test_file)
[ 4249s]             if UPDATE
[ 4249s]             else testutils.LintModuleTest(test_file)
[ 4249s]         )
[ 4249s]         LintTest.setUp()
[ 4249s] >       LintTest._runTest()
[ 4249s] 
[ 4249s] tests/test_functional.py:102: 
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] pylint/testutils.py:595: in _runTest
[ 4249s]     self._linter.check(modules_to_check)
[ 4249s] pylint/lint/pylinter.py:862: in check
[ 4249s]     self._check_files(
[ 4249s] pylint/lint/pylinter.py:895: in _check_files
[ 4249s]     for name, filepath, modname in file_descrs:
[ 4249s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4249s]     for descr in self._expand_files(files_or_modules):
[ 4249s] pylint/lint/pylinter.py:960: in _expand_files
[ 4249s]     result, errors = utils.expand_modules(
[ 4249s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4249s] 
[ 4249s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position6.py']
[ 4249s] black_list = ('CVS',), black_list_re = []
[ 4249s] 
[ 4249s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4249s]         """take a list of files/modules/packages and return the list of tuple
[ 4249s]         (file, module name) which have to be actually checked
[ 4249s]         """
[ 4249s]         result = []
[ 4249s]         errors = []
[ 4249s]         path = sys.path.copy()
[ 4249s]     
[ 4249s]         for something in files_or_modules:
[ 4249s]             if os.path.basename(something) in black_list:
[ 4249s]                 continue
[ 4249s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4249s]                 continue
[ 4249s]     
[ 4249s]             module_path = get_python_path(something)
[ 4249s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position11] ___________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position11
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position11.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[with_used_before_assign] ___________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:with_used_before_assign
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/with_used_before_assign.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] _______________________ test_functional[wildcard_import] _______________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wildcard_import
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wildcard_import.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position13] ___________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position13
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position13.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position7] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position7
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position7.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position3] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position3
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position3.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position8] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position8
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position8.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position4] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position4
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position4.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position14] ___________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position14
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position14.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position9] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position9
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position9.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ___________________ test_functional[wrong_import_position10] ___________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position10
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position10.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4250s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4250s]                 continue
[ 4250s]     
[ 4250s]             module_path = get_python_path(something)
[ 4250s]             additional_search_path = [".", module_path] + path
[ 4250s]             if os.path.exists(something):
[ 4250s]                 # this is a file or a directory
[ 4250s]                 try:
[ 4250s]                     modname = ".".join(
[ 4250s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4250s]                     )
[ 4250s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4250s] 
[ 4250s] pylint/utils/utils.py:159: TypeError
[ 4250s] ____________________ test_functional[wrong_import_position] ____________________
[ 4250s] 
[ 4250s] test_file = FunctionalTest:wrong_import_position
[ 4250s] 
[ 4250s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4250s]     def test_functional(test_file):
[ 4250s]         LintTest = (
[ 4250s]             LintModuleOutputUpdate(test_file)
[ 4250s]             if UPDATE
[ 4250s]             else testutils.LintModuleTest(test_file)
[ 4250s]         )
[ 4250s]         LintTest.setUp()
[ 4250s] >       LintTest._runTest()
[ 4250s] 
[ 4250s] tests/test_functional.py:102: 
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] pylint/testutils.py:595: in _runTest
[ 4250s]     self._linter.check(modules_to_check)
[ 4250s] pylint/lint/pylinter.py:862: in check
[ 4250s]     self._check_files(
[ 4250s] pylint/lint/pylinter.py:895: in _check_files
[ 4250s]     for name, filepath, modname in file_descrs:
[ 4250s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4250s]     for descr in self._expand_files(files_or_modules):
[ 4250s] pylint/lint/pylinter.py:960: in _expand_files
[ 4250s]     result, errors = utils.expand_modules(
[ 4250s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4250s] 
[ 4250s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position.py']
[ 4250s] black_list = ('CVS',), black_list_re = []
[ 4250s] 
[ 4250s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4250s]         """take a list of files/modules/packages and return the list of tuple
[ 4250s]         (file, module name) which have to be actually checked
[ 4250s]         """
[ 4250s]         result = []
[ 4250s]         errors = []
[ 4250s]         path = sys.path.copy()
[ 4250s]     
[ 4250s]         for something in files_or_modules:
[ 4250s]             if os.path.basename(something) in black_list:
[ 4250s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ____________________ test_functional[with_using_generator] _____________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:with_using_generator
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/with_using_generator.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] __________________ test_functional[wrong_exception_operation] __________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:wrong_exception_operation
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_exception_operation.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ___________________ test_functional[wildcard_import_allowed] ___________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:wildcard_import_allowed
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wildcard_import_allowed.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ___________________ test_functional[wrong_import_position15] ___________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:wrong_import_position15
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/w/wrong_import_position15.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] _____________________ test_functional[yield_outside_func] ______________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:yield_outside_func
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/y/yield_outside_func.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ___________________ test_functional[yield_from_outside_func] ___________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:yield_from_outside_func
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/y/yield_from_outside_func.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ______________ test_functional[yield_inside_async_function_py36] _______________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:yield_inside_async_function_py36
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/y/yield_inside_async_function_py36.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] __________________ test_functional[yield_from_iterable_py33] ___________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:yield_from_iterable_py33
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/y/yield_from_iterable_py33.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ____________________ test_functional[no_self_argument_py37] ____________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:no_self_argument_py37
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_self_argument_py37.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] _____________________ test_functional[namePresetCamelCase] _____________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:namePresetCamelCase
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/namePresetCamelCase.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] _________________________ test_functional[no_self_use] _________________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:no_self_use
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_self_use.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ______________________ test_functional[no_name_in_module] ______________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:no_name_in_module
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_name_in_module.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ________________________ test_functional[no_else_break] ________________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:no_else_break
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4251s]     for name, filepath, modname in file_descrs:
[ 4251s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4251s]     for descr in self._expand_files(files_or_modules):
[ 4251s] pylint/lint/pylinter.py:960: in _expand_files
[ 4251s]     result, errors = utils.expand_modules(
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] 
[ 4251s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_else_break.py']
[ 4251s] black_list = ('CVS',), black_list_re = []
[ 4251s] 
[ 4251s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4251s]         """take a list of files/modules/packages and return the list of tuple
[ 4251s]         (file, module name) which have to be actually checked
[ 4251s]         """
[ 4251s]         result = []
[ 4251s]         errors = []
[ 4251s]         path = sys.path.copy()
[ 4251s]     
[ 4251s]         for something in files_or_modules:
[ 4251s]             if os.path.basename(something) in black_list:
[ 4251s]                 continue
[ 4251s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4251s]                 continue
[ 4251s]     
[ 4251s]             module_path = get_python_path(something)
[ 4251s]             additional_search_path = [".", module_path] + path
[ 4251s]             if os.path.exists(something):
[ 4251s]                 # this is a file or a directory
[ 4251s]                 try:
[ 4251s]                     modname = ".".join(
[ 4251s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4251s]                     )
[ 4251s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4251s] 
[ 4251s] pylint/utils/utils.py:159: TypeError
[ 4251s] ___________________ test_functional[name_preset_snake_case] ____________________
[ 4251s] 
[ 4251s] test_file = FunctionalTest:name_preset_snake_case
[ 4251s] 
[ 4251s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4251s]     def test_functional(test_file):
[ 4251s]         LintTest = (
[ 4251s]             LintModuleOutputUpdate(test_file)
[ 4251s]             if UPDATE
[ 4251s]             else testutils.LintModuleTest(test_file)
[ 4251s]         )
[ 4251s]         LintTest.setUp()
[ 4251s] >       LintTest._runTest()
[ 4251s] 
[ 4251s] tests/test_functional.py:102: 
[ 4251s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4251s] pylint/testutils.py:595: in _runTest
[ 4251s]     self._linter.check(modules_to_check)
[ 4251s] pylint/lint/pylinter.py:862: in check
[ 4251s]     self._check_files(
[ 4251s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/name_preset_snake_case.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _______________________ test_functional[no_else_return] ________________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:no_else_return
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_else_return.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _______________ test_functional[not_async_context_manager_py37] ________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:not_async_context_manager_py37
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/not_async_context_manager_py37.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] ____________________ test_functional[nonexistent_operator] _____________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:nonexistent_operator
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/nonexistent_operator.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _________________________ test_functional[not_in_loop] _________________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:not_in_loop
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/not_in_loop.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _________________ test_functional[nested_func_defined_in_loop] _________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:nested_func_defined_in_loop
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/nested_func_defined_in_loop.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] ________________________ test_functional[not_callable] _________________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:not_callable
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/not_callable.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _______________________ test_functional[no_self_use_py3] _______________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:no_self_use_py3
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_self_use_py3.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _________________________ test_functional[name_styles] _________________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:name_styles
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/name_styles.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _______________________ test_functional[names_in__all__] _______________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:names_in__all__
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/names_in__all__.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _________________ test_functional[none_dunder_protocols_py36] __________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:none_dunder_protocols_py36
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/none_dunder_protocols_py36.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _____________________ test_functional[nonlocal_and_global] _____________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:nonlocal_and_global
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/nonlocal_and_global.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] __________________ test_functional[no_staticmethod_decorator] __________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:no_staticmethod_decorator
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_staticmethod_decorator.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] _____________________ test_functional[not_context_manager] _____________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:not_context_manager
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/not_context_manager.py']
[ 4252s] black_list = ('CVS',), black_list_re = []
[ 4252s] 
[ 4252s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4252s]         """take a list of files/modules/packages and return the list of tuple
[ 4252s]         (file, module name) which have to be actually checked
[ 4252s]         """
[ 4252s]         result = []
[ 4252s]         errors = []
[ 4252s]         path = sys.path.copy()
[ 4252s]     
[ 4252s]         for something in files_or_modules:
[ 4252s]             if os.path.basename(something) in black_list:
[ 4252s]                 continue
[ 4252s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4252s]                 continue
[ 4252s]     
[ 4252s]             module_path = get_python_path(something)
[ 4252s]             additional_search_path = [".", module_path] + path
[ 4252s]             if os.path.exists(something):
[ 4252s]                 # this is a file or a directory
[ 4252s]                 try:
[ 4252s]                     modname = ".".join(
[ 4252s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4252s]                     )
[ 4252s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4252s] 
[ 4252s] pylint/utils/utils.py:159: TypeError
[ 4252s] ______________________ test_functional[no_else_continue] _______________________
[ 4252s] 
[ 4252s] test_file = FunctionalTest:no_else_continue
[ 4252s] 
[ 4252s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4252s]     def test_functional(test_file):
[ 4252s]         LintTest = (
[ 4252s]             LintModuleOutputUpdate(test_file)
[ 4252s]             if UPDATE
[ 4252s]             else testutils.LintModuleTest(test_file)
[ 4252s]         )
[ 4252s]         LintTest.setUp()
[ 4252s] >       LintTest._runTest()
[ 4252s] 
[ 4252s] tests/test_functional.py:102: 
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] pylint/testutils.py:595: in _runTest
[ 4252s]     self._linter.check(modules_to_check)
[ 4252s] pylint/lint/pylinter.py:862: in check
[ 4252s]     self._check_files(
[ 4252s] pylint/lint/pylinter.py:895: in _check_files
[ 4252s]     for name, filepath, modname in file_descrs:
[ 4252s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4252s]     for descr in self._expand_files(files_or_modules):
[ 4252s] pylint/lint/pylinter.py:960: in _expand_files
[ 4252s]     result, errors = utils.expand_modules(
[ 4252s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4252s] 
[ 4252s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_else_continue.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ______________ test_functional[non_str_assignment_to_dunder_name] ______________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:non_str_assignment_to_dunder_name
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/non_str_assignment_to_dunder_name.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ________________________ test_functional[no_else_raise] ________________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:no_else_raise
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_else_raise.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] __________________ test_functional[no_classmethod_decorator] ___________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:no_classmethod_decorator
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_classmethod_decorator.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ____________________ test_functional[non_iterator_returned] ____________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:non_iterator_returned
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/non_iterator_returned.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] __________________ test_functional[not_async_context_manager] __________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:not_async_context_manager
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/not_async_context_manager.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ___________________ test_functional[no_method_argument_py38] ___________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:no_method_argument_py38
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/no_method_argument_py38.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] _______________________ test_functional[non_ascii_name] ________________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:non_ascii_name
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/non_ascii_name.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] __________________ test_functional[nonlocal_without_binding] ___________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:nonlocal_without_binding
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/nonlocal_without_binding.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] __________________ test_functional[name_good_bad_names_regex] __________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:name_good_bad_names_regex
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/name_good_bad_names_regex.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] _________________ test_functional[namedtuple_member_inference] _________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:namedtuple_member_inference
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/namedtuple_member_inference.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ___________________ test_functional[nested_blocks_issue1088] ___________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:nested_blocks_issue1088
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/n/nested_blocks_issue1088.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ___________________ test_functional[deprecated_methods_py38] ___________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:deprecated_methods_py38
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/deprecated_methods_py38.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ________________ test_functional[dangerous_default_value_py30] _________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:dangerous_default_value_py30
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4253s]     def test_functional(test_file):
[ 4253s]         LintTest = (
[ 4253s]             LintModuleOutputUpdate(test_file)
[ 4253s]             if UPDATE
[ 4253s]             else testutils.LintModuleTest(test_file)
[ 4253s]         )
[ 4253s]         LintTest.setUp()
[ 4253s] >       LintTest._runTest()
[ 4253s] 
[ 4253s] tests/test_functional.py:102: 
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] pylint/testutils.py:595: in _runTest
[ 4253s]     self._linter.check(modules_to_check)
[ 4253s] pylint/lint/pylinter.py:862: in check
[ 4253s]     self._check_files(
[ 4253s] pylint/lint/pylinter.py:895: in _check_files
[ 4253s]     for name, filepath, modname in file_descrs:
[ 4253s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4253s]     for descr in self._expand_files(files_or_modules):
[ 4253s] pylint/lint/pylinter.py:960: in _expand_files
[ 4253s]     result, errors = utils.expand_modules(
[ 4253s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4253s] 
[ 4253s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/dangerous_default_value_py30.py']
[ 4253s] black_list = ('CVS',), black_list_re = []
[ 4253s] 
[ 4253s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4253s]         """take a list of files/modules/packages and return the list of tuple
[ 4253s]         (file, module name) which have to be actually checked
[ 4253s]         """
[ 4253s]         result = []
[ 4253s]         errors = []
[ 4253s]         path = sys.path.copy()
[ 4253s]     
[ 4253s]         for something in files_or_modules:
[ 4253s]             if os.path.basename(something) in black_list:
[ 4253s]                 continue
[ 4253s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4253s]                 continue
[ 4253s]     
[ 4253s]             module_path = get_python_path(something)
[ 4253s]             additional_search_path = [".", module_path] + path
[ 4253s]             if os.path.exists(something):
[ 4253s]                 # this is a file or a directory
[ 4253s]                 try:
[ 4253s]                     modname = ".".join(
[ 4253s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4253s]                     )
[ 4253s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4253s] 
[ 4253s] pylint/utils/utils.py:159: TypeError
[ 4253s] ______________________ test_functional[duplicate_except] _______________________
[ 4253s] 
[ 4253s] test_file = FunctionalTest:duplicate_except
[ 4253s] 
[ 4253s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4254s]     def test_functional(test_file):
[ 4254s]         LintTest = (
[ 4254s]             LintModuleOutputUpdate(test_file)
[ 4254s]             if UPDATE
[ 4254s]             else testutils.LintModuleTest(test_file)
[ 4254s]         )
[ 4254s]         LintTest.setUp()
[ 4254s] >       LintTest._runTest()
[ 4254s] 
[ 4254s] tests/test_functional.py:102: 
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] pylint/testutils.py:595: in _runTest
[ 4254s]     self._linter.check(modules_to_check)
[ 4254s] pylint/lint/pylinter.py:862: in check
[ 4254s]     self._check_files(
[ 4254s] pylint/lint/pylinter.py:895: in _check_files
[ 4254s]     for name, filepath, modname in file_descrs:
[ 4254s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4254s]     for descr in self._expand_files(files_or_modules):
[ 4254s] pylint/lint/pylinter.py:960: in _expand_files
[ 4254s]     result, errors = utils.expand_modules(
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] 
[ 4254s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_except.py']
[ 4254s] black_list = ('CVS',), black_list_re = []
[ 4254s] 
[ 4254s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4254s]         """take a list of files/modules/packages and return the list of tuple
[ 4254s]         (file, module name) which have to be actually checked
[ 4254s]         """
[ 4254s]         result = []
[ 4254s]         errors = []
[ 4254s]         path = sys.path.copy()
[ 4254s]     
[ 4254s]         for something in files_or_modules:
[ 4254s]             if os.path.basename(something) in black_list:
[ 4254s]                 continue
[ 4254s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4254s]                 continue
[ 4254s]     
[ 4254s]             module_path = get_python_path(something)
[ 4254s]             additional_search_path = [".", module_path] + path
[ 4254s]             if os.path.exists(something):
[ 4254s]                 # this is a file or a directory
[ 4254s]                 try:
[ 4254s]                     modname = ".".join(
[ 4254s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4254s]                     )
[ 4254s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4254s] 
[ 4254s] pylint/utils/utils.py:159: TypeError
[ 4254s] ________________ test_functional[disable_msg_github_issue_1389] ________________
[ 4254s] 
[ 4254s] test_file = FunctionalTest:disable_msg_github_issue_1389
[ 4254s] 
[ 4254s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4254s]     def test_functional(test_file):
[ 4254s]         LintTest = (
[ 4254s]             LintModuleOutputUpdate(test_file)
[ 4254s]             if UPDATE
[ 4254s]             else testutils.LintModuleTest(test_file)
[ 4254s]         )
[ 4254s]         LintTest.setUp()
[ 4254s] >       LintTest._runTest()
[ 4254s] 
[ 4254s] tests/test_functional.py:102: 
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] pylint/testutils.py:595: in _runTest
[ 4254s]     self._linter.check(modules_to_check)
[ 4254s] pylint/lint/pylinter.py:862: in check
[ 4254s]     self._check_files(
[ 4254s] pylint/lint/pylinter.py:895: in _check_files
[ 4254s]     for name, filepath, modname in file_descrs:
[ 4254s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4254s]     for descr in self._expand_files(files_or_modules):
[ 4254s] pylint/lint/pylinter.py:960: in _expand_files
[ 4254s]     result, errors = utils.expand_modules(
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] 
[ 4254s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/disable_msg_github_issue_1389.py']
[ 4254s] black_list = ('CVS',), black_list_re = []
[ 4254s] 
[ 4254s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4254s]         """take a list of files/modules/packages and return the list of tuple
[ 4254s]         (file, module name) which have to be actually checked
[ 4254s]         """
[ 4254s]         result = []
[ 4254s]         errors = []
[ 4254s]         path = sys.path.copy()
[ 4254s]     
[ 4254s]         for something in files_or_modules:
[ 4254s]             if os.path.basename(something) in black_list:
[ 4254s]                 continue
[ 4254s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4254s]                 continue
[ 4254s]     
[ 4254s]             module_path = get_python_path(something)
[ 4254s]             additional_search_path = [".", module_path] + path
[ 4254s]             if os.path.exists(something):
[ 4254s]                 # this is a file or a directory
[ 4254s]                 try:
[ 4254s]                     modname = ".".join(
[ 4254s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4254s]                     )
[ 4254s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4254s] 
[ 4254s] pylint/utils/utils.py:159: TypeError
[ 4254s] ___________________ test_functional[deprecated_module_py36] ____________________
[ 4254s] 
[ 4254s] test_file = FunctionalTest:deprecated_module_py36
[ 4254s] 
[ 4254s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4254s]     def test_functional(test_file):
[ 4254s]         LintTest = (
[ 4254s]             LintModuleOutputUpdate(test_file)
[ 4254s]             if UPDATE
[ 4254s]             else testutils.LintModuleTest(test_file)
[ 4254s]         )
[ 4254s]         LintTest.setUp()
[ 4254s] >       LintTest._runTest()
[ 4254s] 
[ 4254s] tests/test_functional.py:102: 
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] pylint/testutils.py:595: in _runTest
[ 4254s]     self._linter.check(modules_to_check)
[ 4254s] pylint/lint/pylinter.py:862: in check
[ 4254s]     self._check_files(
[ 4254s] pylint/lint/pylinter.py:895: in _check_files
[ 4254s]     for name, filepath, modname in file_descrs:
[ 4254s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4254s]     for descr in self._expand_files(files_or_modules):
[ 4254s] pylint/lint/pylinter.py:960: in _expand_files
[ 4254s]     result, errors = utils.expand_modules(
[ 4254s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4254s] 
[ 4254s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/deprecated_module_py36.py']
[ 4254s] black_list = ('CVS',), black_list_re = []
[ 4254s] 
[ 4254s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4254s]         """take a list of files/modules/packages and return the list of tuple
[ 4254s]         (file, module name) which have to be actually checked
[ 4254s]         """
[ 4254s]         result = []
[ 4254s]         errors = []
[ 4254s]         path = sys.path.copy()
[ 4254s]     
[ 4254s]         for something in files_or_modules:
[ 4254s]             if os.path.basename(something) in black_list:
[ 4254s]                 continue
[ 4254s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4254s]                 continue
[ 4254s]     
[ 4254s]             module_path = get_python_path(something)
[ 4254s]             additional_search_path = [".", module_path] + path
[ 4254s]             if os.path.exists(something):
[ 4254s]                 # this is a file or a directory
[ 4254s]                 try:
[ 4254s]                     modname = ".".join(
[ 4254s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4254s]                     )
[ 4254s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4254s] 
[ 4254s] pylint/utils/utils.py:159: TypeError
[ 4254s] _________________________ test_functional[docstrings] __________________________
[ 4254s] 
[ 4254s] test_file = FunctionalTest:docstrings
[ 4254s] 
[ 4254s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4254s]     def test_functional(test_file):
[ 4254s]         LintTest = (
[ 4254s]             LintModuleOutputUpdate(test_file)
[ 4254s]             if UPDATE
[ 4254s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/docstrings.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] _______________________ test_functional[duplicate_bases] _______________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:duplicate_bases
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_bases.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ________________ test_functional[disable_wrong_import_position] ________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:disable_wrong_import_position
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/disable_wrong_import_position.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] _________________ test_functional[duplicate_argument_name_py3] _________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:duplicate_argument_name_py3
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_argument_name_py3.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] _________________ test_functional[disable_wrong_import_order] __________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:disable_wrong_import_order
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/disable_wrong_import_order.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ___________________ test_functional[duplicate_argument_name] ___________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:duplicate_argument_name
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_argument_name.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] _________________ test_functional[duplicate_dict_literal_key] __________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:duplicate_dict_literal_key
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_dict_literal_key.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ________________ test_functional[deprecated_module_uninstalled] ________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:deprecated_module_uninstalled
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/deprecated_module_uninstalled.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ___________________ test_functional[dict_iter_missing_items] ___________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:dict_iter_missing_items
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/dict_iter_missing_items.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ____________________ test_functional[deprecated_module_py4] ____________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:deprecated_module_py4
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/deprecated_module_py4.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ___________________ test_functional[deprecated_methods_py36] ___________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:deprecated_methods_py36
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/deprecated_methods_py36.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] __________________ test_functional[disable_ungrouped_imports] __________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:disable_ungrouped_imports
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/disable_ungrouped_imports.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ____________ test_functional[duplicate_string_formatting_argument] _____________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:duplicate_string_formatting_argument
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4255s] pylint/lint/pylinter.py:895: in _check_files
[ 4255s]     for name, filepath, modname in file_descrs:
[ 4255s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4255s]     for descr in self._expand_files(files_or_modules):
[ 4255s] pylint/lint/pylinter.py:960: in _expand_files
[ 4255s]     result, errors = utils.expand_modules(
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] 
[ 4255s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/duplicate_string_formatting_argument.py']
[ 4255s] black_list = ('CVS',), black_list_re = []
[ 4255s] 
[ 4255s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4255s]         """take a list of files/modules/packages and return the list of tuple
[ 4255s]         (file, module name) which have to be actually checked
[ 4255s]         """
[ 4255s]         result = []
[ 4255s]         errors = []
[ 4255s]         path = sys.path.copy()
[ 4255s]     
[ 4255s]         for something in files_or_modules:
[ 4255s]             if os.path.basename(something) in black_list:
[ 4255s]                 continue
[ 4255s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4255s]                 continue
[ 4255s]     
[ 4255s]             module_path = get_python_path(something)
[ 4255s]             additional_search_path = [".", module_path] + path
[ 4255s]             if os.path.exists(something):
[ 4255s]                 # this is a file or a directory
[ 4255s]                 try:
[ 4255s]                     modname = ".".join(
[ 4255s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4255s]                     )
[ 4255s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4255s] 
[ 4255s] pylint/utils/utils.py:159: TypeError
[ 4255s] ________________ test_functional[defined_and_used_on_same_line] ________________
[ 4255s] 
[ 4255s] test_file = FunctionalTest:defined_and_used_on_same_line
[ 4255s] 
[ 4255s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4255s]     def test_functional(test_file):
[ 4255s]         LintTest = (
[ 4255s]             LintModuleOutputUpdate(test_file)
[ 4255s]             if UPDATE
[ 4255s]             else testutils.LintModuleTest(test_file)
[ 4255s]         )
[ 4255s]         LintTest.setUp()
[ 4255s] >       LintTest._runTest()
[ 4255s] 
[ 4255s] tests/test_functional.py:102: 
[ 4255s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4255s] pylint/testutils.py:595: in _runTest
[ 4255s]     self._linter.check(modules_to_check)
[ 4255s] pylint/lint/pylinter.py:862: in check
[ 4255s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/d/defined_and_used_on_same_line.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ________________ test_functional[too_many_arguments_issue_1045] ________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_arguments_issue_1045
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_arguments_issue_1045.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ______________________ test_functional[too_many_branches] ______________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_branches
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_branches.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] _____________________ test_functional[too_many_ancestors] ______________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_ancestors
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_ancestors.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ___________________ test_functional[too_many_nested_blocks] ____________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_nested_blocks
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_nested_blocks.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ___________________ test_functional[too_many_public_methods] ___________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_public_methods
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_public_methods.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ________________ test_functional[too_many_instance_attributes] _________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_instance_attributes
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_instance_attributes.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] _____________________ test_functional[too_many_statements] _____________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_statements
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_statements.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] _______________________ test_functional[too_many_locals] _______________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_locals
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_locals.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] __________________ test_functional[too_few_public_methods_37] __________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_few_public_methods_37
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_few_public_methods_37.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] _________________ test_functional[too_many_return_statements] __________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_return_statements
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_return_statements.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] ___________________ test_functional[too_few_public_methods] ____________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_few_public_methods
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_few_public_methods.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] _______________________ test_functional[too_many_lines] ________________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_lines
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_lines.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4256s]         """take a list of files/modules/packages and return the list of tuple
[ 4256s]         (file, module name) which have to be actually checked
[ 4256s]         """
[ 4256s]         result = []
[ 4256s]         errors = []
[ 4256s]         path = sys.path.copy()
[ 4256s]     
[ 4256s]         for something in files_or_modules:
[ 4256s]             if os.path.basename(something) in black_list:
[ 4256s]                 continue
[ 4256s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4256s]                 continue
[ 4256s]     
[ 4256s]             module_path = get_python_path(something)
[ 4256s]             additional_search_path = [".", module_path] + path
[ 4256s]             if os.path.exists(something):
[ 4256s]                 # this is a file or a directory
[ 4256s]                 try:
[ 4256s]                     modname = ".".join(
[ 4256s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4256s]                     )
[ 4256s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4256s] 
[ 4256s] pylint/utils/utils.py:159: TypeError
[ 4256s] __________________ test_functional[too_many_star_expressions] __________________
[ 4256s] 
[ 4256s] test_file = FunctionalTest:too_many_star_expressions
[ 4256s] 
[ 4256s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4256s]     def test_functional(test_file):
[ 4256s]         LintTest = (
[ 4256s]             LintModuleOutputUpdate(test_file)
[ 4256s]             if UPDATE
[ 4256s]             else testutils.LintModuleTest(test_file)
[ 4256s]         )
[ 4256s]         LintTest.setUp()
[ 4256s] >       LintTest._runTest()
[ 4256s] 
[ 4256s] tests/test_functional.py:102: 
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] pylint/testutils.py:595: in _runTest
[ 4256s]     self._linter.check(modules_to_check)
[ 4256s] pylint/lint/pylinter.py:862: in check
[ 4256s]     self._check_files(
[ 4256s] pylint/lint/pylinter.py:895: in _check_files
[ 4256s]     for name, filepath, modname in file_descrs:
[ 4256s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4256s]     for descr in self._expand_files(files_or_modules):
[ 4256s] pylint/lint/pylinter.py:960: in _expand_files
[ 4256s]     result, errors = utils.expand_modules(
[ 4256s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4256s] 
[ 4256s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_star_expressions.py']
[ 4256s] black_list = ('CVS',), black_list_re = []
[ 4256s] 
[ 4256s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] _________________ test_functional[too_many_arguments_overload] _________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:too_many_arguments_overload
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_arguments_overload.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ___________________ test_functional[too_many_lines_disabled] ___________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:too_many_lines_disabled
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_lines_disabled.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ________________ test_functional[too_many_boolean_expressions] _________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:too_many_boolean_expressions
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_boolean_expressions.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] _____________________ test_functional[too_many_arguments] ______________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:too_many_arguments
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/too/too_many_arguments.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] _________________ test_functional[used_before_assignment_488] __________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:used_before_assignment_488
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/used_before_assignment_488.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ___________________ test_functional[unpacking_non_sequence] ____________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unpacking_non_sequence
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unpacking_non_sequence.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] _____________________ test_functional[unnecessary_lambda] ______________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unnecessary_lambda
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unnecessary_lambda.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] _______________________ test_functional[unused_variable] _______________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unused_variable
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_variable.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ____________________ test_functional[unused_variable_py36] _____________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unused_variable_py36
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_variable_py36.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ____________________ test_functional[unsubscriptable_value] ____________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unsubscriptable_value
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unsubscriptable_value.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ___________________ test_functional[uninferable_all_object] ____________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:uninferable_all_object
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/uninferable_all_object.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] __________________ test_functional[unnecessary_comprehension] __________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:unnecessary_comprehension
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4257s]     self._check_files(
[ 4257s] pylint/lint/pylinter.py:895: in _check_files
[ 4257s]     for name, filepath, modname in file_descrs:
[ 4257s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4257s]     for descr in self._expand_files(files_or_modules):
[ 4257s] pylint/lint/pylinter.py:960: in _expand_files
[ 4257s]     result, errors = utils.expand_modules(
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] 
[ 4257s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unnecessary_comprehension.py']
[ 4257s] black_list = ('CVS',), black_list_re = []
[ 4257s] 
[ 4257s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4257s]         """take a list of files/modules/packages and return the list of tuple
[ 4257s]         (file, module name) which have to be actually checked
[ 4257s]         """
[ 4257s]         result = []
[ 4257s]         errors = []
[ 4257s]         path = sys.path.copy()
[ 4257s]     
[ 4257s]         for something in files_or_modules:
[ 4257s]             if os.path.basename(something) in black_list:
[ 4257s]                 continue
[ 4257s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4257s]                 continue
[ 4257s]     
[ 4257s]             module_path = get_python_path(something)
[ 4257s]             additional_search_path = [".", module_path] + path
[ 4257s]             if os.path.exists(something):
[ 4257s]                 # this is a file or a directory
[ 4257s]                 try:
[ 4257s]                     modname = ".".join(
[ 4257s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4257s]                     )
[ 4257s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4257s] 
[ 4257s] pylint/utils/utils.py:159: TypeError
[ 4257s] ____________________ test_functional[useless_else_on_loop] _____________________
[ 4257s] 
[ 4257s] test_file = FunctionalTest:useless_else_on_loop
[ 4257s] 
[ 4257s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4257s]     def test_functional(test_file):
[ 4257s]         LintTest = (
[ 4257s]             LintModuleOutputUpdate(test_file)
[ 4257s]             if UPDATE
[ 4257s]             else testutils.LintModuleTest(test_file)
[ 4257s]         )
[ 4257s]         LintTest.setUp()
[ 4257s] >       LintTest._runTest()
[ 4257s] 
[ 4257s] tests/test_functional.py:102: 
[ 4257s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4257s] pylint/testutils.py:595: in _runTest
[ 4257s]     self._linter.check(modules_to_check)
[ 4257s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_else_on_loop.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] _____________________ test_functional[undefined_variable] ______________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:undefined_variable
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/undefined_variable.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ________________________ test_functional[unneeded_not] _________________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:unneeded_not
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unneeded_not.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] _________________ test_functional[unbalanced_tuple_unpacking] __________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:unbalanced_tuple_unpacking
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unbalanced_tuple_unpacking.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] _______________ test_functional[used_before_assignment_issue853] _______________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:used_before_assignment_issue853
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/used_before_assignment_issue853.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] _____________________ test_functional[using_constant_test] _____________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:using_constant_test
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/using_constant_test.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ______________ test_functional[used_before_assignment_issue1081] _______________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:used_before_assignment_issue1081
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/used_before_assignment_issue1081.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ________________________ test_functional[unused_import] ________________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:unused_import
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_import.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ______________________ test_functional[unnecessary_pass] _______________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:unnecessary_pass
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unnecessary_pass.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] _______________________ test_functional[useless_return] ________________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:useless_return
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_return.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ___________________ test_functional[unused_global_variable4] ___________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:unused_global_variable4
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_global_variable4.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ________________ test_functional[used_prior_global_declaration] ________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:used_prior_global_declaration
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/used_prior_global_declaration.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ____________________ test_functional[useless-import-alias] _____________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:useless-import-alias
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4258s]             LintModuleOutputUpdate(test_file)
[ 4258s]             if UPDATE
[ 4258s]             else testutils.LintModuleTest(test_file)
[ 4258s]         )
[ 4258s]         LintTest.setUp()
[ 4258s] >       LintTest._runTest()
[ 4258s] 
[ 4258s] tests/test_functional.py:102: 
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] pylint/testutils.py:595: in _runTest
[ 4258s]     self._linter.check(modules_to_check)
[ 4258s] pylint/lint/pylinter.py:862: in check
[ 4258s]     self._check_files(
[ 4258s] pylint/lint/pylinter.py:895: in _check_files
[ 4258s]     for name, filepath, modname in file_descrs:
[ 4258s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4258s]     for descr in self._expand_files(files_or_modules):
[ 4258s] pylint/lint/pylinter.py:960: in _expand_files
[ 4258s]     result, errors = utils.expand_modules(
[ 4258s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4258s] 
[ 4258s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless-import-alias.py']
[ 4258s] black_list = ('CVS',), black_list_re = []
[ 4258s] 
[ 4258s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4258s]         """take a list of files/modules/packages and return the list of tuple
[ 4258s]         (file, module name) which have to be actually checked
[ 4258s]         """
[ 4258s]         result = []
[ 4258s]         errors = []
[ 4258s]         path = sys.path.copy()
[ 4258s]     
[ 4258s]         for something in files_or_modules:
[ 4258s]             if os.path.basename(something) in black_list:
[ 4258s]                 continue
[ 4258s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4258s]                 continue
[ 4258s]     
[ 4258s]             module_path = get_python_path(something)
[ 4258s]             additional_search_path = [".", module_path] + path
[ 4258s]             if os.path.exists(something):
[ 4258s]                 # this is a file or a directory
[ 4258s]                 try:
[ 4258s]                     modname = ".".join(
[ 4258s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4258s]                     )
[ 4258s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4258s] 
[ 4258s] pylint/utils/utils.py:159: TypeError
[ 4258s] ___________________ test_functional[undefined_loop_variable] ___________________
[ 4258s] 
[ 4258s] test_file = FunctionalTest:undefined_loop_variable
[ 4258s] 
[ 4258s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4258s]     def test_functional(test_file):
[ 4258s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/undefined_loop_variable.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] __________________________ test_functional[unpacking] __________________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unpacking
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unpacking.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _________________________ test_functional[unreachable] _________________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unreachable
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unreachable.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] ______________ test_functional[unused_import_everything_disabled] ______________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unused_import_everything_disabled
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_import_everything_disabled.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _____________ test_functional[unexpected_special_method_signature] _____________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unexpected_special_method_signature
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unexpected_special_method_signature.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] ___________________ test_functional[unused_global_variable2] ___________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unused_global_variable2
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_global_variable2.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _______________ test_functional[used_before_assignment_nonlocal] _______________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:used_before_assignment_nonlocal
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/used_before_assignment_nonlocal.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] ________________ test_functional[unsupported_delete_operation] _________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unsupported_delete_operation
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unsupported_delete_operation.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _________________ test_functional[unsubscriptable_value_py37] __________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unsubscriptable_value_py37
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unsubscriptable_value_py37.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _____________ test_functional[unused_import_positional_only_py38] ______________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unused_import_positional_only_py38
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_import_positional_only_py38.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _________________ test_functional[unrecognized_inline_option] __________________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unrecognized_inline_option
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unrecognized_inline_option.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] ______________ test_functional[unsupported_assignment_operation] _______________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:unsupported_assignment_operation
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unsupported_assignment_operation.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4259s]                 # this is a file or a directory
[ 4259s]                 try:
[ 4259s]                     modname = ".".join(
[ 4259s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4259s]                     )
[ 4259s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4259s] 
[ 4259s] pylint/utils/utils.py:159: TypeError
[ 4259s] _____________ test_functional[ungrouped_imports_isort_compatible] ______________
[ 4259s] 
[ 4259s] test_file = FunctionalTest:ungrouped_imports_isort_compatible
[ 4259s] 
[ 4259s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4259s]     def test_functional(test_file):
[ 4259s]         LintTest = (
[ 4259s]             LintModuleOutputUpdate(test_file)
[ 4259s]             if UPDATE
[ 4259s]             else testutils.LintModuleTest(test_file)
[ 4259s]         )
[ 4259s]         LintTest.setUp()
[ 4259s] >       LintTest._runTest()
[ 4259s] 
[ 4259s] tests/test_functional.py:102: 
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] pylint/testutils.py:595: in _runTest
[ 4259s]     self._linter.check(modules_to_check)
[ 4259s] pylint/lint/pylinter.py:862: in check
[ 4259s]     self._check_files(
[ 4259s] pylint/lint/pylinter.py:895: in _check_files
[ 4259s]     for name, filepath, modname in file_descrs:
[ 4259s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4259s]     for descr in self._expand_files(files_or_modules):
[ 4259s] pylint/lint/pylinter.py:960: in _expand_files
[ 4259s]     result, errors = utils.expand_modules(
[ 4259s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4259s] 
[ 4259s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/ungrouped_imports_isort_compatible.py']
[ 4259s] black_list = ('CVS',), black_list_re = []
[ 4259s] 
[ 4259s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4259s]         """take a list of files/modules/packages and return the list of tuple
[ 4259s]         (file, module name) which have to be actually checked
[ 4259s]         """
[ 4259s]         result = []
[ 4259s]         errors = []
[ 4259s]         path = sys.path.copy()
[ 4259s]     
[ 4259s]         for something in files_or_modules:
[ 4259s]             if os.path.basename(something) in black_list:
[ 4259s]                 continue
[ 4259s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4259s]                 continue
[ 4259s]     
[ 4259s]             module_path = get_python_path(something)
[ 4259s]             additional_search_path = [".", module_path] + path
[ 4259s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ___________________ test_functional[unused_global_variable1] ___________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unused_global_variable1
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_global_variable1.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] __________________ test_functional[useless_super_delegation] ___________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:useless_super_delegation
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_super_delegation.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ________________ test_functional[useless_super_delegation_py38] ________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:useless_super_delegation_py38
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_super_delegation_py38.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] __________________ test_functional[unused_import_assigned_to] __________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unused_import_assigned_to
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_import_assigned_to.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ___________________ test_functional[unused_global_variable3] ___________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unused_global_variable3
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_global_variable3.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] _____________________ test_functional[unhashable_dict_key] _____________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unhashable_dict_key
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unhashable_dict_key.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ____________________ test_functional[unidiomatic_typecheck] ____________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unidiomatic_typecheck
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unidiomatic_typecheck.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] _______________ test_functional[unbalanced_tuple_unpacking_py30] _______________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unbalanced_tuple_unpacking_py30
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unbalanced_tuple_unpacking_py30.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ___________________ test_functional[undefined_variable_py30] ___________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:undefined_variable_py30
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/undefined_variable_py30.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] _______________________ test_functional[unused_argument] _______________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unused_argument
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_argument.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] _____________________ test_functional[unused_argument_py3] _____________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unused_argument_py3
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unused_argument_py3.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ______________________ test_functional[ungrouped_imports] ______________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:ungrouped_imports
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/ungrouped_imports.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] __________________ test_functional[unpacking_generalizations] __________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:unpacking_generalizations
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unpacking_generalizations.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4260s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4260s] 
[ 4260s] pylint/utils/utils.py:159: TypeError
[ 4260s] ________________ test_functional[useless_super_delegation_py3] _________________
[ 4260s] 
[ 4260s] test_file = FunctionalTest:useless_super_delegation_py3
[ 4260s] 
[ 4260s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4260s]     def test_functional(test_file):
[ 4260s]         LintTest = (
[ 4260s]             LintModuleOutputUpdate(test_file)
[ 4260s]             if UPDATE
[ 4260s]             else testutils.LintModuleTest(test_file)
[ 4260s]         )
[ 4260s]         LintTest.setUp()
[ 4260s] >       LintTest._runTest()
[ 4260s] 
[ 4260s] tests/test_functional.py:102: 
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] pylint/testutils.py:595: in _runTest
[ 4260s]     self._linter.check(modules_to_check)
[ 4260s] pylint/lint/pylinter.py:862: in check
[ 4260s]     self._check_files(
[ 4260s] pylint/lint/pylinter.py:895: in _check_files
[ 4260s]     for name, filepath, modname in file_descrs:
[ 4260s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4260s]     for descr in self._expand_files(files_or_modules):
[ 4260s] pylint/lint/pylinter.py:960: in _expand_files
[ 4260s]     result, errors = utils.expand_modules(
[ 4260s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4260s] 
[ 4260s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_super_delegation_py3.py']
[ 4260s] black_list = ('CVS',), black_list_re = []
[ 4260s] 
[ 4260s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4260s]         """take a list of files/modules/packages and return the list of tuple
[ 4260s]         (file, module name) which have to be actually checked
[ 4260s]         """
[ 4260s]         result = []
[ 4260s]         errors = []
[ 4260s]         path = sys.path.copy()
[ 4260s]     
[ 4260s]         for something in files_or_modules:
[ 4260s]             if os.path.basename(something) in black_list:
[ 4260s]                 continue
[ 4260s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4260s]                 continue
[ 4260s]     
[ 4260s]             module_path = get_python_path(something)
[ 4260s]             additional_search_path = [".", module_path] + path
[ 4260s]             if os.path.exists(something):
[ 4260s]                 # this is a file or a directory
[ 4260s]                 try:
[ 4260s]                     modname = ".".join(
[ 4260s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4260s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ________________ test_functional[useless_super_delegation_py35] ________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:useless_super_delegation_py35
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_super_delegation_py35.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] _________________ test_functional[useless_object_inheritance] __________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:useless_object_inheritance
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/useless_object_inheritance.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] __________________________ test_functional[arguments] __________________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:arguments
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/arguments.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ______________________ test_functional[access_to__name__] ______________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:access_to__name__
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/access_to__name__.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] _______________ test_functional[attribute_defined_outside_init] ________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:attribute_defined_outside_init
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/attribute_defined_outside_init.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] _________________ test_functional[access_to_protected_members] _________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:access_to_protected_members
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/access_to_protected_members.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ______________ test_functional[abstract_class_instantiated_py34] _______________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:abstract_class_instantiated_py34
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/abstract_class_instantiated_py34.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] _____________________ test_functional[abstract_method_py3] _____________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:abstract_method_py3
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/abstract_method_py3.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] _______________________ test_functional[assert_on_tuple] _______________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:assert_on_tuple
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/assert_on_tuple.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ________________ test_functional[assignment_from_no_return_py3] ________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:assignment_from_no_return_py3
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/assignment_from_no_return_py3.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ___________________ test_functional[arguments_out_of_order] ____________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:arguments_out_of_order
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/arguments_out_of_order.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ______________________ test_functional[arguments_differ] _______________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:arguments_differ
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/arguments_differ.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4261s]         """take a list of files/modules/packages and return the list of tuple
[ 4261s]         (file, module name) which have to be actually checked
[ 4261s]         """
[ 4261s]         result = []
[ 4261s]         errors = []
[ 4261s]         path = sys.path.copy()
[ 4261s]     
[ 4261s]         for something in files_or_modules:
[ 4261s]             if os.path.basename(something) in black_list:
[ 4261s]                 continue
[ 4261s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4261s]                 continue
[ 4261s]     
[ 4261s]             module_path = get_python_path(something)
[ 4261s]             additional_search_path = [".", module_path] + path
[ 4261s]             if os.path.exists(something):
[ 4261s]                 # this is a file or a directory
[ 4261s]                 try:
[ 4261s]                     modname = ".".join(
[ 4261s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4261s]                     )
[ 4261s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4261s] 
[ 4261s] pylint/utils/utils.py:159: TypeError
[ 4261s] ____________________ test_functional[abstract_abc_methods] _____________________
[ 4261s] 
[ 4261s] test_file = FunctionalTest:abstract_abc_methods
[ 4261s] 
[ 4261s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4261s]     def test_functional(test_file):
[ 4261s]         LintTest = (
[ 4261s]             LintModuleOutputUpdate(test_file)
[ 4261s]             if UPDATE
[ 4261s]             else testutils.LintModuleTest(test_file)
[ 4261s]         )
[ 4261s]         LintTest.setUp()
[ 4261s] >       LintTest._runTest()
[ 4261s] 
[ 4261s] tests/test_functional.py:102: 
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] pylint/testutils.py:595: in _runTest
[ 4261s]     self._linter.check(modules_to_check)
[ 4261s] pylint/lint/pylinter.py:862: in check
[ 4261s]     self._check_files(
[ 4261s] pylint/lint/pylinter.py:895: in _check_files
[ 4261s]     for name, filepath, modname in file_descrs:
[ 4261s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4261s]     for descr in self._expand_files(files_or_modules):
[ 4261s] pylint/lint/pylinter.py:960: in _expand_files
[ 4261s]     result, errors = utils.expand_modules(
[ 4261s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4261s] 
[ 4261s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/abstract_abc_methods.py']
[ 4261s] black_list = ('CVS',), black_list_re = []
[ 4261s] 
[ 4261s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] ________________ test_functional[anomalous_unicode_escape_py3] _________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:anomalous_unicode_escape_py3
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/anomalous_unicode_escape_py3.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] _______________ test_functional[access_member_before_definition] _______________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:access_member_before_definition
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/access_member_before_definition.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] _______________ test_functional[abstract_class_instantiated_py3] _______________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:abstract_class_instantiated_py3
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/abstract_class_instantiated_py3.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] ____________ test_functional[abstract_class_instantiated_in_class] _____________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:abstract_class_instantiated_in_class
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/abstract_class_instantiated_in_class.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] __________________ test_functional[assert_on_string_literal] ___________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:assert_on_string_literal
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/assert_on_string_literal.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] ____________________ test_functional[arguments_differ_py3] _____________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:arguments_differ_py3
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/arguments_differ_py3.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] _______________________ test_functional[async_functions] _______________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:async_functions
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/async_functions.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] __________________ test_functional[assignment_from_no_return] __________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:assignment_from_no_return
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/assignment_from_no_return.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] _____________________ test_functional[assigning_non_slot] ______________________
[ 4262s] 
[ 4262s] test_file = FunctionalTest:assigning_non_slot
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize("test_file", TESTS, ids=TESTS_NAMES)
[ 4262s]     def test_functional(test_file):
[ 4262s]         LintTest = (
[ 4262s]             LintModuleOutputUpdate(test_file)
[ 4262s]             if UPDATE
[ 4262s]             else testutils.LintModuleTest(test_file)
[ 4262s]         )
[ 4262s]         LintTest.setUp()
[ 4262s] >       LintTest._runTest()
[ 4262s] 
[ 4262s] tests/test_functional.py:102: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/testutils.py:595: in _runTest
[ 4262s]     self._linter.check(modules_to_check)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/assigning_non_slot.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] ___________________________ test_checker_dep_graphs ____________________________
[ 4262s] 
[ 4262s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4262s] 
[ 4262s]     @pytest.mark.usefixtures("remove_files")
[ 4262s]     def test_checker_dep_graphs(linter):
[ 4262s]         l = linter
[ 4262s]         l.global_set_option("persistent", False)
[ 4262s]         l.global_set_option("reports", True)
[ 4262s]         l.global_set_option("enable", "imports")
[ 4262s]         l.global_set_option("import-graph", "import.dot")
[ 4262s]         l.global_set_option("ext-import-graph", "ext_import.dot")
[ 4262s]         l.global_set_option("int-import-graph", "int_import.dot")
[ 4262s]         l.global_set_option("int-import-graph", "int_import.dot")
[ 4262s]         # ignore this file causing spurious MemoryError w/ some python version (>=2.3?)
[ 4262s]         l.global_set_option("ignore", ("func_unknown_encoding.py",))
[ 4262s] >       l.check("input")
[ 4262s] 
[ 4262s] tests/test_import_graph.py:88: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] pylint/utils/utils.py:223: in expand_modules
[ 4262s]     modpath = _modpath_from_file(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] filename = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/input/func_e0204.py'
[ 4262s] is_namespace = False
[ 4262s] path = ['.', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0', '/home/abuild/rpmbuild/B... '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests', ...]
[ 4262s] 
[ 4262s]     def _modpath_from_file(filename, is_namespace, path=None):
[ 4262s]         def _is_package_cb(path, parts):
[ 4262s]             return modutils.check_modpath_has_init(path, parts) or is_namespace
[ 4262s]     
[ 4262s] >       return modutils.modpath_from_file_with_callback(
[ 4262s]             filename, path=path, is_package_cb=_is_package_cb
[ 4262s]         )
[ 4262s] E       TypeError: modpath_from_file_with_callback() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:120: TypeError
[ 4262s] ___________________________ test_runner[run_pylint] ____________________________
[ 4262s] 
[ 4262s] runner = <function run_pylint at 0x3fbb0069d0>
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize(
[ 4262s]         "runner", [run_pylint, run_epylint, run_pyreverse, run_symilar]
[ 4262s]     )
[ 4262s]     def test_runner(runner):
[ 4262s]         filepath = os.path.abspath(__file__)
[ 4262s]         testargs = ["", filepath]
[ 4262s]         with patch.object(sys, "argv", testargs):
[ 4262s]             with pytest.raises(SystemExit) as err:
[ 4262s] >               runner()
[ 4262s] 
[ 4262s] tests/test_pylint_runners.py:19: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/__init__.py:22: in run_pylint
[ 4262s]     PylintRun(sys.argv[1:])
[ 4262s] pylint/lint/run.py:349: in __init__
[ 4262s]     linter.check(args)
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/test_pylint_runners.py']
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] ___________________________ test_runner[run_epylint] ___________________________
[ 4262s] 
[ 4262s] runner = <function run_epylint at 0x3fbb006b80>
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize(
[ 4262s]         "runner", [run_pylint, run_epylint, run_pyreverse, run_symilar]
[ 4262s]     )
[ 4262s]     def test_runner(runner):
[ 4262s]         filepath = os.path.abspath(__file__)
[ 4262s]         testargs = ["", filepath]
[ 4262s]         with patch.object(sys, "argv", testargs):
[ 4262s]             with pytest.raises(SystemExit) as err:
[ 4262s]                 runner()
[ 4262s] >           assert err.value.code == 0
[ 4262s] E           assert 1 == 0
[ 4262s] E             -1
[ 4262s] E             +0
[ 4262s] 
[ 4262s] tests/test_pylint_runners.py:20: AssertionError
[ 4262s] ----------------------------- Captured stderr call -----------------------------
[ 4262s] Traceback (most recent call last):
[ 4262s]   File "<string>", line 1, in <module>
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/lint/run.py", line 349, in __init__
[ 4262s]     linter.check(args)
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/lint/pylinter.py", line 862, in check
[ 4262s]     self._check_files(
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/lint/pylinter.py", line 895, in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/lint/pylinter.py", line 952, in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/lint/pylinter.py", line 960, in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s]   File "/home/abuild/rpmbuild/BUILD/pylint-2.6.0/pylint/utils/utils.py", line 159, in expand_modules
[ 4262s]     modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s] TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] _ test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/classdoc_usage.py-<lambda>] _
[ 4262s] 
[ 4262s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4262s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/classdoc_usage.py'
[ 4262s] check = <function Equals.<locals>.<lambda> at 0x3fb9a8b940>
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize(
[ 4262s]         "file_name, check",
[ 4262s]         [
[ 4262s]             ("package.__init__", Equals("")),
[ 4262s]             ("precedence_test", Equals("")),
[ 4262s]             ("import_package_subpackage_module", Equals("")),
[ 4262s]             ("pylint.checkers.__init__", lambda x: "__path__" not in x),
[ 4262s]             (join(REGR_DATA, "classdoc_usage.py"), Equals("")),
[ 4262s]             (join(REGR_DATA, "module_global.py"), Equals("")),
[ 4262s]             (join(REGR_DATA, "decimal_inference.py"), Equals("")),
[ 4262s]             (join(REGR_DATA, "absimp", "string.py"), Equals("")),
[ 4262s]             (join(REGR_DATA, "bad_package"), lambda x: "Unused import missing" in x),
[ 4262s]         ],
[ 4262s]     )
[ 4262s]     def test_package(finalize_linter, file_name, check):
[ 4262s] >       finalize_linter.check(file_name)
[ 4262s] 
[ 4262s] tests/test_regr.py:77: 
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] pylint/lint/pylinter.py:862: in check
[ 4262s]     self._check_files(
[ 4262s] pylint/lint/pylinter.py:895: in _check_files
[ 4262s]     for name, filepath, modname in file_descrs:
[ 4262s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4262s]     for descr in self._expand_files(files_or_modules):
[ 4262s] pylint/lint/pylinter.py:960: in _expand_files
[ 4262s]     result, errors = utils.expand_modules(
[ 4262s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4262s] 
[ 4262s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/classdoc_usage.py',)
[ 4262s] black_list = ('CVS',), black_list_re = []
[ 4262s] 
[ 4262s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4262s]         """take a list of files/modules/packages and return the list of tuple
[ 4262s]         (file, module name) which have to be actually checked
[ 4262s]         """
[ 4262s]         result = []
[ 4262s]         errors = []
[ 4262s]         path = sys.path.copy()
[ 4262s]     
[ 4262s]         for something in files_or_modules:
[ 4262s]             if os.path.basename(something) in black_list:
[ 4262s]                 continue
[ 4262s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4262s]                 continue
[ 4262s]     
[ 4262s]             module_path = get_python_path(something)
[ 4262s]             additional_search_path = [".", module_path] + path
[ 4262s]             if os.path.exists(something):
[ 4262s]                 # this is a file or a directory
[ 4262s]                 try:
[ 4262s]                     modname = ".".join(
[ 4262s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4262s]                     )
[ 4262s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4262s] 
[ 4262s] pylint/utils/utils.py:159: TypeError
[ 4262s] _ test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/module_global.py-<lambda>] _
[ 4262s] 
[ 4262s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4262s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/module_global.py'
[ 4262s] check = <function Equals.<locals>.<lambda> at 0x3fb9a8b9d0>
[ 4262s] 
[ 4262s]     @pytest.mark.parametrize(
[ 4262s]         "file_name, check",
[ 4262s]         [
[ 4262s]             ("package.__init__", Equals("")),
[ 4263s]             ("precedence_test", Equals("")),
[ 4263s]             ("import_package_subpackage_module", Equals("")),
[ 4263s]             ("pylint.checkers.__init__", lambda x: "__path__" not in x),
[ 4263s]             (join(REGR_DATA, "classdoc_usage.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "module_global.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "decimal_inference.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "absimp", "string.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "bad_package"), lambda x: "Unused import missing" in x),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_package(finalize_linter, file_name, check):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:77: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/module_global.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _ test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/decimal_inference.py-<lambda>] _
[ 4263s] 
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/decimal_inference.py'
[ 4263s] check = <function Equals.<locals>.<lambda> at 0x3fb9a8baf0>
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "file_name, check",
[ 4263s]         [
[ 4263s]             ("package.__init__", Equals("")),
[ 4263s]             ("precedence_test", Equals("")),
[ 4263s]             ("import_package_subpackage_module", Equals("")),
[ 4263s]             ("pylint.checkers.__init__", lambda x: "__path__" not in x),
[ 4263s]             (join(REGR_DATA, "classdoc_usage.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "module_global.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "decimal_inference.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "absimp", "string.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "bad_package"), lambda x: "Unused import missing" in x),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_package(finalize_linter, file_name, check):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:77: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/decimal_inference.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _ test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/absimp/string.py-<lambda>] _
[ 4263s] 
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/absimp/string.py'
[ 4263s] check = <function Equals.<locals>.<lambda> at 0x3fb9a8bb80>
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "file_name, check",
[ 4263s]         [
[ 4263s]             ("package.__init__", Equals("")),
[ 4263s]             ("precedence_test", Equals("")),
[ 4263s]             ("import_package_subpackage_module", Equals("")),
[ 4263s]             ("pylint.checkers.__init__", lambda x: "__path__" not in x),
[ 4263s]             (join(REGR_DATA, "classdoc_usage.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "module_global.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "decimal_inference.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "absimp", "string.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "bad_package"), lambda x: "Unused import missing" in x),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_package(finalize_linter, file_name, check):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:77: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/absimp/string.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _ test_package[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/bad_package-<lambda>] _
[ 4263s] 
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/bad_package'
[ 4263s] check = <function <lambda> at 0x3fb9a8bc10>
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "file_name, check",
[ 4263s]         [
[ 4263s]             ("package.__init__", Equals("")),
[ 4263s]             ("precedence_test", Equals("")),
[ 4263s]             ("import_package_subpackage_module", Equals("")),
[ 4263s]             ("pylint.checkers.__init__", lambda x: "__path__" not in x),
[ 4263s]             (join(REGR_DATA, "classdoc_usage.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "module_global.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "decimal_inference.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "absimp", "string.py"), Equals("")),
[ 4263s]             (join(REGR_DATA, "bad_package"), lambda x: "Unused import missing" in x),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_package(finalize_linter, file_name, check):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:77: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/bad_package',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _ test_crash[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/import_assign.py] _
[ 4263s] 
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/import_assign.py'
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "file_name",
[ 4263s]         [
[ 4263s]             join(REGR_DATA, "import_assign.py"),
[ 4263s]             join(REGR_DATA, "special_attr_scope_lookup_crash.py"),
[ 4263s]             join(REGR_DATA, "try_finally_disable_msg_crash"),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_crash(finalize_linter, file_name):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:91: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/import_assign.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _ test_crash[/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/special_attr_scope_lookup_crash.py] _
[ 4263s] 
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] file_name = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/special_attr_scope_lookup_crash.py'
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "file_name",
[ 4263s]         [
[ 4263s]             join(REGR_DATA, "import_assign.py"),
[ 4263s]             join(REGR_DATA, "special_attr_scope_lookup_crash.py"),
[ 4263s]             join(REGR_DATA, "try_finally_disable_msg_crash"),
[ 4263s]         ],
[ 4263s]     )
[ 4263s]     def test_crash(finalize_linter, file_name):
[ 4263s] >       finalize_linter.check(file_name)
[ 4263s] 
[ 4263s] tests/test_regr.py:91: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/special_attr_scope_lookup_crash.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] __________ test_descriptor_crash[special_attr_scope_lookup_crash.py] ___________
[ 4263s] 
[ 4263s] fname = 'special_attr_scope_lookup_crash.py'
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "fname", [x for x in os.listdir(REGR_DATA) if x.endswith("_crash.py")]
[ 4263s]     )
[ 4263s]     def test_descriptor_crash(fname, finalize_linter):
[ 4263s] >       finalize_linter.check(join(REGR_DATA, fname))
[ 4263s] 
[ 4263s] tests/test_regr.py:98: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/special_attr_scope_lookup_crash.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] __________________ test_descriptor_crash[descriptor_crash.py] __________________
[ 4263s] 
[ 4263s] fname = 'descriptor_crash.py'
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "fname", [x for x in os.listdir(REGR_DATA) if x.endswith("_crash.py")]
[ 4263s]     )
[ 4263s]     def test_descriptor_crash(fname, finalize_linter):
[ 4263s] >       finalize_linter.check(join(REGR_DATA, fname))
[ 4263s] 
[ 4263s] tests/test_regr.py:98: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/descriptor_crash.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _________________ test_descriptor_crash[application_crash.py] __________________
[ 4263s] 
[ 4263s] fname = 'application_crash.py'
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "fname", [x for x in os.listdir(REGR_DATA) if x.endswith("_crash.py")]
[ 4263s]     )
[ 4263s]     def test_descriptor_crash(fname, finalize_linter):
[ 4263s] >       finalize_linter.check(join(REGR_DATA, fname))
[ 4263s] 
[ 4263s] tests/test_regr.py:98: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/application_crash.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] ___________ test_descriptor_crash[try_finally_disable_msg_crash.py] ____________
[ 4263s] 
[ 4263s] fname = 'try_finally_disable_msg_crash.py'
[ 4263s] finalize_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4263s] 
[ 4263s]     @pytest.mark.parametrize(
[ 4263s]         "fname", [x for x in os.listdir(REGR_DATA) if x.endswith("_crash.py")]
[ 4263s]     )
[ 4263s]     def test_descriptor_crash(fname, finalize_linter):
[ 4263s] >       finalize_linter.check(join(REGR_DATA, fname))
[ 4263s] 
[ 4263s] tests/test_regr.py:98: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/try_finally_disable_msg_crash.py',)
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] ______________________________ TestRunTC.test_all ______________________________
[ 4263s] 
[ 4263s] self = <test_self.TestRunTC object at 0x3fb6edbb20>
[ 4263s] 
[ 4263s]     def test_all(self):
[ 4263s]         """Make pylint check itself."""
[ 4263s]         reporters = [
[ 4263s]             TextReporter(StringIO()),
[ 4263s]             ColorizedTextReporter(StringIO()),
[ 4263s]             JSONReporter(StringIO()),
[ 4263s]         ]
[ 4263s] >       self._runtest(
[ 4263s]             [join(HERE, "functional", "a", "arguments.py")],
[ 4263s]             reporter=MultiReporter(reporters),
[ 4263s]             code=2,
[ 4263s]         )
[ 4263s] 
[ 4263s] tests/test_self.py:166: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] tests/test_self.py:121: in _runtest
[ 4263s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4263s] tests/test_self.py:140: in _run_pylint
[ 4263s]     Run(args, reporter=reporter)
[ 4263s] pylint/lint/run.py:349: in __init__
[ 4263s]     linter.check(args)
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/a/arguments.py']
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] __________________________ TestRunTC.test_no_ext_file __________________________
[ 4263s] 
[ 4263s] self = <test_self.TestRunTC object at 0x3fb77ff160>
[ 4263s] 
[ 4263s]     def test_no_ext_file(self):
[ 4263s] >       self._runtest([join(HERE, "input", "noext")], code=0)
[ 4263s] 
[ 4263s] tests/test_self.py:173: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] tests/test_self.py:121: in _runtest
[ 4263s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4263s] tests/test_self.py:140: in _run_pylint
[ 4263s]     Run(args, reporter=reporter)
[ 4263s] pylint/lint/run.py:349: in __init__
[ 4263s]     linter.check(args)
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/input/noext']
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] _________________________ TestRunTC.test_w0704_ignored _________________________
[ 4263s] 
[ 4263s] self = <test_self.TestRunTC object at 0x3fb6c868b0>
[ 4263s] 
[ 4263s]     def test_w0704_ignored(self):
[ 4263s] >       self._runtest([join(HERE, "input", "ignore_except_pass_by_default.py")], code=0)
[ 4263s] 
[ 4263s] tests/test_self.py:176: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] tests/test_self.py:121: in _runtest
[ 4263s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4263s] tests/test_self.py:140: in _run_pylint
[ 4263s]     Run(args, reporter=reporter)
[ 4263s] pylint/lint/run.py:349: in __init__
[ 4263s]     linter.check(args)
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4263s] pylint/lint/pylinter.py:895: in _check_files
[ 4263s]     for name, filepath, modname in file_descrs:
[ 4263s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4263s]     for descr in self._expand_files(files_or_modules):
[ 4263s] pylint/lint/pylinter.py:960: in _expand_files
[ 4263s]     result, errors = utils.expand_modules(
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] 
[ 4263s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/input/ignore_except_pass_by_default.py']
[ 4263s] black_list = ('CVS',), black_list_re = []
[ 4263s] 
[ 4263s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4263s]         """take a list of files/modules/packages and return the list of tuple
[ 4263s]         (file, module name) which have to be actually checked
[ 4263s]         """
[ 4263s]         result = []
[ 4263s]         errors = []
[ 4263s]         path = sys.path.copy()
[ 4263s]     
[ 4263s]         for something in files_or_modules:
[ 4263s]             if os.path.basename(something) in black_list:
[ 4263s]                 continue
[ 4263s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4263s]                 continue
[ 4263s]     
[ 4263s]             module_path = get_python_path(something)
[ 4263s]             additional_search_path = [".", module_path] + path
[ 4263s]             if os.path.exists(something):
[ 4263s]                 # this is a file or a directory
[ 4263s]                 try:
[ 4263s]                     modname = ".".join(
[ 4263s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4263s]                     )
[ 4263s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4263s] 
[ 4263s] pylint/utils/utils.py:159: TypeError
[ 4263s] ___________________________ TestRunTC.test_exit_zero ___________________________
[ 4263s] 
[ 4263s] self = <test_self.TestRunTC object at 0x3fb6d977f0>
[ 4263s] 
[ 4263s]     def test_exit_zero(self):
[ 4263s] >       self._runtest(
[ 4263s]             ["--exit-zero", join(HERE, "regrtest_data", "syntax_error.py")], code=0
[ 4263s]         )
[ 4263s] 
[ 4263s] tests/test_self.py:179: 
[ 4263s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4263s] tests/test_self.py:121: in _runtest
[ 4263s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4263s] tests/test_self.py:140: in _run_pylint
[ 4263s]     Run(args, reporter=reporter)
[ 4263s] pylint/lint/run.py:349: in __init__
[ 4263s]     linter.check(args)
[ 4263s] pylint/lint/pylinter.py:862: in check
[ 4263s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/syntax_error.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ________________________ TestRunTC.test_no_out_encoding ________________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6d761f0>
[ 4264s] 
[ 4264s]     def test_no_out_encoding(self):
[ 4264s]         """test redirection of stdout with non ascii caracters
[ 4264s]         """
[ 4264s]         # This test reproduces bug #48066 ; it happens when stdout is redirected
[ 4264s]         # through '>' : the sys.stdout.encoding becomes then None, and if the
[ 4264s]         # output contains non ascii, pylint will crash
[ 4264s]         strio = StringIO()
[ 4264s]         assert strio.encoding is None
[ 4264s] >       self._runtest(
[ 4264s]             [join(HERE, "regrtest_data", "no_stdout_encoding.py"), "--enable=all"],
[ 4264s]             out=strio,
[ 4264s]             code=28,
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:243: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/no_stdout_encoding.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ______________________ TestRunTC.test_parallel_execution _______________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6e51370>
[ 4264s] 
[ 4264s]     def test_parallel_execution(self):
[ 4264s] >       self._runtest(
[ 4264s]             [
[ 4264s]                 "-j 2",
[ 4264s]                 join(HERE, "functional", "a", "arguments.py"),
[ 4264s]                 join(HERE, "functional", "a", "arguments.py"),
[ 4264s]             ],
[ 4264s]             code=2,
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:250: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:866: in check
[ 4264s]     check_parallel(
[ 4264s] pylint/lint/check_parallel.py:102: in check_parallel
[ 4264s]     for (
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] self = <multiprocessing.pool.IMapUnorderedIterator object at 0x3fb6d655b0>
[ 4264s] timeout = None
[ 4264s] 
[ 4264s]     def next(self, timeout=None):
[ 4264s]         with self._cond:
[ 4264s]             try:
[ 4264s]                 item = self._items.popleft()
[ 4264s]             except IndexError:
[ 4264s]                 if self._index == self._length:
[ 4264s]                     self._pool = None
[ 4264s]                     raise StopIteration from None
[ 4264s]                 self._cond.wait(timeout)
[ 4264s]                 try:
[ 4264s]                     item = self._items.popleft()
[ 4264s]                 except IndexError:
[ 4264s]                     if self._index == self._length:
[ 4264s]                         self._pool = None
[ 4264s]                         raise StopIteration from None
[ 4264s]                     raise TimeoutError from None
[ 4264s]     
[ 4264s]         success, value = item
[ 4264s]         if success:
[ 4264s]             return value
[ 4264s] >       raise value
[ 4264s] E       TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] /usr/lib64/python3.8/multiprocessing/pool.py:868: TypeError
[ 4264s] __________________________ TestRunTC.test_py3k_option __________________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6bb1eb0>
[ 4264s] 
[ 4264s]     def test_py3k_option(self):
[ 4264s]         # Test that --py3k flag works.
[ 4264s]         rc_code = 0
[ 4264s] >       self._runtest(
[ 4264s]             [join(HERE, "functional", "u", "unnecessary_lambda.py"), "--py3k"],
[ 4264s]             code=rc_code,
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:265: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/functional/u/unnecessary_lambda.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] _______________________ TestRunTC.test_py3k_jobs_option ________________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6c36d60>
[ 4264s] 
[ 4264s]     def test_py3k_jobs_option(self):
[ 4264s]         rc_code = 0
[ 4264s] >       self._runtest(
[ 4264s]             [join(HERE, "functional", "u", "unnecessary_lambda.py"), "--py3k", "-j 2"],
[ 4264s]             code=rc_code,
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:272: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:866: in check
[ 4264s]     check_parallel(
[ 4264s] pylint/lint/check_parallel.py:102: in check_parallel
[ 4264s]     for (
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] self = <multiprocessing.pool.IMapUnorderedIterator object at 0x3fb7573790>
[ 4264s] timeout = None
[ 4264s] 
[ 4264s]     def next(self, timeout=None):
[ 4264s]         with self._cond:
[ 4264s]             try:
[ 4264s]                 item = self._items.popleft()
[ 4264s]             except IndexError:
[ 4264s]                 if self._index == self._length:
[ 4264s]                     self._pool = None
[ 4264s]                     raise StopIteration from None
[ 4264s]                 self._cond.wait(timeout)
[ 4264s]                 try:
[ 4264s]                     item = self._items.popleft()
[ 4264s]                 except IndexError:
[ 4264s]                     if self._index == self._length:
[ 4264s]                         self._pool = None
[ 4264s]                         raise StopIteration from None
[ 4264s]                     raise TimeoutError from None
[ 4264s]     
[ 4264s]         success, value = item
[ 4264s]         if success:
[ 4264s]             return value
[ 4264s] >       raise value
[ 4264s] E       TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] /usr/lib64/python3.8/multiprocessing/pool.py:868: TypeError
[ 4264s] _______________________ TestRunTC.test_enable_all_works ________________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6edb850>
[ 4264s] 
[ 4264s]     def test_enable_all_works(self):
[ 4264s]         module = join(HERE, "data", "clientmodule_test.py")
[ 4264s]         expected = textwrap.dedent(
[ 4264s]             """
[ 4264s]         ************* Module data.clientmodule_test
[ 4264s]         {0}:10:8: W0612: Unused variable 'local_variable' (unused-variable)
[ 4264s]         {0}:18:4: C0116: Missing function or method docstring (missing-function-docstring)
[ 4264s]         {0}:22:0: C0115: Missing class docstring (missing-class-docstring)
[ 4264s]         """.format(
[ 4264s]                 module
[ 4264s]             )
[ 4264s]         )
[ 4264s] >       self._test_output(
[ 4264s]             [module, "--disable=all", "--enable=all", "-rn"], expected_output=expected
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:293: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/data/clientmodule_test.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] __________ TestRunTC.test_wrong_import_position_when_others_disabled ___________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6da6970>
[ 4264s] 
[ 4264s]     def test_wrong_import_position_when_others_disabled(self):
[ 4264s]         module1 = join(HERE, "regrtest_data", "import_something.py")
[ 4264s]         module2 = join(HERE, "regrtest_data", "wrong_import_position.py")
[ 4264s]         expected_output = textwrap.dedent(
[ 4264s]             """
[ 4264s]         ************* Module wrong_import_position
[ 4264s]         {}:11:0: C0413: Import "import os" should be placed at the top of the module (wrong-import-position)
[ 4264s]         """.format(
[ 4264s]                 module2
[ 4264s]             )
[ 4264s]         )
[ 4264s]         args = [
[ 4264s]             module2,
[ 4264s]             module1,
[ 4264s]             "--disable=all",
[ 4264s]             "--enable=wrong-import-position",
[ 4264s]             "-rn",
[ 4264s]             "-sn",
[ 4264s]         ]
[ 4264s]         out = StringIO()
[ 4264s] >       self._run_pylint(args, out=out)
[ 4264s] 
[ 4264s] tests/test_self.py:317: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/wrong_import_position.py', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/import_something.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] _______ TestRunTC.test_import_itself_not_accounted_for_relative_imports ________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb721f2e0>
[ 4264s] 
[ 4264s]     def test_import_itself_not_accounted_for_relative_imports(self):
[ 4264s]         expected = "Your code has been rated at 10.00/10"
[ 4264s]         package = join(HERE, "regrtest_data", "dummy")
[ 4264s] >       self._test_output(
[ 4264s]             [package, "--disable=locally-disabled", "-rn"], expected_output=expected
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:332: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/dummy']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ____________ TestRunTC.test_json_report_when_file_has_syntax_error _____________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb7b1fbe0>
[ 4264s] 
[ 4264s]     def test_json_report_when_file_has_syntax_error(self):
[ 4264s]         out = StringIO()
[ 4264s]         module = join(HERE, "regrtest_data", "syntax_error.py")
[ 4264s] >       self._runtest([module], code=2, reporter=JSONReporter(out))
[ 4264s] 
[ 4264s] tests/test_self.py:344: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/syntax_error.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ______________ TestRunTC.test_json_report_does_not_escape_quotes _______________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6e0c5b0>
[ 4264s] 
[ 4264s]     def test_json_report_does_not_escape_quotes(self):
[ 4264s]         out = StringIO()
[ 4264s]         module = join(HERE, "regrtest_data", "unused_variable.py")
[ 4264s] >       self._runtest([module], code=4, reporter=JSONReporter(out))
[ 4264s] 
[ 4264s] tests/test_self.py:396: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:121: in _runtest
[ 4264s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/unused_variable.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ___________ TestRunTC.test_information_category_disabled_by_default ____________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6ea9be0>
[ 4264s] 
[ 4264s]     def test_information_category_disabled_by_default(self):
[ 4264s]         expected = "Your code has been rated at 10.00/10"
[ 4264s]         path = join(HERE, "regrtest_data", "meta.py")
[ 4264s] >       self._test_output([path], expected_output=expected)
[ 4264s] 
[ 4264s] tests/test_self.py:418: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/meta.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] ___________________ TestRunTC.test_error_mode_shows_no_score ___________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb72a8d00>
[ 4264s] 
[ 4264s]     def test_error_mode_shows_no_score(self):
[ 4264s]         module = join(HERE, "regrtest_data", "application_crash.py")
[ 4264s]         expected_output = textwrap.dedent(
[ 4264s]             """
[ 4264s]         ************* Module application_crash
[ 4264s]         {}:1:6: E0602: Undefined variable 'something_undefined' (undefined-variable)
[ 4264s]         """.format(
[ 4264s]                 module
[ 4264s]             )
[ 4264s]         )
[ 4264s] >       self._test_output([module, "-E"], expected_output=expected_output)
[ 4264s] 
[ 4264s] tests/test_self.py:430: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/application_crash.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] _______________ TestRunTC.test_evaluation_score_shown_by_default _______________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb6cf6370>
[ 4264s] 
[ 4264s]     def test_evaluation_score_shown_by_default(self):
[ 4264s]         expected_output = "Your code has been rated at "
[ 4264s]         module = join(HERE, "regrtest_data", "application_crash.py")
[ 4264s] >       self._test_output([module], expected_output=expected_output)
[ 4264s] 
[ 4264s] tests/test_self.py:435: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/application_crash.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4264s]                 continue
[ 4264s]     
[ 4264s]             module_path = get_python_path(something)
[ 4264s]             additional_search_path = [".", module_path] + path
[ 4264s]             if os.path.exists(something):
[ 4264s]                 # this is a file or a directory
[ 4264s]                 try:
[ 4264s]                     modname = ".".join(
[ 4264s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4264s]                     )
[ 4264s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4264s] 
[ 4264s] pylint/utils/utils.py:159: TypeError
[ 4264s] _______________________ TestRunTC.test_confidence_levels _______________________
[ 4264s] 
[ 4264s] self = <test_self.TestRunTC object at 0x3fb7499220>
[ 4264s] 
[ 4264s]     def test_confidence_levels(self):
[ 4264s]         expected = "Your code has been rated at"
[ 4264s]         path = join(HERE, "regrtest_data", "meta.py")
[ 4264s] >       self._test_output(
[ 4264s]             [path, "--confidence=HIGH,INFERENCE"], expected_output=expected
[ 4264s]         )
[ 4264s] 
[ 4264s] tests/test_self.py:440: 
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] tests/test_self.py:150: in _test_output
[ 4264s]     self._run_pylint(args, out=out)
[ 4264s] tests/test_self.py:140: in _run_pylint
[ 4264s]     Run(args, reporter=reporter)
[ 4264s] pylint/lint/run.py:349: in __init__
[ 4264s]     linter.check(args)
[ 4264s] pylint/lint/pylinter.py:862: in check
[ 4264s]     self._check_files(
[ 4264s] pylint/lint/pylinter.py:895: in _check_files
[ 4264s]     for name, filepath, modname in file_descrs:
[ 4264s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4264s]     for descr in self._expand_files(files_or_modules):
[ 4264s] pylint/lint/pylinter.py:960: in _expand_files
[ 4264s]     result, errors = utils.expand_modules(
[ 4264s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4264s] 
[ 4264s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/meta.py']
[ 4264s] black_list = ('CVS',), black_list_re = []
[ 4264s] 
[ 4264s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4264s]         """take a list of files/modules/packages and return the list of tuple
[ 4264s]         (file, module name) which have to be actually checked
[ 4264s]         """
[ 4264s]         result = []
[ 4264s]         errors = []
[ 4264s]         path = sys.path.copy()
[ 4264s]     
[ 4264s]         for something in files_or_modules:
[ 4264s]             if os.path.basename(something) in black_list:
[ 4264s]                 continue
[ 4264s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] __________________________ TestRunTC.test_bom_marker ___________________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6dd31c0>
[ 4265s] 
[ 4265s]     def test_bom_marker(self):
[ 4265s]         path = join(HERE, "regrtest_data", "meta.py")
[ 4265s]         config_path = join(HERE, "regrtest_data", ".pylintrc")
[ 4265s]         expected = "Your code has been rated at 10.00/10"
[ 4265s] >       self._test_output(
[ 4265s]             [path, "--rcfile=%s" % config_path, "-rn"], expected_output=expected
[ 4265s]         )
[ 4265s] 
[ 4265s] tests/test_self.py:448: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/meta.py']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] __________________ TestRunTC.test_pylintrc_comments_in_values __________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb72e7250>
[ 4265s] 
[ 4265s]     def test_pylintrc_comments_in_values(self):
[ 4265s]         path = join(HERE, "regrtest_data", "test_pylintrc_comments.py")
[ 4265s]         config_path = join(HERE, "regrtest_data", "comments_pylintrc")
[ 4265s]         expected = textwrap.dedent(
[ 4265s]             """
[ 4265s]         ************* Module test_pylintrc_comments
[ 4265s]         {0}:2:0: W0311: Bad indentation. Found 1 spaces, expected 4 (bad-indentation)
[ 4265s]         {0}:1:0: C0114: Missing module docstring (missing-module-docstring)
[ 4265s]         {0}:1:0: C0116: Missing function or method docstring (missing-function-docstring)
[ 4265s]         """.format(
[ 4265s]                 path
[ 4265s]             )
[ 4265s]         )
[ 4265s] >       self._test_output(
[ 4265s]             [path, "--rcfile=%s" % config_path, "-rn"], expected_output=expected
[ 4265s]         )
[ 4265s] 
[ 4265s] tests/test_self.py:492: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/test_pylintrc_comments.py']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] _________ TestRunTC.test_getdefaultencoding_crashes_with_lc_ctype_utf8 _________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6e7b9a0>
[ 4265s] 
[ 4265s]     def test_getdefaultencoding_crashes_with_lc_ctype_utf8(self):
[ 4265s]         module = join(HERE, "regrtest_data", "application_crash.py")
[ 4265s]         expected_output = textwrap.dedent(
[ 4265s]             """
[ 4265s]         {}:1:6: E0602: Undefined variable 'something_undefined' (undefined-variable)
[ 4265s]         """.format(
[ 4265s]                 module
[ 4265s]             )
[ 4265s]         )
[ 4265s]         with _configure_lc_ctype("UTF-8"):
[ 4265s] >           self._test_output([module, "-E"], expected_output=expected_output)
[ 4265s] 
[ 4265s] tests/test_self.py:511: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/application_crash.py']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] ______________________ TestRunTC.test_parseable_file_path ______________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6da31c0>
[ 4265s] 
[ 4265s]     @pytest.mark.skipif(sys.platform == "win32", reason="only occurs on *nix")
[ 4265s]     def test_parseable_file_path(self):
[ 4265s]         file_name = "test_target.py"
[ 4265s]         fake_path = HERE + os.getcwd()
[ 4265s]         module = join(fake_path, file_name)
[ 4265s]     
[ 4265s]         try:
[ 4265s]             # create module under directories which have the same name as reporter.path_strip_prefix
[ 4265s]             # e.g. /src/some/path/src/test_target.py when reporter.path_strip_prefix = /src/
[ 4265s]             os.makedirs(fake_path)
[ 4265s]             with open(module, "w") as test_target:
[ 4265s]                 test_target.write("a,b = object()")
[ 4265s]     
[ 4265s] >           self._test_output(
[ 4265s]                 [module, "--output-format=parseable"], expected_output=file_name
[ 4265s]             )
[ 4265s] 
[ 4265s] tests/test_self.py:526: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/home/abuild/rpmbuild/BUILD/pylint-2.6.0/test_target.py']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] ____________________ TestRunTC.test_relative_imports[True] _____________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb75b2280>, write_bpy_to_disk = True
[ 4265s] tmpdir = local('/tmp/pytest-of-abuild/pytest-0/test_relative_imports_True_0')
[ 4265s] 
[ 4265s]     @pytest.mark.parametrize("write_bpy_to_disk", [False, True])
[ 4265s]     def test_relative_imports(self, write_bpy_to_disk, tmpdir):
[ 4265s]         a = tmpdir.join("a")
[ 4265s]     
[ 4265s]         b_code = textwrap.dedent(
[ 4265s]             """
[ 4265s]             from .c import foobar
[ 4265s]             from .d import bla  # module does not exist
[ 4265s]     
[ 4265s]             foobar('hello')
[ 4265s]             bla()
[ 4265s]             """
[ 4265s]         )
[ 4265s]     
[ 4265s]         c_code = textwrap.dedent(
[ 4265s]             """
[ 4265s]             def foobar(arg):
[ 4265s]                 pass
[ 4265s]             """
[ 4265s]         )
[ 4265s]     
[ 4265s]         a.mkdir()
[ 4265s]         a.join("__init__.py").write("")
[ 4265s]         if write_bpy_to_disk:
[ 4265s]             a.join("b.py").write(b_code)
[ 4265s]         a.join("c.py").write(c_code)
[ 4265s]     
[ 4265s]         with tmpdir.as_cwd():
[ 4265s]             # why don't we start pylint in a subprocess?
[ 4265s]             expected = (
[ 4265s]                 "************* Module a.b\n"
[ 4265s]                 "a/b.py:3:0: E0401: Unable to import 'a.d' (import-error)\n\n"
[ 4265s]             )
[ 4265s]     
[ 4265s]             if write_bpy_to_disk:
[ 4265s]                 # --from-stdin is not used here
[ 4265s] >               self._test_output(
[ 4265s]                     ["a/b.py", "--disable=all", "--enable=import-error"],
[ 4265s]                     expected_output=expected,
[ 4265s]                 )
[ 4265s] 
[ 4265s] tests/test_self.py:594: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['a/b.py'], black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] __________________________ TestRunTC.test_fail_under ___________________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb74e0e80>
[ 4265s] 
[ 4265s]     def test_fail_under(self):
[ 4265s] >       self._runtest(
[ 4265s]             [
[ 4265s]                 "--fail-under",
[ 4265s]                 "5",
[ 4265s]                 "--enable=all",
[ 4265s]                 join(HERE, "regrtest_data", "fail_under_plus6.py"),
[ 4265s]             ],
[ 4265s]             code=0,
[ 4265s]         )
[ 4265s] 
[ 4265s] tests/test_self.py:642: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:121: in _runtest
[ 4265s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/fail_under_plus6.py']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] ___________ TestRunTC.test_do_not_import_files_from_local_directory ____________
[ 4265s] 
[ 4265s] tmpdir = local('/tmp/pytest-of-abuild/pytest-0/test_do_not_import_files_from_0')
[ 4265s] 
[ 4265s]     @staticmethod
[ 4265s]     def test_do_not_import_files_from_local_directory(tmpdir):
[ 4265s]         p_astroid = tmpdir / "astroid.py"
[ 4265s]         p_astroid.write("'Docstring'\nimport completely_unknown\n")
[ 4265s]         p_hmac = tmpdir / "hmac.py"
[ 4265s]         p_hmac.write("'Docstring'\nimport completely_unknown\n")
[ 4265s]     
[ 4265s]         with tmpdir.as_cwd():
[ 4265s] >           subprocess.check_output(
[ 4265s]                 [
[ 4265s]                     sys.executable,
[ 4265s]                     "-m",
[ 4265s]                     "pylint",
[ 4265s]                     "astroid.py",
[ 4265s]                     "--disable=import-error,unused-import",
[ 4265s]                 ],
[ 4265s]                 cwd=str(tmpdir),
[ 4265s]             )
[ 4265s] 
[ 4265s] tests/test_self.py:715: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] /usr/lib64/python3.8/subprocess.py:411: in check_output
[ 4265s]     return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] input = None, capture_output = False, timeout = None, check = True
[ 4265s] popenargs = (['/usr/bin/python3', '-m', 'pylint', 'astroid.py', '--disable=import-error,unused-import'],)
[ 4265s] kwargs = {'cwd': '/tmp/pytest-of-abuild/pytest-0/test_do_not_import_files_from_0', 'stdout': -1}
[ 4265s] process = <subprocess.Popen object at 0x3fb6d1a4c0>, stdout = b'', stderr = None
[ 4265s] retcode = 1
[ 4265s] 
[ 4265s]     def run(*popenargs,
[ 4265s]             input=None, capture_output=False, timeout=None, check=False, **kwargs):
[ 4265s]         """Run command with arguments and return a CompletedProcess instance.
[ 4265s]     
[ 4265s]         The returned instance will have attributes args, returncode, stdout and
[ 4265s]         stderr. By default, stdout and stderr are not captured, and those attributes
[ 4265s]         will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.
[ 4265s]     
[ 4265s]         If check is True and the exit code was non-zero, it raises a
[ 4265s]         CalledProcessError. The CalledProcessError object will have the return code
[ 4265s]         in the returncode attribute, and output & stderr attributes if those streams
[ 4265s]         were captured.
[ 4265s]     
[ 4265s]         If timeout is given, and the process takes too long, a TimeoutExpired
[ 4265s]         exception will be raised.
[ 4265s]     
[ 4265s]         There is an optional argument "input", allowing you to
[ 4265s]         pass bytes or a string to the subprocess's stdin.  If you use this argument
[ 4265s]         you may not also use the Popen constructor's "stdin" argument, as
[ 4265s]         it will be used internally.
[ 4265s]     
[ 4265s]         By default, all communication is in bytes, and therefore any "input" should
[ 4265s]         be bytes, and the stdout and stderr will be bytes. If in text mode, any
[ 4265s]         "input" should be a string, and stdout and stderr will be strings decoded
[ 4265s]         according to locale encoding, or by "encoding" if set. Text mode is
[ 4265s]         triggered by setting any of text, encoding, errors or universal_newlines.
[ 4265s]     
[ 4265s]         The other arguments are the same as for the Popen constructor.
[ 4265s]         """
[ 4265s]         if input is not None:
[ 4265s]             if kwargs.get('stdin') is not None:
[ 4265s]                 raise ValueError('stdin and input arguments may not both be used.')
[ 4265s]             kwargs['stdin'] = PIPE
[ 4265s]     
[ 4265s]         if capture_output:
[ 4265s]             if kwargs.get('stdout') is not None or kwargs.get('stderr') is not None:
[ 4265s]                 raise ValueError('stdout and stderr arguments may not be used '
[ 4265s]                                  'with capture_output.')
[ 4265s]             kwargs['stdout'] = PIPE
[ 4265s]             kwargs['stderr'] = PIPE
[ 4265s]     
[ 4265s]         with Popen(*popenargs, **kwargs) as process:
[ 4265s]             try:
[ 4265s]                 stdout, stderr = process.communicate(input, timeout=timeout)
[ 4265s]             except TimeoutExpired as exc:
[ 4265s]                 process.kill()
[ 4265s]                 if _mswindows:
[ 4265s]                     # Windows accumulates the output in a single blocking
[ 4265s]                     # read() call run on child threads, with the timeout
[ 4265s]                     # being done in a join() on those threads.  communicate()
[ 4265s]                     # _after_ kill() is required to collect that and add it
[ 4265s]                     # to the exception.
[ 4265s]                     exc.stdout, exc.stderr = process.communicate()
[ 4265s]                 else:
[ 4265s]                     # POSIX _communicate already populated the output so
[ 4265s]                     # far into the TimeoutExpired exception.
[ 4265s]                     process.wait()
[ 4265s]                 raise
[ 4265s]             except:  # Including KeyboardInterrupt, communicate handled that.
[ 4265s]                 process.kill()
[ 4265s]                 # We don't call process.wait() as .__exit__ does that for us.
[ 4265s]                 raise
[ 4265s]             retcode = process.poll()
[ 4265s]             if check and retcode:
[ 4265s] >               raise CalledProcessError(retcode, process.args,
[ 4265s]                                          output=stdout, stderr=stderr)
[ 4265s] E               subprocess.CalledProcessError: Command '['/usr/bin/python3', '-m', 'pylint', 'astroid.py', '--disable=import-error,unused-import']' returned non-zero exit status 1.
[ 4265s] 
[ 4265s] /usr/lib64/python3.8/subprocess.py:512: CalledProcessError
[ 4265s] ----------------------------- Captured stderr call -----------------------------
[ 4265s] Traceback (most recent call last):
[ 4265s]   File "/usr/lib64/python3.8/runpy.py", line 194, in _run_module_as_main
[ 4265s]     return _run_code(code, main_globals, None,
[ 4265s]   File "/usr/lib64/python3.8/runpy.py", line 87, in _run_code
[ 4265s]     exec(code, run_globals)
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__main__.py", line 18, in <module>
[ 4265s]     pylint.run_pylint()
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/__init__.py", line 22, in run_pylint
[ 4265s]     PylintRun(sys.argv[1:])
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/run.py", line 349, in __init__
[ 4265s]     linter.check(args)
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/pylinter.py", line 862, in check
[ 4265s]     self._check_files(
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/pylinter.py", line 895, in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/pylinter.py", line 952, in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/lint/pylinter.py", line 960, in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s]   File "/home/abuild/rpmbuild/BUILDROOT/pylint-2.6.0-3.oe1.riscv64/usr/lib/python3.8/site-packages/pylint/utils/utils.py", line 159, in expand_modules
[ 4265s]     modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s] TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] _ TestRunTC.test_allow_import_of_files_found_in_modules_during_parallel_check __
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6e75f40>
[ 4265s] tmpdir = local('/tmp/pytest-of-abuild/pytest-0/test_allow_import_of_files_fou0')
[ 4265s] 
[ 4265s]     def test_allow_import_of_files_found_in_modules_during_parallel_check(self, tmpdir):
[ 4265s]         test_directory = tmpdir / "test_directory"
[ 4265s]         test_directory.mkdir()
[ 4265s]         spam_module = test_directory / "spam.py"
[ 4265s]         spam_module.write("'Empty'")
[ 4265s]     
[ 4265s]         init_module = test_directory / "__init__.py"
[ 4265s]         init_module.write("'Empty'")
[ 4265s]     
[ 4265s]         # For multiple jobs we could not find the `spam.py` file.
[ 4265s]         with tmpdir.as_cwd():
[ 4265s] >           self._runtest(
[ 4265s]                 [
[ 4265s]                     "-j2",
[ 4265s]                     "--disable=missing-docstring, missing-final-newline",
[ 4265s]                     "test_directory",
[ 4265s]                 ],
[ 4265s]                 code=0,
[ 4265s]             )
[ 4265s] 
[ 4265s] tests/test_self.py:766: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:121: in _runtest
[ 4265s]     pylint_code = self._run_pylint(args, reporter=reporter, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:866: in check
[ 4265s]     check_parallel(
[ 4265s] pylint/lint/check_parallel.py:102: in check_parallel
[ 4265s]     for (
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] self = <multiprocessing.pool.IMapUnorderedIterator object at 0x3fb515e880>
[ 4265s] timeout = None
[ 4265s] 
[ 4265s]     def next(self, timeout=None):
[ 4265s]         with self._cond:
[ 4265s]             try:
[ 4265s]                 item = self._items.popleft()
[ 4265s]             except IndexError:
[ 4265s]                 if self._index == self._length:
[ 4265s]                     self._pool = None
[ 4265s]                     raise StopIteration from None
[ 4265s]                 self._cond.wait(timeout)
[ 4265s]                 try:
[ 4265s]                     item = self._items.popleft()
[ 4265s]                 except IndexError:
[ 4265s]                     if self._index == self._length:
[ 4265s]                         self._pool = None
[ 4265s]                         raise StopIteration from None
[ 4265s]                     raise TimeoutError from None
[ 4265s]     
[ 4265s]         success, value = item
[ 4265s]         if success:
[ 4265s]             return value
[ 4265s] >       raise value
[ 4265s] E       TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] /usr/lib64/python3.8/multiprocessing/pool.py:868: TypeError
[ 4265s] __________________________ TestRunTC.test_jobs_score ___________________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb525d400>
[ 4265s] 
[ 4265s]     def test_jobs_score(self):
[ 4265s]         path = join(HERE, "regrtest_data", "unused_variable.py")
[ 4265s]         expected = "Your code has been rated at 7.50/10"
[ 4265s] >       self._test_output([path, "--jobs=2", "-ry"], expected_output=expected)
[ 4265s] 
[ 4265s] tests/test_self.py:804: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:866: in check
[ 4265s]     check_parallel(
[ 4265s] pylint/lint/check_parallel.py:102: in check_parallel
[ 4265s]     for (
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] self = <multiprocessing.pool.IMapUnorderedIterator object at 0x3fb6cf4670>
[ 4265s] timeout = None
[ 4265s] 
[ 4265s]     def next(self, timeout=None):
[ 4265s]         with self._cond:
[ 4265s]             try:
[ 4265s]                 item = self._items.popleft()
[ 4265s]             except IndexError:
[ 4265s]                 if self._index == self._length:
[ 4265s]                     self._pool = None
[ 4265s]                     raise StopIteration from None
[ 4265s]                 self._cond.wait(timeout)
[ 4265s]                 try:
[ 4265s]                     item = self._items.popleft()
[ 4265s]                 except IndexError:
[ 4265s]                     if self._index == self._length:
[ 4265s]                         self._pool = None
[ 4265s]                         raise StopIteration from None
[ 4265s]                     raise TimeoutError from None
[ 4265s]     
[ 4265s]         success, value = item
[ 4265s]         if success:
[ 4265s]             return value
[ 4265s] >       raise value
[ 4265s] E       TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] /usr/lib64/python3.8/multiprocessing/pool.py:868: TypeError
[ 4265s] __________________ TestRunTC.test_duplicate_code_raw_strings ___________________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6ea2f10>
[ 4265s] 
[ 4265s]     def test_duplicate_code_raw_strings(self):
[ 4265s]         path = join(HERE, "regrtest_data", "duplicate_data_raw_strings")
[ 4265s]         expected_output = "Similar lines in 2 files"
[ 4265s] >       self._test_output(
[ 4265s]             [path, "--disable=all", "--enable=duplicate-code"],
[ 4265s]             expected_output=expected_output,
[ 4265s]         )
[ 4265s] 
[ 4265s] tests/test_self.py:809: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:862: in check
[ 4265s]     self._check_files(
[ 4265s] pylint/lint/pylinter.py:895: in _check_files
[ 4265s]     for name, filepath, modname in file_descrs:
[ 4265s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4265s]     for descr in self._expand_files(files_or_modules):
[ 4265s] pylint/lint/pylinter.py:960: in _expand_files
[ 4265s]     result, errors = utils.expand_modules(
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/regrtest_data/duplicate_data_raw_strings']
[ 4265s] black_list = ('CVS',), black_list_re = []
[ 4265s] 
[ 4265s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4265s]         """take a list of files/modules/packages and return the list of tuple
[ 4265s]         (file, module name) which have to be actually checked
[ 4265s]         """
[ 4265s]         result = []
[ 4265s]         errors = []
[ 4265s]         path = sys.path.copy()
[ 4265s]     
[ 4265s]         for something in files_or_modules:
[ 4265s]             if os.path.basename(something) in black_list:
[ 4265s]                 continue
[ 4265s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4265s]                 continue
[ 4265s]     
[ 4265s]             module_path = get_python_path(something)
[ 4265s]             additional_search_path = [".", module_path] + path
[ 4265s]             if os.path.exists(something):
[ 4265s]                 # this is a file or a directory
[ 4265s]                 try:
[ 4265s]                     modname = ".".join(
[ 4265s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4265s]                     )
[ 4265s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] pylint/utils/utils.py:159: TypeError
[ 4265s] ___________ TestRunTC.test_regression_parallel_mode_without_filepath ___________
[ 4265s] 
[ 4265s] self = <test_self.TestRunTC object at 0x3fb6f02640>
[ 4265s] 
[ 4265s]     def test_regression_parallel_mode_without_filepath(self):
[ 4265s]         # Test that parallel mode properly passes filepath
[ 4265s]         # https://github.com/PyCQA/pylint/issues/3564
[ 4265s]         path = join(
[ 4265s]             HERE, "regrtest_data", "regression_missing_init_3564", "subdirectory/"
[ 4265s]         )
[ 4265s] >       self._test_output([path, "-j2"], expected_output="No such file or directory")
[ 4265s] 
[ 4265s] tests/test_self.py:820: 
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] tests/test_self.py:150: in _test_output
[ 4265s]     self._run_pylint(args, out=out)
[ 4265s] tests/test_self.py:140: in _run_pylint
[ 4265s]     Run(args, reporter=reporter)
[ 4265s] pylint/lint/run.py:349: in __init__
[ 4265s]     linter.check(args)
[ 4265s] pylint/lint/pylinter.py:866: in check
[ 4265s]     check_parallel(
[ 4265s] pylint/lint/check_parallel.py:102: in check_parallel
[ 4265s]     for (
[ 4265s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4265s] 
[ 4265s] self = <multiprocessing.pool.IMapUnorderedIterator object at 0x3fb71dd5e0>
[ 4265s] timeout = None
[ 4265s] 
[ 4265s]     def next(self, timeout=None):
[ 4265s]         with self._cond:
[ 4265s]             try:
[ 4265s]                 item = self._items.popleft()
[ 4265s]             except IndexError:
[ 4265s]                 if self._index == self._length:
[ 4265s]                     self._pool = None
[ 4265s]                     raise StopIteration from None
[ 4265s]                 self._cond.wait(timeout)
[ 4265s]                 try:
[ 4265s]                     item = self._items.popleft()
[ 4265s]                 except IndexError:
[ 4265s]                     if self._index == self._length:
[ 4265s]                         self._pool = None
[ 4265s]                         raise StopIteration from None
[ 4265s]                     raise TimeoutError from None
[ 4265s]     
[ 4265s]         success, value = item
[ 4265s]         if success:
[ 4265s]             return value
[ 4265s] >       raise value
[ 4265s] E       TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4265s] 
[ 4265s] /usr/lib64/python3.8/multiprocessing/pool.py:868: TypeError
[ 4265s] ____________________ test_disable_global_option_end_of_line ____________________
[ 4265s] 
[ 4265s]     def test_disable_global_option_end_of_line():
[ 4265s]         """
[ 4265s]         Test for issue with disabling tokenizer messages
[ 4265s]         that extend beyond the scope of the ast tokens
[ 4265s]         """
[ 4265s]         file_ = tempfile.NamedTemporaryFile("w", delete=False)
[ 4265s]         with file_:
[ 4266s]             file_.write(
[ 4266s]                 """
[ 4266s]     mylist = [
[ 4266s]         None
[ 4266s]             ]
[ 4266s]         """
[ 4266s]             )
[ 4266s]         try:
[ 4266s]             linter = lint.PyLinter()
[ 4266s]             checker = FormatChecker(linter)
[ 4266s]             linter.register_checker(checker)
[ 4266s]             args = linter.load_command_line_configuration(
[ 4266s]                 [file_.name, "-d", "bad-continuation"]
[ 4266s]             )
[ 4266s]             myreporter = reporters.CollectingReporter()
[ 4266s]             linter.set_reporter(myreporter)
[ 4266s] >           linter.check(args)
[ 4266s] 
[ 4266s] tests/checkers/unittest_format.py:273: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/tmp/tmp4tbgupha'], black_list = ('CVS',)
[ 4266s] black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ____________________ TestMissingSubmodule.test_package_all _____________________
[ 4266s] 
[ 4266s]     @staticmethod
[ 4266s]     def test_package_all():
[ 4266s]     
[ 4266s]         sys.path.insert(0, REGR_DATA_DIR)
[ 4266s]         try:
[ 4266s] >           linter.check(os.path.join(REGR_DATA_DIR, "package_all"))
[ 4266s] 
[ 4266s] tests/checkers/unittest_variables.py:349: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/checkers/../regrtest_data/package_all',)
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _____________________________ test_types_redefined _____________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_types_redefined(linter):
[ 4266s]         elif_test = osp.join(osp.dirname(osp.abspath(__file__)), "data", "bad_builtin.py")
[ 4266s]         with fix_import_path([elif_test]):
[ 4266s] >           linter.check([elif_test])
[ 4266s] 
[ 4266s] tests/extensions/test_bad_builtin.py:38: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/bad_builtin.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ________________ BroadTryClauseTC.test_broad_try_clause_message ________________
[ 4266s] 
[ 4266s] self = <extensions.test_broad_try_clause.BroadTryClauseTC testMethod=test_broad_try_clause_message>
[ 4266s] 
[ 4266s]     def test_broad_try_clause_message(self):
[ 4266s]         broad_try_clause_test = osp.join(
[ 4266s]             osp.dirname(osp.abspath(__file__)), "data", "broad_try_clause.py"
[ 4266s]         )
[ 4266s] >       self._linter.check([broad_try_clause_test])
[ 4266s] 
[ 4266s] tests/extensions/test_broad_try_clause.py:45: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/broad_try_clause.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ______________________ test_max_mccabe_rate[0-expected0] _______________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] fname_mccabe_example = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/mccabe.py'
[ 4266s] complexity = 0
[ 4266s] expected = ["'f1' is too complex. The McCabe rating is 1", "'f2' is too complex. The McCabe rating is 1", "'f3' is too complex. T...McCabe rating is 2", "'f5' is too complex. The McCabe rating is 2", "'f6' is too complex. The McCabe rating is 2", ...]
[ 4266s] 
[ 4266s]     @pytest.mark.parametrize(
[ 4266s]         "complexity, expected", [(0, EXPECTED_MSGS), (9, EXPECTED_MSGS[-2:])]
[ 4266s]     )
[ 4266s]     def test_max_mccabe_rate(linter, fname_mccabe_example, complexity, expected):
[ 4266s]         linter.global_set_option("max-complexity", complexity)
[ 4266s] >       linter.check([fname_mccabe_example])
[ 4266s] 
[ 4266s] tests/extensions/test_check_mccabe.py:63: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/mccabe.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ______________________ test_max_mccabe_rate[9-expected1] _______________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] fname_mccabe_example = '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/mccabe.py'
[ 4266s] complexity = 9
[ 4266s] expected = ["'f10' is too complex. The McCabe rating is 11", "'method2' is too complex. The McCabe rating is 18"]
[ 4266s] 
[ 4266s]     @pytest.mark.parametrize(
[ 4266s]         "complexity, expected", [(0, EXPECTED_MSGS), (9, EXPECTED_MSGS[-2:])]
[ 4266s]     )
[ 4266s]     def test_max_mccabe_rate(linter, fname_mccabe_example, complexity, expected):
[ 4266s]         linter.global_set_option("max-complexity", complexity)
[ 4266s] >       linter.check([fname_mccabe_example])
[ 4266s] 
[ 4266s] tests/extensions/test_check_mccabe.py:63: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/mccabe.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ________________ CompareToZeroUsedTC.test_comparetozero_message ________________
[ 4266s] 
[ 4266s] self = <extensions.test_comparetozero.CompareToZeroUsedTC testMethod=test_comparetozero_message>
[ 4266s] 
[ 4266s]     def test_comparetozero_message(self):
[ 4266s]         elif_test = os.path.join(
[ 4266s]             os.path.dirname(os.path.abspath(__file__)), "data", "compare_to_zero.py"
[ 4266s]         )
[ 4266s] >       self._linter.check([elif_test])
[ 4266s] 
[ 4266s] tests/extensions/test_comparetozero.py:47: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/compare_to_zero.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ____________________________ test_docstring_message ____________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_docstring_message(linter):
[ 4266s]         docstring_test = join(dirname(abspath(__file__)), "data", "docstring.py")
[ 4266s] >       linter.check([docstring_test])
[ 4266s] 
[ 4266s] tests/extensions/test_docstyle.py:47: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/docstring.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _____________________________ test_elseif_message ______________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_elseif_message(linter):
[ 4266s]         elif_test = osp.join(osp.dirname(osp.abspath(__file__)), "data", "elif.py")
[ 4266s] >       linter.check([elif_test])
[ 4266s] 
[ 4266s] tests/extensions/test_elseif_used.py:27: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/elif.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ___________________________ test_emptystring_message ___________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_emptystring_message(linter):
[ 4266s]         elif_test = osp.join(
[ 4266s]             osp.dirname(osp.abspath(__file__)), "data", "empty_string_comparison.py"
[ 4266s]         )
[ 4266s] >       linter.check([elif_test])
[ 4266s] 
[ 4266s] tests/extensions/test_emptystring.py:37: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/empty_string_comparison.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _________________________ test_overlapping_exceptions __________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_overlapping_exceptions(linter):
[ 4266s]         test = join(dirname(__file__), "data", "overlapping_exceptions.py")
[ 4266s] >       linter.check([test])
[ 4266s] 
[ 4266s] tests/extensions/test_overlapping_exceptions.py:26: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/overlapping_exceptions.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _______________________ test_overlapping_exceptions_py33 _______________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_overlapping_exceptions_py33(linter):
[ 4266s]         """From Python 3.3 both IOError and socket.error are aliases for OSError."""
[ 4266s]         test = join(dirname(__file__), "data", "overlapping_exceptions_py33.py")
[ 4266s] >       linter.check([test])
[ 4266s] 
[ 4266s] tests/extensions/test_overlapping_exceptions.py:70: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/overlapping_exceptions_py33.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _____________________________ test_types_redefined _____________________________
[ 4266s] 
[ 4266s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4266s] 
[ 4266s]     def test_types_redefined(linter):
[ 4266s]         elif_test = osp.join(osp.dirname(osp.abspath(__file__)), "data", "redefined.py")
[ 4266s]         with fix_import_path([elif_test]):
[ 4266s] >           linter.check([elif_test])
[ 4266s] 
[ 4266s] tests/extensions/test_redefined.py:45: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/extensions/data/redefined.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ________________________ test_load_plugin_command_line _________________________
[ 4266s] 
[ 4266s]     def test_load_plugin_command_line():
[ 4266s]         dummy_plugin_path = join(REGRTEST_DATA_DIR, "dummy_plugin")
[ 4266s]         sys.path.append(dummy_plugin_path)
[ 4266s]     
[ 4266s] >       run = Run(
[ 4266s]             ["--load-plugins", "dummy_plugin", join(REGRTEST_DATA_DIR, "empty.py")],
[ 4266s]             exit=False,
[ 4266s]         )
[ 4266s] 
[ 4266s] tests/lint/unittest_lint.py:519: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/run.py:349: in __init__
[ 4266s]     linter.check(args)
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../regrtest_data/empty.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] _________________________ test_load_plugin_config_file _________________________
[ 4266s] 
[ 4266s]     def test_load_plugin_config_file():
[ 4266s]         dummy_plugin_path = join(REGRTEST_DATA_DIR, "dummy_plugin")
[ 4266s]         sys.path.append(dummy_plugin_path)
[ 4266s]         config_path = join(REGRTEST_DATA_DIR, "dummy_plugin.rc")
[ 4266s]     
[ 4266s] >       run = Run(
[ 4266s]             ["--rcfile", config_path, join(REGRTEST_DATA_DIR, "empty.py")], exit=False,
[ 4266s]         )
[ 4266s] 
[ 4266s] tests/lint/unittest_lint.py:536: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/run.py:349: in __init__
[ 4266s]     linter.check(args)
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../regrtest_data/empty.py']
[ 4266s] black_list = ('CVS',), black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4266s]                 try:
[ 4266s]                     modname = ".".join(
[ 4266s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4266s]                     )
[ 4266s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4266s] 
[ 4266s] pylint/utils/utils.py:159: TypeError
[ 4266s] ________________________ test_load_plugin_configuration ________________________
[ 4266s] 
[ 4266s]     def test_load_plugin_configuration():
[ 4266s]         dummy_plugin_path = join(REGRTEST_DATA_DIR, "dummy_plugin")
[ 4266s]         sys.path.append(dummy_plugin_path)
[ 4266s]     
[ 4266s] >       run = Run(
[ 4266s]             [
[ 4266s]                 "--load-plugins",
[ 4266s]                 "dummy_conf_plugin",
[ 4266s]                 "--ignore",
[ 4266s]                 "foo,bar",
[ 4266s]                 join(REGRTEST_DATA_DIR, "empty.py"),
[ 4266s]             ],
[ 4266s]             exit=False,
[ 4266s]         )
[ 4266s] 
[ 4266s] tests/lint/unittest_lint.py:551: 
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] pylint/lint/run.py:349: in __init__
[ 4266s]     linter.check(args)
[ 4266s] pylint/lint/pylinter.py:862: in check
[ 4266s]     self._check_files(
[ 4266s] pylint/lint/pylinter.py:895: in _check_files
[ 4266s]     for name, filepath, modname in file_descrs:
[ 4266s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4266s]     for descr in self._expand_files(files_or_modules):
[ 4266s] pylint/lint/pylinter.py:960: in _expand_files
[ 4266s]     result, errors = utils.expand_modules(
[ 4266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4266s] 
[ 4266s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../regrtest_data/empty.py']
[ 4266s] black_list = ['foo', 'bar', 'bin'], black_list_re = []
[ 4266s] 
[ 4266s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4266s]         """take a list of files/modules/packages and return the list of tuple
[ 4266s]         (file, module name) which have to be actually checked
[ 4266s]         """
[ 4266s]         result = []
[ 4266s]         errors = []
[ 4266s]         path = sys.path.copy()
[ 4266s]     
[ 4266s]         for something in files_or_modules:
[ 4266s]             if os.path.basename(something) in black_list:
[ 4266s]                 continue
[ 4266s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4266s]                 continue
[ 4266s]     
[ 4266s]             module_path = get_python_path(something)
[ 4266s]             additional_search_path = [".", module_path] + path
[ 4266s]             if os.path.exists(something):
[ 4266s]                 # this is a file or a directory
[ 4267s]                 try:
[ 4267s]                     modname = ".".join(
[ 4267s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4267s]                     )
[ 4267s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4267s] 
[ 4267s] pylint/utils/utils.py:159: TypeError
[ 4267s] _________________________ test_analyze_explicit_script _________________________
[ 4267s] 
[ 4267s] linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4267s] 
[ 4267s]     def test_analyze_explicit_script(linter):
[ 4267s]         linter.set_reporter(testutils.TestReporter())
[ 4267s] >       linter.check(os.path.join(DATA_DIR, "ascript"))
[ 4267s] 
[ 4267s] tests/lint/unittest_lint.py:573: 
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] pylint/lint/pylinter.py:862: in check
[ 4267s]     self._check_files(
[ 4267s] pylint/lint/pylinter.py:895: in _check_files
[ 4267s]     for name, filepath, modname in file_descrs:
[ 4267s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4267s]     for descr in self._expand_files(files_or_modules):
[ 4267s] pylint/lint/pylinter.py:960: in _expand_files
[ 4267s]     result, errors = utils.expand_modules(
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] 
[ 4267s] files_or_modules = ('/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../data/ascript',)
[ 4267s] black_list = ('CVS',), black_list_re = []
[ 4267s] 
[ 4267s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4267s]         """take a list of files/modules/packages and return the list of tuple
[ 4267s]         (file, module name) which have to be actually checked
[ 4267s]         """
[ 4267s]         result = []
[ 4267s]         errors = []
[ 4267s]         path = sys.path.copy()
[ 4267s]     
[ 4267s]         for something in files_or_modules:
[ 4267s]             if os.path.basename(something) in black_list:
[ 4267s]                 continue
[ 4267s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4267s]                 continue
[ 4267s]     
[ 4267s]             module_path = get_python_path(something)
[ 4267s]             additional_search_path = [".", module_path] + path
[ 4267s]             if os.path.exists(something):
[ 4267s]                 # this is a file or a directory
[ 4267s]                 try:
[ 4267s]                     modname = ".".join(
[ 4267s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4267s]                     )
[ 4267s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4267s] 
[ 4267s] pylint/utils/utils.py:159: TypeError
[ 4267s] _______________________ test_custom_should_analyze_file ________________________
[ 4267s] 
[ 4267s]     def test_custom_should_analyze_file():
[ 4267s]         """Check that we can write custom should_analyze_file that work
[ 4267s]         even for arguments.
[ 4267s]         """
[ 4267s]         package_dir = os.path.join(REGRTEST_DATA_DIR, "bad_package")
[ 4267s]         wrong_file = os.path.join(package_dir, "wrong.py")
[ 4267s]     
[ 4267s]         for jobs in [1, 2]:
[ 4267s]             reporter = testutils.TestReporter()
[ 4267s]             linter = _CustomPyLinter()
[ 4267s]             linter.config.jobs = jobs
[ 4267s]             linter.config.persistent = 0
[ 4267s]             linter.open()
[ 4267s]             linter.set_reporter(reporter)
[ 4267s]     
[ 4267s]             try:
[ 4267s]                 sys.path.append(os.path.dirname(package_dir))
[ 4267s] >               linter.check([package_dir, wrong_file])
[ 4267s] 
[ 4267s] tests/lint/unittest_lint.py:779: 
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] pylint/lint/pylinter.py:862: in check
[ 4267s]     self._check_files(
[ 4267s] pylint/lint/pylinter.py:895: in _check_files
[ 4267s]     for name, filepath, modname in file_descrs:
[ 4267s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4267s]     for descr in self._expand_files(files_or_modules):
[ 4267s] pylint/lint/pylinter.py:960: in _expand_files
[ 4267s]     result, errors = utils.expand_modules(
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] 
[ 4267s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../regrtest_data/bad_package', '/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../regrtest_data/bad_package/wrong.py']
[ 4267s] black_list = ('CVS',), black_list_re = []
[ 4267s] 
[ 4267s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4267s]         """take a list of files/modules/packages and return the list of tuple
[ 4267s]         (file, module name) which have to be actually checked
[ 4267s]         """
[ 4267s]         result = []
[ 4267s]         errors = []
[ 4267s]         path = sys.path.copy()
[ 4267s]     
[ 4267s]         for something in files_or_modules:
[ 4267s]             if os.path.basename(something) in black_list:
[ 4267s]                 continue
[ 4267s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4267s]                 continue
[ 4267s]     
[ 4267s]             module_path = get_python_path(something)
[ 4267s]             additional_search_path = [".", module_path] + path
[ 4267s]             if os.path.exists(something):
[ 4267s]                 # this is a file or a directory
[ 4267s]                 try:
[ 4267s]                     modname = ".".join(
[ 4267s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4267s]                     )
[ 4267s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4267s] 
[ 4267s] pylint/utils/utils.py:159: TypeError
[ 4267s] __________________________ test_filename_with__init__ __________________________
[ 4267s] 
[ 4267s] init_linter = Checker 'master' (responsible for 'F0001', 'F0002', 'F0010', 'I0001', 'I0010', 'I0011', 'I0013', 'I0020', 'I0021', 'I0022', 'E0001', 'E0011', 'E0012')
[ 4267s] 
[ 4267s]     def test_filename_with__init__(init_linter):
[ 4267s]         # This tracks a regression where a file whose name ends in __init__.py,
[ 4267s]         # such as flycheck__init__.py, would accidentally lead to linting the
[ 4267s]         # entire containing directory.
[ 4267s]         reporter = testutils.TestReporter()
[ 4267s]         linter = init_linter
[ 4267s]         linter.open()
[ 4267s]         linter.set_reporter(reporter)
[ 4267s]         filepath = join(INPUT_DIR, "not__init__.py")
[ 4267s] >       linter.check([filepath])
[ 4267s] 
[ 4267s] tests/lint/unittest_lint.py:797: 
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] pylint/lint/pylinter.py:862: in check
[ 4267s]     self._check_files(
[ 4267s] pylint/lint/pylinter.py:895: in _check_files
[ 4267s]     for name, filepath, modname in file_descrs:
[ 4267s] pylint/lint/pylinter.py:952: in _iterate_file_descrs
[ 4267s]     for descr in self._expand_files(files_or_modules):
[ 4267s] pylint/lint/pylinter.py:960: in _expand_files
[ 4267s]     result, errors = utils.expand_modules(
[ 4267s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[ 4267s] 
[ 4267s] files_or_modules = ['/home/abuild/rpmbuild/BUILD/pylint-2.6.0/tests/lint/../input/not__init__.py']
[ 4267s] black_list = ('CVS',), black_list_re = []
[ 4267s] 
[ 4267s]     def expand_modules(files_or_modules, black_list, black_list_re):
[ 4267s]         """take a list of files/modules/packages and return the list of tuple
[ 4267s]         (file, module name) which have to be actually checked
[ 4267s]         """
[ 4267s]         result = []
[ 4267s]         errors = []
[ 4267s]         path = sys.path.copy()
[ 4267s]     
[ 4267s]         for something in files_or_modules:
[ 4267s]             if os.path.basename(something) in black_list:
[ 4267s]                 continue
[ 4267s]             if _basename_in_blacklist_re(os.path.basename(something), black_list_re):
[ 4267s]                 continue
[ 4267s]     
[ 4267s]             module_path = get_python_path(something)
[ 4267s]             additional_search_path = [".", module_path] + path
[ 4267s]             if os.path.exists(something):
[ 4267s]                 # this is a file or a directory
[ 4267s]                 try:
[ 4267s]                     modname = ".".join(
[ 4267s] >                       modutils.modpath_from_file(something, path=additional_search_path)
[ 4267s]                     )
[ 4267s] E                   TypeError: modpath_from_file() got an unexpected keyword argument 'path'
[ 4267s] 
[ 4267s] pylint/utils/utils.py:159: TypeError
[ 4267s] =============================== warnings summary ===============================
[ 4267s] /usr/lib/python3.8/site-packages/_pytest/mark/structures.py:331
[ 4267s]   /usr/lib/python3.8/site-packages/_pytest/mark/structures.py:331: PytestUnknownMarkWarning: Unknown pytest.mark.benchmark - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
[ 4267s]     warnings.warn(
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:7: DeprecationWarning: invalid escape sequence \[
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:8: DeprecationWarning: invalid escape sequence \/
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:9: DeprecationWarning: invalid escape sequence \`
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:15: DeprecationWarning: invalid escape sequence \o
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:17: DeprecationWarning: invalid escape sequence \8
[ 4267s] 
[ 4267s] tests/test_func.py::test_functionality[func_excess_escapes.py]
[ 4267s]   <unknown>:27: DeprecationWarning: invalid escape sequence \P
[ 4267s] 
[ 4267s] -- Docs: https://docs.pytest.org/en/latest/warnings.html
[ 4267s] = 444 failed, 699 passed, 44 skipped, 220 deselected, 7 warnings in 2403.54 seconds =
[ 4274s] error: Bad exit status from /var/tmp/rpm-tmp.vlQ9JD (%check)
[ 4274s] 
[ 4274s] 
[ 4274s] RPM build errors:
[ 4274s]     Bad exit status from /var/tmp/rpm-tmp.vlQ9JD (%check)
[ 4275s] 
[ 4275s] oe-RISCV-worker29 failed "build pylint.spec" at Thu Apr 21 17:35:25 UTC 2022.
[ 4275s] 
