[    0s] Using BUILD_ROOT=/var/cache/obs/worker/root_1/.mount
[    0s] Using BUILD_ARCH=riscv64
[    0s] Doing kvm build in /var/cache/obs/worker/root_1/root
[    0s] 
[    0s] 
[    0s] old-cirrus1 started "build python-kafka-python.spec" at Sun Feb 19 22:53:11 UTC 2023.
[    0s] 
[    0s] Building python-kafka-python for project 'openSUSE:Factory:RISCV' repository 'standard' arch 'riscv64' srcmd5 'c138649a20f7c6d49b28d9d4e244dec2'
[    0s] 
[    0s] processing recipe /var/cache/obs/worker/root_1/.build-srcdir/python-kafka-python.spec ...
[    0s] running changelog2spec --target rpm --file /var/cache/obs/worker/root_1/.build-srcdir/python-kafka-python.spec
[    1s] init_buildsystem --configdir /var/run/obs/worker/1/build/configs --cachedir /var/cache/build --prepare --clean --rpmlist /var/cache/obs/worker/root_1/.build.rpmlist /var/cache/obs/worker/root_1/.build-srcdir/python-kafka-python.spec build ...
[    1s] unpacking preinstall image openSUSE:Factory:RISCV/standard/preinstallimage-python [c7e2cbd6684e3f750b525acc7bf692ab]
[    4s] 
[    4s] copying packages...
[    5s] reordering...done
[    5s] Detected virtio-serial support
[    6s] booting kvm...
[    6s] ### VM INTERACTION START ###
[    6s] Using virtio-serial support
[    6s] /usr/bin/qemu-kvm -nodefaults -no-reboot -nographic -vga none -cpu host -M pc,accel=kvm,usb=off,dump-guest-core=off,vmport=off -sandbox on -bios /usr/share/qemu/qboot.rom -object rng-random,filename=/dev/random,id=rng0 -device virtio-rng-pci,rng=rng0 -object iothread,id=io0 -runas qemu -net none -kernel /var/cache/obs/worker/root_1/.mount/boot/kernel -initrd /var/cache/obs/worker/root_1/.mount/boot/initrd -append root=/dev/disk/by-id/virtio-0 rootfstype=ext4 rootflags=noatime kvmclock mitigations=off elevator=noop nmi_watchdog=0 rw rd.driver.pre=binfmt_misc oops=panic panic=1 quiet console=hvc0 init=/.build/initvm.x86_64 -m 8192 -drive file=/var/cache/obs/worker/root_1/root,format=raw,if=none,id=disk,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=disk,serial=0 -drive file=/var/cache/obs/worker/root_1/swap,format=raw,if=none,id=swap,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=swap,serial=1 -device virtio-serial,max_ports=2 -device virtconsole,chardev=virtiocon0 -chardev stdio,id=virtiocon0 -chardev socket,id=monitor,server=on,wait=off,path=/var/cache/obs/worker/root_1/root.qemu/monitor -mon chardev=monitor,mode=readline -smp 4
[   11s] ### VM INTERACTION END ###
[   11s] 2nd stage started in virtual machine
[   11s] machine type: riscv64
[   11s] Linux version: 6.1.12-1-default #1 SMP PREEMPT_DYNAMIC Wed Feb 15 05:31:41 UTC 2023 (373f017)
[   11s] Increasing log level from now on...
[   11s] [    4.577860][  T369] sysrq: Changing Loglevel
[   11s] [    4.578114][  T369] sysrq: Loglevel set to 4
[   11s] Enable sysrq operations
[   12s] Setting up swapspace version 1, size = 2 GiB (2147479552 bytes)
[   12s] no label, UUID=e54d0679-08df-4c5a-bc89-0242e1b32b74
[   12s] swapon: /dev/vdb: found signature [pagesize=4096, signature=swap]
[   12s] swapon: /dev/vdb: pagesize=4096, swapsize=2147483648, devsize=2147483648
[   12s] swapon /dev/vdb
[   12s] WARNING: udev not running, creating extra device nodes
[   13s] logging output to //.build.log...
[   13s] processing recipe /.build-srcdir/python-kafka-python.spec ...
[   13s] init_buildsystem --configdir /.build/configs --cachedir /var/cache/build /.build-srcdir/python-kafka-python.spec build ...
[   13s] initializing rpm db...
[   14s] querying package ids...
[   40s] [1/231] preinstalled aaa_base-84.87+git20220822.6b9f7a3-1.1
[   40s] [2/231] preinstalled aaa_base-malloccheck-84.87+git20220822.6b9f7a3-1.1
[   40s] [3/231] preinstalled attr-2.5.1-1.1
[   40s] [4/231] preinstalled bash-5.2.15-8.1
[   40s] [5/231] preinstalled bash-sh-5.2.15-8.1
[   40s] [6/231] preinstalled binutils-2.39-3.1
[   40s] [7/231] preinstalled brp-check-suse-84.87+git20221115.2f7add6-1.1
[   40s] [8/231] preinstalled build-compare-20221206T204012.bb70754-1.2
[   40s] [9/231] preinstalled build-mkbaselibs-20230215-1.1
[   40s] [10/231] preinstalled bzip2-1.0.8-4.1
[   40s] [11/231] preinstalled chkstat-1599_20230217-1.1
[   40s] [12/231] preinstalled compat-usrmerge-build-84.87-5.1
[   40s] [13/231] preinstalled compat-usrmerge-tools-84.87-5.1
[   40s] [14/231] preinstalled coreutils-9.1-5.1
[   40s] [15/231] preinstalled cpio-2.13-5.1
[   40s] [16/231] preinstalled cpp-12-2.1
[   40s] [17/231] preinstalled cpp12-12.2.1+git749-4.1
[   40s] [18/231] preinstalled crypto-policies-20210917.c9d86d1-1.1
[   40s] [19/231] preinstalled debugedit-5.0-5.1
[   40s] [20/231] preinstalled diffutils-3.9-1.1
[   40s] [21/231] preinstalled dwz-0.15-2.1
[   40s] [22/231] preinstalled elfutils-0.188-4.1
[   40s] [23/231] cumulate fdupes-2.2.1-1.1
[   40s] [24/231] preinstalled file-5.44-1.2
[   40s] [25/231] preinstalled file-magic-5.44-1.2
[   40s] [26/231] preinstalled filesystem-84.87-12.1
[   40s] [27/231] preinstalled fillup-1.42-279.1
[   40s] [28/231] preinstalled findutils-4.9.0-2.1
[   40s] [29/231] preinstalled gawk-5.2.1-2.1
[   40s] [30/231] preinstalled gcc-12-2.1
[   40s] [31/231] preinstalled gcc-PIE-12-2.1
[   40s] [32/231] preinstalled gcc12-12.2.1+git749-4.1
[   40s] [33/231] preinstalled gcc12-PIE-12.2.1+git749-4.1
[   40s] [34/231] preinstalled gettext-runtime-mini-0.21.1-1.1
[   40s] [35/231] preinstalled gettext-tools-mini-0.21.1-1.1
[   40s] [36/231] preinstalled glibc-2.37-1.1
[   40s] [37/231] preinstalled glibc-devel-2.37-1.1
[   40s] [38/231] preinstalled glibc-locale-base-2.37-1.1
[   40s] [39/231] preinstalled grep-3.8-3.1
[   40s] [40/231] preinstalled gzip-1.12-3.1
[   40s] [41/231] preinstalled kernel-obs-build-6.1.12-1.1
[   40s] [42/231] preinstalled libacl1-2.3.1-2.1
[   40s] [43/231] cumulate libalternatives1-1.2+3.b848aad-3.1
[   40s] [44/231] preinstalled libasan8-13.0.1+git5428-6.1
[   40s] [45/231] preinstalled libasm1-0.188-4.1
[   40s] [46/231] preinstalled libatomic1-13.0.1+git5428-6.1
[   40s] [47/231] preinstalled libattr1-2.5.1-1.1
[   40s] [48/231] preinstalled libaudit1-3.0.9-1.1
[   40s] [49/231] preinstalled libblkid1-2.38.1-7.1
[   40s] [50/231] preinstalled libbz2-1-1.0.8-4.1
[   40s] [51/231] preinstalled libcap-ng0-0.8.3-1.1
[   40s] [52/231] preinstalled libcap2-2.67-1.1
[   40s] [53/231] preinstalled libcrypt1-4.4.33-1.1
[   40s] [54/231] preinstalled libctf-nobfd0-2.39-3.1
[   40s] [55/231] preinstalled libctf0-2.39-3.1
[   40s] [56/231] preinstalled libdb-4_8-4.8.30-39.1
[   40s] [57/231] preinstalled libdw1-0.188-4.1
[   40s] [58/231] preinstalled libeconf0-0.5.1-1.1
[   40s] [59/231] preinstalled libelf1-0.188-4.1
[   40s] [60/231] preinstalled libexpat1-2.5.0-2.1
[   40s] [61/231] preinstalled libfdisk1-2.38.1-7.1
[   40s] [62/231] preinstalled libffi8-3.4.4-1.1
[   40s] [63/231] preinstalled libgcc_s1-13.0.1+git5428-6.1
[   40s] [64/231] preinstalled libgcrypt20-1.10.1-1.1
[   40s] [65/231] preinstalled libgdbm6-1.23-1.1
[   40s] [66/231] preinstalled libgdbm_compat4-1.23-1.1
[   40s] [67/231] preinstalled libgmp10-6.2.1-4.1
[   40s] [68/231] preinstalled libgomp1-13.0.1+git5428-6.1
[   40s] [69/231] preinstalled libgpg-error0-1.46-1.1
[   40s] [70/231] preinstalled libisl23-0.25-1.1
[   40s] [71/231] preinstalled liblua5_4-5-5.4.4-8.1
[   40s] [72/231] cumulate liblz4-1-1.9.4-1.1
[   40s] [73/231] preinstalled liblzma5-5.4.1-1.1
[   40s] [74/231] preinstalled libmagic1-5.44-1.2
[   40s] [75/231] preinstalled libmount1-2.38.1-7.1
[   40s] [76/231] preinstalled libmpc3-1.3.1-1.2
[   40s] [77/231] preinstalled libmpdec3-2.5.1-2.1
[   40s] [78/231] preinstalled libmpfr6-4.2.0-1.1
[   40s] [79/231] preinstalled libncurses6-6.4.20230128-5.1
[   40s] [80/231] preinstalled libopenssl3-3.0.7-3.1
[   40s] [81/231] preinstalled libpcre2-8-0-10.42-3.2
[   40s] [82/231] preinstalled libpkgconf3-1.8.0-2.1
[   40s] [83/231] preinstalled libpopt0-1.19-1.1
[   40s] [84/231] preinstalled libpython3_10-1_0-3.10.9-2.2
[   40s] [85/231] preinstalled libpython3_11-1_0-3.11.1-4.2
[   40s] [86/231] preinstalled libpython3_8-1_0-3.8.16-3.2
[   40s] [87/231] preinstalled libpython3_9-1_0-3.9.16-3.2
[   40s] [88/231] preinstalled libreadline8-8.2-2.1
[   40s] [89/231] preinstalled librpmbuild9-4.18.0-3.2
[   40s] [90/231] preinstalled libseccomp2-2.5.4-2.1
[   40s] [91/231] preinstalled libselinux1-3.4-2.1
[   40s] [92/231] preinstalled libsemanage-conf-3.4-1.1
[   40s] [93/231] preinstalled libsemanage2-3.4-1.1
[   40s] [94/231] preinstalled libsepol2-3.4-1.1
[   40s] [95/231] preinstalled libsmartcols1-2.38.1-7.1
[   40s] [96/231] cumulate libsnappy1-1.1.9-2.1
[   40s] [97/231] preinstalled libstdc++6-13.0.1+git5428-6.1
[   40s] [98/231] preinstalled libsubid4-4.13-4.1
[   40s] [99/231] cumulate libsystemd0-mini-252.5-1.1
[   40s] [100/231] preinstalled libubsan1-13.0.1+git5428-6.1
[   40s] [101/231] preinstalled libutempter0-1.2.0-3.2
[   40s] [102/231] preinstalled libuuid1-2.38.1-7.1
[   40s] [103/231] preinstalled libxcrypt-devel-4.4.33-1.1
[   40s] [104/231] cumulate libxxhash0-0.8.1-2.1
[   40s] [105/231] preinstalled libz1-1.2.13-2.1
[   40s] [106/231] preinstalled libzstd1-1.5.2-2.1
[   40s] [107/231] preinstalled linux-glibc-devel-6.1-1.1
[   40s] [108/231] preinstalled login_defs-4.13-4.1
[   40s] [109/231] preinstalled lua54-5.4.4-8.1
[   40s] [110/231] preinstalled make-4.4-2.1
[   40s] [111/231] preinstalled ncurses-utils-6.4.20230128-5.1
[   40s] [112/231] preinstalled pam-1.5.2-12.1
[   40s] [113/231] preinstalled patch-2.7.6-6.1
[   40s] [114/231] preinstalled perl-5.36.0-4.1
[   40s] [115/231] preinstalled perl-base-5.36.0-4.1
[   40s] [116/231] preinstalled permissions-1599_20230217-1.1
[   40s] [117/231] preinstalled permissions-config-1599_20230217-1.1
[   40s] [118/231] preinstalled pkgconf-1.8.0-2.1
[   40s] [119/231] preinstalled pkgconf-m4-1.8.0-2.1
[   40s] [120/231] preinstalled pkgconf-pkg-config-1.8.0-2.1
[   40s] [121/231] preinstalled polkit-default-privs-1550+20221102.9f111fa-1.1
[   40s] [122/231] preinstalled post-build-checks-84.87+git20230106.3a359c5-1.1
[   40s] [123/231] preinstalled python-rpm-macros-20230128.e704796-1.2
[   40s] [124/231] preinstalled python-rpm-packaging-20210526+a18ca48-1.2
[   40s] [125/231] cumulate python310-apipkg-3.0.1-1.2
[   40s] [126/231] cumulate python310-attrs-22.2.0-1.2
[   40s] [127/231] preinstalled python310-base-3.10.9-2.2
[   40s] [128/231] cumulate python310-exceptiongroup-1.1.0-1.2
[   40s] [129/231] cumulate python310-iniconfig-1.1.1-3.2
[   40s] [130/231] preinstalled python310-packaging-23.0-1.1
[   40s] [131/231] cumulate python310-pluggy-1.0.0-1.5
[   40s] [132/231] cumulate python310-pycparser-2.21-1.5
[   40s] [133/231] preinstalled python310-setuptools-65.6.3-1.2
[   40s] [134/231] cumulate python310-tomli-2.0.1-1.3
[   40s] [135/231] cumulate python310-zipp-3.8.1-1.2
[   40s] [136/231] cumulate python311-apipkg-3.0.1-1.2
[   40s] [137/231] cumulate python311-attrs-22.2.0-1.2
[   40s] [138/231] preinstalled python311-base-3.11.1-4.2
[   40s] [139/231] cumulate python311-exceptiongroup-1.1.0-1.2
[   40s] [140/231] cumulate python311-iniconfig-1.1.1-3.2
[   40s] [141/231] cumulate python311-packaging-23.0-1.2
[   40s] [142/231] cumulate python311-pluggy-1.0.0-1.5
[   40s] [143/231] cumulate python311-pycparser-2.21-1.5
[   40s] [144/231] preinstalled python311-setuptools-65.6.3-1.2
[   40s] [145/231] cumulate python311-tomli-2.0.1-1.3
[   40s] [146/231] cumulate python311-zipp-3.8.1-1.2
[   40s] [147/231] cumulate python38-apipkg-3.0.1-1.2
[   40s] [148/231] cumulate python38-attrs-22.2.0-1.2
[   40s] [149/231] preinstalled python38-base-3.8.16-3.2
[   40s] [150/231] cumulate python38-exceptiongroup-1.1.0-1.2
[   40s] [151/231] cumulate python38-iniconfig-1.1.1-3.2
[   40s] [152/231] cumulate python38-packaging-23.0-1.2
[   40s] [153/231] cumulate python38-pluggy-1.0.0-1.5
[   40s] [154/231] cumulate python38-pycparser-2.21-1.5
[   40s] [155/231] preinstalled python38-setuptools-65.6.3-1.2
[   40s] [156/231] cumulate python38-tomli-2.0.1-1.3
[   40s] [157/231] cumulate python38-zipp-3.8.1-1.2
[   40s] [158/231] cumulate python39-apipkg-3.0.1-1.2
[   40s] [159/231] cumulate python39-attrs-22.2.0-1.2
[   40s] [160/231] preinstalled python39-base-3.9.16-3.2
[   40s] [161/231] cumulate python39-exceptiongroup-1.1.0-1.2
[   40s] [162/231] cumulate python39-iniconfig-1.1.1-3.2
[   40s] [163/231] cumulate python39-packaging-23.0-1.2
[   40s] [164/231] cumulate python39-pluggy-1.0.0-1.5
[   40s] [165/231] cumulate python39-pycparser-2.21-1.5
[   40s] [166/231] preinstalled python39-setuptools-65.6.3-1.2
[   40s] [167/231] cumulate python39-tomli-2.0.1-1.3
[   40s] [168/231] cumulate python39-zipp-3.8.1-1.2
[   40s] [169/231] preinstalled qemu-linux-user-7.1.0-50.1
[   40s] [170/231] preinstalled rpm-4.18.0-3.2
[   40s] [171/231] preinstalled rpm-build-4.18.0-3.2
[   40s] [172/231] preinstalled rpm-build-perl-4.18.0-3.2
[   40s] [173/231] preinstalled rpm-config-SUSE-20220926-1.1
[   40s] [174/231] preinstalled rpmlint-mini-2.4.0+git20230214.1bab129-9.5
[   40s] [175/231] preinstalled rpmlint-strict-2.4.0+git20230214.1bab129-1.1
[   40s] [176/231] preinstalled sed-4.9-2.1
[   40s] [177/231] preinstalled shadow-4.13-4.1
[   40s] [178/231] preinstalled system-group-hardware-20170617-24.1
[   40s] [179/231] preinstalled system-user-root-20190513-2.1
[   40s] [180/231] preinstalled systemd-rpm-macros-19-1.1
[   40s] [181/231] preinstalled sysuser-shadow-3.1-5.1
[   40s] [182/231] preinstalled tar-1.34-9.1
[   40s] [183/231] preinstalled terminfo-base-6.4.20230128-5.1
[   40s] [184/231] preinstalled update-alternatives-1.21.8-1.1
[   40s] [185/231] preinstalled util-linux-2.38.1-7.1
[   40s] [186/231] preinstalled which-2.21-5.1
[   40s] [187/231] preinstalled xz-5.4.1-1.1
[   40s] [188/231] cumulate zstd-1.5.2-2.1
[   40s] [189/231] cumulate alts-1.2+3.b848aad-3.1
[   40s] [190/231] cumulate libprocps8-3.3.17-12.1
[   40s] [191/231] cumulate python310-cffi-1.15.1-3.2
[   40s] [192/231] cumulate python310-importlib-metadata-6.0.0-1.2
[   40s] [193/231] cumulate python310-python-snappy-0.6.1-1.1
[   40s] [194/231] cumulate python310-xxhash-3.1.0-1.2
[   40s] [195/231] cumulate python311-cffi-1.15.1-3.2
[   40s] [196/231] cumulate python311-importlib-metadata-6.0.0-1.2
[   40s] [197/231] cumulate python311-python-snappy-0.6.1-1.1
[   40s] [198/231] cumulate python311-xxhash-3.1.0-1.2
[   40s] [199/231] cumulate python38-cffi-1.15.1-3.2
[   40s] [200/231] cumulate python38-importlib-metadata-6.0.0-1.2
[   40s] [201/231] cumulate python38-python-snappy-0.6.1-1.1
[   40s] [202/231] cumulate python38-xxhash-3.1.0-1.2
[   40s] [203/231] cumulate python39-cffi-1.15.1-3.2
[   40s] [204/231] cumulate python39-importlib-metadata-6.0.0-1.2
[   40s] [205/231] cumulate python39-python-snappy-0.6.1-1.1
[   40s] [206/231] cumulate python39-xxhash-3.1.0-1.2
[   40s] [207/231] cumulate python310-py-1.11.0-3.2
[   40s] [208/231] cumulate python311-py-1.11.0-3.2
[   40s] [209/231] cumulate python38-py-1.11.0-3.2
[   40s] [210/231] cumulate python39-py-1.11.0-3.2
[   40s] [211/231] cumulate procps-3.3.17-12.1
[   40s] [212/231] cumulate python310-zstandard-0.19.0-3.1
[   40s] [213/231] cumulate python311-zstandard-0.19.0-3.1
[   40s] [214/231] cumulate python38-zstandard-0.19.0-3.1
[   40s] [215/231] cumulate python39-zstandard-0.19.0-3.1
[   40s] [216/231] cumulate python310-pytest-7.2.0-2.2
[   40s] [217/231] cumulate python311-pytest-7.2.0-2.2
[   40s] [218/231] cumulate python38-pytest-7.2.0-2.2
[   40s] [219/231] cumulate python39-pytest-7.2.0-2.2
[   40s] [220/231] cumulate python310-psutil-5.9.4-2.2
[   40s] [221/231] cumulate python311-psutil-5.9.4-2.2
[   40s] [222/231] cumulate python38-psutil-5.9.4-2.2
[   40s] [223/231] cumulate python39-psutil-5.9.4-2.2
[   40s] [224/231] cumulate python310-pytest-mock-3.10.0-1.2
[   40s] [225/231] cumulate python311-pytest-mock-3.10.0-1.2
[   40s] [226/231] cumulate python38-pytest-mock-3.10.0-1.2
[   40s] [227/231] cumulate python39-pytest-mock-3.10.0-1.2
[   40s] [228/231] cumulate python310-lz4-3.1.10-1.5
[   40s] [229/231] cumulate python311-lz4-3.1.10-1.5
[   40s] [230/231] cumulate python38-lz4-3.1.10-1.5
[   40s] [231/231] cumulate python39-lz4-3.1.10-1.5
[   40s] now installing cumulated packages
[   40s] Preparing...                          ########################################
[   41s] Updating / installing...
[   41s] zstd-1.5.2-2.1                        ########################################
[   41s] libxxhash0-0.8.1-2.1                  ########################################
[   41s] libsnappy1-1.1.9-2.1                  ########################################
[   41s] liblz4-1-1.9.4-1.1                    ########################################
[   41s] python39-iniconfig-1.1.1-3.2          ########################################
[   41s] python38-iniconfig-1.1.1-3.2          ########################################
[   41s] python311-iniconfig-1.1.1-3.2         ########################################
[   41s] python310-iniconfig-1.1.1-3.2         ########################################
[   41s] python39-zipp-3.8.1-1.2               ########################################
[   41s] python39-importlib-metadata-6.0.0-1.2 ########################################
[   41s] python39-tomli-2.0.1-1.3              ########################################
[   41s] python39-pycparser-2.21-1.5           ########################################
[   41s] python39-cffi-1.15.1-3.2              ########################################
[   42s] python39-pluggy-1.0.0-1.5             ########################################
[   42s] python39-packaging-23.0-1.2           ########################################
[   42s] python39-exceptiongroup-1.1.0-1.2     ########################################
[   42s] python39-attrs-22.2.0-1.2             ########################################
[   42s] python39-apipkg-3.0.1-1.2             ########################################
[   42s] python39-py-1.11.0-3.2                ########################################
[   42s] python38-zipp-3.8.1-1.2               ########################################
[   42s] python38-importlib-metadata-6.0.0-1.2 ########################################
[   42s] python38-tomli-2.0.1-1.3              ########################################
[   42s] python38-pycparser-2.21-1.5           ########################################
[   42s] python38-cffi-1.15.1-3.2              ########################################
[   42s] python38-pluggy-1.0.0-1.5             ########################################
[   42s] python38-packaging-23.0-1.2           ########################################
[   42s] python38-exceptiongroup-1.1.0-1.2     ########################################
[   42s] python38-attrs-22.2.0-1.2             ########################################
[   42s] python38-apipkg-3.0.1-1.2             ########################################
[   42s] python38-py-1.11.0-3.2                ########################################
[   42s] python311-zipp-3.8.1-1.2              ########################################
[   42s] python311-importlib-metadata-6.0.0-1.2########################################
[   42s] python311-tomli-2.0.1-1.3             ########################################
[   43s] python311-pycparser-2.21-1.5          ########################################
[   43s] python311-cffi-1.15.1-3.2             ########################################
[   43s] python311-pluggy-1.0.0-1.5            ########################################
[   43s] python311-packaging-23.0-1.2          ########################################
[   43s] python311-exceptiongroup-1.1.0-1.2    ########################################
[   43s] python311-attrs-22.2.0-1.2            ########################################
[   43s] python311-apipkg-3.0.1-1.2            ########################################
[   43s] python311-py-1.11.0-3.2               ########################################
[   43s] python310-zipp-3.8.1-1.2              ########################################
[   43s] python310-importlib-metadata-6.0.0-1.2########################################
[   43s] python310-tomli-2.0.1-1.3             ########################################
[   43s] python310-pycparser-2.21-1.5          ########################################
[   43s] python310-cffi-1.15.1-3.2             ########################################
[   44s] python310-pluggy-1.0.0-1.5            ########################################
[   44s] python310-exceptiongroup-1.1.0-1.2    ########################################
[   44s] python310-attrs-22.2.0-1.2            ########################################
[   44s] python310-apipkg-3.0.1-1.2            ########################################
[   44s] python310-py-1.11.0-3.2               ########################################
[   44s] libsystemd0-mini-252.5-1.1            ########################################
[   44s] libprocps8-3.3.17-12.1                ########################################
[   44s] procps-3.3.17-12.1                    ########################################
[   44s] python310-psutil-5.9.4-2.2            ########################################
[   44s] python311-psutil-5.9.4-2.2            ########################################
[   45s] python38-psutil-5.9.4-2.2             ########################################
[   45s] python39-psutil-5.9.4-2.2             ########################################
[   45s] libalternatives1-1.2+3.b848aad-3.1    ########################################
[   45s] alts-1.2+3.b848aad-3.1                ########################################
[   45s] python310-pytest-7.2.0-2.2            ########################################
[   46s] python311-pytest-7.2.0-2.2            ########################################
[   47s] python38-pytest-7.2.0-2.2             ########################################
[   47s] python39-pytest-7.2.0-2.2             ########################################
[   48s] python39-pytest-mock-3.10.0-1.2       ########################################
[   48s] python38-pytest-mock-3.10.0-1.2       ########################################
[   48s] python311-pytest-mock-3.10.0-1.2      ########################################
[   48s] python310-pytest-mock-3.10.0-1.2      ########################################
[   48s] python39-lz4-3.1.10-1.5               ########################################
[   48s] python38-lz4-3.1.10-1.5               ########################################
[   48s] python311-lz4-3.1.10-1.5              ########################################
[   48s] python310-lz4-3.1.10-1.5              ########################################
[   48s] python310-zstandard-0.19.0-3.1        ########################################
[   48s] python311-zstandard-0.19.0-3.1        ########################################
[   48s] python38-zstandard-0.19.0-3.1         ########################################
[   48s] python39-zstandard-0.19.0-3.1         ########################################
[   48s] python310-python-snappy-0.6.1-1.1     ########################################
[   48s] python311-python-snappy-0.6.1-1.1     ########################################
[   49s] python38-python-snappy-0.6.1-1.1      ########################################
[   49s] python39-python-snappy-0.6.1-1.1      ########################################
[   49s] python310-xxhash-3.1.0-1.2            ########################################
[   49s] python311-xxhash-3.1.0-1.2            ########################################
[   49s] python38-xxhash-3.1.0-1.2             ########################################
[   49s] python39-xxhash-3.1.0-1.2             ########################################
[   49s] fdupes-2.2.1-1.1                      ########################################
[   53s] now finalizing build dir...
[   53s] ... running 01-add_abuild_user_to_trusted_group
[   54s] ... running 02-set_timezone_to_utc
[   54s] ... running 03-set-permissions-secure
[   54s] ... running 11-hack_uname_version_to_kernel_version
[   62s] -----------------------------------------------------------------
[   62s] I have the following modifications for python-kafka-python.spec:
[   62s] 22c22
[   62s] < Release:        0
[   62s] ---
[   62s] > Release:        3.2
[   68s] build target is riscv64-suse-linux
[   68s] -----------------------------------------------------------------
[   68s] ----- building python-kafka-python.spec (user abuild)
[   68s] -----------------------------------------------------------------
[   68s] -----------------------------------------------------------------
[   72s] + exec rpmbuild -ba --define '_srcdefattr (-,root,root)' --nosignature --target=riscv64-suse-linux --define '_build_create_debug 1' --define 'disturl obs://build.opensuse.org/openSUSE:Factory:RISCV/standard/c138649a20f7c6d49b28d9d4e244dec2-python-kafka-python' /home/abuild/rpmbuild/SOURCES/python-kafka-python.spec
[  101s] Building target platforms: riscv64-suse-linux
[  101s] Building for target riscv64-suse-linux
[  101s] setting SOURCE_DATE_EPOCH=1665532800
[  102s] Executing(%prep): /usr/bin/bash -e /var/tmp/rpm-tmp.5CnmIK
[  102s] + umask 022
[  102s] + cd /home/abuild/rpmbuild/BUILD
[  102s] + cd /home/abuild/rpmbuild/BUILD
[  102s] + rm -rf kafka-python-2.0.2
[  102s] + /usr/lib/rpm/rpmuncompress -x /home/abuild/rpmbuild/SOURCES/kafka-python-2.0.2.tar.gz
[  102s] + STATUS=0
[  102s] + '[' 0 -ne 0 ']'
[  102s] + cd kafka-python-2.0.2
[  102s] + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
[  102s] + /usr/lib/rpm/rpmuncompress /home/abuild/rpmbuild/SOURCES/remove-mock.patch
[  102s] + /usr/bin/patch -p1 -s --fuzz=0 --no-backup-if-mismatch -f
[  103s] + mkdir -p servers/0.11.0.2/resources/
[  103s] + cp /home/abuild/rpmbuild/SOURCES/zookeeper.properties servers/0.11.0.2/resources/
[  103s] + cp /home/abuild/rpmbuild/SOURCES/conftest.py /home/abuild/rpmbuild/SOURCES/fixtures.py /home/abuild/rpmbuild/SOURCES/service.py test/
[  103s] + touch test/__init__.py
[  103s] + RPM_EC=0
[  103s] ++ jobs -p
[  103s] + exit 0
[  103s] Executing(%build): /usr/bin/bash -e /var/tmp/rpm-tmp.d5H2YY
[  103s] + umask 022
[  103s] + cd /home/abuild/rpmbuild/BUILD
[  103s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64
[  103s] ++ dirname /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64
[  103s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[  103s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64
[  103s] + cd kafka-python-2.0.2
[  103s] + ref=/usr/lib/rpm
[  103s] + mints=0
[  103s] + case $(uname -m) in
[  103s] ++ uname -m
[  103s] + mints=20160911
[  103s] + for s in guess sub
[  103s] ++ find -maxdepth 8 -name config.guess
[  104s] + for s in guess sub
[  104s] ++ find -maxdepth 8 -name config.sub
[  104s] ++ '[' -f _current_flavor ']'
[  104s] ++ true
[  104s] + last_flavor=
[  104s] + '[' -z '' ']'
[  104s] + last_flavor=tmp
[  104s] + '[' tmp '!=' python38 ']'
[  104s] + '[' -d build ']'
[  104s] + '[' -d _build.python38 ']'
[  104s] + echo python38
[  104s] + python_flavor=python38
[  104s] + /usr/bin/python3.8 setup.py build '--executable=/usr/bin/python3.8 -s'
[  107s] running build
[  107s] running build_py
[  107s] creating build
[  107s] creating build/lib
[  107s] creating build/lib/kafka
[  107s] copying kafka/__init__.py -> build/lib/kafka
[  107s] copying kafka/client_async.py -> build/lib/kafka
[  107s] copying kafka/cluster.py -> build/lib/kafka
[  107s] copying kafka/codec.py -> build/lib/kafka
[  107s] copying kafka/conn.py -> build/lib/kafka
[  107s] copying kafka/errors.py -> build/lib/kafka
[  107s] copying kafka/future.py -> build/lib/kafka
[  107s] copying kafka/scram.py -> build/lib/kafka
[  107s] copying kafka/structs.py -> build/lib/kafka
[  107s] copying kafka/util.py -> build/lib/kafka
[  107s] copying kafka/version.py -> build/lib/kafka
[  107s] creating build/lib/kafka/admin
[  107s] copying kafka/admin/__init__.py -> build/lib/kafka/admin
[  107s] copying kafka/admin/acl_resource.py -> build/lib/kafka/admin
[  107s] copying kafka/admin/client.py -> build/lib/kafka/admin
[  107s] copying kafka/admin/config_resource.py -> build/lib/kafka/admin
[  107s] copying kafka/admin/new_partitions.py -> build/lib/kafka/admin
[  107s] copying kafka/admin/new_topic.py -> build/lib/kafka/admin
[  107s] creating build/lib/kafka/consumer
[  107s] copying kafka/consumer/__init__.py -> build/lib/kafka/consumer
[  107s] copying kafka/consumer/fetcher.py -> build/lib/kafka/consumer
[  107s] copying kafka/consumer/group.py -> build/lib/kafka/consumer
[  107s] copying kafka/consumer/subscription_state.py -> build/lib/kafka/consumer
[  107s] creating build/lib/kafka/coordinator
[  107s] copying kafka/coordinator/__init__.py -> build/lib/kafka/coordinator
[  107s] copying kafka/coordinator/base.py -> build/lib/kafka/coordinator
[  107s] copying kafka/coordinator/consumer.py -> build/lib/kafka/coordinator
[  108s] copying kafka/coordinator/heartbeat.py -> build/lib/kafka/coordinator
[  108s] copying kafka/coordinator/protocol.py -> build/lib/kafka/coordinator
[  108s] creating build/lib/kafka/metrics
[  108s] copying kafka/metrics/__init__.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/compound_stat.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/dict_reporter.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/kafka_metric.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/measurable.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/measurable_stat.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/metric_config.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/metric_name.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/metrics.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/metrics_reporter.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/quota.py -> build/lib/kafka/metrics
[  108s] copying kafka/metrics/stat.py -> build/lib/kafka/metrics
[  108s] creating build/lib/kafka/oauth
[  108s] copying kafka/oauth/__init__.py -> build/lib/kafka/oauth
[  108s] copying kafka/oauth/abstract.py -> build/lib/kafka/oauth
[  108s] creating build/lib/kafka/partitioner
[  108s] copying kafka/partitioner/__init__.py -> build/lib/kafka/partitioner
[  108s] copying kafka/partitioner/default.py -> build/lib/kafka/partitioner
[  108s] creating build/lib/kafka/producer
[  108s] copying kafka/producer/__init__.py -> build/lib/kafka/producer
[  108s] copying kafka/producer/buffer.py -> build/lib/kafka/producer
[  108s] copying kafka/producer/future.py -> build/lib/kafka/producer
[  108s] copying kafka/producer/kafka.py -> build/lib/kafka/producer
[  108s] copying kafka/producer/record_accumulator.py -> build/lib/kafka/producer
[  108s] copying kafka/producer/sender.py -> build/lib/kafka/producer
[  108s] creating build/lib/kafka/protocol
[  108s] copying kafka/protocol/__init__.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/abstract.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/admin.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/api.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/commit.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/fetch.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/frame.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/group.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/message.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/metadata.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/offset.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/parser.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/pickle.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/produce.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/struct.py -> build/lib/kafka/protocol
[  108s] copying kafka/protocol/types.py -> build/lib/kafka/protocol
[  108s] creating build/lib/kafka/record
[  108s] copying kafka/record/__init__.py -> build/lib/kafka/record
[  108s] copying kafka/record/_crc32c.py -> build/lib/kafka/record
[  108s] copying kafka/record/abc.py -> build/lib/kafka/record
[  108s] copying kafka/record/default_records.py -> build/lib/kafka/record
[  108s] copying kafka/record/legacy_records.py -> build/lib/kafka/record
[  108s] copying kafka/record/memory_records.py -> build/lib/kafka/record
[  108s] copying kafka/record/util.py -> build/lib/kafka/record
[  108s] creating build/lib/kafka/serializer
[  108s] copying kafka/serializer/__init__.py -> build/lib/kafka/serializer
[  108s] copying kafka/serializer/abstract.py -> build/lib/kafka/serializer
[  108s] creating build/lib/kafka/vendor
[  108s] copying kafka/vendor/__init__.py -> build/lib/kafka/vendor
[  108s] copying kafka/vendor/enum34.py -> build/lib/kafka/vendor
[  108s] copying kafka/vendor/selectors34.py -> build/lib/kafka/vendor
[  108s] copying kafka/vendor/six.py -> build/lib/kafka/vendor
[  108s] copying kafka/vendor/socketpair.py -> build/lib/kafka/vendor
[  108s] creating build/lib/kafka/coordinator/assignors
[  108s] copying kafka/coordinator/assignors/__init__.py -> build/lib/kafka/coordinator/assignors
[  108s] copying kafka/coordinator/assignors/abstract.py -> build/lib/kafka/coordinator/assignors
[  108s] copying kafka/coordinator/assignors/range.py -> build/lib/kafka/coordinator/assignors
[  108s] copying kafka/coordinator/assignors/roundrobin.py -> build/lib/kafka/coordinator/assignors
[  108s] creating build/lib/kafka/coordinator/assignors/sticky
[  108s] copying kafka/coordinator/assignors/sticky/__init__.py -> build/lib/kafka/coordinator/assignors/sticky
[  108s] copying kafka/coordinator/assignors/sticky/partition_movements.py -> build/lib/kafka/coordinator/assignors/sticky
[  108s] copying kafka/coordinator/assignors/sticky/sorted_set.py -> build/lib/kafka/coordinator/assignors/sticky
[  108s] copying kafka/coordinator/assignors/sticky/sticky_assignor.py -> build/lib/kafka/coordinator/assignors/sticky
[  108s] creating build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/__init__.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/avg.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/count.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/histogram.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/max_stat.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/min_stat.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/percentile.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/percentiles.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/rate.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/sampled_stat.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/sensor.py -> build/lib/kafka/metrics/stats
[  108s] copying kafka/metrics/stats/total.py -> build/lib/kafka/metrics/stats
[  108s] /usr/lib/python3.8/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  108s]   warnings.warn(msg, warning_class)
[  108s] ++ '[' -f _current_flavor ']'
[  108s] ++ cat _current_flavor
[  108s] + last_flavor=python38
[  108s] + '[' -z python38 ']'
[  108s] + '[' python38 '!=' python39 ']'
[  108s] + '[' -d build ']'
[  108s] + mv build _build.python38
[  108s] + '[' -d _build.python39 ']'
[  108s] + echo python39
[  108s] + python_flavor=python39
[  108s] + /usr/bin/python3.9 setup.py build '--executable=/usr/bin/python3.9 -s'
[  111s] /usr/lib/python3.9/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  111s]   warnings.warn(msg, warning_class)
[  111s] running build
[  111s] running build_py
[  111s] creating build
[  111s] creating build/lib
[  111s] creating build/lib/kafka
[  111s] copying kafka/__init__.py -> build/lib/kafka
[  111s] copying kafka/client_async.py -> build/lib/kafka
[  111s] copying kafka/cluster.py -> build/lib/kafka
[  111s] copying kafka/codec.py -> build/lib/kafka
[  111s] copying kafka/conn.py -> build/lib/kafka
[  111s] copying kafka/errors.py -> build/lib/kafka
[  111s] copying kafka/future.py -> build/lib/kafka
[  111s] copying kafka/scram.py -> build/lib/kafka
[  111s] copying kafka/structs.py -> build/lib/kafka
[  111s] copying kafka/util.py -> build/lib/kafka
[  111s] copying kafka/version.py -> build/lib/kafka
[  111s] creating build/lib/kafka/admin
[  111s] copying kafka/admin/__init__.py -> build/lib/kafka/admin
[  111s] copying kafka/admin/acl_resource.py -> build/lib/kafka/admin
[  111s] copying kafka/admin/client.py -> build/lib/kafka/admin
[  111s] copying kafka/admin/config_resource.py -> build/lib/kafka/admin
[  111s] copying kafka/admin/new_partitions.py -> build/lib/kafka/admin
[  111s] copying kafka/admin/new_topic.py -> build/lib/kafka/admin
[  111s] creating build/lib/kafka/consumer
[  111s] copying kafka/consumer/__init__.py -> build/lib/kafka/consumer
[  111s] copying kafka/consumer/fetcher.py -> build/lib/kafka/consumer
[  111s] copying kafka/consumer/group.py -> build/lib/kafka/consumer
[  111s] copying kafka/consumer/subscription_state.py -> build/lib/kafka/consumer
[  111s] creating build/lib/kafka/coordinator
[  111s] copying kafka/coordinator/__init__.py -> build/lib/kafka/coordinator
[  111s] copying kafka/coordinator/base.py -> build/lib/kafka/coordinator
[  111s] copying kafka/coordinator/consumer.py -> build/lib/kafka/coordinator
[  111s] copying kafka/coordinator/heartbeat.py -> build/lib/kafka/coordinator
[  111s] copying kafka/coordinator/protocol.py -> build/lib/kafka/coordinator
[  111s] creating build/lib/kafka/metrics
[  111s] copying kafka/metrics/__init__.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/compound_stat.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/dict_reporter.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/kafka_metric.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/measurable.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/measurable_stat.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/metric_config.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/metric_name.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/metrics.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/metrics_reporter.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/quota.py -> build/lib/kafka/metrics
[  111s] copying kafka/metrics/stat.py -> build/lib/kafka/metrics
[  111s] creating build/lib/kafka/oauth
[  111s] copying kafka/oauth/__init__.py -> build/lib/kafka/oauth
[  111s] copying kafka/oauth/abstract.py -> build/lib/kafka/oauth
[  111s] creating build/lib/kafka/partitioner
[  111s] copying kafka/partitioner/__init__.py -> build/lib/kafka/partitioner
[  111s] copying kafka/partitioner/default.py -> build/lib/kafka/partitioner
[  111s] creating build/lib/kafka/producer
[  111s] copying kafka/producer/__init__.py -> build/lib/kafka/producer
[  111s] copying kafka/producer/buffer.py -> build/lib/kafka/producer
[  111s] copying kafka/producer/future.py -> build/lib/kafka/producer
[  111s] copying kafka/producer/kafka.py -> build/lib/kafka/producer
[  111s] copying kafka/producer/record_accumulator.py -> build/lib/kafka/producer
[  111s] copying kafka/producer/sender.py -> build/lib/kafka/producer
[  111s] creating build/lib/kafka/protocol
[  111s] copying kafka/protocol/__init__.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/abstract.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/admin.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/api.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/commit.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/fetch.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/frame.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/group.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/message.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/metadata.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/offset.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/parser.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/pickle.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/produce.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/struct.py -> build/lib/kafka/protocol
[  111s] copying kafka/protocol/types.py -> build/lib/kafka/protocol
[  111s] creating build/lib/kafka/record
[  111s] copying kafka/record/__init__.py -> build/lib/kafka/record
[  111s] copying kafka/record/_crc32c.py -> build/lib/kafka/record
[  111s] copying kafka/record/abc.py -> build/lib/kafka/record
[  111s] copying kafka/record/default_records.py -> build/lib/kafka/record
[  111s] copying kafka/record/legacy_records.py -> build/lib/kafka/record
[  111s] copying kafka/record/memory_records.py -> build/lib/kafka/record
[  111s] copying kafka/record/util.py -> build/lib/kafka/record
[  111s] creating build/lib/kafka/serializer
[  111s] copying kafka/serializer/__init__.py -> build/lib/kafka/serializer
[  111s] copying kafka/serializer/abstract.py -> build/lib/kafka/serializer
[  111s] creating build/lib/kafka/vendor
[  112s] copying kafka/vendor/__init__.py -> build/lib/kafka/vendor
[  112s] copying kafka/vendor/enum34.py -> build/lib/kafka/vendor
[  112s] copying kafka/vendor/selectors34.py -> build/lib/kafka/vendor
[  112s] copying kafka/vendor/six.py -> build/lib/kafka/vendor
[  112s] copying kafka/vendor/socketpair.py -> build/lib/kafka/vendor
[  112s] creating build/lib/kafka/coordinator/assignors
[  112s] copying kafka/coordinator/assignors/__init__.py -> build/lib/kafka/coordinator/assignors
[  112s] copying kafka/coordinator/assignors/abstract.py -> build/lib/kafka/coordinator/assignors
[  112s] copying kafka/coordinator/assignors/range.py -> build/lib/kafka/coordinator/assignors
[  112s] copying kafka/coordinator/assignors/roundrobin.py -> build/lib/kafka/coordinator/assignors
[  112s] creating build/lib/kafka/coordinator/assignors/sticky
[  112s] copying kafka/coordinator/assignors/sticky/__init__.py -> build/lib/kafka/coordinator/assignors/sticky
[  112s] copying kafka/coordinator/assignors/sticky/partition_movements.py -> build/lib/kafka/coordinator/assignors/sticky
[  112s] copying kafka/coordinator/assignors/sticky/sorted_set.py -> build/lib/kafka/coordinator/assignors/sticky
[  112s] copying kafka/coordinator/assignors/sticky/sticky_assignor.py -> build/lib/kafka/coordinator/assignors/sticky
[  112s] creating build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/__init__.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/avg.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/count.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/histogram.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/max_stat.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/min_stat.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/percentile.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/percentiles.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/rate.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/sampled_stat.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/sensor.py -> build/lib/kafka/metrics/stats
[  112s] copying kafka/metrics/stats/total.py -> build/lib/kafka/metrics/stats
[  112s] ++ '[' -f _current_flavor ']'
[  112s] ++ cat _current_flavor
[  112s] + last_flavor=python39
[  112s] + '[' -z python39 ']'
[  112s] + '[' python39 '!=' python311 ']'
[  112s] + '[' -d build ']'
[  112s] + mv build _build.python39
[  112s] + '[' -d _build.python311 ']'
[  112s] + echo python311
[  112s] + python_flavor=python311
[  112s] + /usr/bin/python3.11 setup.py build '--executable=/usr/bin/python3.11 -s'
[  115s] /usr/lib/python3.11/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  115s]   warnings.warn(msg, warning_class)
[  115s] running build
[  115s] running build_py
[  115s] creating build
[  115s] creating build/lib
[  115s] creating build/lib/kafka
[  115s] copying kafka/__init__.py -> build/lib/kafka
[  115s] copying kafka/client_async.py -> build/lib/kafka
[  115s] copying kafka/cluster.py -> build/lib/kafka
[  115s] copying kafka/codec.py -> build/lib/kafka
[  115s] copying kafka/conn.py -> build/lib/kafka
[  115s] copying kafka/errors.py -> build/lib/kafka
[  115s] copying kafka/future.py -> build/lib/kafka
[  115s] copying kafka/scram.py -> build/lib/kafka
[  115s] copying kafka/structs.py -> build/lib/kafka
[  115s] copying kafka/util.py -> build/lib/kafka
[  115s] copying kafka/version.py -> build/lib/kafka
[  115s] creating build/lib/kafka/admin
[  115s] copying kafka/admin/__init__.py -> build/lib/kafka/admin
[  115s] copying kafka/admin/acl_resource.py -> build/lib/kafka/admin
[  115s] copying kafka/admin/client.py -> build/lib/kafka/admin
[  115s] copying kafka/admin/config_resource.py -> build/lib/kafka/admin
[  115s] copying kafka/admin/new_partitions.py -> build/lib/kafka/admin
[  115s] copying kafka/admin/new_topic.py -> build/lib/kafka/admin
[  115s] creating build/lib/kafka/consumer
[  115s] copying kafka/consumer/__init__.py -> build/lib/kafka/consumer
[  115s] copying kafka/consumer/fetcher.py -> build/lib/kafka/consumer
[  115s] copying kafka/consumer/group.py -> build/lib/kafka/consumer
[  115s] copying kafka/consumer/subscription_state.py -> build/lib/kafka/consumer
[  115s] creating build/lib/kafka/coordinator
[  115s] copying kafka/coordinator/__init__.py -> build/lib/kafka/coordinator
[  115s] copying kafka/coordinator/base.py -> build/lib/kafka/coordinator
[  115s] copying kafka/coordinator/consumer.py -> build/lib/kafka/coordinator
[  115s] copying kafka/coordinator/heartbeat.py -> build/lib/kafka/coordinator
[  115s] copying kafka/coordinator/protocol.py -> build/lib/kafka/coordinator
[  115s] creating build/lib/kafka/metrics
[  115s] copying kafka/metrics/__init__.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/compound_stat.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/dict_reporter.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/kafka_metric.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/measurable.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/measurable_stat.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/metric_config.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/metric_name.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/metrics.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/metrics_reporter.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/quota.py -> build/lib/kafka/metrics
[  115s] copying kafka/metrics/stat.py -> build/lib/kafka/metrics
[  115s] creating build/lib/kafka/oauth
[  115s] copying kafka/oauth/__init__.py -> build/lib/kafka/oauth
[  115s] copying kafka/oauth/abstract.py -> build/lib/kafka/oauth
[  115s] creating build/lib/kafka/partitioner
[  115s] copying kafka/partitioner/__init__.py -> build/lib/kafka/partitioner
[  115s] copying kafka/partitioner/default.py -> build/lib/kafka/partitioner
[  115s] creating build/lib/kafka/producer
[  115s] copying kafka/producer/__init__.py -> build/lib/kafka/producer
[  115s] copying kafka/producer/buffer.py -> build/lib/kafka/producer
[  115s] copying kafka/producer/future.py -> build/lib/kafka/producer
[  115s] copying kafka/producer/kafka.py -> build/lib/kafka/producer
[  115s] copying kafka/producer/record_accumulator.py -> build/lib/kafka/producer
[  115s] copying kafka/producer/sender.py -> build/lib/kafka/producer
[  115s] creating build/lib/kafka/protocol
[  115s] copying kafka/protocol/__init__.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/abstract.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/admin.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/api.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/commit.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/fetch.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/frame.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/group.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/message.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/metadata.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/offset.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/parser.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/pickle.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/produce.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/struct.py -> build/lib/kafka/protocol
[  115s] copying kafka/protocol/types.py -> build/lib/kafka/protocol
[  115s] creating build/lib/kafka/record
[  115s] copying kafka/record/__init__.py -> build/lib/kafka/record
[  115s] copying kafka/record/_crc32c.py -> build/lib/kafka/record
[  115s] copying kafka/record/abc.py -> build/lib/kafka/record
[  115s] copying kafka/record/default_records.py -> build/lib/kafka/record
[  115s] copying kafka/record/legacy_records.py -> build/lib/kafka/record
[  115s] copying kafka/record/memory_records.py -> build/lib/kafka/record
[  115s] copying kafka/record/util.py -> build/lib/kafka/record
[  115s] creating build/lib/kafka/serializer
[  115s] copying kafka/serializer/__init__.py -> build/lib/kafka/serializer
[  115s] copying kafka/serializer/abstract.py -> build/lib/kafka/serializer
[  115s] creating build/lib/kafka/vendor
[  115s] copying kafka/vendor/__init__.py -> build/lib/kafka/vendor
[  115s] copying kafka/vendor/enum34.py -> build/lib/kafka/vendor
[  115s] copying kafka/vendor/selectors34.py -> build/lib/kafka/vendor
[  115s] copying kafka/vendor/six.py -> build/lib/kafka/vendor
[  115s] copying kafka/vendor/socketpair.py -> build/lib/kafka/vendor
[  115s] creating build/lib/kafka/coordinator/assignors
[  115s] copying kafka/coordinator/assignors/__init__.py -> build/lib/kafka/coordinator/assignors
[  115s] copying kafka/coordinator/assignors/abstract.py -> build/lib/kafka/coordinator/assignors
[  115s] copying kafka/coordinator/assignors/range.py -> build/lib/kafka/coordinator/assignors
[  115s] copying kafka/coordinator/assignors/roundrobin.py -> build/lib/kafka/coordinator/assignors
[  115s] creating build/lib/kafka/coordinator/assignors/sticky
[  115s] copying kafka/coordinator/assignors/sticky/__init__.py -> build/lib/kafka/coordinator/assignors/sticky
[  115s] copying kafka/coordinator/assignors/sticky/partition_movements.py -> build/lib/kafka/coordinator/assignors/sticky
[  115s] copying kafka/coordinator/assignors/sticky/sorted_set.py -> build/lib/kafka/coordinator/assignors/sticky
[  115s] copying kafka/coordinator/assignors/sticky/sticky_assignor.py -> build/lib/kafka/coordinator/assignors/sticky
[  115s] creating build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/__init__.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/avg.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/count.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/histogram.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/max_stat.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/min_stat.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/percentile.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/percentiles.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/rate.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/sampled_stat.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/sensor.py -> build/lib/kafka/metrics/stats
[  115s] copying kafka/metrics/stats/total.py -> build/lib/kafka/metrics/stats
[  116s] ++ '[' -f _current_flavor ']'
[  116s] ++ cat _current_flavor
[  116s] + last_flavor=python311
[  116s] + '[' -z python311 ']'
[  116s] + '[' python311 '!=' python310 ']'
[  116s] + '[' -d build ']'
[  116s] + mv build _build.python311
[  116s] + '[' -d _build.python310 ']'
[  116s] + echo python310
[  116s] + python_flavor=python310
[  116s] + /usr/bin/python3.10 setup.py build '--executable=/usr/bin/python3.10 -s'
[  119s] /usr/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  119s]   warnings.warn(msg, warning_class)
[  119s] running build
[  119s] running build_py
[  119s] creating build
[  119s] creating build/lib
[  119s] creating build/lib/kafka
[  119s] copying kafka/__init__.py -> build/lib/kafka
[  119s] copying kafka/client_async.py -> build/lib/kafka
[  119s] copying kafka/cluster.py -> build/lib/kafka
[  119s] copying kafka/codec.py -> build/lib/kafka
[  119s] copying kafka/conn.py -> build/lib/kafka
[  119s] copying kafka/errors.py -> build/lib/kafka
[  119s] copying kafka/future.py -> build/lib/kafka
[  119s] copying kafka/scram.py -> build/lib/kafka
[  119s] copying kafka/structs.py -> build/lib/kafka
[  119s] copying kafka/util.py -> build/lib/kafka
[  119s] copying kafka/version.py -> build/lib/kafka
[  119s] creating build/lib/kafka/admin
[  119s] copying kafka/admin/__init__.py -> build/lib/kafka/admin
[  119s] copying kafka/admin/acl_resource.py -> build/lib/kafka/admin
[  119s] copying kafka/admin/client.py -> build/lib/kafka/admin
[  119s] copying kafka/admin/config_resource.py -> build/lib/kafka/admin
[  119s] copying kafka/admin/new_partitions.py -> build/lib/kafka/admin
[  119s] copying kafka/admin/new_topic.py -> build/lib/kafka/admin
[  119s] creating build/lib/kafka/consumer
[  119s] copying kafka/consumer/__init__.py -> build/lib/kafka/consumer
[  119s] copying kafka/consumer/fetcher.py -> build/lib/kafka/consumer
[  119s] copying kafka/consumer/group.py -> build/lib/kafka/consumer
[  119s] copying kafka/consumer/subscription_state.py -> build/lib/kafka/consumer
[  119s] creating build/lib/kafka/coordinator
[  119s] copying kafka/coordinator/__init__.py -> build/lib/kafka/coordinator
[  119s] copying kafka/coordinator/base.py -> build/lib/kafka/coordinator
[  119s] copying kafka/coordinator/consumer.py -> build/lib/kafka/coordinator
[  119s] copying kafka/coordinator/heartbeat.py -> build/lib/kafka/coordinator
[  119s] copying kafka/coordinator/protocol.py -> build/lib/kafka/coordinator
[  119s] creating build/lib/kafka/metrics
[  119s] copying kafka/metrics/__init__.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/compound_stat.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/dict_reporter.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/kafka_metric.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/measurable.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/measurable_stat.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/metric_config.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/metric_name.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/metrics.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/metrics_reporter.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/quota.py -> build/lib/kafka/metrics
[  119s] copying kafka/metrics/stat.py -> build/lib/kafka/metrics
[  119s] creating build/lib/kafka/oauth
[  119s] copying kafka/oauth/__init__.py -> build/lib/kafka/oauth
[  119s] copying kafka/oauth/abstract.py -> build/lib/kafka/oauth
[  119s] creating build/lib/kafka/partitioner
[  119s] copying kafka/partitioner/__init__.py -> build/lib/kafka/partitioner
[  119s] copying kafka/partitioner/default.py -> build/lib/kafka/partitioner
[  119s] creating build/lib/kafka/producer
[  119s] copying kafka/producer/__init__.py -> build/lib/kafka/producer
[  119s] copying kafka/producer/buffer.py -> build/lib/kafka/producer
[  119s] copying kafka/producer/future.py -> build/lib/kafka/producer
[  119s] copying kafka/producer/kafka.py -> build/lib/kafka/producer
[  119s] copying kafka/producer/record_accumulator.py -> build/lib/kafka/producer
[  119s] copying kafka/producer/sender.py -> build/lib/kafka/producer
[  119s] creating build/lib/kafka/protocol
[  119s] copying kafka/protocol/__init__.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/abstract.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/admin.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/api.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/commit.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/fetch.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/frame.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/group.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/message.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/metadata.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/offset.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/parser.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/pickle.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/produce.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/struct.py -> build/lib/kafka/protocol
[  119s] copying kafka/protocol/types.py -> build/lib/kafka/protocol
[  119s] creating build/lib/kafka/record
[  119s] copying kafka/record/__init__.py -> build/lib/kafka/record
[  119s] copying kafka/record/_crc32c.py -> build/lib/kafka/record
[  119s] copying kafka/record/abc.py -> build/lib/kafka/record
[  119s] copying kafka/record/default_records.py -> build/lib/kafka/record
[  119s] copying kafka/record/legacy_records.py -> build/lib/kafka/record
[  119s] copying kafka/record/memory_records.py -> build/lib/kafka/record
[  119s] copying kafka/record/util.py -> build/lib/kafka/record
[  119s] creating build/lib/kafka/serializer
[  119s] copying kafka/serializer/__init__.py -> build/lib/kafka/serializer
[  119s] copying kafka/serializer/abstract.py -> build/lib/kafka/serializer
[  119s] creating build/lib/kafka/vendor
[  119s] copying kafka/vendor/__init__.py -> build/lib/kafka/vendor
[  119s] copying kafka/vendor/enum34.py -> build/lib/kafka/vendor
[  119s] copying kafka/vendor/selectors34.py -> build/lib/kafka/vendor
[  119s] copying kafka/vendor/six.py -> build/lib/kafka/vendor
[  119s] copying kafka/vendor/socketpair.py -> build/lib/kafka/vendor
[  119s] creating build/lib/kafka/coordinator/assignors
[  119s] copying kafka/coordinator/assignors/__init__.py -> build/lib/kafka/coordinator/assignors
[  119s] copying kafka/coordinator/assignors/abstract.py -> build/lib/kafka/coordinator/assignors
[  119s] copying kafka/coordinator/assignors/range.py -> build/lib/kafka/coordinator/assignors
[  119s] copying kafka/coordinator/assignors/roundrobin.py -> build/lib/kafka/coordinator/assignors
[  119s] creating build/lib/kafka/coordinator/assignors/sticky
[  119s] copying kafka/coordinator/assignors/sticky/__init__.py -> build/lib/kafka/coordinator/assignors/sticky
[  119s] copying kafka/coordinator/assignors/sticky/partition_movements.py -> build/lib/kafka/coordinator/assignors/sticky
[  119s] copying kafka/coordinator/assignors/sticky/sorted_set.py -> build/lib/kafka/coordinator/assignors/sticky
[  119s] copying kafka/coordinator/assignors/sticky/sticky_assignor.py -> build/lib/kafka/coordinator/assignors/sticky
[  119s] creating build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/__init__.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/avg.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/count.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/histogram.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/max_stat.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/min_stat.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/percentile.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/percentiles.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/rate.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/sampled_stat.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/sensor.py -> build/lib/kafka/metrics/stats
[  119s] copying kafka/metrics/stats/total.py -> build/lib/kafka/metrics/stats
[  119s] + RPM_EC=0
[  119s] ++ jobs -p
[  119s] + exit 0
[  120s] Executing(%install): /usr/bin/bash -e /var/tmp/rpm-tmp.xKvhsD
[  120s] + umask 022
[  120s] + cd /home/abuild/rpmbuild/BUILD
[  120s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64
[  120s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[  120s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64
[  120s] + cd kafka-python-2.0.2
[  120s] ++ '[' -f _current_flavor ']'
[  120s] ++ cat _current_flavor
[  120s] + last_flavor=python310
[  120s] + '[' -z python310 ']'
[  120s] + '[' python310 '!=' python38 ']'
[  120s] + '[' -d build ']'
[  120s] + mv build _build.python310
[  120s] + '[' -d _build.python38 ']'
[  120s] + mv _build.python38 build
[  120s] + echo python38
[  120s] + python_flavor=python38
[  120s] + /usr/bin/python3.8 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64 --prefix /usr
[  124s] running install
[  124s] running install_lib
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/client_async.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/cluster.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/codec.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/conn.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/errors.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/scram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/structs.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] copying build/lib/kafka/version.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/acl_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/client.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/config_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/new_partitions.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] copying build/lib/kafka/admin/new_topic.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer
[  124s] copying build/lib/kafka/consumer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer
[  124s] copying build/lib/kafka/consumer/fetcher.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer
[  124s] copying build/lib/kafka/consumer/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer
[  124s] copying build/lib/kafka/consumer/subscription_state.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] copying build/lib/kafka/coordinator/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] copying build/lib/kafka/coordinator/base.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] copying build/lib/kafka/coordinator/consumer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] copying build/lib/kafka/coordinator/heartbeat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] copying build/lib/kafka/coordinator/protocol.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors
[  124s] copying build/lib/kafka/coordinator/assignors/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors
[  124s] copying build/lib/kafka/coordinator/assignors/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors
[  124s] copying build/lib/kafka/coordinator/assignors/range.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors
[  124s] copying build/lib/kafka/coordinator/assignors/roundrobin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky
[  124s] copying build/lib/kafka/coordinator/assignors/sticky/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky
[  124s] copying build/lib/kafka/coordinator/assignors/sticky/partition_movements.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky
[  124s] copying build/lib/kafka/coordinator/assignors/sticky/sorted_set.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky
[  124s] copying build/lib/kafka/coordinator/assignors/sticky/sticky_assignor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/compound_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/dict_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/kafka_metric.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/measurable.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/measurable_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/metric_config.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/metric_name.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/metrics.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/metrics_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/quota.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] copying build/lib/kafka/metrics/stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/avg.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/count.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/histogram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/max_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/min_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/percentile.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/percentiles.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/rate.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/sampled_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/sensor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] copying build/lib/kafka/metrics/stats/total.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth
[  124s] copying build/lib/kafka/oauth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth
[  124s] copying build/lib/kafka/oauth/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner
[  124s] copying build/lib/kafka/partitioner/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner
[  124s] copying build/lib/kafka/partitioner/default.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/buffer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/kafka.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/record_accumulator.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] copying build/lib/kafka/producer/sender.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/admin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/api.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/commit.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/fetch.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/frame.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/message.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/metadata.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/offset.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/parser.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/pickle.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/produce.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/struct.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] copying build/lib/kafka/protocol/types.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/_crc32c.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/abc.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/default_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/legacy_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/memory_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] copying build/lib/kafka/record/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer
[  124s] copying build/lib/kafka/serializer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer
[  124s] copying build/lib/kafka/serializer/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer
[  124s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] copying build/lib/kafka/vendor/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] copying build/lib/kafka/vendor/enum34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] copying build/lib/kafka/vendor/selectors34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] copying build/lib/kafka/vendor/six.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] copying build/lib/kafka/vendor/socketpair.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__init__.py to __init__.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/client_async.py to client_async.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/cluster.py to cluster.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/codec.py to codec.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/conn.py to conn.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/errors.py to errors.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/future.py to future.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/scram.py to scram.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/structs.py to structs.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/util.py to util.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/version.py to version.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__init__.py to __init__.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/acl_resource.py to acl_resource.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/client.py to client.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/config_resource.py to config_resource.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/new_partitions.py to new_partitions.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/new_topic.py to new_topic.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__init__.py to __init__.cpython-38.pyc
[  124s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/fetcher.py to fetcher.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/group.py to group.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/subscription_state.py to subscription_state.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/base.py to base.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/consumer.py to consumer.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/heartbeat.py to heartbeat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/protocol.py to protocol.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/abstract.py to abstract.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/range.py to range.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/roundrobin.py to roundrobin.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py to partition_movements.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/sorted_set.py to sorted_set.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py to sticky_assignor.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/compound_stat.py to compound_stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/dict_reporter.py to dict_reporter.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/kafka_metric.py to kafka_metric.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/measurable.py to measurable.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/measurable_stat.py to measurable_stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/metric_config.py to metric_config.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/metric_name.py to metric_name.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/metrics.py to metrics.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/metrics_reporter.py to metrics_reporter.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/quota.py to quota.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stat.py to stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/avg.py to avg.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/count.py to count.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/histogram.py to histogram.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/max_stat.py to max_stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/min_stat.py to min_stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/percentile.py to percentile.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/percentiles.py to percentiles.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/rate.py to rate.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/sampled_stat.py to sampled_stat.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/sensor.py to sensor.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/total.py to total.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/abstract.py to abstract.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/default.py to default.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/buffer.py to buffer.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/future.py to future.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/kafka.py to kafka.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/record_accumulator.py to record_accumulator.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/sender.py to sender.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/abstract.py to abstract.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/admin.py to admin.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/api.py to api.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/commit.py to commit.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/fetch.py to fetch.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/frame.py to frame.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/group.py to group.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/message.py to message.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/metadata.py to metadata.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/offset.py to offset.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/parser.py to parser.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/pickle.py to pickle.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/produce.py to produce.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/struct.py to struct.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/types.py to types.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/_crc32c.py to _crc32c.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/abc.py to abc.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/default_records.py to default_records.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/legacy_records.py to legacy_records.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/memory_records.py to memory_records.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/util.py to util.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/abstract.py to abstract.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__init__.py to __init__.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/enum34.py to enum34.cpython-38.pyc
[  125s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/selectors34.py to selectors34.cpython-38.pyc
[  126s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/six.py to six.cpython-38.pyc
[  126s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/socketpair.py to socketpair.cpython-38.pyc
[  126s] writing byte-compilation script '/tmp/tmplwo6um97.py'
[  126s] /usr/bin/python3.8 /tmp/tmplwo6um97.py
[  130s] removing /tmp/tmplwo6um97.py
[  130s] running install_egg_info
[  131s] running egg_info
[  131s] writing kafka_python.egg-info/PKG-INFO
[  131s] writing dependency_links to kafka_python.egg-info/dependency_links.txt
[  131s] writing requirements to kafka_python.egg-info/requires.txt
[  131s] writing top-level names to kafka_python.egg-info/top_level.txt
[  131s] reading manifest file 'kafka_python.egg-info/SOURCES.txt'
[  131s] reading manifest template 'MANIFEST.in'
[  131s] adding license file 'LICENSE'
[  131s] writing manifest file 'kafka_python.egg-info/SOURCES.txt'
[  131s] Copying kafka_python.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka_python-2.0.2-py3.8.egg-info
[  131s] running install_scripts
[  131s] /usr/lib/python3.8/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  131s]   warnings.warn(msg, warning_class)
[  131s] /usr/lib/python3.8/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  131s]   warnings.warn(
[  131s] ++ '[' -f _current_flavor ']'
[  131s] ++ cat _current_flavor
[  131s] + last_flavor=python38
[  131s] + '[' -z python38 ']'
[  131s] + '[' python38 '!=' python39 ']'
[  131s] + '[' -d build ']'
[  131s] + mv build _build.python38
[  132s] + '[' -d _build.python39 ']'
[  132s] + mv _build.python39 build
[  132s] + echo python39
[  132s] + python_flavor=python39
[  132s] + /usr/bin/python3.9 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64 --prefix /usr
[  135s] /usr/lib/python3.9/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  135s]   warnings.warn(msg, warning_class)
[  135s] running install
[  135s] /usr/lib/python3.9/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  135s]   warnings.warn(
[  135s] running install_lib
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/client_async.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/cluster.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/codec.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/conn.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/errors.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/scram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/structs.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] copying build/lib/kafka/version.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/acl_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/client.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/config_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/new_partitions.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] copying build/lib/kafka/admin/new_topic.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer
[  135s] copying build/lib/kafka/consumer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer
[  135s] copying build/lib/kafka/consumer/fetcher.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer
[  135s] copying build/lib/kafka/consumer/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer
[  135s] copying build/lib/kafka/consumer/subscription_state.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] copying build/lib/kafka/coordinator/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] copying build/lib/kafka/coordinator/base.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] copying build/lib/kafka/coordinator/consumer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] copying build/lib/kafka/coordinator/heartbeat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] copying build/lib/kafka/coordinator/protocol.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors
[  135s] copying build/lib/kafka/coordinator/assignors/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors
[  135s] copying build/lib/kafka/coordinator/assignors/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors
[  135s] copying build/lib/kafka/coordinator/assignors/range.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors
[  135s] copying build/lib/kafka/coordinator/assignors/roundrobin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky
[  135s] copying build/lib/kafka/coordinator/assignors/sticky/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky
[  135s] copying build/lib/kafka/coordinator/assignors/sticky/partition_movements.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky
[  135s] copying build/lib/kafka/coordinator/assignors/sticky/sorted_set.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky
[  135s] copying build/lib/kafka/coordinator/assignors/sticky/sticky_assignor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/compound_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/dict_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/kafka_metric.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/measurable.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/measurable_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/metric_config.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/metric_name.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/metrics.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/metrics_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/quota.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] copying build/lib/kafka/metrics/stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/avg.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/count.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/histogram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/max_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/min_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/percentile.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/percentiles.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/rate.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/sampled_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/sensor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] copying build/lib/kafka/metrics/stats/total.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth
[  135s] copying build/lib/kafka/oauth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth
[  135s] copying build/lib/kafka/oauth/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner
[  135s] copying build/lib/kafka/partitioner/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner
[  135s] copying build/lib/kafka/partitioner/default.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/buffer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/kafka.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/record_accumulator.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] copying build/lib/kafka/producer/sender.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/admin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/api.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/commit.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/fetch.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/frame.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/message.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/metadata.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/offset.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/parser.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/pickle.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/produce.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/struct.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] copying build/lib/kafka/protocol/types.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/_crc32c.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/abc.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/default_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/legacy_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/memory_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] copying build/lib/kafka/record/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer
[  135s] copying build/lib/kafka/serializer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer
[  135s] copying build/lib/kafka/serializer/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer
[  135s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] copying build/lib/kafka/vendor/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] copying build/lib/kafka/vendor/enum34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] copying build/lib/kafka/vendor/selectors34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] copying build/lib/kafka/vendor/six.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] copying build/lib/kafka/vendor/socketpair.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor
[  135s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__init__.py to __init__.cpython-39.pyc
[  135s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/client_async.py to client_async.cpython-39.pyc
[  135s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/cluster.py to cluster.cpython-39.pyc
[  135s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/codec.py to codec.cpython-39.pyc
[  135s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/conn.py to conn.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/errors.py to errors.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/future.py to future.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/scram.py to scram.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/structs.py to structs.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/util.py to util.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/version.py to version.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/acl_resource.py to acl_resource.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/client.py to client.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/config_resource.py to config_resource.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/new_partitions.py to new_partitions.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/new_topic.py to new_topic.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/fetcher.py to fetcher.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/group.py to group.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/subscription_state.py to subscription_state.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/base.py to base.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/consumer.py to consumer.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/heartbeat.py to heartbeat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/protocol.py to protocol.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/abstract.py to abstract.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/range.py to range.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/roundrobin.py to roundrobin.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py to partition_movements.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/sorted_set.py to sorted_set.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py to sticky_assignor.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/compound_stat.py to compound_stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/dict_reporter.py to dict_reporter.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/kafka_metric.py to kafka_metric.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/measurable.py to measurable.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/measurable_stat.py to measurable_stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/metric_config.py to metric_config.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/metric_name.py to metric_name.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/metrics.py to metrics.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/metrics_reporter.py to metrics_reporter.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/quota.py to quota.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stat.py to stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/avg.py to avg.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/count.py to count.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/histogram.py to histogram.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/max_stat.py to max_stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/min_stat.py to min_stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/percentile.py to percentile.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/percentiles.py to percentiles.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/rate.py to rate.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/sampled_stat.py to sampled_stat.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/sensor.py to sensor.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/total.py to total.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/abstract.py to abstract.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/default.py to default.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__init__.py to __init__.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/buffer.py to buffer.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/future.py to future.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/kafka.py to kafka.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/record_accumulator.py to record_accumulator.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/sender.py to sender.cpython-39.pyc
[  136s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__init__.py to __init__.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/abstract.py to abstract.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/admin.py to admin.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/api.py to api.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/commit.py to commit.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/fetch.py to fetch.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/frame.py to frame.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/group.py to group.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/message.py to message.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/metadata.py to metadata.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/offset.py to offset.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/parser.py to parser.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/pickle.py to pickle.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/produce.py to produce.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/struct.py to struct.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/types.py to types.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__init__.py to __init__.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/_crc32c.py to _crc32c.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/abc.py to abc.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/default_records.py to default_records.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/legacy_records.py to legacy_records.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/memory_records.py to memory_records.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/util.py to util.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/__init__.py to __init__.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/abstract.py to abstract.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__init__.py to __init__.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/enum34.py to enum34.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/selectors34.py to selectors34.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/six.py to six.cpython-39.pyc
[  137s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/socketpair.py to socketpair.cpython-39.pyc
[  137s] writing byte-compilation script '/tmp/tmp6moa7rc2.py'
[  137s] /usr/bin/python3.9 /tmp/tmp6moa7rc2.py
[  142s] removing /tmp/tmp6moa7rc2.py
[  142s] running install_egg_info
[  142s] running egg_info
[  142s] writing kafka_python.egg-info/PKG-INFO
[  142s] writing dependency_links to kafka_python.egg-info/dependency_links.txt
[  142s] writing requirements to kafka_python.egg-info/requires.txt
[  142s] writing top-level names to kafka_python.egg-info/top_level.txt
[  142s] reading manifest file 'kafka_python.egg-info/SOURCES.txt'
[  142s] reading manifest template 'MANIFEST.in'
[  142s] adding license file 'LICENSE'
[  142s] writing manifest file 'kafka_python.egg-info/SOURCES.txt'
[  142s] Copying kafka_python.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka_python-2.0.2-py3.9.egg-info
[  142s] running install_scripts
[  143s] ++ '[' -f _current_flavor ']'
[  143s] ++ cat _current_flavor
[  143s] + last_flavor=python39
[  143s] + '[' -z python39 ']'
[  143s] + '[' python39 '!=' python311 ']'
[  143s] + '[' -d build ']'
[  143s] + mv build _build.python39
[  143s] + '[' -d _build.python311 ']'
[  143s] + mv _build.python311 build
[  143s] + echo python311
[  143s] + python_flavor=python311
[  143s] + /usr/bin/python3.11 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64 --prefix /usr
[  146s] /usr/lib/python3.11/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  146s]   warnings.warn(msg, warning_class)
[  146s] running install
[  146s] /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  146s]   warnings.warn(
[  146s] running install_lib
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/client_async.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/cluster.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/codec.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/conn.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/errors.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/scram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/structs.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] copying build/lib/kafka/version.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/acl_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/client.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/config_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/new_partitions.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] copying build/lib/kafka/admin/new_topic.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer
[  146s] copying build/lib/kafka/consumer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer
[  146s] copying build/lib/kafka/consumer/fetcher.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer
[  146s] copying build/lib/kafka/consumer/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer
[  146s] copying build/lib/kafka/consumer/subscription_state.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] copying build/lib/kafka/coordinator/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] copying build/lib/kafka/coordinator/base.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] copying build/lib/kafka/coordinator/consumer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] copying build/lib/kafka/coordinator/heartbeat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] copying build/lib/kafka/coordinator/protocol.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors
[  146s] copying build/lib/kafka/coordinator/assignors/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors
[  146s] copying build/lib/kafka/coordinator/assignors/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors
[  146s] copying build/lib/kafka/coordinator/assignors/range.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors
[  146s] copying build/lib/kafka/coordinator/assignors/roundrobin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky
[  146s] copying build/lib/kafka/coordinator/assignors/sticky/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky
[  146s] copying build/lib/kafka/coordinator/assignors/sticky/partition_movements.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky
[  146s] copying build/lib/kafka/coordinator/assignors/sticky/sorted_set.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky
[  146s] copying build/lib/kafka/coordinator/assignors/sticky/sticky_assignor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/compound_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/dict_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/kafka_metric.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/measurable.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/measurable_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/metric_config.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/metric_name.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/metrics.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/metrics_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/quota.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] copying build/lib/kafka/metrics/stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/avg.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/count.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/histogram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/max_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/min_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/percentile.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/percentiles.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/rate.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/sampled_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/sensor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] copying build/lib/kafka/metrics/stats/total.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth
[  146s] copying build/lib/kafka/oauth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth
[  146s] copying build/lib/kafka/oauth/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner
[  146s] copying build/lib/kafka/partitioner/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner
[  146s] copying build/lib/kafka/partitioner/default.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/buffer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/kafka.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/record_accumulator.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] copying build/lib/kafka/producer/sender.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/admin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/api.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/commit.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/fetch.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/frame.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/message.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/metadata.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/offset.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/parser.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/pickle.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/produce.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/struct.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] copying build/lib/kafka/protocol/types.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/_crc32c.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/abc.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/default_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/legacy_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/memory_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] copying build/lib/kafka/record/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer
[  146s] copying build/lib/kafka/serializer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer
[  146s] copying build/lib/kafka/serializer/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer
[  146s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] copying build/lib/kafka/vendor/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] copying build/lib/kafka/vendor/enum34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] copying build/lib/kafka/vendor/selectors34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] copying build/lib/kafka/vendor/six.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] copying build/lib/kafka/vendor/socketpair.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor
[  146s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__init__.py to __init__.cpython-311.pyc
[  146s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/client_async.py to client_async.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/cluster.py to cluster.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/codec.py to codec.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/conn.py to conn.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/errors.py to errors.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/future.py to future.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/scram.py to scram.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/structs.py to structs.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/util.py to util.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/version.py to version.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/acl_resource.py to acl_resource.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/client.py to client.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/config_resource.py to config_resource.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/new_partitions.py to new_partitions.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/new_topic.py to new_topic.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/fetcher.py to fetcher.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/group.py to group.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/subscription_state.py to subscription_state.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/base.py to base.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/consumer.py to consumer.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/heartbeat.py to heartbeat.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/protocol.py to protocol.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/abstract.py to abstract.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/range.py to range.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/roundrobin.py to roundrobin.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py to partition_movements.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/sorted_set.py to sorted_set.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py to sticky_assignor.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/compound_stat.py to compound_stat.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/dict_reporter.py to dict_reporter.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/kafka_metric.py to kafka_metric.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/measurable.py to measurable.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/measurable_stat.py to measurable_stat.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/metric_config.py to metric_config.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/metric_name.py to metric_name.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/metrics.py to metrics.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/metrics_reporter.py to metrics_reporter.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/quota.py to quota.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stat.py to stat.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__init__.py to __init__.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/avg.py to avg.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/count.py to count.cpython-311.pyc
[  147s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/histogram.py to histogram.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/max_stat.py to max_stat.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/min_stat.py to min_stat.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/percentile.py to percentile.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/percentiles.py to percentiles.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/rate.py to rate.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/sampled_stat.py to sampled_stat.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/sensor.py to sensor.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/total.py to total.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/abstract.py to abstract.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/default.py to default.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/buffer.py to buffer.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/future.py to future.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/kafka.py to kafka.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/record_accumulator.py to record_accumulator.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/sender.py to sender.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/abstract.py to abstract.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/admin.py to admin.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/api.py to api.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/commit.py to commit.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/fetch.py to fetch.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/frame.py to frame.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/group.py to group.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/message.py to message.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/metadata.py to metadata.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/offset.py to offset.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/parser.py to parser.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/pickle.py to pickle.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/produce.py to produce.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/struct.py to struct.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/types.py to types.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/_crc32c.py to _crc32c.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/abc.py to abc.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/default_records.py to default_records.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/legacy_records.py to legacy_records.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/memory_records.py to memory_records.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/util.py to util.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/abstract.py to abstract.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__init__.py to __init__.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/enum34.py to enum34.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/selectors34.py to selectors34.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/six.py to six.cpython-311.pyc
[  148s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/socketpair.py to socketpair.cpython-311.pyc
[  148s] writing byte-compilation script '/tmp/tmpzo9ss_2i.py'
[  148s] /usr/bin/python3.11 /tmp/tmpzo9ss_2i.py
[  153s] removing /tmp/tmpzo9ss_2i.py
[  153s] running install_egg_info
[  153s] running egg_info
[  153s] writing kafka_python.egg-info/PKG-INFO
[  153s] writing dependency_links to kafka_python.egg-info/dependency_links.txt
[  153s] writing requirements to kafka_python.egg-info/requires.txt
[  153s] writing top-level names to kafka_python.egg-info/top_level.txt
[  154s] reading manifest file 'kafka_python.egg-info/SOURCES.txt'
[  154s] reading manifest template 'MANIFEST.in'
[  154s] adding license file 'LICENSE'
[  154s] writing manifest file 'kafka_python.egg-info/SOURCES.txt'
[  154s] Copying kafka_python.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka_python-2.0.2-py3.11.egg-info
[  154s] running install_scripts
[  154s] ++ '[' -f _current_flavor ']'
[  154s] ++ cat _current_flavor
[  154s] + last_flavor=python311
[  154s] + '[' -z python311 ']'
[  154s] + '[' python311 '!=' python310 ']'
[  154s] + '[' -d build ']'
[  154s] + mv build _build.python311
[  154s] + '[' -d _build.python310 ']'
[  154s] + mv _build.python310 build
[  154s] + echo python310
[  154s] + python_flavor=python310
[  154s] + /usr/bin/python3.10 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64 --prefix /usr
[  157s] /usr/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  157s]   warnings.warn(msg, warning_class)
[  158s] running install
[  158s] /usr/lib/python3.10/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  158s]   warnings.warn(
[  158s] running install_lib
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/client_async.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/cluster.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/codec.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/conn.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/errors.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/scram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/structs.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] copying build/lib/kafka/version.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/acl_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/client.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/config_resource.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/new_partitions.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] copying build/lib/kafka/admin/new_topic.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer
[  158s] copying build/lib/kafka/consumer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer
[  158s] copying build/lib/kafka/consumer/fetcher.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer
[  158s] copying build/lib/kafka/consumer/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer
[  158s] copying build/lib/kafka/consumer/subscription_state.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] copying build/lib/kafka/coordinator/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] copying build/lib/kafka/coordinator/base.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] copying build/lib/kafka/coordinator/consumer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] copying build/lib/kafka/coordinator/heartbeat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] copying build/lib/kafka/coordinator/protocol.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors
[  158s] copying build/lib/kafka/coordinator/assignors/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors
[  158s] copying build/lib/kafka/coordinator/assignors/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors
[  158s] copying build/lib/kafka/coordinator/assignors/range.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors
[  158s] copying build/lib/kafka/coordinator/assignors/roundrobin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky
[  158s] copying build/lib/kafka/coordinator/assignors/sticky/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky
[  158s] copying build/lib/kafka/coordinator/assignors/sticky/partition_movements.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky
[  158s] copying build/lib/kafka/coordinator/assignors/sticky/sorted_set.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky
[  158s] copying build/lib/kafka/coordinator/assignors/sticky/sticky_assignor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/compound_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/dict_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/kafka_metric.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/measurable.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/measurable_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/metric_config.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/metric_name.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/metrics.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/metrics_reporter.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/quota.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] copying build/lib/kafka/metrics/stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/avg.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/count.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/histogram.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/max_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/min_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/percentile.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/percentiles.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/rate.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/sampled_stat.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/sensor.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] copying build/lib/kafka/metrics/stats/total.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth
[  158s] copying build/lib/kafka/oauth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth
[  158s] copying build/lib/kafka/oauth/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner
[  158s] copying build/lib/kafka/partitioner/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner
[  158s] copying build/lib/kafka/partitioner/default.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/buffer.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/future.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/kafka.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/record_accumulator.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] copying build/lib/kafka/producer/sender.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/admin.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/api.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/commit.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/fetch.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/frame.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/group.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/message.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/metadata.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/offset.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/parser.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/pickle.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/produce.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/struct.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] copying build/lib/kafka/protocol/types.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/_crc32c.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/abc.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/default_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/legacy_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/memory_records.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] copying build/lib/kafka/record/util.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer
[  158s] copying build/lib/kafka/serializer/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer
[  158s] copying build/lib/kafka/serializer/abstract.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer
[  158s] creating /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] copying build/lib/kafka/vendor/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] copying build/lib/kafka/vendor/enum34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] copying build/lib/kafka/vendor/selectors34.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] copying build/lib/kafka/vendor/six.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] copying build/lib/kafka/vendor/socketpair.py -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__init__.py to __init__.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/client_async.py to client_async.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/cluster.py to cluster.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/codec.py to codec.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/conn.py to conn.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/errors.py to errors.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/future.py to future.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/scram.py to scram.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/structs.py to structs.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/util.py to util.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/version.py to version.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__init__.py to __init__.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/acl_resource.py to acl_resource.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/client.py to client.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/config_resource.py to config_resource.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/new_partitions.py to new_partitions.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/new_topic.py to new_topic.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__init__.py to __init__.cpython-310.pyc
[  158s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/fetcher.py to fetcher.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/group.py to group.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/subscription_state.py to subscription_state.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/base.py to base.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/consumer.py to consumer.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/heartbeat.py to heartbeat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/protocol.py to protocol.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/abstract.py to abstract.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/range.py to range.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/roundrobin.py to roundrobin.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/partition_movements.py to partition_movements.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/sorted_set.py to sorted_set.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/sticky_assignor.py to sticky_assignor.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/compound_stat.py to compound_stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/dict_reporter.py to dict_reporter.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/kafka_metric.py to kafka_metric.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/measurable.py to measurable.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/measurable_stat.py to measurable_stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/metric_config.py to metric_config.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/metric_name.py to metric_name.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/metrics.py to metrics.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/metrics_reporter.py to metrics_reporter.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/quota.py to quota.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stat.py to stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/avg.py to avg.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/count.py to count.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/histogram.py to histogram.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/max_stat.py to max_stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/min_stat.py to min_stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/percentile.py to percentile.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/percentiles.py to percentiles.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/rate.py to rate.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/sampled_stat.py to sampled_stat.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/sensor.py to sensor.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/total.py to total.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/abstract.py to abstract.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/default.py to default.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/buffer.py to buffer.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/future.py to future.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/kafka.py to kafka.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/record_accumulator.py to record_accumulator.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/sender.py to sender.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__init__.py to __init__.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/abstract.py to abstract.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/admin.py to admin.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/api.py to api.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/commit.py to commit.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/fetch.py to fetch.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/frame.py to frame.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/group.py to group.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/message.py to message.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/metadata.py to metadata.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/offset.py to offset.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/parser.py to parser.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/pickle.py to pickle.cpython-310.pyc
[  159s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/produce.py to produce.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/struct.py to struct.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/types.py to types.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__init__.py to __init__.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/_crc32c.py to _crc32c.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/abc.py to abc.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/default_records.py to default_records.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/legacy_records.py to legacy_records.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/memory_records.py to memory_records.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/util.py to util.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/__init__.py to __init__.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/abstract.py to abstract.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__init__.py to __init__.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/enum34.py to enum34.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/selectors34.py to selectors34.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/six.py to six.cpython-310.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/socketpair.py to socketpair.cpython-310.pyc
[  160s] writing byte-compilation script '/tmp/tmptwl4ep5r.py'
[  160s] /usr/bin/python3.10 /tmp/tmptwl4ep5r.py
[  165s] removing /tmp/tmptwl4ep5r.py
[  165s] running install_egg_info
[  165s] running egg_info
[  165s] writing kafka_python.egg-info/PKG-INFO
[  165s] writing dependency_links to kafka_python.egg-info/dependency_links.txt
[  165s] writing requirements to kafka_python.egg-info/requires.txt
[  165s] writing top-level names to kafka_python.egg-info/top_level.txt
[  165s] reading manifest file 'kafka_python.egg-info/SOURCES.txt'
[  165s] reading manifest template 'MANIFEST.in'
[  165s] adding license file 'LICENSE'
[  165s] writing manifest file 'kafka_python.egg-info/SOURCES.txt'
[  165s] Copying kafka_python.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka_python-2.0.2-py3.10.egg-info
[  165s] running install_scripts
[  166s] ++ '[' -f _current_flavor ']'
[  166s] ++ cat _current_flavor
[  166s] + last_flavor=python310
[  166s] + '[' -z python310 ']'
[  166s] + '[' python310 '!=' python38 ']'
[  166s] + '[' -d build ']'
[  166s] + mv build _build.python310
[  166s] + '[' -d _build.python38 ']'
[  166s] + mv _build.python38 build
[  166s] + echo python38
[  166s] + python_flavor=python38
[  166s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/version.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/version.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/util.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/util.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/structs.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/structs.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/scram.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/scram.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/future.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/future.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/errors.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/errors.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/conn.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/conn.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/codec.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/codec.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/cluster.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/cluster.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/client_async.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/__pycache__/client_async.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/six.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/six.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/socketpair.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/socketpair.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/enum34.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/enum34.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/selectors34.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/vendor/__pycache__/selectors34.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/__pycache__/abstract.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/__pycache__/abstract.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/serializer/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/util.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/util.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/memory_records.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/memory_records.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/legacy_records.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/legacy_records.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/abc.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/abc.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/_crc32c.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/_crc32c.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/default_records.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/record/__pycache__/default_records.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/types.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/types.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/struct.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/struct.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/produce.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/produce.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/pickle.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/pickle.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/parser.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/parser.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/offset.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/offset.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/metadata.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/metadata.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/message.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/message.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/group.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/group.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/frame.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/frame.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/fetch.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/fetch.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/commit.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/commit.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/api.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/api.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/admin.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/admin.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/abstract.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/abstract.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/protocol/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/sender.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/sender.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/kafka.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/kafka.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/future.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/future.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/buffer.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/buffer.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/__pycache__/default.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/__pycache__/default.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/partitioner/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/__pycache__/abstract.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/__pycache__/abstract.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/oauth/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/quota.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/quota.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metrics.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metrics.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metric_name.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metric_name.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metric_config.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/metric_config.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/measurable.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/measurable.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/total.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/total.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/count.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/count.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/protocol.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/protocol.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/consumer.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/consumer.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/base.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/base.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/group.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/group.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/fetcher.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/fetcher.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/new_topic.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/new_topic.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/new_partitions.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/new_partitions.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/client.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/client.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/config_resource.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/config_resource.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/__init__.cpython-38.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/acl_resource.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages/kafka/admin/__pycache__/acl_resource.cpython-38.pyc
[  166s] ++ '[' -f _current_flavor ']'
[  166s] ++ cat _current_flavor
[  166s] + last_flavor=python38
[  166s] + '[' -z python38 ']'
[  166s] + '[' python38 '!=' python39 ']'
[  166s] + '[' -d build ']'
[  166s] + mv build _build.python38
[  166s] + '[' -d _build.python39 ']'
[  166s] + mv _build.python39 build
[  166s] + echo python39
[  166s] + python_flavor=python39
[  166s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/version.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/version.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/util.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/util.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/structs.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/structs.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/scram.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/scram.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/future.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/future.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/errors.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/errors.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/conn.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/conn.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/codec.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/codec.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/cluster.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/cluster.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/client_async.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/__pycache__/client_async.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/six.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/six.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/socketpair.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/socketpair.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/enum34.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/enum34.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/selectors34.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/vendor/__pycache__/selectors34.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/__pycache__/abstract.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/__pycache__/abstract.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/serializer/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/util.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/util.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/memory_records.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/memory_records.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/legacy_records.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/legacy_records.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/abc.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/abc.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/_crc32c.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/_crc32c.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/default_records.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/record/__pycache__/default_records.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/types.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/types.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/struct.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/struct.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/produce.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/produce.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/pickle.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/pickle.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/parser.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/parser.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/offset.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/offset.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/metadata.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/metadata.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/message.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/message.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/group.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/group.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/frame.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/frame.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/fetch.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/fetch.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/commit.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/commit.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/api.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/api.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/admin.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/admin.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/abstract.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/abstract.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/protocol/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/sender.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/sender.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/kafka.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/kafka.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/future.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/future.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/buffer.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/buffer.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/__pycache__/default.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/__pycache__/default.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/partitioner/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/__pycache__/abstract.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/__pycache__/abstract.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/oauth/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/quota.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/quota.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metrics.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metrics.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metric_name.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metric_name.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metric_config.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/metric_config.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/measurable.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/measurable.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/total.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/total.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/count.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/count.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/protocol.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/protocol.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/consumer.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/consumer.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/base.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/base.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/group.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/group.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/fetcher.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/fetcher.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/new_topic.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/new_topic.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/new_partitions.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/new_partitions.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/client.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/client.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/config_resource.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/config_resource.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/__init__.cpython-39.pyc
[  166s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/acl_resource.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages/kafka/admin/__pycache__/acl_resource.cpython-39.pyc
[  167s] ++ '[' -f _current_flavor ']'
[  167s] ++ cat _current_flavor
[  167s] + last_flavor=python39
[  167s] + '[' -z python39 ']'
[  167s] + '[' python39 '!=' python311 ']'
[  167s] + '[' -d build ']'
[  167s] + mv build _build.python39
[  167s] + '[' -d _build.python311 ']'
[  167s] + mv _build.python311 build
[  167s] + echo python311
[  167s] + python_flavor=python311
[  167s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/version.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/version.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/util.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/util.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/structs.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/structs.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/scram.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/scram.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/future.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/future.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/errors.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/errors.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/conn.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/conn.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/codec.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/codec.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/cluster.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/cluster.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/client_async.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/__pycache__/client_async.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/socketpair.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/socketpair.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/six.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/six.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/selectors34.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/selectors34.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/enum34.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/enum34.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/vendor/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/__pycache__/abstract.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/__pycache__/abstract.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/serializer/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/util.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/util.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/memory_records.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/memory_records.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/legacy_records.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/legacy_records.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/abc.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/abc.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/_crc32c.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/_crc32c.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/default_records.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/record/__pycache__/default_records.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/types.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/types.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/struct.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/struct.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/produce.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/produce.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/pickle.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/pickle.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/parser.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/parser.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/offset.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/offset.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/metadata.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/metadata.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/message.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/message.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/group.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/group.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/frame.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/frame.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/fetch.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/fetch.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/commit.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/commit.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/api.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/api.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/admin.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/admin.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/abstract.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/abstract.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/protocol/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/sender.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/sender.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/kafka.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/kafka.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/future.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/future.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/buffer.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/buffer.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/__pycache__/default.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/__pycache__/default.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/partitioner/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/__pycache__/abstract.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/__pycache__/abstract.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/oauth/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/quota.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/quota.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metrics.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metrics.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metric_name.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metric_name.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metric_config.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metric_config.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/measurable.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/measurable.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/total.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/total.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/count.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/count.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/protocol.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/protocol.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/consumer.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/consumer.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/base.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/base.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/group.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/group.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/fetcher.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/fetcher.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/new_topic.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/new_topic.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/new_partitions.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/new_partitions.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/client.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/client.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/config_resource.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/config_resource.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/__init__.cpython-311.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/acl_resource.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages/kafka/admin/__pycache__/acl_resource.cpython-311.pyc
[  167s] ++ '[' -f _current_flavor ']'
[  167s] ++ cat _current_flavor
[  167s] + last_flavor=python311
[  167s] + '[' -z python311 ']'
[  167s] + '[' python311 '!=' python310 ']'
[  167s] + '[' -d build ']'
[  167s] + mv build _build.python311
[  167s] + '[' -d _build.python310 ']'
[  167s] + mv _build.python310 build
[  167s] + echo python310
[  167s] + python_flavor=python310
[  167s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/version.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/version.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/util.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/util.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/structs.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/structs.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/scram.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/scram.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/future.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/future.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/errors.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/errors.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/conn.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/conn.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/codec.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/codec.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/cluster.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/cluster.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/client_async.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/__pycache__/client_async.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/socketpair.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/socketpair.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/six.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/six.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/selectors34.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/selectors34.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/enum34.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/enum34.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/vendor/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/__pycache__/abstract.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/__pycache__/abstract.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/serializer/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/util.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/util.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/memory_records.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/memory_records.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/legacy_records.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/legacy_records.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/abc.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/abc.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/_crc32c.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/_crc32c.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/default_records.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/record/__pycache__/default_records.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/types.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/types.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/struct.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/struct.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/produce.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/produce.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/pickle.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/pickle.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/parser.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/parser.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/offset.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/offset.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/metadata.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/metadata.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/message.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/message.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/group.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/group.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/frame.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/frame.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/fetch.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/fetch.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/commit.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/commit.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/api.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/api.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/admin.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/admin.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/abstract.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/abstract.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/protocol/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/sender.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/sender.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/kafka.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/kafka.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/future.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/future.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/buffer.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/buffer.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/producer/__pycache__/record_accumulator.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/__pycache__/default.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/__pycache__/default.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/partitioner/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/__pycache__/abstract.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/__pycache__/abstract.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/oauth/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/quota.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/quota.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metrics.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metrics.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metric_name.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metric_name.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metric_config.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metric_config.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/measurable_stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/measurable.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/measurable.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/kafka_metric.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/dict_reporter.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/metrics_reporter.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/__pycache__/compound_stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/total.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/total.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/sensor.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/rate.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/percentiles.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/percentile.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/min_stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/max_stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/histogram.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/count.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/count.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/avg.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/metrics/stats/__pycache__/sampled_stat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/protocol.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/protocol.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/heartbeat.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/consumer.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/consumer.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/base.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/base.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/roundrobin.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/range.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/abstract.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sorted_set.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/sticky_assignor.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/coordinator/assignors/sticky/__pycache__/partition_movements.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/group.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/group.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/fetcher.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/fetcher.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/consumer/__pycache__/subscription_state.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/new_topic.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/new_topic.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/new_partitions.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/new_partitions.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/client.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/client.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/config_resource.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/config_resource.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/__init__.cpython-310.pyc
[  167s] Linking /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/acl_resource.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.10/site-packages/kafka/admin/__pycache__/acl_resource.cpython-310.pyc
[  167s] + /usr/lib/rpm/find-debuginfo -j4 -n --run-dwz --dwz-low-mem-die-limit 10000000 --dwz-max-die-limit 50000000 -S debugsourcefiles.list /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2
[  168s] + /usr/lib/rpm/brp-compress
[  168s] + /usr/lib/rpm/brp-suse
[  168s] calling /usr/lib/rpm/brp-suse.d/brp-05-permissions
[  168s] calling /usr/lib/rpm/brp-suse.d/brp-15-strip-debug
[  169s] calling /usr/lib/rpm/brp-suse.d/brp-25-symlink
[  169s] calling /usr/lib/rpm/brp-suse.d/brp-50-generate-fips-hmac
[  169s] calling /usr/lib/rpm/brp-suse.d/brp-75-ar
[  169s] Executing(%check): /usr/bin/bash -e /var/tmp/rpm-tmp.Rx4teJ
[  169s] + umask 022
[  169s] + cd /home/abuild/rpmbuild/BUILD
[  169s] + cd kafka-python-2.0.2
[  169s] + set +x
[  170s] Using libalternatives variant 38 for py.test in XDG_CONFIG_HOME during Python 3.8 expansions.
[  170s] Using libalternatives variant 38 for pytest in XDG_CONFIG_HOME during Python 3.8 expansions.
[  170s] Using libalternatives variant 39 for py.test in XDG_CONFIG_HOME during Python 3.9 expansions.
[  170s] Using libalternatives variant 39 for pytest in XDG_CONFIG_HOME during Python 3.9 expansions.
[  171s] Using libalternatives variant 311 for py.test in XDG_CONFIG_HOME during Python 3.11 expansions.
[  171s] Using libalternatives variant 311 for pytest in XDG_CONFIG_HOME during Python 3.11 expansions.
[  171s] + export PATH=/home/abuild/rpmbuild/BUILD/kafka-python-2.0.2/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  171s] + PATH=/home/abuild/rpmbuild/BUILD/kafka-python-2.0.2/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  171s] ++ '[' -f _current_flavor ']'
[  171s] ++ cat _current_flavor
[  171s] + last_flavor=python310
[  171s] + '[' -z python310 ']'
[  171s] + '[' python310 '!=' python38 ']'
[  171s] + '[' -d build ']'
[  171s] + mv build _build.python310
[  171s] + '[' -d _build.python38 ']'
[  171s] + mv _build.python38 build
[  172s] + echo python38
[  172s] + python_flavor=python38
[  172s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.8/site-packages
[  172s] + PYTHONDONTWRITEBYTECODE=1
[  172s] + pytest-3.8 --ignore=_build.python38 --ignore=_build.python39 --ignore=_build.python311 --ignore=_build.python310 -v -rs -k 'not (test_kafka_consumer_offsets_for_time_old or test_kafka_producer_gc_cleanup)'
[  177s] ============================= test session starts ==============================
[  177s] platform linux -- Python 3.8.16, pytest-7.2.0, pluggy-1.0.0 -- /usr/bin/python3.8
[  177s] cachedir: .pytest_cache
[  177s] rootdir: /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2
[  177s] plugins: mock-3.10.0
[  190s] collecting ... collected 1059 items / 2 deselected / 1057 selected
[  190s] 
[  190s] test/test_acl_comparisons.py::test_different_acls_are_different PASSED   [  0%]
[  190s] test/test_acl_comparisons.py::test_different_acls_are_different_with_glob_topics PASSED [  0%]
[  190s] test/test_acl_comparisons.py::test_same_acls_are_same PASSED             [  0%]
[  190s] test/test_admin.py::test_config_resource PASSED                          [  0%]
[  190s] test/test_admin.py::test_new_partitions PASSED                           [  0%]
[  190s] test/test_admin.py::test_acl_resource PASSED                             [  0%]
[  190s] test/test_admin.py::test_new_topic PASSED                                [  0%]
[  190s] test/test_admin_integration.py::test_create_describe_delete_acls SKIPPED [  0%]
[  190s] test/test_admin_integration.py::test_describe_configs_broker_resource_returns_configs SKIPPED [  0%]
[  190s] test/test_admin_integration.py::test_describe_configs_topic_resource_returns_configs SKIPPED [  0%]
[  190s] test/test_admin_integration.py::test_describe_configs_mixed_resources_returns_configs SKIPPED [  1%]
[  190s] test/test_admin_integration.py::test_describe_configs_invalid_broker_id_raises SKIPPED [  1%]
[  190s] test/test_admin_integration.py::test_describe_consumer_group_does_not_exist SKIPPED [  1%]
[  190s] test/test_admin_integration.py::test_describe_consumer_group_exists SKIPPED [  1%]
[  190s] test/test_admin_integration.py::test_delete_consumergroups SKIPPED (...) [  1%]
[  190s] test/test_admin_integration.py::test_delete_consumergroups_with_errors SKIPPED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v0] PASSED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v1] PASSED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v2] PASSED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v0] PASSED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v1] PASSED [  1%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v2] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v3] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v0] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v1] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v2] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v3] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v0] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v1] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v2] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v0] PASSED [  2%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v1] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v2] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v3] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v0] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v1] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v0] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v1] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v2] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v0] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v1] PASSED [  3%]
[  190s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v0] PASSED [  3%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v1] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v0] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v1] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v0] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v1] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v2] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v0] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v1] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v0] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v1] PASSED [  4%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v0] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v1] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v0] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v1] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v2] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v3] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v0] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v1] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v2] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v3] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v0] PASSED [  5%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v1] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v0] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v1] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v2] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v3] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v4] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v5] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ProduceRequest] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v0] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v1] PASSED [  6%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v2] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v3] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v4] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v5] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v0] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v1] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v2] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v3] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v4] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v5] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v6] PASSED [  7%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v7] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v8] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v9] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v10] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v11] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v0] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v1] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v2] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v0] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v1] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v0] PASSED [  8%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v1] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v0] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v1] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v0] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v1] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v2] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v0] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v1] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v2] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v3] PASSED [  9%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v0] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v1] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v2] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v3] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v0] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v1] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v2] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v0] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v1] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v2] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v3] PASSED [ 10%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v0] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v1] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v0] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v1] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v2] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v0] PASSED [ 11%]
[  191s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v1] PASSED [ 11%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v0] PASSED [ 11%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v1] PASSED [ 11%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v0] PASSED [ 11%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v1] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v0] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v1] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v2] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v0] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v1] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v0] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v1] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v0] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v1] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v0] PASSED [ 12%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v1] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v2] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v3] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v0] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v1] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v2] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v3] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v0] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v1] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v0] PASSED [ 13%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v1] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v2] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v3] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v4] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v5] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ProduceRequest] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v0] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v1] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v2] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v3] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v4] PASSED [ 14%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v5] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v0] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v1] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v2] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v3] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v4] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v5] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v6] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v7] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v8] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v9] PASSED [ 15%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v10] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v11] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v0] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v1] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v2] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v0] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v1] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v0] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v1] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v0] PASSED [ 16%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v1] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v0] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v1] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v2] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v0] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v1] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v2] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v3] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v0] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v1] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v2] PASSED [ 17%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v3] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v0] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v1] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v2] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v0] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v1] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v2] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v3] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v0] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v1] PASSED [ 18%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v0] PASSED [ 19%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v1] PASSED [ 19%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v2] PASSED [ 19%]
[  192s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v0] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v1] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v0] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v1] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v0] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v1] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v0] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v1] PASSED [ 19%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v2] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v0] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v1] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v0] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v1] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v0] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v1] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v0] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v1] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v2] PASSED [ 20%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v3] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v0] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v1] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v2] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v3] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v0] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v1] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v0] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v1] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v2] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v3] PASSED [ 21%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v4] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v5] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ProduceRequest] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v0] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v1] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v2] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v3] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v4] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v5] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v0] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v1] PASSED [ 22%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v2] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v3] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v4] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v5] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v6] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v7] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v8] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v9] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v10] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v11] PASSED [ 23%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v0] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v1] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v2] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v0] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v1] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v0] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v1] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v0] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v1] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v0] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v1] PASSED [ 24%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v2] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v0] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v1] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v2] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v3] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v0] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v1] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v2] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v3] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v0] PASSED [ 25%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v1] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v2] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v0] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v1] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v2] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v3] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v0] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v1] PASSED [ 26%]
[  193s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v0] PASSED [ 26%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v1] PASSED [ 26%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v2] PASSED [ 26%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v0] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v1] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v0] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v1] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v0] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v1] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v0] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v1] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v2] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v0] PASSED [ 27%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v1] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v0] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v1] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v0] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v1] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v0] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v1] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v2] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v3] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v0] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v1] PASSED [ 28%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v2] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v3] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v0] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v1] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v0] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v1] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v2] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v3] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v4] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v5] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ProduceRequest] PASSED [ 29%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v0] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v1] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v2] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v3] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v4] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v5] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v0] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v1] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v2] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v3] PASSED [ 30%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v4] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v5] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v6] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v7] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v8] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v9] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v10] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v11] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v0] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v1] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v2] PASSED [ 31%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v0] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v1] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v0] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v1] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v0] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v1] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v0] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v1] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v2] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v0] PASSED [ 32%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v1] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v2] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v3] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v0] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v1] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v2] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v3] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v0] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v1] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v2] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v0] PASSED [ 33%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v1] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v2] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v3] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v0] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v1] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v0] PASSED [ 34%]
[  194s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v1] PASSED [ 34%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v2] PASSED [ 34%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v0] PASSED [ 34%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v1] PASSED [ 34%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v0] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v1] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v0] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v1] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v0] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v1] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v2] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v0] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v1] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v0] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v1] PASSED [ 35%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v0] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v1] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v0] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v1] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v2] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v3] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v0] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v1] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v2] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v3] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v0] PASSED [ 36%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v1] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v0] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v1] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v2] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v3] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v4] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v5] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v0] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v1] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v2] PASSED [ 37%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v3] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v4] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v5] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v6] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v7] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v8] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v0] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v1] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v2] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v3] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v4] PASSED [ 38%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v5] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v0] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v1] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v2] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v3] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v4] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v5] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v6] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v7] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v8] PASSED [ 39%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v9] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v10] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v11] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v0] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v1] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v2] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v0] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v1] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v0] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v1] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v0] PASSED [ 40%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v1] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v0] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v1] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v2] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v0] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v1] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v2] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v3] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v0] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v1] PASSED [ 41%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v2] PASSED [ 42%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v3] PASSED [ 42%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v0] PASSED [ 42%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v1] PASSED [ 42%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v2] PASSED [ 42%]
[  195s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v0] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v1] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v2] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v3] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v0] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v1] PASSED [ 42%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v0] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v1] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v2] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v0] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v1] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v0] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v1] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v0] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v1] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v0] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v1] PASSED [ 43%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v2] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v0] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v1] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v0] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v1] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v0] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v1] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v0] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v1] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v2] PASSED [ 44%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v3] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v0] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v1] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v2] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v3] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v0] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v1] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v0] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v1] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v2] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v3] PASSED [ 45%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v4] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v5] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v0] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v1] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v2] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v3] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v4] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v5] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v6] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v7] PASSED [ 46%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v8] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v0] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v1] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v2] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v3] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v4] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v5] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v0] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v1] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v2] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v3] PASSED [ 47%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v4] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v5] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v6] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v7] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v8] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v9] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v10] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v11] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v0] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v1] PASSED [ 48%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v2] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v0] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v1] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v0] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v1] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v0] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v1] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v0] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v1] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v2] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v0] PASSED [ 49%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v1] PASSED [ 50%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v2] PASSED [ 50%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v3] PASSED [ 50%]
[  196s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v0] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v1] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v2] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v3] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v0] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v1] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v2] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v0] PASSED [ 50%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v1] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v2] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v3] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v0] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v1] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v0] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v1] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v2] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v0] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v1] PASSED [ 51%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v0] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v1] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v0] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v1] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v0] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v1] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v2] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v0] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v1] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v0] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v1] PASSED [ 52%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v0] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v1] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v0] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v1] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v2] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v3] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v0] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v1] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v2] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v3] PASSED [ 53%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v0] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v1] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v0] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v1] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v2] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v3] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v4] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v5] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v0] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v1] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v2] PASSED [ 54%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v3] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v4] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v5] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v6] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v7] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v8] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v0] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v1] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v2] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v3] PASSED [ 55%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v4] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v5] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v0] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v1] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v2] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v3] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v4] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v5] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v6] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v7] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v8] PASSED [ 56%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v9] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v10] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v11] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v0] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v1] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v2] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v0] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v1] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v0] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v1] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v0] PASSED [ 57%]
[  197s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v1] PASSED [ 58%]
[  198s] test/test_assignors.py::test_assignor_roundrobin PASSED                  [ 58%]
[  198s] test/test_assignors.py::test_assignor_range PASSED                       [ 58%]
[  198s] test/test_assignors.py::test_sticky_assignor1 PASSED                     [ 58%]
[  198s] test/test_assignors.py::test_sticky_assignor2 PASSED                     [ 58%]
[  198s] test/test_assignors.py::test_sticky_one_consumer_no_topic PASSED         [ 58%]
[  198s] test/test_assignors.py::test_sticky_one_consumer_nonexisting_topic PASSED [ 58%]
[  198s] test/test_assignors.py::test_sticky_one_consumer_one_topic PASSED        [ 58%]
[  198s] test/test_assignors.py::test_sticky_should_only_assign_partitions_from_subscribed_topics PASSED [ 58%]
[  198s] test/test_assignors.py::test_sticky_one_consumer_multiple_topics PASSED  [ 58%]
[  198s] test/test_assignors.py::test_sticky_two_consumers_one_topic_one_partition PASSED [ 59%]
[  198s] test/test_assignors.py::test_sticky_two_consumers_one_topic_two_partitions PASSED [ 59%]
[  198s] test/test_assignors.py::test_sticky_multiple_consumers_mixed_topic_subscriptions PASSED [ 59%]
[  198s] test/test_assignors.py::test_sticky_add_remove_consumer_one_topic PASSED [ 59%]
[  198s] test/test_assignors.py::test_sticky_add_remove_topic_two_consumers PASSED [ 59%]
[  199s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_leaves PASSED [ 59%]
[  199s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_added PASSED [ 59%]
[  199s] test/test_assignors.py::test_sticky_same_subscriptions PASSED            [ 59%]
[  206s] test/test_assignors.py::test_sticky_large_assignment_with_multiple_consumers_leaving PASSED [ 59%]
[  206s] test/test_assignors.py::test_new_subscription PASSED                     [ 59%]
[  206s] test/test_assignors.py::test_move_existing_assignments PASSED            [ 59%]
[  206s] test/test_assignors.py::test_stickiness PASSED                           [ 60%]
[  206s] test/test_assignors.py::test_assignment_updated_for_deleted_topic PASSED [ 60%]
[  206s] test/test_assignors.py::test_no_exceptions_when_only_subscribed_topic_is_deleted PASSED [ 60%]
[  206s] test/test_assignors.py::test_conflicting_previous_assignments PASSED     [ 60%]
[  207s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[0-10-33] PASSED [ 60%]
[  208s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[1-17-26] PASSED [ 60%]
[  208s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[2-10-33] PASSED [ 60%]
[  209s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[3-12-34] PASSED [ 60%]
[  210s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[4-14-27] PASSED [ 60%]
[  210s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[5-11-25] PASSED [ 60%]
[  211s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[6-14-39] PASSED [ 61%]
[  211s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[7-10-34] PASSED [ 61%]
[  212s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[8-15-27] PASSED [ 61%]
[  213s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[9-16-22] PASSED [ 61%]
[  215s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[10-19-22] PASSED [ 61%]
[  216s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[11-17-33] PASSED [ 61%]
[  217s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[12-16-36] PASSED [ 61%]
[  218s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[13-10-27] PASSED [ 61%]
[  218s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[14-12-22] PASSED [ 61%]
[  220s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[15-20-29] PASSED [ 61%]
[  221s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[16-19-28] PASSED [ 61%]
[  222s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[17-16-24] PASSED [ 62%]
[  223s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[18-19-24] PASSED [ 62%]
[  225s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[19-17-34] PASSED [ 62%]
[  226s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[20-17-22] PASSED [ 62%]
[  227s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[21-17-25] PASSED [ 62%]
[  227s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[22-10-39] PASSED [ 62%]
[  228s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[23-17-24] PASSED [ 62%]
[  229s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[24-13-34] PASSED [ 62%]
[  229s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[25-13-21] PASSED [ 62%]
[  230s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[26-13-27] PASSED [ 62%]
[  232s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[27-20-28] PASSED [ 63%]
[  233s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[28-12-28] PASSED [ 63%]
[  234s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[29-18-21] PASSED [ 63%]
[  235s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[30-20-30] PASSED [ 63%]
[  236s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[31-19-23] PASSED [ 63%]
[  238s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[32-18-39] PASSED [ 63%]
[  239s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[33-17-34] PASSED [ 63%]
[  239s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[34-10-24] PASSED [ 63%]
[  240s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[35-12-25] PASSED [ 63%]
[  241s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[36-16-23] PASSED [ 63%]
[  242s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[37-17-32] PASSED [ 63%]
[  242s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[38-12-32] PASSED [ 64%]
[  243s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[39-13-30] PASSED [ 64%]
[  244s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[40-10-36] PASSED [ 64%]
[  244s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[41-15-33] PASSED [ 64%]
[  245s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[42-16-32] PASSED [ 64%]
[  247s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[43-16-40] PASSED [ 64%]
[  247s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[44-16-21] PASSED [ 64%]
[  249s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[45-17-35] PASSED [ 64%]
[  250s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[46-16-38] PASSED [ 64%]
[  251s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[47-17-21] PASSED [ 64%]
[  251s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[48-18-21] PASSED [ 64%]
[  252s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[49-13-33] PASSED [ 65%]
[  254s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[50-20-39] PASSED [ 65%]
[  255s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[51-10-35] PASSED [ 65%]
[  256s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[52-17-37] PASSED [ 65%]
[  257s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[53-14-34] PASSED [ 65%]
[  258s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[54-18-36] PASSED [ 65%]
[  259s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[55-11-33] PASSED [ 65%]
[  260s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[56-17-29] PASSED [ 65%]
[  261s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[57-18-24] PASSED [ 65%]
[  262s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[58-13-34] PASSED [ 65%]
[  262s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[59-13-32] PASSED [ 66%]
[  263s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[60-20-23] PASSED [ 66%]
[  264s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[61-15-29] PASSED [ 66%]
[  265s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[62-17-37] PASSED [ 66%]
[  266s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[63-17-20] PASSED [ 66%]
[  267s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[64-13-33] PASSED [ 66%]
[  267s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[65-12-26] PASSED [ 66%]
[  268s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[66-11-31] PASSED [ 66%]
[  269s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[67-16-28] PASSED [ 66%]
[  270s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[68-19-31] PASSED [ 66%]
[  271s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[69-14-20] PASSED [ 66%]
[  272s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[70-19-31] PASSED [ 67%]
[  273s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[71-13-28] PASSED [ 67%]
[  273s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[72-16-25] PASSED [ 67%]
[  274s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[73-14-39] PASSED [ 67%]
[  274s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[74-10-31] PASSED [ 67%]
[  275s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[75-12-37] PASSED [ 67%]
[  276s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[76-13-40] PASSED [ 67%]
[  277s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[77-18-29] PASSED [ 67%]
[  278s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[78-20-34] PASSED [ 67%]
[  280s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[79-20-32] PASSED [ 67%]
[  281s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[80-15-23] PASSED [ 68%]
[  281s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[81-10-24] PASSED [ 68%]
[  282s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[82-15-36] PASSED [ 68%]
[  283s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[83-12-29] PASSED [ 68%]
[  284s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[84-18-40] PASSED [ 68%]
[  285s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[85-16-29] PASSED [ 68%]
[  285s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[86-11-25] PASSED [ 68%]
[  286s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[87-16-24] PASSED [ 68%]
[  288s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[88-20-24] PASSED [ 68%]
[  289s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[89-19-33] PASSED [ 68%]
[  291s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[90-16-39] PASSED [ 68%]
[  291s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[91-10-39] PASSED [ 69%]
[  292s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[92-16-40] PASSED [ 69%]
[  294s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[93-18-39] PASSED [ 69%]
[  295s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[94-13-20] PASSED [ 69%]
[  296s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[95-16-36] PASSED [ 69%]
[  296s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[96-14-38] PASSED [ 69%]
[  297s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[97-15-40] PASSED [ 69%]
[  298s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[98-11-30] PASSED [ 69%]
[  299s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[99-16-39] PASSED [ 69%]
[  299s] test/test_assignors.py::test_assignment_with_multiple_generations1 PASSED [ 69%]
[  300s] test/test_assignors.py::test_assignment_with_multiple_generations2 PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[0] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[1] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[2] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[3] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[4] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[5] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[6] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[7] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[8] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[9] PASSED [ 70%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[10] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[11] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[12] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[13] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[14] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[15] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[16] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[17] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[18] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[19] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[20] PASSED [ 71%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[21] PASSED [ 72%]
[  300s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[22] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[23] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[24] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[25] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[26] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[27] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[28] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[29] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[30] PASSED [ 72%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[31] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[32] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[33] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[34] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[35] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[36] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[37] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[38] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[39] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[40] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[41] PASSED [ 73%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[42] PASSED [ 74%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[43] PASSED [ 74%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[44] PASSED [ 74%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[45] PASSED [ 74%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[46] PASSED [ 74%]
[  301s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[47] PASSED [ 74%]
[  302s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[48] PASSED [ 74%]
[  302s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[49] PASSED [ 74%]
[  302s] test/test_client_async.py::test_bootstrap PASSED                         [ 74%]
[  302s] test/test_client_async.py::test_can_connect PASSED                       [ 74%]
[  302s] test/test_client_async.py::test_maybe_connect PASSED                     [ 75%]
[  302s] test/test_client_async.py::test_conn_state_change PASSED                 [ 75%]
[  303s] test/test_client_async.py::test_ready PASSED                             [ 75%]
[  303s] test/test_client_async.py::test_is_ready PASSED                          [ 75%]
[  303s] test/test_client_async.py::test_close PASSED                             [ 75%]
[  303s] test/test_client_async.py::test_is_disconnected PASSED                   [ 75%]
[  303s] test/test_client_async.py::test_send PASSED                              [ 75%]
[  303s] test/test_client_async.py::test_poll PASSED                              [ 75%]
[  303s] test/test_client_async.py::test__poll PASSED                             [ 75%]
[  303s] test/test_client_async.py::test_in_flight_request_count PASSED           [ 75%]
[  303s] test/test_client_async.py::test_least_loaded_node PASSED                 [ 75%]
[  304s] test/test_client_async.py::test_set_topics PASSED                        [ 76%]
[  304s] test/test_client_async.py::test_maybe_refresh_metadata_ttl PASSED        [ 76%]
[  304s] test/test_client_async.py::test_maybe_refresh_metadata_backoff PASSED    [ 76%]
[  304s] test/test_client_async.py::test_maybe_refresh_metadata_in_progress PASSED [ 76%]
[  304s] test/test_client_async.py::test_maybe_refresh_metadata_update PASSED     [ 76%]
[  304s] test/test_client_async.py::test_maybe_refresh_metadata_cant_send PASSED  [ 76%]
[  304s] test/test_client_async.py::test_schedule PASSED                          [ 76%]
[  304s] test/test_client_async.py::test_unschedule PASSED                        [ 76%]
[  304s] test/test_client_async.py::test_idle_connection_manager PASSED           [ 76%]
[  304s] test/test_cluster.py::test_empty_broker_list PASSED                      [ 76%]
[  306s] test/test_codec.py::test_gzip PASSED                                     [ 77%]
[  308s] test/test_codec.py::test_snappy PASSED                                   [ 77%]
[  308s] test/test_codec.py::test_snappy_detect_xerial PASSED                     [ 77%]
[  308s] test/test_codec.py::test_snappy_decode_xerial PASSED                     [ 77%]
[  308s] test/test_codec.py::test_snappy_encode_xerial PASSED                     [ 77%]
[  310s] test/test_codec.py::test_lz4 PASSED                                      [ 77%]
[  311s] test/test_codec.py::test_lz4_old PASSED                                  [ 77%]
[  345s] test/test_codec.py::test_lz4_incremental PASSED                          [ 77%]
[  347s] test/test_codec.py::test_zstd PASSED                                     [ 77%]
[  347s] test/test_conn.py::test_connect[states0] PASSED                          [ 77%]
[  347s] test/test_conn.py::test_connect[states1] PASSED                          [ 77%]
[  347s] test/test_conn.py::test_connect[states2] PASSED                          [ 78%]
[  347s] test/test_conn.py::test_connect[states3] PASSED                          [ 78%]
[  347s] test/test_conn.py::test_connect[states4] PASSED                          [ 78%]
[  348s] test/test_conn.py::test_connect_timeout PASSED                           [ 78%]
[  348s] test/test_conn.py::test_blacked_out PASSED                               [ 78%]
[  348s] test/test_conn.py::test_connection_delay PASSED                          [ 78%]
[  348s] test/test_conn.py::test_connected PASSED                                 [ 78%]
[  348s] test/test_conn.py::test_connecting PASSED                                [ 78%]
[  348s] test/test_conn.py::test_send_disconnected PASSED                         [ 78%]
[  348s] test/test_conn.py::test_send_connecting PASSED                           [ 78%]
[  348s] test/test_conn.py::test_send_max_ifr PASSED                              [ 78%]
[  348s] test/test_conn.py::test_send_no_response PASSED                          [ 79%]
[  348s] test/test_conn.py::test_send_response PASSED                             [ 79%]
[  348s] test/test_conn.py::test_send_error PASSED                                [ 79%]
[  348s] test/test_conn.py::test_can_send_more PASSED                             [ 79%]
[  348s] test/test_conn.py::test_recv_disconnected PASSED                         [ 79%]
[  348s] test/test_conn.py::test_recv PASSED                                      [ 79%]
[  348s] test/test_conn.py::test_close PASSED                                     [ 79%]
[  348s] test/test_conn.py::test_collect_hosts__happy_path PASSED                 [ 79%]
[  348s] test/test_conn.py::test_collect_hosts__ipv6 PASSED                       [ 79%]
[  348s] test/test_conn.py::test_collect_hosts__string_list PASSED                [ 79%]
[  348s] test/test_conn.py::test_collect_hosts__with_spaces PASSED                [ 80%]
[  348s] test/test_conn.py::test_lookup_on_connect PASSED                         [ 80%]
[  348s] test/test_conn.py::test_relookup_on_failure PASSED                       [ 80%]
[  348s] test/test_conn.py::test_requests_timed_out PASSED                        [ 80%]
[  348s] test/test_consumer.py::TestKafkaConsumer::test_session_timeout_larger_than_request_timeout_raises PASSED [ 80%]
[  348s] test/test_consumer.py::TestKafkaConsumer::test_fetch_max_wait_larger_than_request_timeout_raises PASSED [ 80%]
[  348s] test/test_consumer.py::TestKafkaConsumer::test_request_timeout_larger_than_connections_max_idle_ms_raises PASSED [ 80%]
[  348s] test/test_consumer.py::TestKafkaConsumer::test_subscription_copy PASSED  [ 80%]
[  348s] test/test_consumer_group.py::test_consumer SKIPPED (No KAFKA_VERSION...) [ 80%]
[  349s] test/test_consumer_group.py::test_consumer_topics SKIPPED (No KAFKA_...) [ 80%]
[  349s] test/test_consumer_group.py::test_group SKIPPED (Unsupported Kafka V...) [ 80%]
[  349s] test/test_consumer_group.py::test_paused SKIPPED (No KAFKA_VERSION set)  [ 81%]
[  349s] test/test_consumer_group.py::test_heartbeat_thread SKIPPED (Unsuppor...) [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_version_infer SKIPPED      [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer SKIPPED (No K...) [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_unsupported_encoding SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer__blocking SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer__offset_commit_resume SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_simple SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_one_msg SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_time SKIPPED [ 81%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_offsets_search_many_partitions SKIPPED [ 82%]
[  349s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_times_errors SKIPPED [ 82%]
[  349s] test/test_coordinator.py::test_init PASSED                               [ 82%]
[  349s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version0] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version1] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version2] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version3] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_protocol_type PASSED                      [ 82%]
[  349s] test/test_coordinator.py::test_group_protocols PASSED                    [ 82%]
[  349s] test/test_coordinator.py::test_pattern_subscription[api_version0] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_pattern_subscription[api_version1] PASSED [ 82%]
[  349s] test/test_coordinator.py::test_pattern_subscription[api_version2] PASSED [ 83%]
[  349s] test/test_coordinator.py::test_pattern_subscription[api_version3] PASSED [ 83%]
[  349s] test/test_coordinator.py::test_lookup_assignor PASSED                    [ 83%]
[  349s] test/test_coordinator.py::test_join_complete PASSED                      [ 83%]
[  349s] test/test_coordinator.py::test_join_complete_with_sticky_assignor PASSED [ 83%]
[  349s] test/test_coordinator.py::test_subscription_listener PASSED              [ 83%]
[  350s] test/test_coordinator.py::test_subscription_listener_failure PASSED      [ 83%]
[  350s] test/test_coordinator.py::test_perform_assignment PASSED                 [ 83%]
[  350s] test/test_coordinator.py::test_on_join_prepare PASSED                    [ 83%]
[  350s] test/test_coordinator.py::test_need_rejoin PASSED                        [ 83%]
[  350s] test/test_coordinator.py::test_refresh_committed_offsets_if_needed PASSED [ 84%]
[  350s] test/test_coordinator.py::test_fetch_committed_offsets PASSED            [ 84%]
[  350s] test/test_coordinator.py::test_close PASSED                              [ 84%]
[  350s] test/test_coordinator.py::test_commit_offsets_async PASSED               [ 84%]
[  350s] test/test_coordinator.py::test_commit_offsets_sync PASSED                [ 84%]
[  350s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version0-foobar-True-None-False-False-True-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version1-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version2-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version3-foobar-False-None-False-False-False-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version4-foobar-True-error4-True-True-True-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version5-foobar-True-error5-True-True-True-False] PASSED [ 84%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version6-foobar-True-error6-True-True-True-False] PASSED [ 85%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version7-foobar-True-error7-True-True-False-True] PASSED [ 85%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version8-foobar-True-None-True-True-False-False] PASSED [ 85%]
[  351s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version9-None-True-None-False-False-True-False] PASSED [ 85%]
[  351s] test/test_coordinator.py::test_send_offset_commit_request_fail PASSED    [ 85%]
[  351s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version0-OffsetCommitRequest_v0] PASSED [ 85%]
[  351s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version1-OffsetCommitRequest_v1] PASSED [ 85%]
[  352s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version2-OffsetCommitRequest_v2] PASSED [ 85%]
[  352s] test/test_coordinator.py::test_send_offset_commit_request_failure PASSED [ 85%]
[  352s] test/test_coordinator.py::test_send_offset_commit_request_success PASSED [ 85%]
[  352s] test/test_coordinator.py::test_handle_offset_commit_response[response0-GroupAuthorizationFailedError-False] PASSED [ 85%]
[  352s] test/test_coordinator.py::test_handle_offset_commit_response[response1-OffsetMetadataTooLargeError-False] PASSED [ 86%]
[  352s] test/test_coordinator.py::test_handle_offset_commit_response[response2-InvalidCommitOffsetSizeError-False] PASSED [ 86%]
[  353s] test/test_coordinator.py::test_handle_offset_commit_response[response3-GroupLoadInProgressError-False] PASSED [ 86%]
[  353s] test/test_coordinator.py::test_handle_offset_commit_response[response4-GroupCoordinatorNotAvailableError-True] PASSED [ 86%]
[  353s] test/test_coordinator.py::test_handle_offset_commit_response[response5-NotCoordinatorForGroupError-True] PASSED [ 86%]
[  353s] test/test_coordinator.py::test_handle_offset_commit_response[response6-RequestTimedOutError-True] PASSED [ 86%]
[  353s] test/test_coordinator.py::test_handle_offset_commit_response[response7-CommitFailedError-False] PASSED [ 86%]
[  354s] test/test_coordinator.py::test_handle_offset_commit_response[response8-CommitFailedError-False] PASSED [ 86%]
[  354s] test/test_coordinator.py::test_handle_offset_commit_response[response9-CommitFailedError-False] PASSED [ 86%]
[  354s] test/test_coordinator.py::test_handle_offset_commit_response[response10-InvalidTopicError-False] PASSED [ 86%]
[  354s] test/test_coordinator.py::test_handle_offset_commit_response[response11-TopicAuthorizationFailedError-False] PASSED [ 87%]
[  354s] test/test_coordinator.py::test_send_offset_fetch_request_fail PASSED     [ 87%]
[  354s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version0-OffsetFetchRequest_v0] PASSED [ 87%]
[  354s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version1-OffsetFetchRequest_v1] PASSED [ 87%]
[  355s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version2-OffsetFetchRequest_v1] PASSED [ 87%]
[  355s] test/test_coordinator.py::test_send_offset_fetch_request_failure PASSED  [ 87%]
[  355s] test/test_coordinator.py::test_send_offset_fetch_request_success PASSED  [ 87%]
[  355s] test/test_coordinator.py::test_handle_offset_fetch_response[response0-GroupLoadInProgressError-False] PASSED [ 87%]
[  355s] test/test_coordinator.py::test_handle_offset_fetch_response[response1-NotCoordinatorForGroupError-True] PASSED [ 87%]
[  355s] test/test_coordinator.py::test_handle_offset_fetch_response[response2-UnknownMemberIdError-False] PASSED [ 87%]
[  356s] test/test_coordinator.py::test_handle_offset_fetch_response[response3-IllegalGenerationError-False] PASSED [ 87%]
[  356s] test/test_coordinator.py::test_handle_offset_fetch_response[response4-TopicAuthorizationFailedError-False] PASSED [ 88%]
[  356s] test/test_coordinator.py::test_handle_offset_fetch_response[response5-None-False] PASSED [ 88%]
[  356s] test/test_coordinator.py::test_heartbeat PASSED                          [ 88%]
[  356s] test/test_coordinator.py::test_lookup_coordinator_failure PASSED         [ 88%]
[  356s] test/test_coordinator.py::test_ensure_active_group PASSED                [ 88%]
[  356s] test/test_fetcher.py::test_send_fetches PASSED                           [ 88%]
[  356s] test/test_fetcher.py::test_create_fetch_requests[api_version0-3] PASSED  [ 88%]
[  356s] test/test_fetcher.py::test_create_fetch_requests[api_version1-2] PASSED  [ 88%]
[  356s] test/test_fetcher.py::test_create_fetch_requests[api_version2-1] PASSED  [ 88%]
[  356s] test/test_fetcher.py::test_create_fetch_requests[api_version3-0] PASSED  [ 88%]
[  357s] test/test_fetcher.py::test_update_fetch_positions PASSED                 [ 89%]
[  357s] test/test_fetcher.py::test__reset_offset PASSED                          [ 89%]
[  357s] test/test_fetcher.py::test__send_offset_requests PASSED                  [ 89%]
[  357s] test/test_fetcher.py::test__send_offset_requests_multiple_nodes PASSED   [ 89%]
[  357s] test/test_fetcher.py::test__handle_offset_response PASSED                [ 89%]
[  357s] test/test_fetcher.py::test_fetched_records PASSED                        [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request0-fetch_response0-1] PASSED [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request1-fetch_response1-2] PASSED [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request2-fetch_response2-1] PASSED [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request3-fetch_response3-1] PASSED [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request4-fetch_response4-1] PASSED [ 89%]
[  357s] test/test_fetcher.py::test__handle_fetch_response[fetch_request5-fetch_response5-1] PASSED [ 90%]
[  357s] test/test_fetcher.py::test__unpack_message_set PASSED                    [ 90%]
[  357s] test/test_fetcher.py::test__message_generator PASSED                     [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data PASSED                    [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data__paused PASSED            [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data__stale_offset PASSED      [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data__not_leader PASSED        [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data__unknown_tp PASSED        [ 90%]
[  357s] test/test_fetcher.py::test__parse_fetched_data__out_of_range PASSED      [ 90%]
[  357s] test/test_fetcher.py::test_partition_records_offset PASSED               [ 90%]
[  357s] test/test_fetcher.py::test_partition_records_empty PASSED                [ 91%]
[  357s] test/test_fetcher.py::test_partition_records_no_fetch_offset PASSED      [ 91%]
[  357s] test/test_fetcher.py::test_partition_records_compacted_offset PASSED     [ 91%]
[  357s] test/test_metrics.py::test_MetricName PASSED                             [ 91%]
[  358s] test/test_metrics.py::test_simple_stats PASSED                           [ 91%]
[  358s] test/test_metrics.py::test_hierarchical_sensors PASSED                   [ 91%]
[  358s] test/test_metrics.py::test_bad_sensor_hierarchy PASSED                   [ 91%]
[  358s] test/test_metrics.py::test_remove_sensor PASSED                          [ 91%]
[  358s] test/test_metrics.py::test_remove_inactive_metrics PASSED                [ 91%]
[  358s] test/test_metrics.py::test_remove_metric PASSED                          [ 91%]
[  358s] test/test_metrics.py::test_event_windowing PASSED                        [ 91%]
[  358s] test/test_metrics.py::test_time_windowing PASSED                         [ 92%]
[  358s] test/test_metrics.py::test_old_data_has_no_effect PASSED                 [ 92%]
[  358s] test/test_metrics.py::test_duplicate_MetricName PASSED                   [ 92%]
[  358s] test/test_metrics.py::test_Quotas PASSED                                 [ 92%]
[  358s] test/test_metrics.py::test_Quotas_equality PASSED                        [ 92%]
[  358s] test/test_metrics.py::test_Percentiles PASSED                            [ 92%]
[  358s] test/test_metrics.py::test_rate_windowing PASSED                         [ 92%]
[  358s] test/test_metrics.py::test_reporter PASSED                               [ 92%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Request] PASSED [ 92%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Response] PASSED [ 92%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Request] PASSED [ 92%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Response] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Request] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Response] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Request] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Response] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Request] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Response] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Request] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Response] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Request] PASSED [ 93%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Response] PASSED [ 94%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Request] PASSED [ 94%]
[  358s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Response] PASSED [ 94%]
[  358s] test/test_object_conversion.py::test_with_metadata_response PASSED       [ 94%]
[  358s] test/test_package.py::TestPackage::test_top_level_namespace PASSED       [ 94%]
[  358s] test/test_package.py::TestPackage::test_submodule_namespace PASSED       [ 94%]
[  358s] test/test_partition_movements.py::test_empty_movements_are_sticky PASSED [ 94%]
[  358s] test/test_partition_movements.py::test_sticky_movements PASSED           [ 94%]
[  358s] test/test_partition_movements.py::test_should_detect_non_sticky_assignment PASSED [ 94%]
[  358s] test/test_partitioner.py::test_default_partitioner PASSED                [ 94%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[-681] PASSED   [ 94%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[a-524] PASSED  [ 95%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[ab-434] PASSED [ 95%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[abc-107] PASSED [ 95%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[123456789-566] PASSED [ 95%]
[  358s] test/test_partitioner.py::test_murmur2_java_compatibility[\x00 -742] PASSED [ 95%]
[  358s] test/test_partitioner.py::test_murmur2_not_ascii PASSED                  [ 95%]
[  358s] test/test_producer.py::test_buffer_pool PASSED                           [ 95%]
[  358s] test/test_producer.py::test_end_to_end[None] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  358s] test/test_producer.py::test_end_to_end[gzip] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  358s] test/test_producer.py::test_end_to_end[snappy] SKIPPED (No KAFKA_VER...) [ 95%]
[  358s] test/test_producer.py::test_end_to_end[lz4] SKIPPED (No KAFKA_VERSIO...) [ 96%]
[  358s] test/test_producer.py::test_end_to_end[zstd] SKIPPED (No KAFKA_VERSI...) [ 96%]
[  358s] test/test_producer.py::test_kafka_producer_proper_record_metadata[None] SKIPPED [ 96%]
[  358s] test/test_producer.py::test_kafka_producer_proper_record_metadata[gzip] SKIPPED [ 96%]
[  358s] test/test_producer.py::test_kafka_producer_proper_record_metadata[snappy] SKIPPED [ 96%]
[  358s] test/test_producer.py::test_kafka_producer_proper_record_metadata[lz4] SKIPPED [ 96%]
[  358s] test/test_producer.py::test_kafka_producer_proper_record_metadata[zstd] SKIPPED [ 96%]
[  358s] test/test_protocol.py::test_create_message PASSED                        [ 96%]
[  358s] test/test_protocol.py::test_encode_message_v0 PASSED                     [ 96%]
[  358s] test/test_protocol.py::test_encode_message_v1 PASSED                     [ 96%]
[  358s] test/test_protocol.py::test_decode_message PASSED                        [ 96%]
[  358s] test/test_protocol.py::test_decode_message_validate_crc PASSED           [ 97%]
[  358s] test/test_protocol.py::test_encode_message_set PASSED                    [ 97%]
[  358s] test/test_protocol.py::test_decode_message_set PASSED                    [ 97%]
[  358s] test/test_protocol.py::test_encode_message_header PASSED                 [ 97%]
[  358s] test/test_protocol.py::test_decode_message_set_partial PASSED            [ 97%]
[  359s] test/test_protocol.py::test_decode_fetch_response_partial PASSED         [ 97%]
[  359s] test/test_protocol.py::test_struct_unrecognized_kwargs PASSED            [ 97%]
[  359s] test/test_protocol.py::test_struct_missing_kwargs PASSED                 [ 97%]
[  359s] test/test_sasl_integration.py::test_admin[PLAIN] SKIPPED (Requires K...) [ 97%]
[  359s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-256] SKIPPED (Re...) [ 97%]
[  359s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-512] SKIPPED (Re...) [ 98%]
[  359s] test/test_sasl_integration.py::test_produce_and_consume[PLAIN] SKIPPED   [ 98%]
[  359s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-256] SKIPPED [ 98%]
[  359s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-512] SKIPPED [ 98%]
[  359s] test/test_sasl_integration.py::test_client[PLAIN] SKIPPED (Requires ...) [ 98%]
[  359s] test/test_sasl_integration.py::test_client[SCRAM-SHA-256] SKIPPED (R...) [ 98%]
[  359s] test/test_sasl_integration.py::test_client[SCRAM-SHA-512] SKIPPED (R...) [ 98%]
[  359s] test/test_sender.py::test_produce_request[api_version0-2] PASSED         [ 98%]
[  359s] test/test_sender.py::test_produce_request[api_version1-1] PASSED         [ 98%]
[  359s] test/test_sender.py::test_produce_request[api_version2-0] PASSED         [ 98%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[0-expectation0] PASSED [ 98%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[None-expectation1] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[-expectation2] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[.-expectation3] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[..-expectation4] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-expectation5] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[abc/123-expectation6] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[/abc/123-expectation7] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[/abc123-expectation8] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[name with space-expectation9] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[name*with*stars-expectation10] PASSED [ 99%]
[  359s] test/test_subscription_state.py::test_topic_name_validation[name+with+plus-expectation11] PASSED [100%]
[  359s] 
[  359s] =========================== short test summary info ============================
[  359s] SKIPPED [1] test/test_admin_integration.py:13: ACL features require broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:89: Describe config features require broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:102: Describe config features require broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:117: Describe config features require broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:136: Describe config features require broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:146: Describe consumer group requires broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:154: Describe consumer group requires broker >=0.11
[  359s] SKIPPED [1] test/test_admin_integration.py:243: Delete consumer groups requires broker >=1.1
[  359s] SKIPPED [1] test/test_admin_integration.py:282: Delete consumer groups requires broker >=1.1
[  359s] SKIPPED [1] test/test_consumer_group.py:21: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_group.py:33: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_group.py:43: Unsupported Kafka Version
[  359s] SKIPPED [1] test/test_consumer_group.py:133: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_group.py:152: Unsupported Kafka Version
[  359s] SKIPPED [1] test/test_consumer_integration.py:18: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_integration.py:29: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_integration.py:48: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_integration.py:66: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_consumer_integration.py:105: Requires KAFKA_VERSION >= 0.8.1
[  359s] SKIPPED [1] test/test_consumer_integration.py:149: Requires KAFKA_VERSION >= 0.10.1
[  359s] SKIPPED [1] test/test_consumer_integration.py:168: Requires KAFKA_VERSION >= 0.10.1
[  359s] SKIPPED [1] test/test_consumer_integration.py:194: Requires KAFKA_VERSION >= 0.10.1
[  359s] SKIPPED [1] test/test_consumer_integration.py:243: Requires KAFKA_VERSION >= 0.10.1
[  359s] SKIPPED [1] test/test_consumer_integration.py:290: Requires KAFKA_VERSION >= 0.10.1
[  359s] SKIPPED [5] test/test_producer.py:25: No KAFKA_VERSION set
[  359s] SKIPPED [5] test/test_producer.py:83: No KAFKA_VERSION set
[  359s] SKIPPED [1] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10
[  359s] SKIPPED [2] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10.2
[  359s] SKIPPED [1] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10
[  359s] SKIPPED [2] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10.2
[  359s] SKIPPED [1] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10
[  359s] SKIPPED [2] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10.2
[  359s] ========== 1014 passed, 43 skipped, 2 deselected in 182.12s (0:03:02) ==========
[  360s] ++ '[' -f _current_flavor ']'
[  360s] ++ cat _current_flavor
[  360s] + last_flavor=python38
[  360s] + '[' -z python38 ']'
[  360s] + '[' python38 '!=' python39 ']'
[  360s] + '[' -d build ']'
[  360s] + mv build _build.python38
[  360s] + '[' -d _build.python39 ']'
[  360s] + mv _build.python39 build
[  360s] + echo python39
[  360s] + python_flavor=python39
[  360s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.9/site-packages
[  360s] + PYTHONDONTWRITEBYTECODE=1
[  360s] + pytest-3.9 --ignore=_build.python38 --ignore=_build.python39 --ignore=_build.python311 --ignore=_build.python310 -v -rs -k 'not (test_kafka_consumer_offsets_for_time_old or test_kafka_producer_gc_cleanup)'
[  366s] ============================= test session starts ==============================
[  366s] platform linux -- Python 3.9.16, pytest-7.2.0, pluggy-1.0.0 -- /usr/bin/python3.9
[  366s] cachedir: .pytest_cache
[  366s] rootdir: /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2
[  366s] plugins: mock-3.10.0
[  378s] collecting ... collected 1059 items / 2 deselected / 1057 selected
[  378s] 
[  378s] test/test_acl_comparisons.py::test_different_acls_are_different PASSED   [  0%]
[  378s] test/test_acl_comparisons.py::test_different_acls_are_different_with_glob_topics PASSED [  0%]
[  378s] test/test_acl_comparisons.py::test_same_acls_are_same PASSED             [  0%]
[  378s] test/test_admin.py::test_config_resource PASSED                          [  0%]
[  378s] test/test_admin.py::test_new_partitions PASSED                           [  0%]
[  378s] test/test_admin.py::test_acl_resource PASSED                             [  0%]
[  378s] test/test_admin.py::test_new_topic PASSED                                [  0%]
[  378s] test/test_admin_integration.py::test_create_describe_delete_acls SKIPPED [  0%]
[  378s] test/test_admin_integration.py::test_describe_configs_broker_resource_returns_configs SKIPPED [  0%]
[  378s] test/test_admin_integration.py::test_describe_configs_topic_resource_returns_configs SKIPPED [  0%]
[  378s] test/test_admin_integration.py::test_describe_configs_mixed_resources_returns_configs SKIPPED [  1%]
[  378s] test/test_admin_integration.py::test_describe_configs_invalid_broker_id_raises SKIPPED [  1%]
[  378s] test/test_admin_integration.py::test_describe_consumer_group_does_not_exist SKIPPED [  1%]
[  378s] test/test_admin_integration.py::test_describe_consumer_group_exists SKIPPED [  1%]
[  378s] test/test_admin_integration.py::test_delete_consumergroups SKIPPED (...) [  1%]
[  378s] test/test_admin_integration.py::test_delete_consumergroups_with_errors SKIPPED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v0] PASSED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v1] PASSED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v2] PASSED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v0] PASSED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v1] PASSED [  1%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v2] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v3] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v0] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v1] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v2] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v3] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v0] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v1] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v2] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v0] PASSED [  2%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v1] PASSED [  3%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v2] PASSED [  3%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v3] PASSED [  3%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v0] PASSED [  3%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v1] PASSED [  3%]
[  378s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v0] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v1] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v2] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v0] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v1] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v0] PASSED [  3%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v1] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v0] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v1] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v0] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v1] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v2] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v0] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v1] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v0] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v1] PASSED [  4%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v0] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v1] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v0] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v1] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v2] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v3] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v0] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v1] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v2] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v3] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v0] PASSED [  5%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v1] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v0] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v1] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v2] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v3] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v4] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v5] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ProduceRequest] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v0] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v1] PASSED [  6%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v2] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v3] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v4] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v5] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v0] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v1] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v2] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v3] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v4] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v5] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v6] PASSED [  7%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v7] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v8] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v9] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v10] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v11] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v0] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v1] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v2] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v0] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v1] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v0] PASSED [  8%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v1] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v0] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v1] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v0] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v1] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v2] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v0] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v1] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v2] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v3] PASSED [  9%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v0] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v1] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v2] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v3] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v0] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v1] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v2] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v0] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v1] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v2] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v3] PASSED [ 10%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v0] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v1] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v0] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v1] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v2] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v0] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v1] PASSED [ 11%]
[  379s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v0] PASSED [ 11%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v1] PASSED [ 11%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v0] PASSED [ 11%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v1] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v0] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v1] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v2] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v0] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v1] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v0] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v1] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v0] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v1] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v0] PASSED [ 12%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v1] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v2] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v3] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v0] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v1] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v2] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v3] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v0] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v1] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v0] PASSED [ 13%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v1] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v2] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v3] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v4] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v5] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ProduceRequest] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v0] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v1] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v2] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v3] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v4] PASSED [ 14%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v5] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v0] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v1] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v2] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v3] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v4] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v5] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v6] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v7] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v8] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v9] PASSED [ 15%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v10] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v11] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v0] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v1] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v2] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v0] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v1] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v0] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v1] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v0] PASSED [ 16%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v1] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v0] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v1] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v2] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v0] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v1] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v2] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v3] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v0] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v1] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v2] PASSED [ 17%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v3] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v0] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v1] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v2] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v0] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v1] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v2] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v3] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v0] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v1] PASSED [ 18%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v0] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v1] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v2] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v0] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v1] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v0] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v1] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v0] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v1] PASSED [ 19%]
[  380s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v0] PASSED [ 19%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v1] PASSED [ 19%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v2] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v0] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v1] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v0] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v1] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v0] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v1] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v0] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v1] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v2] PASSED [ 20%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v3] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v0] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v1] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v2] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v3] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v0] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v1] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v0] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v1] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v2] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v3] PASSED [ 21%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v4] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v5] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ProduceRequest] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v0] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v1] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v2] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v3] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v4] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v5] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v0] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v1] PASSED [ 22%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v2] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v3] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v4] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v5] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v6] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v7] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v8] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v9] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v10] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v11] PASSED [ 23%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v0] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v1] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v2] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v0] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v1] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v0] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v1] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v0] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v1] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v0] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v1] PASSED [ 24%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v2] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v0] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v1] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v2] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v3] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v0] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v1] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v2] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v3] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v0] PASSED [ 25%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v1] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v2] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v0] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v1] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v2] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v3] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v0] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v1] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v0] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v1] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v2] PASSED [ 26%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v0] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v1] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v0] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v1] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v0] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v1] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v0] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v1] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v2] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v0] PASSED [ 27%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v1] PASSED [ 28%]
[  381s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v0] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v1] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v0] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v1] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v0] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v1] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v2] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v3] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v0] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v1] PASSED [ 28%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v2] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v3] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v0] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v1] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v0] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v1] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v2] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v3] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v4] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v5] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ProduceRequest] PASSED [ 29%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v0] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v1] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v2] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v3] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v4] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v5] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v0] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v1] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v2] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v3] PASSED [ 30%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v4] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v5] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v6] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v7] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v8] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v9] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v10] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v11] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v0] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v1] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v2] PASSED [ 31%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v0] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v1] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v0] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v1] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v0] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v1] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v0] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v1] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v2] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v0] PASSED [ 32%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v1] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v2] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v3] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v0] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v1] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v2] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v3] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v0] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v1] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v2] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v0] PASSED [ 33%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v1] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v2] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v3] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v0] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v1] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v0] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v1] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v2] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v0] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v1] PASSED [ 34%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v0] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v1] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v0] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v1] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v0] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v1] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v2] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v0] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v1] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v0] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v1] PASSED [ 35%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v0] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v1] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v0] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v1] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v2] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v3] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v0] PASSED [ 36%]
[  382s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v1] PASSED [ 36%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v2] PASSED [ 36%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v3] PASSED [ 36%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v0] PASSED [ 36%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v1] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v0] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v1] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v2] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v3] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v4] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v5] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v0] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v1] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v2] PASSED [ 37%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v3] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v4] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v5] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v6] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v7] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v8] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v0] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v1] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v2] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v3] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v4] PASSED [ 38%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v5] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v0] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v1] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v2] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v3] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v4] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v5] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v6] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v7] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v8] PASSED [ 39%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v9] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v10] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v11] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v0] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v1] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v2] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v0] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v1] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v0] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v1] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v0] PASSED [ 40%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v1] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v0] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v1] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v2] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v0] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v1] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v2] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v3] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v0] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v1] PASSED [ 41%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v2] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v3] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v0] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v1] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v2] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v0] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v1] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v2] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v3] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v0] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v1] PASSED [ 42%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v0] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v1] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v2] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v0] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v1] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v0] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v1] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v0] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v1] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v0] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v1] PASSED [ 43%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v2] PASSED [ 44%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v0] PASSED [ 44%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v1] PASSED [ 44%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v0] PASSED [ 44%]
[  383s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v1] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v0] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v1] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v0] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v1] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v2] PASSED [ 44%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v3] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v0] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v1] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v2] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v3] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v0] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v1] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v0] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v1] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v2] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v3] PASSED [ 45%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v4] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v5] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v0] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v1] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v2] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v3] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v4] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v5] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v6] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v7] PASSED [ 46%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v8] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v0] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v1] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v2] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v3] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v4] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v5] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v0] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v1] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v2] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v3] PASSED [ 47%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v4] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v5] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v6] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v7] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v8] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v9] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v10] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v11] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v0] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v1] PASSED [ 48%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v2] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v0] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v1] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v0] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v1] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v0] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v1] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v0] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v1] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v2] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v0] PASSED [ 49%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v1] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v2] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v3] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v0] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v1] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v2] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v3] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v0] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v1] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v2] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v0] PASSED [ 50%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v1] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v2] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v3] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v0] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v1] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v0] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v1] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v2] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v0] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v1] PASSED [ 51%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v0] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v1] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v0] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v1] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v0] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v1] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v2] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v0] PASSED [ 52%]
[  384s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v1] PASSED [ 52%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v0] PASSED [ 52%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v1] PASSED [ 52%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v0] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v1] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v0] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v1] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v2] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v3] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v0] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v1] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v2] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v3] PASSED [ 53%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v0] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v1] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v0] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v1] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v2] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v3] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v4] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v5] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v0] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v1] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v2] PASSED [ 54%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v3] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v4] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v5] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v6] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v7] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v8] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v0] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v1] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v2] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v3] PASSED [ 55%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v4] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v5] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v0] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v1] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v2] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v3] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v4] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v5] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v6] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v7] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v8] PASSED [ 56%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v9] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v10] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v11] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v0] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v1] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v2] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v0] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v1] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v0] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v1] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v0] PASSED [ 57%]
[  385s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v1] PASSED [ 58%]
[  385s] test/test_assignors.py::test_assignor_roundrobin PASSED                  [ 58%]
[  385s] test/test_assignors.py::test_assignor_range PASSED                       [ 58%]
[  385s] test/test_assignors.py::test_sticky_assignor1 PASSED                     [ 58%]
[  385s] test/test_assignors.py::test_sticky_assignor2 PASSED                     [ 58%]
[  385s] test/test_assignors.py::test_sticky_one_consumer_no_topic PASSED         [ 58%]
[  385s] test/test_assignors.py::test_sticky_one_consumer_nonexisting_topic PASSED [ 58%]
[  385s] test/test_assignors.py::test_sticky_one_consumer_one_topic PASSED        [ 58%]
[  385s] test/test_assignors.py::test_sticky_should_only_assign_partitions_from_subscribed_topics PASSED [ 58%]
[  385s] test/test_assignors.py::test_sticky_one_consumer_multiple_topics PASSED  [ 58%]
[  385s] test/test_assignors.py::test_sticky_two_consumers_one_topic_one_partition PASSED [ 59%]
[  385s] test/test_assignors.py::test_sticky_two_consumers_one_topic_two_partitions PASSED [ 59%]
[  385s] test/test_assignors.py::test_sticky_multiple_consumers_mixed_topic_subscriptions PASSED [ 59%]
[  386s] test/test_assignors.py::test_sticky_add_remove_consumer_one_topic PASSED [ 59%]
[  386s] test/test_assignors.py::test_sticky_add_remove_topic_two_consumers PASSED [ 59%]
[  386s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_leaves PASSED [ 59%]
[  386s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_added PASSED [ 59%]
[  387s] test/test_assignors.py::test_sticky_same_subscriptions PASSED            [ 59%]
[  392s] test/test_assignors.py::test_sticky_large_assignment_with_multiple_consumers_leaving PASSED [ 59%]
[  392s] test/test_assignors.py::test_new_subscription PASSED                     [ 59%]
[  392s] test/test_assignors.py::test_move_existing_assignments PASSED            [ 59%]
[  392s] test/test_assignors.py::test_stickiness PASSED                           [ 60%]
[  392s] test/test_assignors.py::test_assignment_updated_for_deleted_topic PASSED [ 60%]
[  392s] test/test_assignors.py::test_no_exceptions_when_only_subscribed_topic_is_deleted PASSED [ 60%]
[  392s] test/test_assignors.py::test_conflicting_previous_assignments PASSED     [ 60%]
[  393s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[0-11-22] PASSED [ 60%]
[  394s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[1-17-27] PASSED [ 60%]
[  394s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[2-12-30] PASSED [ 60%]
[  395s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[3-18-29] PASSED [ 60%]
[  396s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[4-12-38] PASSED [ 60%]
[  397s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[5-15-24] PASSED [ 60%]
[  397s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[6-10-39] PASSED [ 61%]
[  399s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[7-16-40] PASSED [ 61%]
[  399s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[8-11-25] PASSED [ 61%]
[  401s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[9-20-36] PASSED [ 61%]
[  402s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[10-12-28] PASSED [ 61%]
[  403s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[11-18-35] PASSED [ 61%]
[  404s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[12-10-38] PASSED [ 61%]
[  404s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[13-10-20] PASSED [ 61%]
[  405s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[14-18-35] PASSED [ 61%]
[  406s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[15-13-36] PASSED [ 61%]
[  406s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[16-13-26] PASSED [ 61%]
[  408s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[17-17-34] PASSED [ 62%]
[  409s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[18-18-37] PASSED [ 62%]
[  410s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[19-13-37] PASSED [ 62%]
[  410s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[20-11-37] PASSED [ 62%]
[  411s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[21-13-35] PASSED [ 62%]
[  412s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[22-14-36] PASSED [ 62%]
[  413s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[23-16-26] PASSED [ 62%]
[  415s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[24-20-38] PASSED [ 62%]
[  416s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[25-20-25] PASSED [ 62%]
[  417s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[26-15-36] PASSED [ 62%]
[  418s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[27-17-21] PASSED [ 63%]
[  418s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[28-11-30] PASSED [ 63%]
[  419s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[29-16-31] PASSED [ 63%]
[  420s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[30-17-23] PASSED [ 63%]
[  421s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[31-18-21] PASSED [ 63%]
[  423s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[32-20-39] PASSED [ 63%]
[  423s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[33-14-29] PASSED [ 63%]
[  424s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[34-14-23] PASSED [ 63%]
[  425s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[35-16-22] PASSED [ 63%]
[  425s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[36-10-20] PASSED [ 63%]
[  426s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[37-19-23] PASSED [ 63%]
[  428s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[38-20-23] PASSED [ 64%]
[  429s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[39-15-33] PASSED [ 64%]
[  429s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[40-15-26] PASSED [ 64%]
[  430s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[41-13-35] PASSED [ 64%]
[  432s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[42-19-35] PASSED [ 64%]
[  433s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[43-18-33] PASSED [ 64%]
[  434s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[44-13-23] PASSED [ 64%]
[  435s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[45-16-37] PASSED [ 64%]
[  436s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[46-14-20] PASSED [ 64%]
[  436s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[47-11-37] PASSED [ 64%]
[  438s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[48-19-26] PASSED [ 64%]
[  439s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[49-20-23] PASSED [ 65%]
[  440s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[50-17-33] PASSED [ 65%]
[  441s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[51-19-38] PASSED [ 65%]
[  442s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[52-17-20] PASSED [ 65%]
[  443s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[53-13-39] PASSED [ 65%]
[  444s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[54-12-35] PASSED [ 65%]
[  444s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[55-11-22] PASSED [ 65%]
[  445s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[56-11-29] PASSED [ 65%]
[  445s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[57-14-26] PASSED [ 65%]
[  446s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[58-13-26] PASSED [ 65%]
[  447s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[59-19-22] PASSED [ 66%]
[  449s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[60-20-38] PASSED [ 66%]
[  450s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[61-13-22] PASSED [ 66%]
[  451s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[62-17-35] PASSED [ 66%]
[  452s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[63-19-33] PASSED [ 66%]
[  453s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[64-12-32] PASSED [ 66%]
[  455s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[65-20-38] PASSED [ 66%]
[  456s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[66-18-20] PASSED [ 66%]
[  457s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[67-16-24] PASSED [ 66%]
[  458s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[68-18-23] PASSED [ 66%]
[  459s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[69-19-22] PASSED [ 66%]
[  460s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[70-13-20] PASSED [ 67%]
[  461s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[71-18-23] PASSED [ 67%]
[  462s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[72-17-38] PASSED [ 67%]
[  463s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[73-12-28] PASSED [ 67%]
[  464s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[74-13-40] PASSED [ 67%]
[  464s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[75-12-39] PASSED [ 67%]
[  466s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[76-20-29] PASSED [ 67%]
[  467s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[77-15-23] PASSED [ 67%]
[  467s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[78-13-31] PASSED [ 67%]
[  468s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[79-13-24] PASSED [ 67%]
[  469s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[80-18-23] PASSED [ 68%]
[  470s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[81-18-21] PASSED [ 68%]
[  471s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[82-20-20] PASSED [ 68%]
[  472s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[83-14-22] PASSED [ 68%]
[  473s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[84-16-37] PASSED [ 68%]
[  474s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[85-11-36] PASSED [ 68%]
[  475s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[86-19-37] PASSED [ 68%]
[  477s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[87-19-31] PASSED [ 68%]
[  477s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[88-17-39] PASSED [ 68%]
[  478s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[89-14-36] PASSED [ 68%]
[  479s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[90-12-29] PASSED [ 68%]
[  479s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[91-10-39] PASSED [ 69%]
[  481s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[92-16-36] PASSED [ 69%]
[  481s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[93-10-40] PASSED [ 69%]
[  482s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[94-15-37] PASSED [ 69%]
[  483s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[95-12-23] PASSED [ 69%]
[  483s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[96-13-23] PASSED [ 69%]
[  484s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[97-20-22] PASSED [ 69%]
[  485s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[98-15-21] PASSED [ 69%]
[  487s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[99-20-39] PASSED [ 69%]
[  487s] test/test_assignors.py::test_assignment_with_multiple_generations1 PASSED [ 69%]
[  487s] test/test_assignors.py::test_assignment_with_multiple_generations2 PASSED [ 70%]
[  487s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[0] PASSED [ 70%]
[  487s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[1] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[2] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[3] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[4] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[5] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[6] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[7] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[8] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[9] PASSED [ 70%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[10] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[11] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[12] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[13] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[14] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[15] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[16] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[17] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[18] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[19] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[20] PASSED [ 71%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[21] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[22] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[23] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[24] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[25] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[26] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[27] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[28] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[29] PASSED [ 72%]
[  488s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[30] PASSED [ 72%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[31] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[32] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[33] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[34] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[35] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[36] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[37] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[38] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[39] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[40] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[41] PASSED [ 73%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[42] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[43] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[44] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[45] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[46] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[47] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[48] PASSED [ 74%]
[  489s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[49] PASSED [ 74%]
[  489s] test/test_client_async.py::test_bootstrap PASSED                         [ 74%]
[  490s] test/test_client_async.py::test_can_connect PASSED                       [ 74%]
[  490s] test/test_client_async.py::test_maybe_connect PASSED                     [ 75%]
[  490s] test/test_client_async.py::test_conn_state_change PASSED                 [ 75%]
[  490s] test/test_client_async.py::test_ready PASSED                             [ 75%]
[  490s] test/test_client_async.py::test_is_ready PASSED                          [ 75%]
[  490s] test/test_client_async.py::test_close PASSED                             [ 75%]
[  490s] test/test_client_async.py::test_is_disconnected PASSED                   [ 75%]
[  491s] test/test_client_async.py::test_send PASSED                              [ 75%]
[  491s] test/test_client_async.py::test_poll PASSED                              [ 75%]
[  491s] test/test_client_async.py::test__poll PASSED                             [ 75%]
[  491s] test/test_client_async.py::test_in_flight_request_count PASSED           [ 75%]
[  491s] test/test_client_async.py::test_least_loaded_node PASSED                 [ 75%]
[  491s] test/test_client_async.py::test_set_topics PASSED                        [ 76%]
[  491s] test/test_client_async.py::test_maybe_refresh_metadata_ttl PASSED        [ 76%]
[  491s] test/test_client_async.py::test_maybe_refresh_metadata_backoff PASSED    [ 76%]
[  491s] test/test_client_async.py::test_maybe_refresh_metadata_in_progress PASSED [ 76%]
[  491s] test/test_client_async.py::test_maybe_refresh_metadata_update PASSED     [ 76%]
[  491s] test/test_client_async.py::test_maybe_refresh_metadata_cant_send PASSED  [ 76%]
[  491s] test/test_client_async.py::test_schedule PASSED                          [ 76%]
[  491s] test/test_client_async.py::test_unschedule PASSED                        [ 76%]
[  491s] test/test_client_async.py::test_idle_connection_manager PASSED           [ 76%]
[  491s] test/test_cluster.py::test_empty_broker_list PASSED                      [ 76%]
[  493s] test/test_codec.py::test_gzip PASSED                                     [ 77%]
[  495s] test/test_codec.py::test_snappy PASSED                                   [ 77%]
[  495s] test/test_codec.py::test_snappy_detect_xerial PASSED                     [ 77%]
[  495s] test/test_codec.py::test_snappy_decode_xerial PASSED                     [ 77%]
[  495s] test/test_codec.py::test_snappy_encode_xerial PASSED                     [ 77%]
[  497s] test/test_codec.py::test_lz4 PASSED                                      [ 77%]
[  498s] test/test_codec.py::test_lz4_old PASSED                                  [ 77%]
[  538s] test/test_codec.py::test_lz4_incremental PASSED                          [ 77%]
[  540s] test/test_codec.py::test_zstd PASSED                                     [ 77%]
[  540s] test/test_conn.py::test_connect[states0] PASSED                          [ 77%]
[  540s] test/test_conn.py::test_connect[states1] PASSED                          [ 77%]
[  540s] test/test_conn.py::test_connect[states2] PASSED                          [ 78%]
[  540s] test/test_conn.py::test_connect[states3] PASSED                          [ 78%]
[  540s] test/test_conn.py::test_connect[states4] PASSED                          [ 78%]
[  540s] test/test_conn.py::test_connect_timeout PASSED                           [ 78%]
[  540s] test/test_conn.py::test_blacked_out PASSED                               [ 78%]
[  540s] test/test_conn.py::test_connection_delay PASSED                          [ 78%]
[  540s] test/test_conn.py::test_connected PASSED                                 [ 78%]
[  540s] test/test_conn.py::test_connecting PASSED                                [ 78%]
[  540s] test/test_conn.py::test_send_disconnected PASSED                         [ 78%]
[  540s] test/test_conn.py::test_send_connecting PASSED                           [ 78%]
[  541s] test/test_conn.py::test_send_max_ifr PASSED                              [ 78%]
[  541s] test/test_conn.py::test_send_no_response PASSED                          [ 79%]
[  541s] test/test_conn.py::test_send_response PASSED                             [ 79%]
[  541s] test/test_conn.py::test_send_error PASSED                                [ 79%]
[  541s] test/test_conn.py::test_can_send_more PASSED                             [ 79%]
[  541s] test/test_conn.py::test_recv_disconnected PASSED                         [ 79%]
[  541s] test/test_conn.py::test_recv PASSED                                      [ 79%]
[  541s] test/test_conn.py::test_close PASSED                                     [ 79%]
[  541s] test/test_conn.py::test_collect_hosts__happy_path PASSED                 [ 79%]
[  541s] test/test_conn.py::test_collect_hosts__ipv6 PASSED                       [ 79%]
[  541s] test/test_conn.py::test_collect_hosts__string_list PASSED                [ 79%]
[  541s] test/test_conn.py::test_collect_hosts__with_spaces PASSED                [ 80%]
[  541s] test/test_conn.py::test_lookup_on_connect PASSED                         [ 80%]
[  541s] test/test_conn.py::test_relookup_on_failure PASSED                       [ 80%]
[  541s] test/test_conn.py::test_requests_timed_out PASSED                        [ 80%]
[  541s] test/test_consumer.py::TestKafkaConsumer::test_session_timeout_larger_than_request_timeout_raises PASSED [ 80%]
[  541s] test/test_consumer.py::TestKafkaConsumer::test_fetch_max_wait_larger_than_request_timeout_raises PASSED [ 80%]
[  541s] test/test_consumer.py::TestKafkaConsumer::test_request_timeout_larger_than_connections_max_idle_ms_raises PASSED [ 80%]
[  541s] test/test_consumer.py::TestKafkaConsumer::test_subscription_copy PASSED  [ 80%]
[  541s] test/test_consumer_group.py::test_consumer SKIPPED (No KAFKA_VERSION...) [ 80%]
[  541s] test/test_consumer_group.py::test_consumer_topics SKIPPED (No KAFKA_...) [ 80%]
[  541s] test/test_consumer_group.py::test_group SKIPPED (Unsupported Kafka V...) [ 80%]
[  541s] test/test_consumer_group.py::test_paused SKIPPED (No KAFKA_VERSION set)  [ 81%]
[  541s] test/test_consumer_group.py::test_heartbeat_thread SKIPPED (Unsuppor...) [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_version_infer SKIPPED      [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer SKIPPED (No K...) [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_unsupported_encoding SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer__blocking SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer__offset_commit_resume SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_simple SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_one_msg SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_time SKIPPED [ 81%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_offsets_search_many_partitions SKIPPED [ 82%]
[  541s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_times_errors SKIPPED [ 82%]
[  541s] test/test_coordinator.py::test_init PASSED                               [ 82%]
[  541s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version0] PASSED [ 82%]
[  541s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version1] PASSED [ 82%]
[  541s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version2] PASSED [ 82%]
[  541s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version3] PASSED [ 82%]
[  541s] test/test_coordinator.py::test_protocol_type PASSED                      [ 82%]
[  541s] test/test_coordinator.py::test_group_protocols PASSED                    [ 82%]
[  542s] test/test_coordinator.py::test_pattern_subscription[api_version0] PASSED [ 82%]
[  542s] test/test_coordinator.py::test_pattern_subscription[api_version1] PASSED [ 82%]
[  542s] test/test_coordinator.py::test_pattern_subscription[api_version2] PASSED [ 83%]
[  542s] test/test_coordinator.py::test_pattern_subscription[api_version3] PASSED [ 83%]
[  542s] test/test_coordinator.py::test_lookup_assignor PASSED                    [ 83%]
[  542s] test/test_coordinator.py::test_join_complete PASSED                      [ 83%]
[  542s] test/test_coordinator.py::test_join_complete_with_sticky_assignor PASSED [ 83%]
[  542s] test/test_coordinator.py::test_subscription_listener PASSED              [ 83%]
[  542s] test/test_coordinator.py::test_subscription_listener_failure PASSED      [ 83%]
[  542s] test/test_coordinator.py::test_perform_assignment PASSED                 [ 83%]
[  542s] test/test_coordinator.py::test_on_join_prepare PASSED                    [ 83%]
[  542s] test/test_coordinator.py::test_need_rejoin PASSED                        [ 83%]
[  542s] test/test_coordinator.py::test_refresh_committed_offsets_if_needed PASSED [ 84%]
[  542s] test/test_coordinator.py::test_fetch_committed_offsets PASSED            [ 84%]
[  542s] test/test_coordinator.py::test_close PASSED                              [ 84%]
[  542s] test/test_coordinator.py::test_commit_offsets_async PASSED               [ 84%]
[  543s] test/test_coordinator.py::test_commit_offsets_sync PASSED                [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version0-foobar-True-None-False-False-True-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version1-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version2-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version3-foobar-False-None-False-False-False-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version4-foobar-True-error4-True-True-True-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version5-foobar-True-error5-True-True-True-False] PASSED [ 84%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version6-foobar-True-error6-True-True-True-False] PASSED [ 85%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version7-foobar-True-error7-True-True-False-True] PASSED [ 85%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version8-foobar-True-None-True-True-False-False] PASSED [ 85%]
[  543s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version9-None-True-None-False-False-True-False] PASSED [ 85%]
[  543s] test/test_coordinator.py::test_send_offset_commit_request_fail PASSED    [ 85%]
[  543s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version0-OffsetCommitRequest_v0] PASSED [ 85%]
[  543s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version1-OffsetCommitRequest_v1] PASSED [ 85%]
[  544s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version2-OffsetCommitRequest_v2] PASSED [ 85%]
[  544s] test/test_coordinator.py::test_send_offset_commit_request_failure PASSED [ 85%]
[  544s] test/test_coordinator.py::test_send_offset_commit_request_success PASSED [ 85%]
[  544s] test/test_coordinator.py::test_handle_offset_commit_response[response0-GroupAuthorizationFailedError-False] PASSED [ 85%]
[  544s] test/test_coordinator.py::test_handle_offset_commit_response[response1-OffsetMetadataTooLargeError-False] PASSED [ 86%]
[  544s] test/test_coordinator.py::test_handle_offset_commit_response[response2-InvalidCommitOffsetSizeError-False] PASSED [ 86%]
[  544s] test/test_coordinator.py::test_handle_offset_commit_response[response3-GroupLoadInProgressError-False] PASSED [ 86%]
[  544s] test/test_coordinator.py::test_handle_offset_commit_response[response4-GroupCoordinatorNotAvailableError-True] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response5-NotCoordinatorForGroupError-True] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response6-RequestTimedOutError-True] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response7-CommitFailedError-False] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response8-CommitFailedError-False] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response9-CommitFailedError-False] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response10-InvalidTopicError-False] PASSED [ 86%]
[  545s] test/test_coordinator.py::test_handle_offset_commit_response[response11-TopicAuthorizationFailedError-False] PASSED [ 87%]
[  545s] test/test_coordinator.py::test_send_offset_fetch_request_fail PASSED     [ 87%]
[  545s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version0-OffsetFetchRequest_v0] PASSED [ 87%]
[  546s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version1-OffsetFetchRequest_v1] PASSED [ 87%]
[  546s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version2-OffsetFetchRequest_v1] PASSED [ 87%]
[  546s] test/test_coordinator.py::test_send_offset_fetch_request_failure PASSED  [ 87%]
[  546s] test/test_coordinator.py::test_send_offset_fetch_request_success PASSED  [ 87%]
[  546s] test/test_coordinator.py::test_handle_offset_fetch_response[response0-GroupLoadInProgressError-False] PASSED [ 87%]
[  546s] test/test_coordinator.py::test_handle_offset_fetch_response[response1-NotCoordinatorForGroupError-True] PASSED [ 87%]
[  546s] test/test_coordinator.py::test_handle_offset_fetch_response[response2-UnknownMemberIdError-False] PASSED [ 87%]
[  547s] test/test_coordinator.py::test_handle_offset_fetch_response[response3-IllegalGenerationError-False] PASSED [ 87%]
[  547s] test/test_coordinator.py::test_handle_offset_fetch_response[response4-TopicAuthorizationFailedError-False] PASSED [ 88%]
[  547s] test/test_coordinator.py::test_handle_offset_fetch_response[response5-None-False] PASSED [ 88%]
[  547s] test/test_coordinator.py::test_heartbeat PASSED                          [ 88%]
[  547s] test/test_coordinator.py::test_lookup_coordinator_failure PASSED         [ 88%]
[  547s] test/test_coordinator.py::test_ensure_active_group PASSED                [ 88%]
[  547s] test/test_fetcher.py::test_send_fetches PASSED                           [ 88%]
[  547s] test/test_fetcher.py::test_create_fetch_requests[api_version0-3] PASSED  [ 88%]
[  547s] test/test_fetcher.py::test_create_fetch_requests[api_version1-2] PASSED  [ 88%]
[  547s] test/test_fetcher.py::test_create_fetch_requests[api_version2-1] PASSED  [ 88%]
[  547s] test/test_fetcher.py::test_create_fetch_requests[api_version3-0] PASSED  [ 88%]
[  547s] test/test_fetcher.py::test_update_fetch_positions PASSED                 [ 89%]
[  547s] test/test_fetcher.py::test__reset_offset PASSED                          [ 89%]
[  547s] test/test_fetcher.py::test__send_offset_requests PASSED                  [ 89%]
[  547s] test/test_fetcher.py::test__send_offset_requests_multiple_nodes PASSED   [ 89%]
[  547s] test/test_fetcher.py::test__handle_offset_response PASSED                [ 89%]
[  547s] test/test_fetcher.py::test_fetched_records PASSED                        [ 89%]
[  547s] test/test_fetcher.py::test__handle_fetch_response[fetch_request0-fetch_response0-1] PASSED [ 89%]
[  547s] test/test_fetcher.py::test__handle_fetch_response[fetch_request1-fetch_response1-2] PASSED [ 89%]
[  547s] test/test_fetcher.py::test__handle_fetch_response[fetch_request2-fetch_response2-1] PASSED [ 89%]
[  548s] test/test_fetcher.py::test__handle_fetch_response[fetch_request3-fetch_response3-1] PASSED [ 89%]
[  548s] test/test_fetcher.py::test__handle_fetch_response[fetch_request4-fetch_response4-1] PASSED [ 89%]
[  548s] test/test_fetcher.py::test__handle_fetch_response[fetch_request5-fetch_response5-1] PASSED [ 90%]
[  548s] test/test_fetcher.py::test__unpack_message_set PASSED                    [ 90%]
[  548s] test/test_fetcher.py::test__message_generator PASSED                     [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data PASSED                    [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data__paused PASSED            [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data__stale_offset PASSED      [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data__not_leader PASSED        [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data__unknown_tp PASSED        [ 90%]
[  548s] test/test_fetcher.py::test__parse_fetched_data__out_of_range PASSED      [ 90%]
[  548s] test/test_fetcher.py::test_partition_records_offset PASSED               [ 90%]
[  548s] test/test_fetcher.py::test_partition_records_empty PASSED                [ 91%]
[  548s] test/test_fetcher.py::test_partition_records_no_fetch_offset PASSED      [ 91%]
[  548s] test/test_fetcher.py::test_partition_records_compacted_offset PASSED     [ 91%]
[  548s] test/test_metrics.py::test_MetricName PASSED                             [ 91%]
[  548s] test/test_metrics.py::test_simple_stats PASSED                           [ 91%]
[  548s] test/test_metrics.py::test_hierarchical_sensors PASSED                   [ 91%]
[  548s] test/test_metrics.py::test_bad_sensor_hierarchy PASSED                   [ 91%]
[  548s] test/test_metrics.py::test_remove_sensor PASSED                          [ 91%]
[  548s] test/test_metrics.py::test_remove_inactive_metrics PASSED                [ 91%]
[  548s] test/test_metrics.py::test_remove_metric PASSED                          [ 91%]
[  548s] test/test_metrics.py::test_event_windowing PASSED                        [ 91%]
[  548s] test/test_metrics.py::test_time_windowing PASSED                         [ 92%]
[  548s] test/test_metrics.py::test_old_data_has_no_effect PASSED                 [ 92%]
[  548s] test/test_metrics.py::test_duplicate_MetricName PASSED                   [ 92%]
[  548s] test/test_metrics.py::test_Quotas PASSED                                 [ 92%]
[  548s] test/test_metrics.py::test_Quotas_equality PASSED                        [ 92%]
[  548s] test/test_metrics.py::test_Percentiles PASSED                            [ 92%]
[  548s] test/test_metrics.py::test_rate_windowing PASSED                         [ 92%]
[  548s] test/test_metrics.py::test_reporter PASSED                               [ 92%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Request] PASSED [ 92%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Response] PASSED [ 92%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Request] PASSED [ 92%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Response] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Request] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Response] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Request] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Response] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Request] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Response] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Request] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Response] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Request] PASSED [ 93%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Response] PASSED [ 94%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Request] PASSED [ 94%]
[  548s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Response] PASSED [ 94%]
[  548s] test/test_object_conversion.py::test_with_metadata_response PASSED       [ 94%]
[  548s] test/test_package.py::TestPackage::test_top_level_namespace PASSED       [ 94%]
[  548s] test/test_package.py::TestPackage::test_submodule_namespace PASSED       [ 94%]
[  548s] test/test_partition_movements.py::test_empty_movements_are_sticky PASSED [ 94%]
[  548s] test/test_partition_movements.py::test_sticky_movements PASSED           [ 94%]
[  548s] test/test_partition_movements.py::test_should_detect_non_sticky_assignment PASSED [ 94%]
[  549s] test/test_partitioner.py::test_default_partitioner PASSED                [ 94%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[-681] PASSED   [ 94%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[a-524] PASSED  [ 95%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[ab-434] PASSED [ 95%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[abc-107] PASSED [ 95%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[123456789-566] PASSED [ 95%]
[  549s] test/test_partitioner.py::test_murmur2_java_compatibility[\x00 -742] PASSED [ 95%]
[  549s] test/test_partitioner.py::test_murmur2_not_ascii PASSED                  [ 95%]
[  549s] test/test_producer.py::test_buffer_pool PASSED                           [ 95%]
[  549s] test/test_producer.py::test_end_to_end[None] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  549s] test/test_producer.py::test_end_to_end[gzip] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  549s] test/test_producer.py::test_end_to_end[snappy] SKIPPED (No KAFKA_VER...) [ 95%]
[  549s] test/test_producer.py::test_end_to_end[lz4] SKIPPED (No KAFKA_VERSIO...) [ 96%]
[  549s] test/test_producer.py::test_end_to_end[zstd] SKIPPED (No KAFKA_VERSI...) [ 96%]
[  549s] test/test_producer.py::test_kafka_producer_proper_record_metadata[None] SKIPPED [ 96%]
[  549s] test/test_producer.py::test_kafka_producer_proper_record_metadata[gzip] SKIPPED [ 96%]
[  549s] test/test_producer.py::test_kafka_producer_proper_record_metadata[snappy] SKIPPED [ 96%]
[  549s] test/test_producer.py::test_kafka_producer_proper_record_metadata[lz4] SKIPPED [ 96%]
[  549s] test/test_producer.py::test_kafka_producer_proper_record_metadata[zstd] SKIPPED [ 96%]
[  549s] test/test_protocol.py::test_create_message PASSED                        [ 96%]
[  549s] test/test_protocol.py::test_encode_message_v0 PASSED                     [ 96%]
[  549s] test/test_protocol.py::test_encode_message_v1 PASSED                     [ 96%]
[  549s] test/test_protocol.py::test_decode_message PASSED                        [ 96%]
[  549s] test/test_protocol.py::test_decode_message_validate_crc PASSED           [ 97%]
[  549s] test/test_protocol.py::test_encode_message_set PASSED                    [ 97%]
[  549s] test/test_protocol.py::test_decode_message_set PASSED                    [ 97%]
[  549s] test/test_protocol.py::test_encode_message_header PASSED                 [ 97%]
[  549s] test/test_protocol.py::test_decode_message_set_partial PASSED            [ 97%]
[  549s] test/test_protocol.py::test_decode_fetch_response_partial PASSED         [ 97%]
[  549s] test/test_protocol.py::test_struct_unrecognized_kwargs PASSED            [ 97%]
[  549s] test/test_protocol.py::test_struct_missing_kwargs PASSED                 [ 97%]
[  549s] test/test_sasl_integration.py::test_admin[PLAIN] SKIPPED (Requires K...) [ 97%]
[  549s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-256] SKIPPED (Re...) [ 97%]
[  549s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-512] SKIPPED (Re...) [ 98%]
[  549s] test/test_sasl_integration.py::test_produce_and_consume[PLAIN] SKIPPED   [ 98%]
[  549s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-256] SKIPPED [ 98%]
[  549s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-512] SKIPPED [ 98%]
[  549s] test/test_sasl_integration.py::test_client[PLAIN] SKIPPED (Requires ...) [ 98%]
[  549s] test/test_sasl_integration.py::test_client[SCRAM-SHA-256] SKIPPED (R...) [ 98%]
[  549s] test/test_sasl_integration.py::test_client[SCRAM-SHA-512] SKIPPED (R...) [ 98%]
[  549s] test/test_sender.py::test_produce_request[api_version0-2] PASSED         [ 98%]
[  549s] test/test_sender.py::test_produce_request[api_version1-1] PASSED         [ 98%]
[  549s] test/test_sender.py::test_produce_request[api_version2-0] PASSED         [ 98%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[0-expectation0] PASSED [ 98%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[None-expectation1] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[-expectation2] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[.-expectation3] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[..-expectation4] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-expectation5] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[abc/123-expectation6] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[/abc/123-expectation7] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[/abc123-expectation8] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[name with space-expectation9] PASSED [ 99%]
[  549s] test/test_subscription_state.py::test_topic_name_validation[name*with*stars-expectation10] PASSED [ 99%]
[  550s] test/test_subscription_state.py::test_topic_name_validation[name+with+plus-expectation11] PASSED [100%]
[  550s] 
[  550s] =============================== warnings summary ===============================
[  550s] test/test_assignors.py: 2985 warnings
[  550s]   /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2/test/test_assignors.py:664: DeprecationWarning: Sampling from a set deprecated
[  550s]   since Python 3.9 and will be removed in a subsequent version.
[  550s]     topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  550s] 
[  550s] test/test_assignors.py: 2985 warnings
[  550s]   /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2/test/test_assignors.py:674: DeprecationWarning: Sampling from a set deprecated
[  550s]   since Python 3.9 and will be removed in a subsequent version.
[  550s]     topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  550s] 
[  550s] -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[  550s] =========================== short test summary info ============================
[  550s] SKIPPED [1] test/test_admin_integration.py:13: ACL features require broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:89: Describe config features require broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:102: Describe config features require broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:117: Describe config features require broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:136: Describe config features require broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:146: Describe consumer group requires broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:154: Describe consumer group requires broker >=0.11
[  550s] SKIPPED [1] test/test_admin_integration.py:243: Delete consumer groups requires broker >=1.1
[  550s] SKIPPED [1] test/test_admin_integration.py:282: Delete consumer groups requires broker >=1.1
[  550s] SKIPPED [1] test/test_consumer_group.py:21: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_group.py:33: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_group.py:43: Unsupported Kafka Version
[  550s] SKIPPED [1] test/test_consumer_group.py:133: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_group.py:152: Unsupported Kafka Version
[  550s] SKIPPED [1] test/test_consumer_integration.py:18: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_integration.py:29: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_integration.py:48: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_integration.py:66: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_consumer_integration.py:105: Requires KAFKA_VERSION >= 0.8.1
[  550s] SKIPPED [1] test/test_consumer_integration.py:149: Requires KAFKA_VERSION >= 0.10.1
[  550s] SKIPPED [1] test/test_consumer_integration.py:168: Requires KAFKA_VERSION >= 0.10.1
[  550s] SKIPPED [1] test/test_consumer_integration.py:194: Requires KAFKA_VERSION >= 0.10.1
[  550s] SKIPPED [1] test/test_consumer_integration.py:243: Requires KAFKA_VERSION >= 0.10.1
[  550s] SKIPPED [1] test/test_consumer_integration.py:290: Requires KAFKA_VERSION >= 0.10.1
[  550s] SKIPPED [5] test/test_producer.py:25: No KAFKA_VERSION set
[  550s] SKIPPED [5] test/test_producer.py:83: No KAFKA_VERSION set
[  550s] SKIPPED [1] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10
[  550s] SKIPPED [2] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10.2
[  550s] SKIPPED [1] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10
[  550s] SKIPPED [2] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10.2
[  550s] SKIPPED [1] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10
[  550s] SKIPPED [2] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10.2
[  550s] == 1014 passed, 43 skipped, 2 deselected, 5970 warnings in 183.85s (0:03:03) ===
[  550s] ++ '[' -f _current_flavor ']'
[  550s] ++ cat _current_flavor
[  550s] + last_flavor=python39
[  550s] + '[' -z python39 ']'
[  550s] + '[' python39 '!=' python311 ']'
[  550s] + '[' -d build ']'
[  550s] + mv build _build.python39
[  550s] + '[' -d _build.python311 ']'
[  550s] + mv _build.python311 build
[  550s] + echo python311
[  550s] + python_flavor=python311
[  550s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/python-kafka-python-2.0.2-3.2.riscv64/usr/lib/python3.11/site-packages
[  550s] + PYTHONDONTWRITEBYTECODE=1
[  550s] + pytest-3.11 --ignore=_build.python38 --ignore=_build.python39 --ignore=_build.python311 --ignore=_build.python310 -v -rs -k 'not (test_kafka_consumer_offsets_for_time_old or test_kafka_producer_gc_cleanup)'
[  556s] ============================= test session starts ==============================
[  556s] platform linux -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0 -- /usr/bin/python3.11
[  556s] cachedir: .pytest_cache
[  556s] rootdir: /home/abuild/rpmbuild/BUILD/kafka-python-2.0.2
[  556s] plugins: mock-3.10.0
[  567s] collecting ... collected 1059 items / 2 deselected / 1057 selected
[  567s] 
[  567s] test/test_acl_comparisons.py::test_different_acls_are_different PASSED   [  0%]
[  567s] test/test_acl_comparisons.py::test_different_acls_are_different_with_glob_topics PASSED [  0%]
[  567s] test/test_acl_comparisons.py::test_same_acls_are_same PASSED             [  0%]
[  567s] test/test_admin.py::test_config_resource PASSED                          [  0%]
[  567s] test/test_admin.py::test_new_partitions PASSED                           [  0%]
[  567s] test/test_admin.py::test_acl_resource PASSED                             [  0%]
[  567s] test/test_admin.py::test_new_topic PASSED                                [  0%]
[  567s] test/test_admin_integration.py::test_create_describe_delete_acls SKIPPED [  0%]
[  567s] test/test_admin_integration.py::test_describe_configs_broker_resource_returns_configs SKIPPED [  0%]
[  567s] test/test_admin_integration.py::test_describe_configs_topic_resource_returns_configs SKIPPED [  0%]
[  567s] test/test_admin_integration.py::test_describe_configs_mixed_resources_returns_configs SKIPPED [  1%]
[  567s] test/test_admin_integration.py::test_describe_configs_invalid_broker_id_raises SKIPPED [  1%]
[  567s] test/test_admin_integration.py::test_describe_consumer_group_does_not_exist SKIPPED [  1%]
[  567s] test/test_admin_integration.py::test_describe_consumer_group_exists SKIPPED [  1%]
[  567s] test/test_admin_integration.py::test_delete_consumergroups SKIPPED (...) [  1%]
[  567s] test/test_admin_integration.py::test_delete_consumergroups_with_errors SKIPPED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v0] PASSED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v1] PASSED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ApiVersionRequest_v2] PASSED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v0] PASSED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v1] PASSED [  1%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v2] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateTopicsRequest_v3] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v0] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v1] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v2] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteTopicsRequest_v3] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v0] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v1] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ListGroupsRequest_v2] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v0] PASSED [  2%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v1] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v2] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeGroupsRequest_v3] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v0] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslHandShakeRequest_v1] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v0] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v1] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeAclsRequest_v2] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v0] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreateAclsRequest_v1] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v0] PASSED [  3%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteAclsRequest_v1] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v0] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-AlterConfigsRequest_v1] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v0] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v1] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DescribeConfigsRequest_v2] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v0] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SaslAuthenticateRequest_v1] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v0] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-CreatePartitionsRequest_v1] PASSED [  4%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v0] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-DeleteGroupsRequest_v1] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v0] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v1] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v2] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetCommitRequest_v3] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v0] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v1] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v2] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetFetchRequest_v3] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v0] PASSED [  5%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-GroupCoordinatorRequest_v1] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v0] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v1] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v2] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v3] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v4] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-OffsetRequest_v5] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-ProduceRequest] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v0] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v1] PASSED [  6%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v2] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v3] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v4] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-MetadataRequest_v5] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v0] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v1] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v2] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v3] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v4] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v5] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v6] PASSED [  7%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v7] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v8] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v9] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v10] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-FetchRequest_v11] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v0] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v1] PASSED [  8%]
[  567s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-JoinGroupRequest_v2] PASSED [  8%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v0] PASSED [  8%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-SyncGroupRequest_v1] PASSED [  8%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v0] PASSED [  8%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-HeartbeatRequest_v1] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v0] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_KEY-LeaveGroupRequest_v1] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v0] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v1] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ApiVersionRequest_v2] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v0] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v1] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v2] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateTopicsRequest_v3] PASSED [  9%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v0] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v1] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v2] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteTopicsRequest_v3] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v0] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v1] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ListGroupsRequest_v2] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v0] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v1] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v2] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeGroupsRequest_v3] PASSED [ 10%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v0] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslHandShakeRequest_v1] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v0] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v1] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeAclsRequest_v2] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v0] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreateAclsRequest_v1] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v0] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteAclsRequest_v1] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v0] PASSED [ 11%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-AlterConfigsRequest_v1] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v0] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v1] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DescribeConfigsRequest_v2] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v0] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SaslAuthenticateRequest_v1] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v0] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-CreatePartitionsRequest_v1] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v0] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-DeleteGroupsRequest_v1] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v0] PASSED [ 12%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v1] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v2] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetCommitRequest_v3] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v0] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v1] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v2] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetFetchRequest_v3] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v0] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-GroupCoordinatorRequest_v1] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v0] PASSED [ 13%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v1] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v2] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v3] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v4] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-OffsetRequest_v5] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-ProduceRequest] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v0] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v1] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v2] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v3] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v4] PASSED [ 14%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-MetadataRequest_v5] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v0] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v1] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v2] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v3] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v4] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v5] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v6] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v7] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v8] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v9] PASSED [ 15%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v10] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-FetchRequest_v11] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v0] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v1] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-JoinGroupRequest_v2] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v0] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-SyncGroupRequest_v1] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v0] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-HeartbeatRequest_v1] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v0] PASSED [ 16%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[API_VERSION-LeaveGroupRequest_v1] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v0] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v1] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ApiVersionRequest_v2] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v0] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v1] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v2] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateTopicsRequest_v3] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v0] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v1] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v2] PASSED [ 17%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteTopicsRequest_v3] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v0] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v1] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ListGroupsRequest_v2] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v0] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v1] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v2] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeGroupsRequest_v3] PASSED [ 18%]
[  568s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v0] PASSED [ 18%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslHandShakeRequest_v1] PASSED [ 18%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v0] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v1] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeAclsRequest_v2] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v0] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreateAclsRequest_v1] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v0] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteAclsRequest_v1] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v0] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-AlterConfigsRequest_v1] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v0] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v1] PASSED [ 19%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DescribeConfigsRequest_v2] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v0] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SaslAuthenticateRequest_v1] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v0] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-CreatePartitionsRequest_v1] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v0] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-DeleteGroupsRequest_v1] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v0] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v1] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v2] PASSED [ 20%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetCommitRequest_v3] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v0] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v1] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v2] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetFetchRequest_v3] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v0] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-GroupCoordinatorRequest_v1] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v0] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v1] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v2] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v3] PASSED [ 21%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v4] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-OffsetRequest_v5] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-ProduceRequest] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v0] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v1] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v2] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v3] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v4] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-MetadataRequest_v5] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v0] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v1] PASSED [ 22%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v2] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v3] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v4] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v5] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v6] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v7] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v8] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v9] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v10] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-FetchRequest_v11] PASSED [ 23%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v0] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v1] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-JoinGroupRequest_v2] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v0] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-SyncGroupRequest_v1] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v0] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-HeartbeatRequest_v1] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v0] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[RESPONSE_TYPE-LeaveGroupRequest_v1] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v0] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v1] PASSED [ 24%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ApiVersionRequest_v2] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v0] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v1] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v2] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateTopicsRequest_v3] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v0] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v1] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v2] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteTopicsRequest_v3] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v0] PASSED [ 25%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v1] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ListGroupsRequest_v2] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v0] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v1] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v2] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeGroupsRequest_v3] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v0] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslHandShakeRequest_v1] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v0] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v1] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeAclsRequest_v2] PASSED [ 26%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v0] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreateAclsRequest_v1] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v0] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteAclsRequest_v1] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v0] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-AlterConfigsRequest_v1] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v0] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v1] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DescribeConfigsRequest_v2] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v0] PASSED [ 27%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SaslAuthenticateRequest_v1] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v0] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-CreatePartitionsRequest_v1] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v0] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-DeleteGroupsRequest_v1] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v0] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v1] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v2] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetCommitRequest_v3] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v0] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v1] PASSED [ 28%]
[  569s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v2] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetFetchRequest_v3] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v0] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-GroupCoordinatorRequest_v1] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v0] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v1] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v2] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v3] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v4] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-OffsetRequest_v5] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-ProduceRequest] PASSED [ 29%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v0] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v1] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v2] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v3] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v4] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-MetadataRequest_v5] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v0] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v1] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v2] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v3] PASSED [ 30%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v4] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v5] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v6] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v7] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v8] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v9] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v10] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-FetchRequest_v11] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v0] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v1] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-JoinGroupRequest_v2] PASSED [ 31%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v0] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-SyncGroupRequest_v1] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v0] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-HeartbeatRequest_v1] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v0] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_request_type_conformance[SCHEMA-LeaveGroupRequest_v1] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v0] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v1] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ApiVersionResponse_v2] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v0] PASSED [ 32%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v1] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v2] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateTopicsResponse_v3] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v0] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v1] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v2] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteTopicsResponse_v3] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v0] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v1] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ListGroupsResponse_v2] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v0] PASSED [ 33%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v1] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v2] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeGroupsResponse_v3] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v0] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslHandShakeResponse_v1] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v0] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v1] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeAclsResponse_v2] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v0] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreateAclsResponse_v1] PASSED [ 34%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v0] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteAclsResponse_v1] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v0] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-AlterConfigsResponse_v1] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v0] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v1] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DescribeConfigsResponse_v2] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v0] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SaslAuthenticateResponse_v1] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v0] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-CreatePartitionsResponse_v1] PASSED [ 35%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v0] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-DeleteGroupsResponse_v1] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v0] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v1] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v2] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetCommitResponse_v3] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v0] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v1] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v2] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetFetchResponse_v3] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v0] PASSED [ 36%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-GroupCoordinatorResponse_v1] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v0] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v1] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v2] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v3] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v4] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-OffsetResponse_v5] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v0] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v1] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v2] PASSED [ 37%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v3] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v4] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v5] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v6] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v7] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-ProduceResponse_v8] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v0] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v1] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v2] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v3] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v4] PASSED [ 38%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-MetadataResponse_v5] PASSED [ 39%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v0] PASSED [ 39%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v1] PASSED [ 39%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v2] PASSED [ 39%]
[  570s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v3] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v4] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v5] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v6] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v7] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v8] PASSED [ 39%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v9] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v10] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-FetchResponse_v11] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v0] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v1] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-JoinGroupResponse_v2] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v0] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-SyncGroupResponse_v1] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v0] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-HeartbeatResponse_v1] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v0] PASSED [ 40%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_KEY-LeaveGroupResponse_v1] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v0] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v1] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ApiVersionResponse_v2] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v0] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v1] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v2] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateTopicsResponse_v3] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v0] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v1] PASSED [ 41%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v2] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteTopicsResponse_v3] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v0] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v1] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ListGroupsResponse_v2] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v0] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v1] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v2] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeGroupsResponse_v3] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v0] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslHandShakeResponse_v1] PASSED [ 42%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v0] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v1] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeAclsResponse_v2] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v0] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreateAclsResponse_v1] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v0] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteAclsResponse_v1] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v0] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-AlterConfigsResponse_v1] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v0] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v1] PASSED [ 43%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DescribeConfigsResponse_v2] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v0] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SaslAuthenticateResponse_v1] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v0] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-CreatePartitionsResponse_v1] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v0] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-DeleteGroupsResponse_v1] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v0] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v1] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v2] PASSED [ 44%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetCommitResponse_v3] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v0] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v1] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v2] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetFetchResponse_v3] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v0] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-GroupCoordinatorResponse_v1] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v0] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v1] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v2] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v3] PASSED [ 45%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v4] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-OffsetResponse_v5] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v0] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v1] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v2] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v3] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v4] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v5] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v6] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v7] PASSED [ 46%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-ProduceResponse_v8] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v0] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v1] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v2] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v3] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v4] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-MetadataResponse_v5] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v0] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v1] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v2] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v3] PASSED [ 47%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v4] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v5] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v6] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v7] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v8] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v9] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v10] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-FetchResponse_v11] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v0] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v1] PASSED [ 48%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-JoinGroupResponse_v2] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v0] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-SyncGroupResponse_v1] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v0] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-HeartbeatResponse_v1] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v0] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[API_VERSION-LeaveGroupResponse_v1] PASSED [ 49%]
[  571s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v0] PASSED [ 49%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v1] PASSED [ 49%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ApiVersionResponse_v2] PASSED [ 49%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v0] PASSED [ 49%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v1] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v2] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateTopicsResponse_v3] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v0] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v1] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v2] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteTopicsResponse_v3] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v0] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v1] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ListGroupsResponse_v2] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v0] PASSED [ 50%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v1] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v2] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeGroupsResponse_v3] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v0] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslHandShakeResponse_v1] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v0] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v1] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeAclsResponse_v2] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v0] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreateAclsResponse_v1] PASSED [ 51%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v0] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteAclsResponse_v1] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v0] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-AlterConfigsResponse_v1] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v0] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v1] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DescribeConfigsResponse_v2] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v0] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SaslAuthenticateResponse_v1] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v0] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-CreatePartitionsResponse_v1] PASSED [ 52%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v0] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-DeleteGroupsResponse_v1] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v0] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v1] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v2] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetCommitResponse_v3] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v0] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v1] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v2] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetFetchResponse_v3] PASSED [ 53%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v0] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-GroupCoordinatorResponse_v1] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v0] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v1] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v2] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v3] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v4] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-OffsetResponse_v5] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v0] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v1] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v2] PASSED [ 54%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v3] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v4] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v5] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v6] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v7] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-ProduceResponse_v8] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v0] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v1] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v2] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v3] PASSED [ 55%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v4] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-MetadataResponse_v5] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v0] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v1] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v2] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v3] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v4] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v5] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v6] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v7] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v8] PASSED [ 56%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v9] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v10] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-FetchResponse_v11] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v0] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v1] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-JoinGroupResponse_v2] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v0] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-SyncGroupResponse_v1] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v0] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-HeartbeatResponse_v1] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v0] PASSED [ 57%]
[  572s] test/test_api_object_implementation.py::test_response_type_conformance[SCHEMA-LeaveGroupResponse_v1] PASSED [ 58%]
[  572s] test/test_assignors.py::test_assignor_roundrobin PASSED                  [ 58%]
[  572s] test/test_assignors.py::test_assignor_range PASSED                       [ 58%]
[  572s] test/test_assignors.py::test_sticky_assignor1 PASSED                     [ 58%]
[  572s] test/test_assignors.py::test_sticky_assignor2 PASSED                     [ 58%]
[  572s] test/test_assignors.py::test_sticky_one_consumer_no_topic PASSED         [ 58%]
[  572s] test/test_assignors.py::test_sticky_one_consumer_nonexisting_topic PASSED [ 58%]
[  573s] test/test_assignors.py::test_sticky_one_consumer_one_topic PASSED        [ 58%]
[  573s] test/test_assignors.py::test_sticky_should_only_assign_partitions_from_subscribed_topics PASSED [ 58%]
[  573s] test/test_assignors.py::test_sticky_one_consumer_multiple_topics PASSED  [ 58%]
[  573s] test/test_assignors.py::test_sticky_two_consumers_one_topic_one_partition PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_two_consumers_one_topic_two_partitions PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_multiple_consumers_mixed_topic_subscriptions PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_add_remove_consumer_one_topic PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_add_remove_topic_two_consumers PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_leaves PASSED [ 59%]
[  573s] test/test_assignors.py::test_sticky_reassignment_after_one_consumer_added PASSED [ 59%]
[  574s] test/test_assignors.py::test_sticky_same_subscriptions PASSED            [ 59%]
[  580s] test/test_assignors.py::test_sticky_large_assignment_with_multiple_consumers_leaving PASSED [ 59%]
[  580s] test/test_assignors.py::test_new_subscription PASSED                     [ 59%]
[  580s] test/test_assignors.py::test_move_existing_assignments PASSED            [ 59%]
[  580s] test/test_assignors.py::test_stickiness PASSED                           [ 60%]
[  580s] test/test_assignors.py::test_assignment_updated_for_deleted_topic PASSED [ 60%]
[  580s] test/test_assignors.py::test_no_exceptions_when_only_subscribed_topic_is_deleted PASSED [ 60%]
[  580s] test/test_assignors.py::test_conflicting_previous_assignments PASSED     [ 60%]
[  581s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[0-10-28] FAILED [ 60%]
[  581s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[1-19-28] FAILED [ 60%]
[  582s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[2-20-35] FAILED [ 60%]
[  582s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[3-13-22] FAILED [ 60%]
[  583s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[4-15-26] FAILED [ 60%]
[  583s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[5-18-27] FAILED [ 60%]
[  584s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[6-16-25] FAILED [ 61%]
[  584s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[7-17-36] FAILED [ 61%]
[  585s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[8-18-29] FAILED [ 61%]
[  585s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[9-15-39] FAILED [ 61%]
[  585s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[10-12-26] FAILED [ 61%]
[  586s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[11-19-27] FAILED [ 61%]
[  586s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[12-17-34] FAILED [ 61%]
[  587s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[13-14-25] FAILED [ 61%]
[  587s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[14-15-24] FAILED [ 61%]
[  588s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[15-14-25] FAILED [ 61%]
[  588s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[16-10-40] FAILED [ 61%]
[  589s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[17-11-31] FAILED [ 62%]
[  589s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[18-17-24] FAILED [ 62%]
[  590s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[19-10-32] FAILED [ 62%]
[  590s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[20-13-34] FAILED [ 62%]
[  591s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[21-14-24] FAILED [ 62%]
[  591s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[22-12-36] FAILED [ 62%]
[  591s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[23-18-35] FAILED [ 62%]
[  592s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[24-18-31] FAILED [ 62%]
[  592s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[25-20-32] FAILED [ 62%]
[  593s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[26-19-25] FAILED [ 62%]
[  593s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[27-13-39] FAILED [ 63%]
[  594s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[28-17-34] FAILED [ 63%]
[  594s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[29-18-40] FAILED [ 63%]
[  595s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[30-12-40] FAILED [ 63%]
[  595s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[31-17-20] FAILED [ 63%]
[  596s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[32-12-23] FAILED [ 63%]
[  596s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[33-19-26] FAILED [ 63%]
[  596s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[34-13-23] FAILED [ 63%]
[  597s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[35-12-22] FAILED [ 63%]
[  597s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[36-20-37] FAILED [ 63%]
[  598s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[37-14-31] FAILED [ 63%]
[  598s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[38-20-36] FAILED [ 64%]
[  599s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[39-19-35] FAILED [ 64%]
[  599s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[40-16-29] FAILED [ 64%]
[  600s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[41-17-21] FAILED [ 64%]
[  600s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[42-10-27] FAILED [ 64%]
[  601s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[43-12-40] FAILED [ 64%]
[  601s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[44-12-22] FAILED [ 64%]
[  601s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[45-10-27] FAILED [ 64%]
[  602s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[46-11-25] FAILED [ 64%]
[  602s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[47-16-31] FAILED [ 64%]
[  603s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[48-20-36] FAILED [ 64%]
[  603s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[49-11-33] FAILED [ 65%]
[  604s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[50-19-40] FAILED [ 65%]
[  604s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[51-13-40] FAILED [ 65%]
[  605s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[52-11-35] FAILED [ 65%]
[  605s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[53-19-32] FAILED [ 65%]
[  606s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[54-14-35] FAILED [ 65%]
[  606s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[55-15-32] FAILED [ 65%]
[  607s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[56-12-35] FAILED [ 65%]
[  607s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[57-18-40] FAILED [ 65%]
[  607s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[58-16-39] FAILED [ 65%]
[  608s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[59-17-22] FAILED [ 66%]
[  608s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[60-17-30] FAILED [ 66%]
[  609s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[61-18-39] FAILED [ 66%]
[  609s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[62-12-20] FAILED [ 66%]
[  610s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[63-10-22] FAILED [ 66%]
[  610s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[64-13-32] FAILED [ 66%]
[  611s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[65-15-40] FAILED [ 66%]
[  611s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[66-10-31] FAILED [ 66%]
[  612s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[67-15-31] FAILED [ 66%]
[  612s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[68-16-33] FAILED [ 66%]
[  613s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[69-18-37] FAILED [ 66%]
[  613s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[70-14-35] FAILED [ 67%]
[  613s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[71-11-23] FAILED [ 67%]
[  614s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[72-18-37] FAILED [ 67%]
[  614s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[73-15-25] FAILED [ 67%]
[  615s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[74-10-23] FAILED [ 67%]
[  615s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[75-12-23] FAILED [ 67%]
[  616s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[76-19-35] FAILED [ 67%]
[  616s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[77-19-39] FAILED [ 67%]
[  617s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[78-13-30] FAILED [ 67%]
[  617s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[79-16-38] FAILED [ 67%]
[  618s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[80-19-32] FAILED [ 68%]
[  618s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[81-17-36] FAILED [ 68%]
[  618s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[82-11-22] FAILED [ 68%]
[  619s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[83-17-21] FAILED [ 68%]
[  619s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[84-12-31] FAILED [ 68%]
[  620s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[85-18-37] FAILED [ 68%]
[  620s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[86-14-32] FAILED [ 68%]
[  621s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[87-10-36] FAILED [ 68%]
[  621s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[88-12-29] FAILED [ 68%]
[  622s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[89-13-32] FAILED [ 68%]
[  622s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[90-14-37] FAILED [ 68%]
[  623s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[91-13-37] FAILED [ 69%]
[  623s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[92-20-20] FAILED [ 69%]
[  624s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[93-14-26] FAILED [ 69%]
[  624s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[94-19-35] FAILED [ 69%]
[  624s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[95-10-33] FAILED [ 69%]
[  625s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[96-16-33] FAILED [ 69%]
[  625s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[97-20-28] FAILED [ 69%]
[  626s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[98-16-28] FAILED [ 69%]
[  626s] test/test_assignors.py::test_reassignment_with_random_subscriptions_and_changes[99-10-31] FAILED [ 69%]
[  626s] test/test_assignors.py::test_assignment_with_multiple_generations1 PASSED [ 69%]
[  626s] test/test_assignors.py::test_assignment_with_multiple_generations2 PASSED [ 70%]
[  626s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[0] PASSED [ 70%]
[  626s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[1] PASSED [ 70%]
[  626s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[2] PASSED [ 70%]
[  626s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[3] PASSED [ 70%]
[  626s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[4] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[5] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[6] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[7] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[8] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[9] PASSED [ 70%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[10] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[11] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[12] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[13] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[14] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[15] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[16] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[17] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[18] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[19] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[20] PASSED [ 71%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[21] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[22] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[23] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[24] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[25] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[26] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[27] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[28] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[29] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[30] PASSED [ 72%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[31] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[32] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[33] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[34] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[35] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[36] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[37] PASSED [ 73%]
[  627s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[38] PASSED [ 73%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[39] PASSED [ 73%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[40] PASSED [ 73%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[41] PASSED [ 73%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[42] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[43] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[44] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[45] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[46] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[47] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[48] PASSED [ 74%]
[  628s] test/test_assignors.py::test_assignment_with_conflicting_previous_generations[49] PASSED [ 74%]
[  628s] test/test_client_async.py::test_bootstrap PASSED                         [ 74%]
[  628s] test/test_client_async.py::test_can_connect PASSED                       [ 74%]
[  628s] test/test_client_async.py::test_maybe_connect PASSED                     [ 75%]
[  628s] test/test_client_async.py::test_conn_state_change PASSED                 [ 75%]
[  628s] test/test_client_async.py::test_ready PASSED                             [ 75%]
[  629s] test/test_client_async.py::test_is_ready PASSED                          [ 75%]
[  629s] test/test_client_async.py::test_close PASSED                             [ 75%]
[  629s] test/test_client_async.py::test_is_disconnected PASSED                   [ 75%]
[  629s] test/test_client_async.py::test_send PASSED                              [ 75%]
[  629s] test/test_client_async.py::test_poll PASSED                              [ 75%]
[  629s] test/test_client_async.py::test__poll PASSED                             [ 75%]
[  629s] test/test_client_async.py::test_in_flight_request_count PASSED           [ 75%]
[  629s] test/test_client_async.py::test_least_loaded_node PASSED                 [ 75%]
[  629s] test/test_client_async.py::test_set_topics PASSED                        [ 76%]
[  629s] test/test_client_async.py::test_maybe_refresh_metadata_ttl PASSED        [ 76%]
[  629s] test/test_client_async.py::test_maybe_refresh_metadata_backoff PASSED    [ 76%]
[  629s] test/test_client_async.py::test_maybe_refresh_metadata_in_progress PASSED [ 76%]
[  629s] test/test_client_async.py::test_maybe_refresh_metadata_update PASSED     [ 76%]
[  629s] test/test_client_async.py::test_maybe_refresh_metadata_cant_send PASSED  [ 76%]
[  629s] test/test_client_async.py::test_schedule PASSED                          [ 76%]
[  629s] test/test_client_async.py::test_unschedule PASSED                        [ 76%]
[  629s] test/test_client_async.py::test_idle_connection_manager PASSED           [ 76%]
[  629s] test/test_cluster.py::test_empty_broker_list PASSED                      [ 76%]
[  631s] test/test_codec.py::test_gzip PASSED                                     [ 77%]
[  632s] test/test_codec.py::test_snappy PASSED                                   [ 77%]
[  632s] test/test_codec.py::test_snappy_detect_xerial PASSED                     [ 77%]
[  632s] test/test_codec.py::test_snappy_decode_xerial PASSED                     [ 77%]
[  632s] test/test_codec.py::test_snappy_encode_xerial PASSED                     [ 77%]
[  633s] test/test_codec.py::test_lz4 PASSED                                      [ 77%]
[  634s] test/test_codec.py::test_lz4_old PASSED                                  [ 77%]
[  666s] test/test_codec.py::test_lz4_incremental PASSED                          [ 77%]
[  667s] test/test_codec.py::test_zstd PASSED                                     [ 77%]
[  667s] test/test_conn.py::test_connect[states0] PASSED                          [ 77%]
[  667s] test/test_conn.py::test_connect[states1] PASSED                          [ 77%]
[  667s] test/test_conn.py::test_connect[states2] PASSED                          [ 78%]
[  667s] test/test_conn.py::test_connect[states3] PASSED                          [ 78%]
[  667s] test/test_conn.py::test_connect[states4] PASSED                          [ 78%]
[  667s] test/test_conn.py::test_connect_timeout PASSED                           [ 78%]
[  667s] test/test_conn.py::test_blacked_out PASSED                               [ 78%]
[  667s] test/test_conn.py::test_connection_delay PASSED                          [ 78%]
[  667s] test/test_conn.py::test_connected PASSED                                 [ 78%]
[  667s] test/test_conn.py::test_connecting PASSED                                [ 78%]
[  668s] test/test_conn.py::test_send_disconnected PASSED                         [ 78%]
[  668s] test/test_conn.py::test_send_connecting PASSED                           [ 78%]
[  668s] test/test_conn.py::test_send_max_ifr PASSED                              [ 78%]
[  668s] test/test_conn.py::test_send_no_response PASSED                          [ 79%]
[  668s] test/test_conn.py::test_send_response PASSED                             [ 79%]
[  668s] test/test_conn.py::test_send_error PASSED                                [ 79%]
[  668s] test/test_conn.py::test_can_send_more PASSED                             [ 79%]
[  668s] test/test_conn.py::test_recv_disconnected PASSED                         [ 79%]
[  668s] test/test_conn.py::test_recv PASSED                                      [ 79%]
[  668s] test/test_conn.py::test_close PASSED                                     [ 79%]
[  668s] test/test_conn.py::test_collect_hosts__happy_path PASSED                 [ 79%]
[  668s] test/test_conn.py::test_collect_hosts__ipv6 PASSED                       [ 79%]
[  668s] test/test_conn.py::test_collect_hosts__string_list PASSED                [ 79%]
[  668s] test/test_conn.py::test_collect_hosts__with_spaces PASSED                [ 80%]
[  668s] test/test_conn.py::test_lookup_on_connect PASSED                         [ 80%]
[  668s] test/test_conn.py::test_relookup_on_failure PASSED                       [ 80%]
[  668s] test/test_conn.py::test_requests_timed_out PASSED                        [ 80%]
[  668s] test/test_consumer.py::TestKafkaConsumer::test_session_timeout_larger_than_request_timeout_raises PASSED [ 80%]
[  668s] test/test_consumer.py::TestKafkaConsumer::test_fetch_max_wait_larger_than_request_timeout_raises PASSED [ 80%]
[  668s] test/test_consumer.py::TestKafkaConsumer::test_request_timeout_larger_than_connections_max_idle_ms_raises PASSED [ 80%]
[  668s] test/test_consumer.py::TestKafkaConsumer::test_subscription_copy PASSED  [ 80%]
[  668s] test/test_consumer_group.py::test_consumer SKIPPED (No KAFKA_VERSION...) [ 80%]
[  668s] test/test_consumer_group.py::test_consumer_topics SKIPPED (No KAFKA_...) [ 80%]
[  668s] test/test_consumer_group.py::test_group SKIPPED (Unsupported Kafka V...) [ 80%]
[  668s] test/test_consumer_group.py::test_paused SKIPPED (No KAFKA_VERSION set)  [ 81%]
[  668s] test/test_consumer_group.py::test_heartbeat_thread SKIPPED (Unsuppor...) [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_version_infer SKIPPED      [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer SKIPPED (No K...) [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_unsupported_encoding SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer__blocking SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer__offset_commit_resume SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_simple SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_max_bytes_one_msg SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_time SKIPPED [ 81%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_offsets_search_many_partitions SKIPPED [ 82%]
[  668s] test/test_consumer_integration.py::test_kafka_consumer_offsets_for_times_errors SKIPPED [ 82%]
[  668s] test/test_coordinator.py::test_init PASSED                               [ 82%]
[  668s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version0] PASSED [ 82%]
[  668s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version1] PASSED [ 82%]
[  668s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version2] PASSED [ 82%]
[  668s] test/test_coordinator.py::test_autocommit_enable_api_version[api_version3] PASSED [ 82%]
[  668s] test/test_coordinator.py::test_protocol_type PASSED                      [ 82%]
[  668s] test/test_coordinator.py::test_group_protocols PASSED                    [ 82%]
[  668s] test/test_coordinator.py::test_pattern_subscription[api_version0] PASSED [ 82%]
[  669s] test/test_coordinator.py::test_pattern_subscription[api_version1] PASSED [ 82%]
[  669s] test/test_coordinator.py::test_pattern_subscription[api_version2] PASSED [ 83%]
[  669s] test/test_coordinator.py::test_pattern_subscription[api_version3] PASSED [ 83%]
[  669s] test/test_coordinator.py::test_lookup_assignor PASSED                    [ 83%]
[  669s] test/test_coordinator.py::test_join_complete PASSED                      [ 83%]
[  669s] test/test_coordinator.py::test_join_complete_with_sticky_assignor PASSED [ 83%]
[  669s] test/test_coordinator.py::test_subscription_listener PASSED              [ 83%]
[  669s] test/test_coordinator.py::test_subscription_listener_failure PASSED      [ 83%]
[  669s] test/test_coordinator.py::test_perform_assignment PASSED                 [ 83%]
[  669s] test/test_coordinator.py::test_on_join_prepare PASSED                    [ 83%]
[  669s] test/test_coordinator.py::test_need_rejoin PASSED                        [ 83%]
[  669s] test/test_coordinator.py::test_refresh_committed_offsets_if_needed PASSED [ 84%]
[  669s] test/test_coordinator.py::test_fetch_committed_offsets PASSED            [ 84%]
[  669s] test/test_coordinator.py::test_close PASSED                              [ 84%]
[  669s] test/test_coordinator.py::test_commit_offsets_async PASSED               [ 84%]
[  669s] test/test_coordinator.py::test_commit_offsets_sync PASSED                [ 84%]
[  669s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version0-foobar-True-None-False-False-True-False] PASSED [ 84%]
[  669s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version1-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version2-foobar-True-None-True-True-False-False] PASSED [ 84%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version3-foobar-False-None-False-False-False-False] PASSED [ 84%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version4-foobar-True-error4-True-True-True-False] PASSED [ 84%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version5-foobar-True-error5-True-True-True-False] PASSED [ 84%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version6-foobar-True-error6-True-True-True-False] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version7-foobar-True-error7-True-True-False-True] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version8-foobar-True-None-True-True-False-False] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_maybe_auto_commit_offsets_sync[api_version9-None-True-None-False-False-True-False] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_fail PASSED    [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version0-OffsetCommitRequest_v0] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version1-OffsetCommitRequest_v1] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_versions[api_version2-OffsetCommitRequest_v2] PASSED [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_failure PASSED [ 85%]
[  670s] test/test_coordinator.py::test_send_offset_commit_request_success PASSED [ 85%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response0-GroupAuthorizationFailedError-False] PASSED [ 85%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response1-OffsetMetadataTooLargeError-False] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response2-InvalidCommitOffsetSizeError-False] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response3-GroupLoadInProgressError-False] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response4-GroupCoordinatorNotAvailableError-True] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response5-NotCoordinatorForGroupError-True] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response6-RequestTimedOutError-True] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response7-CommitFailedError-False] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response8-CommitFailedError-False] PASSED [ 86%]
[  671s] test/test_coordinator.py::test_handle_offset_commit_response[response9-CommitFailedError-False] PASSED [ 86%]
[  672s] test/test_coordinator.py::test_handle_offset_commit_response[response10-InvalidTopicError-False] PASSED [ 86%]
[  672s] test/test_coordinator.py::test_handle_offset_commit_response[response11-TopicAuthorizationFailedError-False] PASSED [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_fail PASSED     [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version0-OffsetFetchRequest_v0] PASSED [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version1-OffsetFetchRequest_v1] PASSED [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_versions[api_version2-OffsetFetchRequest_v1] PASSED [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_failure PASSED  [ 87%]
[  672s] test/test_coordinator.py::test_send_offset_fetch_request_success PASSED  [ 87%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response0-GroupLoadInProgressError-False] PASSED [ 87%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response1-NotCoordinatorForGroupError-True] PASSED [ 87%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response2-UnknownMemberIdError-False] PASSED [ 87%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response3-IllegalGenerationError-False] PASSED [ 87%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response4-TopicAuthorizationFailedError-False] PASSED [ 88%]
[  673s] test/test_coordinator.py::test_handle_offset_fetch_response[response5-None-False] PASSED [ 88%]
[  673s] test/test_coordinator.py::test_heartbeat PASSED                          [ 88%]
[  673s] test/test_coordinator.py::test_lookup_coordinator_failure PASSED         [ 88%]
[  673s] test/test_coordinator.py::test_ensure_active_group PASSED                [ 88%]
[  673s] test/test_fetcher.py::test_send_fetches PASSED                           [ 88%]
[  673s] test/test_fetcher.py::test_create_fetch_requests[api_version0-3] PASSED  [ 88%]
[  673s] test/test_fetcher.py::test_create_fetch_requests[api_version1-2] PASSED  [ 88%]
[  673s] test/test_fetcher.py::test_create_fetch_requests[api_version2-1] PASSED  [ 88%]
[  673s] test/test_fetcher.py::test_create_fetch_requests[api_version3-0] PASSED  [ 88%]
[  673s] test/test_fetcher.py::test_update_fetch_positions PASSED                 [ 89%]
[  673s] test/test_fetcher.py::test__reset_offset PASSED                          [ 89%]
[  674s] test/test_fetcher.py::test__send_offset_requests PASSED                  [ 89%]
[  674s] test/test_fetcher.py::test__send_offset_requests_multiple_nodes PASSED   [ 89%]
[  674s] test/test_fetcher.py::test__handle_offset_response PASSED                [ 89%]
[  674s] test/test_fetcher.py::test_fetched_records PASSED                        [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request0-fetch_response0-1] PASSED [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request1-fetch_response1-2] PASSED [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request2-fetch_response2-1] PASSED [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request3-fetch_response3-1] PASSED [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request4-fetch_response4-1] PASSED [ 89%]
[  674s] test/test_fetcher.py::test__handle_fetch_response[fetch_request5-fetch_response5-1] PASSED [ 90%]
[  674s] test/test_fetcher.py::test__unpack_message_set PASSED                    [ 90%]
[  674s] test/test_fetcher.py::test__message_generator PASSED                     [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data PASSED                    [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data__paused PASSED            [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data__stale_offset PASSED      [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data__not_leader PASSED        [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data__unknown_tp PASSED        [ 90%]
[  674s] test/test_fetcher.py::test__parse_fetched_data__out_of_range PASSED      [ 90%]
[  674s] test/test_fetcher.py::test_partition_records_offset PASSED               [ 90%]
[  674s] test/test_fetcher.py::test_partition_records_empty PASSED                [ 91%]
[  674s] test/test_fetcher.py::test_partition_records_no_fetch_offset PASSED      [ 91%]
[  674s] test/test_fetcher.py::test_partition_records_compacted_offset PASSED     [ 91%]
[  674s] test/test_metrics.py::test_MetricName PASSED                             [ 91%]
[  674s] test/test_metrics.py::test_simple_stats PASSED                           [ 91%]
[  674s] test/test_metrics.py::test_hierarchical_sensors PASSED                   [ 91%]
[  674s] test/test_metrics.py::test_bad_sensor_hierarchy PASSED                   [ 91%]
[  674s] test/test_metrics.py::test_remove_sensor PASSED                          [ 91%]
[  674s] test/test_metrics.py::test_remove_inactive_metrics PASSED                [ 91%]
[  674s] test/test_metrics.py::test_remove_metric PASSED                          [ 91%]
[  674s] test/test_metrics.py::test_event_windowing PASSED                        [ 91%]
[  674s] test/test_metrics.py::test_time_windowing PASSED                         [ 92%]
[  674s] test/test_metrics.py::test_old_data_has_no_effect PASSED                 [ 92%]
[  674s] test/test_metrics.py::test_duplicate_MetricName PASSED                   [ 92%]
[  674s] test/test_metrics.py::test_Quotas PASSED                                 [ 92%]
[  674s] test/test_metrics.py::test_Quotas_equality PASSED                        [ 92%]
[  674s] test/test_metrics.py::test_Percentiles PASSED                            [ 92%]
[  674s] test/test_metrics.py::test_rate_windowing PASSED                         [ 92%]
[  674s] test/test_metrics.py::test_reporter PASSED                               [ 92%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Request] PASSED [ 92%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_get_item[Response] PASSED [ 92%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Request] PASSED [ 92%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_empty_schema[Response] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Request] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_schema[Response] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Request] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_basic_array_schema[Response] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Request] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_array_schema[Response] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Request] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_array_and_other[Response] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Request] PASSED [ 93%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_nested_array[Response] PASSED [ 94%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Request] PASSED [ 94%]
[  674s] test/test_object_conversion.py::TestObjectConversion::test_with_complex_nested_array[Response] PASSED [ 94%]
[  674s] test/test_object_conversion.py::test_with_metadata_response PASSED       [ 94%]
[  675s] test/test_package.py::TestPackage::test_top_level_namespace PASSED       [ 94%]
[  675s] test/test_package.py::TestPackage::test_submodule_namespace PASSED       [ 94%]
[  675s] test/test_partition_movements.py::test_empty_movements_are_sticky PASSED [ 94%]
[  675s] test/test_partition_movements.py::test_sticky_movements PASSED           [ 94%]
[  675s] test/test_partition_movements.py::test_should_detect_non_sticky_assignment PASSED [ 94%]
[  675s] test/test_partitioner.py::test_default_partitioner PASSED                [ 94%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[-681] PASSED   [ 94%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[a-524] PASSED  [ 95%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[ab-434] PASSED [ 95%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[abc-107] PASSED [ 95%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[123456789-566] PASSED [ 95%]
[  675s] test/test_partitioner.py::test_murmur2_java_compatibility[\x00 -742] PASSED [ 95%]
[  675s] test/test_partitioner.py::test_murmur2_not_ascii PASSED                  [ 95%]
[  675s] test/test_producer.py::test_buffer_pool PASSED                           [ 95%]
[  675s] test/test_producer.py::test_end_to_end[None] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  675s] test/test_producer.py::test_end_to_end[gzip] SKIPPED (No KAFKA_VERSI...) [ 95%]
[  675s] test/test_producer.py::test_end_to_end[snappy] SKIPPED (No KAFKA_VER...) [ 95%]
[  675s] test/test_producer.py::test_end_to_end[lz4] SKIPPED (No KAFKA_VERSIO...) [ 96%]
[  675s] test/test_producer.py::test_end_to_end[zstd] SKIPPED (No KAFKA_VERSI...) [ 96%]
[  675s] test/test_producer.py::test_kafka_producer_proper_record_metadata[None] SKIPPED [ 96%]
[  675s] test/test_producer.py::test_kafka_producer_proper_record_metadata[gzip] SKIPPED [ 96%]
[  675s] test/test_producer.py::test_kafka_producer_proper_record_metadata[snappy] SKIPPED [ 96%]
[  675s] test/test_producer.py::test_kafka_producer_proper_record_metadata[lz4] SKIPPED [ 96%]
[  675s] test/test_producer.py::test_kafka_producer_proper_record_metadata[zstd] SKIPPED [ 96%]
[  675s] test/test_protocol.py::test_create_message PASSED                        [ 96%]
[  675s] test/test_protocol.py::test_encode_message_v0 PASSED                     [ 96%]
[  675s] test/test_protocol.py::test_encode_message_v1 PASSED                     [ 96%]
[  675s] test/test_protocol.py::test_decode_message PASSED                        [ 96%]
[  675s] test/test_protocol.py::test_decode_message_validate_crc PASSED           [ 97%]
[  675s] test/test_protocol.py::test_encode_message_set PASSED                    [ 97%]
[  675s] test/test_protocol.py::test_decode_message_set PASSED                    [ 97%]
[  675s] test/test_protocol.py::test_encode_message_header PASSED                 [ 97%]
[  675s] test/test_protocol.py::test_decode_message_set_partial PASSED            [ 97%]
[  675s] test/test_protocol.py::test_decode_fetch_response_partial PASSED         [ 97%]
[  675s] test/test_protocol.py::test_struct_unrecognized_kwargs PASSED            [ 97%]
[  675s] test/test_protocol.py::test_struct_missing_kwargs PASSED                 [ 97%]
[  675s] test/test_sasl_integration.py::test_admin[PLAIN] SKIPPED (Requires K...) [ 97%]
[  675s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-256] SKIPPED (Re...) [ 97%]
[  675s] test/test_sasl_integration.py::test_admin[SCRAM-SHA-512] SKIPPED (Re...) [ 98%]
[  675s] test/test_sasl_integration.py::test_produce_and_consume[PLAIN] SKIPPED   [ 98%]
[  675s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-256] SKIPPED [ 98%]
[  675s] test/test_sasl_integration.py::test_produce_and_consume[SCRAM-SHA-512] SKIPPED [ 98%]
[  675s] test/test_sasl_integration.py::test_client[PLAIN] SKIPPED (Requires ...) [ 98%]
[  675s] test/test_sasl_integration.py::test_client[SCRAM-SHA-256] SKIPPED (R...) [ 98%]
[  675s] test/test_sasl_integration.py::test_client[SCRAM-SHA-512] SKIPPED (R...) [ 98%]
[  675s] test/test_sender.py::test_produce_request[api_version0-2] PASSED         [ 98%]
[  675s] test/test_sender.py::test_produce_request[api_version1-1] PASSED         [ 98%]
[  675s] test/test_sender.py::test_produce_request[api_version2-0] PASSED         [ 98%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[0-expectation0] PASSED [ 98%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[None-expectation1] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[-expectation2] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[.-expectation3] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[..-expectation4] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-expectation5] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[abc/123-expectation6] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[/abc/123-expectation7] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[/abc123-expectation8] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[name with space-expectation9] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[name*with*stars-expectation10] PASSED [ 99%]
[  675s] test/test_subscription_state.py::test_topic_name_validation[name+with+plus-expectation11] PASSED [100%]
[  675s] 
[  675s] =================================== FAILURES ===================================
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[0-10-28] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b42d90>
[  675s] execution_number = 0, n_topics = 10, n_consumers = 28
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 7
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[1-19-28] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005048f50>
[  675s] execution_number = 1, n_topics = 19, n_consumers = 28
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 17
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[2-20-35] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053b2990>
[  675s] execution_number = 2, n_topics = 20, n_consumers = 35
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 1
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[3-13-22] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054aef90>
[  675s] execution_number = 3, n_topics = 13, n_consumers = 22
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 1
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[4-15-26] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005353f50>
[  675s] execution_number = 4, n_topics = 15, n_consumers = 26
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 5
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[5-18-27] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40052f7910>
[  675s] execution_number = 5, n_topics = 18, n_consumers = 27
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 15
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[6-16-25] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005716dd0>
[  675s] execution_number = 6, n_topics = 16, n_consumers = 25
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 15
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[7-17-36] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400557dcd0>
[  675s] execution_number = 7, n_topics = 17, n_consumers = 36
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[8-18-29] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005432010>
[  675s] execution_number = 8, n_topics = 18, n_consumers = 29
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 13
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] _______ test_reassignment_with_random_subscriptions_and_changes[9-15-39] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400554d710>
[  675s] execution_number = 9, n_topics = 15, n_consumers = 39
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 8
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[10-12-26] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400530e5d0>
[  675s] execution_number = 10, n_topics = 12, n_consumers = 26
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 5
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[11-19-27] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053888d0>
[  675s] execution_number = 11, n_topics = 19, n_consumers = 27
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 5
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[12-17-34] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005401550>
[  675s] execution_number = 12, n_topics = 17, n_consumers = 34
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[13-14-25] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b30310>
[  675s] execution_number = 13, n_topics = 14, n_consumers = 25
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 3
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[14-15-24] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400537fd90>
[  675s] execution_number = 14, n_topics = 15, n_consumers = 24
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 7
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[15-14-25] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054f27d0>
[  675s] execution_number = 15, n_topics = 14, n_consumers = 25
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 7
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[16-10-40] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005706590>
[  675s] execution_number = 16, n_topics = 10, n_consumers = 40
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 9
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[17-11-31] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005566c90>
[  675s] execution_number = 17, n_topics = 11, n_consumers = 31
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 10
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[18-17-24] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005350490>
[  675s] execution_number = 18, n_topics = 17, n_consumers = 24
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[19-10-32] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005e57510>
[  675s] execution_number = 19, n_topics = 10, n_consumers = 32
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 4
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  675s] ______ test_reassignment_with_random_subscriptions_and_changes[20-13-34] _______
[  675s] 
[  675s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054a7990>
[  675s] execution_number = 20, n_topics = 13, n_consumers = 34
[  675s] 
[  675s]     @pytest.mark.parametrize(
[  675s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  675s]     )
[  675s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  675s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  675s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  675s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  675s]     
[  675s]         subscriptions = defaultdict(set)
[  675s]         for i in range(n_consumers):
[  675s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  675s] 
[  675s] test/test_assignors.py:664: 
[  675s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  675s] 
[  675s] self = <random.Random object at 0x4000111210>
[  675s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 12
[  675s] 
[  675s]     def sample(self, population, k, *, counts=None):
[  675s]         """Chooses k unique random elements from a population sequence.
[  675s]     
[  675s]         Returns a new list containing elements from the population while
[  675s]         leaving the original population unchanged.  The resulting list is
[  675s]         in selection order so that all sub-slices will also be valid random
[  675s]         samples.  This allows raffle winners (the sample) to be partitioned
[  675s]         into grand prize and second place winners (the subslices).
[  675s]     
[  675s]         Members of the population need not be hashable or unique.  If the
[  675s]         population contains repeats, then each occurrence is a possible
[  675s]         selection in the sample.
[  675s]     
[  675s]         Repeated elements can be specified one at a time or with the optional
[  675s]         counts parameter.  For example:
[  675s]     
[  675s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  675s]     
[  675s]         is equivalent to:
[  675s]     
[  675s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  675s]     
[  675s]         To choose a sample from a range of integers, use range() for the
[  675s]         population argument.  This is especially fast and space efficient
[  675s]         for sampling from a large population:
[  675s]     
[  675s]             sample(range(10000000), 60)
[  675s]     
[  675s]         """
[  675s]     
[  675s]         # Sampling without replacement entails tracking either potential
[  675s]         # selections (the pool) in a list or previous selections in a set.
[  675s]     
[  675s]         # When the number of selections is small compared to the
[  675s]         # population, then tracking selections is efficient, requiring
[  675s]         # only a small set and an occasional reselection.  For
[  675s]         # a larger number of selections, the pool tracking method is
[  675s]         # preferred since the list takes less space than the
[  675s]         # set and it doesn't suffer from frequent reselections.
[  675s]     
[  675s]         # The number of calls to _randbelow() is kept at or near k, the
[  675s]         # theoretical minimum.  This is important because running time
[  675s]         # is dominated by _randbelow() and because it extracts the
[  675s]         # least entropy from the underlying random number generators.
[  675s]     
[  675s]         # Memory requirements are kept to the smaller of a k-length
[  675s]         # set or an n-length list.
[  675s]     
[  675s]         # There are other sampling algorithms that do not require
[  675s]         # auxiliary memory, but they were rejected because they made
[  675s]         # too many calls to _randbelow(), making them slower and
[  675s]         # causing them to eat more entropy than necessary.
[  675s]     
[  675s]         if not isinstance(population, _Sequence):
[  675s] >           raise TypeError("Population must be a sequence.  "
[  675s]                             "For dicts or sets, use sorted(d).")
[  675s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  675s] 
[  675s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[21-14-24] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40055c43d0>
[  676s] execution_number = 21, n_topics = 14, n_consumers = 24
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[22-12-36] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005445d10>
[  676s] execution_number = 22, n_topics = 12, n_consumers = 36
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[23-18-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005871190>
[  676s] execution_number = 23, n_topics = 18, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[24-18-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40051c4f10>
[  676s] execution_number = 24, n_topics = 18, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[25-20-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053b3c10>
[  676s] execution_number = 25, n_topics = 20, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[26-19-25] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005670210>
[  676s] execution_number = 26, n_topics = 19, n_consumers = 25
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 11
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[27-13-39] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053c7f50>
[  676s] execution_number = 27, n_topics = 13, n_consumers = 39
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[28-17-34] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40055ec150>
[  676s] execution_number = 28, n_topics = 17, n_consumers = 34
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 16
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[29-18-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053800d0>
[  676s] execution_number = 29, n_topics = 18, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 2
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[30-12-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400558da90>
[  676s] execution_number = 30, n_topics = 12, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[31-17-20] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400540ef90>
[  676s] execution_number = 31, n_topics = 17, n_consumers = 20
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[32-12-23] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005383a50>
[  676s] execution_number = 32, n_topics = 12, n_consumers = 23
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[33-19-26] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400503a810>
[  676s] execution_number = 33, n_topics = 19, n_consumers = 26
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[34-13-23] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056c3250>
[  676s] execution_number = 34, n_topics = 13, n_consumers = 23
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[35-12-22] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b30c10>
[  676s] execution_number = 35, n_topics = 12, n_consumers = 22
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[36-20-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056a7210>
[  676s] execution_number = 36, n_topics = 20, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 18
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[37-14-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005695a10>
[  676s] execution_number = 37, n_topics = 14, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[38-20-36] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005039710>
[  676s] execution_number = 38, n_topics = 20, n_consumers = 36
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[39-19-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053be4d0>
[  676s] execution_number = 39, n_topics = 19, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[40-16-29] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40055ef7d0>
[  676s] execution_number = 40, n_topics = 16, n_consumers = 29
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[41-17-21] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005324890>
[  676s] execution_number = 41, n_topics = 17, n_consumers = 21
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[42-10-27] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005564050>
[  676s] execution_number = 42, n_topics = 10, n_consumers = 27
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[43-12-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005e5d090>
[  676s] execution_number = 43, n_topics = 12, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[44-12-22] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40057158d0>
[  676s] execution_number = 44, n_topics = 12, n_consumers = 22
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[45-10-27] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005512110>
[  676s] execution_number = 45, n_topics = 10, n_consumers = 27
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[46-11-25] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b31510>
[  676s] execution_number = 46, n_topics = 11, n_consumers = 25
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[47-16-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400552f850>
[  676s] execution_number = 47, n_topics = 16, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[48-20-36] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053cd790>
[  676s] execution_number = 48, n_topics = 20, n_consumers = 36
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[49-11-33] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056a6290>
[  676s] execution_number = 49, n_topics = 11, n_consumers = 33
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 5
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[50-19-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054a5ad0>
[  676s] execution_number = 50, n_topics = 19, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 15
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[51-13-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005513c10>
[  676s] execution_number = 51, n_topics = 13, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[52-11-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056d59d0>
[  676s] execution_number = 52, n_topics = 11, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 9
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[53-19-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054a7e10>
[  676s] execution_number = 53, n_topics = 19, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[54-14-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400554ddd0>
[  676s] execution_number = 54, n_topics = 14, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[55-15-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056dc690>
[  676s] execution_number = 55, n_topics = 15, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[56-12-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400573e010>
[  676s] execution_number = 56, n_topics = 12, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[57-18-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054308d0>
[  676s] execution_number = 57, n_topics = 18, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 17
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[58-16-39] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005351450>
[  676s] execution_number = 58, n_topics = 16, n_consumers = 39
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[59-17-22] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400558f010>
[  676s] execution_number = 59, n_topics = 17, n_consumers = 22
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[60-17-30] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005823550>
[  676s] execution_number = 60, n_topics = 17, n_consumers = 30
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[61-18-39] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005673910>
[  676s] execution_number = 61, n_topics = 18, n_consumers = 39
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 11
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[62-12-20] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b2e950>
[  676s] execution_number = 62, n_topics = 12, n_consumers = 20
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[63-10-22] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b17bd0>
[  676s] execution_number = 63, n_topics = 10, n_consumers = 22
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[64-13-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40055d7350>
[  676s] execution_number = 64, n_topics = 13, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[65-15-40] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054a4a50>
[  676s] execution_number = 65, n_topics = 15, n_consumers = 40
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[66-10-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005510190>
[  676s] execution_number = 66, n_topics = 10, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 2
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[67-15-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053538d0>
[  676s] execution_number = 67, n_topics = 15, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[68-16-33] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005e5dd10>
[  676s] execution_number = 68, n_topics = 16, n_consumers = 33
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[69-18-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005388110>
[  676s] execution_number = 69, n_topics = 18, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[70-14-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005431490>
[  676s] execution_number = 70, n_topics = 14, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 2
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[71-11-23] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053ce310>
[  676s] execution_number = 71, n_topics = 11, n_consumers = 23
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[72-18-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b40a10>
[  676s] execution_number = 72, n_topics = 18, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[73-15-25] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054903d0>
[  676s] execution_number = 73, n_topics = 15, n_consumers = 25
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[74-10-23] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005452010>
[  676s] execution_number = 74, n_topics = 10, n_consumers = 23
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[75-12-23] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005e5f190>
[  676s] execution_number = 75, n_topics = 12, n_consumers = 23
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 7
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[76-19-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b15010>
[  676s] execution_number = 76, n_topics = 19, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[77-19-39] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053be7d0>
[  676s] execution_number = 77, n_topics = 19, n_consumers = 39
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 5
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[78-13-30] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400517cd10>
[  676s] execution_number = 78, n_topics = 13, n_consumers = 30
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[79-16-38] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005672190>
[  676s] execution_number = 79, n_topics = 16, n_consumers = 38
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[80-19-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400538a710>
[  676s] execution_number = 80, n_topics = 19, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 3
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[81-17-36] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400540c690>
[  676s] execution_number = 81, n_topics = 17, n_consumers = 36
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 16
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[82-11-22] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400540c250>
[  676s] execution_number = 82, n_topics = 11, n_consumers = 22
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't2', 't3', 't4', ...}, k = 10
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[83-17-21] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400552d890>
[  676s] execution_number = 83, n_topics = 17, n_consumers = 21
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 12
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[84-12-31] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40043ded90>
[  676s] execution_number = 84, n_topics = 12, n_consumers = 31
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[85-18-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056c0390>
[  676s] execution_number = 85, n_topics = 18, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[86-14-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053b13d0>
[  676s] execution_number = 86, n_topics = 14, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 2
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[87-10-36] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40055d4a10>
[  676s] execution_number = 87, n_topics = 10, n_consumers = 36
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[88-12-29] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400538a490>
[  676s] execution_number = 88, n_topics = 12, n_consumers = 29
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't2', 't3', ...}, k = 2
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[89-13-32] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40043d2b10>
[  676s] execution_number = 89, n_topics = 13, n_consumers = 32
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[90-14-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005b2e950>
[  676s] execution_number = 90, n_topics = 14, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 1
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[91-13-37] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005456a90>
[  676s] execution_number = 91, n_topics = 13, n_consumers = 37
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't2', ...}, k = 8
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[92-20-20] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40056fb510>
[  676s] execution_number = 92, n_topics = 20, n_consumers = 20
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[93-14-26] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054f3390>
[  676s] execution_number = 93, n_topics = 14, n_consumers = 26
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[94-19-35] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40058903d0>
[  676s] execution_number = 94, n_topics = 19, n_consumers = 35
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[95-10-33] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054b6d50>
[  676s] execution_number = 95, n_topics = 10, n_consumers = 33
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[96-16-33] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40054a4890>
[  676s] execution_number = 96, n_topics = 16, n_consumers = 33
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 6
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[97-20-28] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x400552f1d0>
[  676s] execution_number = 97, n_topics = 20, n_consumers = 28
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 19
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  676s]         # a larger number of selections, the pool tracking method is
[  676s]         # preferred since the list takes less space than the
[  676s]         # set and it doesn't suffer from frequent reselections.
[  676s]     
[  676s]         # The number of calls to _randbelow() is kept at or near k, the
[  676s]         # theoretical minimum.  This is important because running time
[  676s]         # is dominated by _randbelow() and because it extracts the
[  676s]         # least entropy from the underlying random number generators.
[  676s]     
[  676s]         # Memory requirements are kept to the smaller of a k-length
[  676s]         # set or an n-length list.
[  676s]     
[  676s]         # There are other sampling algorithms that do not require
[  676s]         # auxiliary memory, but they were rejected because they made
[  676s]         # too many calls to _randbelow(), making them slower and
[  676s]         # causing them to eat more entropy than necessary.
[  676s]     
[  676s]         if not isinstance(population, _Sequence):
[  676s] >           raise TypeError("Population must be a sequence.  "
[  676s]                             "For dicts or sets, use sorted(d).")
[  676s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  676s] 
[  676s] /usr/lib64/python3.11/random.py:436: TypeError
[  676s] ______ test_reassignment_with_random_subscriptions_and_changes[98-16-28] _______
[  676s] 
[  676s] mocker = <pytest_mock.plugin.MockerFixture object at 0x4005450f50>
[  676s] execution_number = 98, n_topics = 16, n_consumers = 28
[  676s] 
[  676s]     @pytest.mark.parametrize(
[  676s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  676s]     )
[  676s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  676s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  676s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  676s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  676s]     
[  676s]         subscriptions = defaultdict(set)
[  676s]         for i in range(n_consumers):
[  676s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  676s] 
[  676s] test/test_assignors.py:664: 
[  676s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  676s] 
[  676s] self = <random.Random object at 0x4000111210>
[  676s] population = {'t1', 't10', 't11', 't12', 't13', 't14', ...}, k = 4
[  676s] 
[  676s]     def sample(self, population, k, *, counts=None):
[  676s]         """Chooses k unique random elements from a population sequence.
[  676s]     
[  676s]         Returns a new list containing elements from the population while
[  676s]         leaving the original population unchanged.  The resulting list is
[  676s]         in selection order so that all sub-slices will also be valid random
[  676s]         samples.  This allows raffle winners (the sample) to be partitioned
[  676s]         into grand prize and second place winners (the subslices).
[  676s]     
[  676s]         Members of the population need not be hashable or unique.  If the
[  676s]         population contains repeats, then each occurrence is a possible
[  676s]         selection in the sample.
[  676s]     
[  676s]         Repeated elements can be specified one at a time or with the optional
[  676s]         counts parameter.  For example:
[  676s]     
[  676s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  676s]     
[  676s]         is equivalent to:
[  676s]     
[  676s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  676s]     
[  676s]         To choose a sample from a range of integers, use range() for the
[  676s]         population argument.  This is especially fast and space efficient
[  676s]         for sampling from a large population:
[  676s]     
[  676s]             sample(range(10000000), 60)
[  676s]     
[  676s]         """
[  676s]     
[  676s]         # Sampling without replacement entails tracking either potential
[  676s]         # selections (the pool) in a list or previous selections in a set.
[  676s]     
[  676s]         # When the number of selections is small compared to the
[  676s]         # population, then tracking selections is efficient, requiring
[  676s]         # only a small set and an occasional reselection.  For
[  677s]         # a larger number of selections, the pool tracking method is
[  677s]         # preferred since the list takes less space than the
[  677s]         # set and it doesn't suffer from frequent reselections.
[  677s]     
[  677s]         # The number of calls to _randbelow() is kept at or near k, the
[  677s]         # theoretical minimum.  This is important because running time
[  677s]         # is dominated by _randbelow() and because it extracts the
[  677s]         # least entropy from the underlying random number generators.
[  677s]     
[  677s]         # Memory requirements are kept to the smaller of a k-length
[  677s]         # set or an n-length list.
[  677s]     
[  677s]         # There are other sampling algorithms that do not require
[  677s]         # auxiliary memory, but they were rejected because they made
[  677s]         # too many calls to _randbelow(), making them slower and
[  677s]         # causing them to eat more entropy than necessary.
[  677s]     
[  677s]         if not isinstance(population, _Sequence):
[  677s] >           raise TypeError("Population must be a sequence.  "
[  677s]                             "For dicts or sets, use sorted(d).")
[  677s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  677s] 
[  677s] /usr/lib64/python3.11/random.py:436: TypeError
[  677s] ______ test_reassignment_with_random_subscriptions_and_changes[99-10-31] _______
[  677s] 
[  677s] mocker = <pytest_mock.plugin.MockerFixture object at 0x40053cf390>
[  677s] execution_number = 99, n_topics = 10, n_consumers = 31
[  677s] 
[  677s]     @pytest.mark.parametrize(
[  677s]         'execution_number,n_topics,n_consumers', [(i, randint(10, 20), randint(20, 40)) for i in range(100)]
[  677s]     )
[  677s]     def test_reassignment_with_random_subscriptions_and_changes(mocker, execution_number, n_topics, n_consumers):
[  677s]         all_topics = set(['t{}'.format(i) for i in range(1, n_topics + 1)])
[  677s]         partitions = dict([(t, set(range(1, i + 1))) for i, t in enumerate(all_topics)])
[  677s]         cluster = create_cluster(mocker, topics=all_topics, topic_partitions_lambda=lambda t: partitions[t])
[  677s]     
[  677s]         subscriptions = defaultdict(set)
[  677s]         for i in range(n_consumers):
[  677s] >           topics_sample = sample(all_topics, randint(1, len(all_topics) - 1))
[  677s] 
[  677s] test/test_assignors.py:664: 
[  677s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  677s] 
[  677s] self = <random.Random object at 0x4000111210>
[  677s] population = {'t1', 't10', 't2', 't3', 't4', 't5', ...}, k = 4
[  677s] 
[  677s]     def sample(self, population, k, *, counts=None):
[  677s]         """Chooses k unique random elements from a population sequence.
[  677s]     
[  677s]         Returns a new list containing elements from the population while
[  677s]         leaving the original population unchanged.  The resulting list is
[  677s]         in selection order so that all sub-slices will also be valid random
[  677s]         samples.  This allows raffle winners (the sample) to be partitioned
[  677s]         into grand prize and second place winners (the subslices).
[  677s]     
[  677s]         Members of the population need not be hashable or unique.  If the
[  677s]         population contains repeats, then each occurrence is a possible
[  677s]         selection in the sample.
[  677s]     
[  677s]         Repeated elements can be specified one at a time or with the optional
[  677s]         counts parameter.  For example:
[  677s]     
[  677s]             sample(['red', 'blue'], counts=[4, 2], k=5)
[  677s]     
[  677s]         is equivalent to:
[  677s]     
[  677s]             sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)
[  677s]     
[  677s]         To choose a sample from a range of integers, use range() for the
[  677s]         population argument.  This is especially fast and space efficient
[  677s]         for sampling from a large population:
[  677s]     
[  677s]             sample(range(10000000), 60)
[  677s]     
[  677s]         """
[  677s]     
[  677s]         # Sampling without replacement entails tracking either potential
[  677s]         # selections (the pool) in a list or previous selections in a set.
[  677s]     
[  677s]         # When the number of selections is small compared to the
[  677s]         # population, then tracking selections is efficient, requiring
[  677s]         # only a small set and an occasional reselection.  For
[  677s]         # a larger number of selections, the pool tracking method is
[  677s]         # preferred since the list takes less space than the
[  677s]         # set and it doesn't suffer from frequent reselections.
[  677s]     
[  677s]         # The number of calls to _randbelow() is kept at or near k, the
[  677s]         # theoretical minimum.  This is important because running time
[  677s]         # is dominated by _randbelow() and because it extracts the
[  677s]         # least entropy from the underlying random number generators.
[  677s]     
[  677s]         # Memory requirements are kept to the smaller of a k-length
[  677s]         # set or an n-length list.
[  677s]     
[  677s]         # There are other sampling algorithms that do not require
[  677s]         # auxiliary memory, but they were rejected because they made
[  677s]         # too many calls to _randbelow(), making them slower and
[  677s]         # causing them to eat more entropy than necessary.
[  677s]     
[  677s]         if not isinstance(population, _Sequence):
[  677s] >           raise TypeError("Population must be a sequence.  "
[  677s]                             "For dicts or sets, use sorted(d).")
[  677s] E           TypeError: Population must be a sequence.  For dicts or sets, use sorted(d).
[  677s] 
[  677s] /usr/lib64/python3.11/random.py:436: TypeError
[  677s] =========================== short test summary info ============================
[  677s] SKIPPED [1] test/test_admin_integration.py:13: ACL features require broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:89: Describe config features require broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:102: Describe config features require broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:117: Describe config features require broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:136: Describe config features require broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:146: Describe consumer group requires broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:154: Describe consumer group requires broker >=0.11
[  677s] SKIPPED [1] test/test_admin_integration.py:243: Delete consumer groups requires broker >=1.1
[  677s] SKIPPED [1] test/test_admin_integration.py:282: Delete consumer groups requires broker >=1.1
[  677s] SKIPPED [1] test/test_consumer_group.py:21: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_group.py:33: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_group.py:43: Unsupported Kafka Version
[  677s] SKIPPED [1] test/test_consumer_group.py:133: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_group.py:152: Unsupported Kafka Version
[  677s] SKIPPED [1] test/test_consumer_integration.py:18: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_integration.py:29: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_integration.py:48: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_integration.py:66: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_consumer_integration.py:105: Requires KAFKA_VERSION >= 0.8.1
[  677s] SKIPPED [1] test/test_consumer_integration.py:149: Requires KAFKA_VERSION >= 0.10.1
[  677s] SKIPPED [1] test/test_consumer_integration.py:168: Requires KAFKA_VERSION >= 0.10.1
[  677s] SKIPPED [1] test/test_consumer_integration.py:194: Requires KAFKA_VERSION >= 0.10.1
[  677s] SKIPPED [1] test/test_consumer_integration.py:243: Requires KAFKA_VERSION >= 0.10.1
[  677s] SKIPPED [1] test/test_consumer_integration.py:290: Requires KAFKA_VERSION >= 0.10.1
[  677s] SKIPPED [5] test/test_producer.py:25: No KAFKA_VERSION set
[  677s] SKIPPED [5] test/test_producer.py:83: No KAFKA_VERSION set
[  677s] SKIPPED [1] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10
[  677s] SKIPPED [2] test/test_sasl_integration.py:32: Requires KAFKA_VERSION >= 0.10.2
[  677s] SKIPPED [1] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10
[  677s] SKIPPED [2] test/test_sasl_integration.py:39: Requires KAFKA_VERSION >= 0.10.2
[  677s] SKIPPED [1] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10
[  677s] SKIPPED [2] test/test_sasl_integration.py:66: Requires KAFKA_VERSION >= 0.10.2
[  677s] ==== 100 failed, 914 passed, 43 skipped, 2 deselected in 120.51s (0:02:00) =====
[  677s] error: Bad exit status from /var/tmp/rpm-tmp.Rx4teJ (%check)
[  677s] 
[  677s] RPM build errors:
[  677s]     Bad exit status from /var/tmp/rpm-tmp.Rx4teJ (%check)
[  677s] ### VM INTERACTION START ###
[  678s] [  670.984320][    T1] sysrq: Power Off
[  678s] [  670.986721][  T269] reboot: Power down
[  678s] ### VM INTERACTION END ###
[  678s] 
[  678s] old-cirrus1 failed "build python-kafka-python.spec" at Sun Feb 19 23:04:29 UTC 2023.
[  678s] 
