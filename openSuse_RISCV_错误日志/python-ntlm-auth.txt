[    0s] Using BUILD_ROOT=/var/cache/obs/worker/root_23/.mount
[    0s] Using BUILD_ARCH=riscv64
[    0s] Doing kvm build in /var/cache/obs/worker/root_23/root
[    0s] 
[    0s] 
[    0s] old-cirrus1 started "build python-ntlm-auth.spec" at Sun Feb 19 07:11:50 UTC 2023.
[    0s] 
[    0s] Building python-ntlm-auth for project 'openSUSE:Factory:RISCV' repository 'standard' arch 'riscv64' srcmd5 '4701bdd2fb842912bf82d820d979b61e'
[    0s] 
[    0s] processing recipe /var/cache/obs/worker/root_23/.build-srcdir/python-ntlm-auth.spec ...
[    0s] running changelog2spec --target rpm --file /var/cache/obs/worker/root_23/.build-srcdir/python-ntlm-auth.spec
[    0s] init_buildsystem --configdir /var/run/obs/worker/23/build/configs --cachedir /var/cache/build --prepare --clean --rpmlist /var/cache/obs/worker/root_23/.build.rpmlist /var/cache/obs/worker/root_23/.build-srcdir/python-ntlm-auth.spec build ...
[    1s] unpacking preinstall image openSUSE:Factory:RISCV/standard/preinstallimage-python [83160fede3a282f635470653fe6cebf8]
[    5s] 
[    5s] copying packages...
[    6s] reordering...done
[    6s] Detected virtio-serial support
[    7s] booting kvm...
[    7s] ### VM INTERACTION START ###
[    7s] Using virtio-serial support
[    7s] /usr/bin/qemu-kvm -nodefaults -no-reboot -nographic -vga none -cpu host -M pc,accel=kvm,usb=off,dump-guest-core=off,vmport=off -sandbox on -bios /usr/share/qemu/qboot.rom -object rng-random,filename=/dev/random,id=rng0 -device virtio-rng-pci,rng=rng0 -object iothread,id=io0 -runas qemu -net none -kernel /var/cache/obs/worker/root_23/.mount/boot/kernel -initrd /var/cache/obs/worker/root_23/.mount/boot/initrd -append root=/dev/disk/by-id/virtio-0 rootfstype=ext4 rootflags=noatime kvmclock mitigations=off elevator=noop nmi_watchdog=0 rw rd.driver.pre=binfmt_misc oops=panic panic=1 quiet console=hvc0 init=/.build/initvm.x86_64 -m 8192 -drive file=/var/cache/obs/worker/root_23/root,format=raw,if=none,id=disk,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=disk,serial=0 -drive file=/var/cache/obs/worker/root_23/swap,format=raw,if=none,id=swap,cache=unsafe,aio=io_uring -device virtio-blk-pci,iothread=io0,drive=swap,serial=1 -device virtio-serial,max_ports=2 -device virtconsole,chardev=virtiocon0 -chardev stdio,id=virtiocon0 -chardev socket,id=monitor,server=on,wait=off,path=/var/cache/obs/worker/root_23/root.qemu/monitor -mon chardev=monitor,mode=readline -smp 4
[   12s] ### VM INTERACTION END ###
[   12s] 2nd stage started in virtual machine
[   13s] machine type: riscv64
[   13s] Linux version: 6.1.12-1-default #1 SMP PREEMPT_DYNAMIC Wed Feb 15 05:31:41 UTC 2023 (373f017)
[   13s] Increasing log level from now on...
[   13s] [    5.154094][  T368] sysrq: Changing Loglevel
[   13s] [    5.154243][  T368] sysrq: Loglevel set to 4
[   13s] Enable sysrq operations
[   13s] Setting up swapspace version 1, size = 2 GiB (2147479552 bytes)
[   13s] no label, UUID=64e11c76-f37d-460d-b787-f9c154f2c277
[   14s] swapon: /dev/vdb: found signature [pagesize=4096, signature=swap]
[   14s] swapon: /dev/vdb: pagesize=4096, swapsize=2147483648, devsize=2147483648
[   14s] swapon /dev/vdb
[   14s] WARNING: udev not running, creating extra device nodes
[   14s] logging output to //.build.log...
[   15s] processing recipe /.build-srcdir/python-ntlm-auth.spec ...
[   15s] init_buildsystem --configdir /.build/configs --cachedir /var/cache/build /.build-srcdir/python-ntlm-auth.spec build ...
[   15s] initializing rpm db...
[   16s] querying package ids...
[   45s] [1/243] preinstalled aaa_base-84.87+git20220822.6b9f7a3-1.1
[   45s] [2/243] preinstalled aaa_base-malloccheck-84.87+git20220822.6b9f7a3-1.1
[   45s] [3/243] preinstalled attr-2.5.1-1.1
[   45s] [4/243] preinstalled bash-5.2.15-8.1
[   45s] [5/243] preinstalled bash-sh-5.2.15-8.1
[   45s] [6/243] preinstalled binutils-2.39-3.1
[   45s] [7/243] preinstalled brp-check-suse-84.87+git20221115.2f7add6-1.1
[   45s] [8/243] preinstalled build-compare-20221206T204012.bb70754-1.2
[   45s] [9/243] preinstalled build-mkbaselibs-20230215-1.1
[   45s] [10/243] preinstalled bzip2-1.0.8-4.1
[   45s] [11/243] preinstalled chkstat-1599_20221220-1.2
[   45s] [12/243] preinstalled compat-usrmerge-build-84.87-5.1
[   45s] [13/243] preinstalled compat-usrmerge-tools-84.87-5.1
[   45s] [14/243] preinstalled coreutils-9.1-5.1
[   45s] [15/243] preinstalled cpio-2.13-5.1
[   45s] [16/243] preinstalled cpp-12-2.1
[   45s] [17/243] preinstalled cpp12-12.2.1+git749-4.1
[   45s] [18/243] preinstalled crypto-policies-20210917.c9d86d1-1.1
[   45s] [19/243] preinstalled debugedit-5.0-5.1
[   45s] [20/243] preinstalled diffutils-3.9-1.1
[   45s] [21/243] preinstalled dwz-0.15-2.1
[   45s] [22/243] preinstalled elfutils-0.188-3.2
[   45s] [23/243] cumulate fdupes-2.2.1-1.1
[   45s] [24/243] preinstalled file-5.44-1.2
[   45s] [25/243] preinstalled file-magic-5.44-1.2
[   45s] [26/243] preinstalled filesystem-84.87-12.1
[   45s] [27/243] preinstalled fillup-1.42-279.1
[   45s] [28/243] preinstalled findutils-4.9.0-2.1
[   45s] [29/243] preinstalled gawk-5.2.1-2.1
[   45s] [30/243] preinstalled gcc-12-2.1
[   45s] [31/243] preinstalled gcc-PIE-12-2.1
[   45s] [32/243] preinstalled gcc12-12.2.1+git749-4.1
[   45s] [33/243] preinstalled gcc12-PIE-12.2.1+git749-4.1
[   45s] [34/243] preinstalled gettext-runtime-mini-0.21.1-1.1
[   45s] [35/243] preinstalled gettext-tools-mini-0.21.1-1.1
[   45s] [36/243] preinstalled glibc-2.37-1.1
[   45s] [37/243] preinstalled glibc-devel-2.37-1.1
[   45s] [38/243] preinstalled glibc-locale-base-2.37-1.1
[   45s] [39/243] preinstalled grep-3.8-3.1
[   45s] [40/243] preinstalled gzip-1.12-3.1
[   45s] [41/243] preinstalled kernel-obs-build-6.1.12-1.1
[   45s] [42/243] preinstalled libacl1-2.3.1-2.1
[   45s] [43/243] cumulate libalternatives1-1.2+3.b848aad-3.1
[   45s] [44/243] preinstalled libasan8-13.0.1+git5428-6.1
[   45s] [45/243] preinstalled libasm1-0.188-3.2
[   45s] [46/243] preinstalled libatomic1-13.0.1+git5428-6.1
[   45s] [47/243] preinstalled libattr1-2.5.1-1.1
[   45s] [48/243] preinstalled libaudit1-3.0.6-4.1
[   45s] [49/243] preinstalled libblkid1-2.38.1-7.1
[   45s] [50/243] preinstalled libbz2-1-1.0.8-4.1
[   45s] [51/243] preinstalled libcap-ng0-0.8.3-1.1
[   45s] [52/243] preinstalled libcap2-2.67-1.1
[   45s] [53/243] preinstalled libcrypt1-4.4.33-1.1
[   45s] [54/243] preinstalled libctf-nobfd0-2.39-3.1
[   45s] [55/243] preinstalled libctf0-2.39-3.1
[   45s] [56/243] preinstalled libdb-4_8-4.8.30-39.1
[   45s] [57/243] preinstalled libdw1-0.188-3.2
[   45s] [58/243] preinstalled libeconf0-0.5.1-1.1
[   45s] [59/243] preinstalled libelf1-0.188-3.2
[   45s] [60/243] preinstalled libexpat1-2.5.0-2.1
[   45s] [61/243] preinstalled libfdisk1-2.38.1-7.1
[   45s] [62/243] preinstalled libffi8-3.4.4-1.1
[   45s] [63/243] preinstalled libgcc_s1-13.0.1+git5428-6.1
[   45s] [64/243] preinstalled libgcrypt20-1.10.1-1.1
[   45s] [65/243] preinstalled libgdbm6-1.23-1.1
[   45s] [66/243] preinstalled libgdbm_compat4-1.23-1.1
[   45s] [67/243] preinstalled libgmp10-6.2.1-4.1
[   45s] [68/243] preinstalled libgomp1-13.0.1+git5428-6.1
[   45s] [69/243] preinstalled libgpg-error0-1.46-1.1
[   45s] [70/243] preinstalled libisl23-0.25-1.1
[   45s] [71/243] preinstalled liblua5_4-5-5.4.4-8.1
[   45s] [72/243] preinstalled liblzma5-5.4.1-1.1
[   45s] [73/243] preinstalled libmagic1-5.44-1.2
[   45s] [74/243] preinstalled libmount1-2.38.1-7.1
[   45s] [75/243] preinstalled libmpc3-1.3.1-1.2
[   45s] [76/243] preinstalled libmpdec3-2.5.1-2.1
[   45s] [77/243] preinstalled libmpfr6-4.2.0-1.1
[   45s] [78/243] preinstalled libncurses6-6.4.20230128-5.1
[   45s] [79/243] preinstalled libopenssl3-3.0.7-3.1
[   45s] [80/243] cumulate libp11-kit0-0.24.1-2.1
[   45s] [81/243] preinstalled libpcre2-8-0-10.42-3.2
[   45s] [82/243] preinstalled libpkgconf3-1.8.0-2.1
[   45s] [83/243] preinstalled libpopt0-1.19-1.1
[   45s] [84/243] preinstalled libpython3_10-1_0-3.10.9-2.2
[   45s] [85/243] preinstalled libpython3_11-1_0-3.11.1-4.2
[   45s] [86/243] preinstalled libpython3_8-1_0-3.8.16-3.2
[   45s] [87/243] preinstalled libpython3_9-1_0-3.9.16-3.2
[   45s] [88/243] preinstalled libreadline8-8.2-2.1
[   45s] [89/243] preinstalled librpmbuild9-4.18.0-3.2
[   45s] [90/243] preinstalled libseccomp2-2.5.4-2.1
[   45s] [91/243] preinstalled libselinux1-3.4-2.1
[   45s] [92/243] preinstalled libsemanage-conf-3.4-1.1
[   45s] [93/243] preinstalled libsemanage2-3.4-1.1
[   45s] [94/243] preinstalled libsepol2-3.4-1.1
[   45s] [95/243] preinstalled libsmartcols1-2.38.1-7.1
[   45s] [96/243] cumulate libsqlite3-0-3.40.1-1.1
[   45s] [97/243] preinstalled libstdc++6-13.0.1+git5428-6.1
[   45s] [98/243] preinstalled libsubid4-4.13-3.1
[   45s] [99/243] cumulate libtasn1-6-4.19.0-1.1
[   45s] [100/243] preinstalled libubsan1-13.0.1+git5428-6.1
[   45s] [101/243] preinstalled libutempter0-1.2.0-3.2
[   45s] [102/243] preinstalled libuuid1-2.38.1-7.1
[   45s] [103/243] preinstalled libxcrypt-devel-4.4.33-1.1
[   45s] [104/243] preinstalled libz1-1.2.13-2.1
[   45s] [105/243] preinstalled libzstd1-1.5.2-2.1
[   45s] [106/243] preinstalled linux-glibc-devel-6.1-1.1
[   45s] [107/243] preinstalled login_defs-4.13-3.1
[   45s] [108/243] preinstalled lua54-5.4.4-8.1
[   45s] [109/243] preinstalled make-4.4-2.1
[   45s] [110/243] preinstalled ncurses-utils-6.4.20230128-5.1
[   45s] [111/243] preinstalled pam-1.5.2-12.1
[   45s] [112/243] preinstalled patch-2.7.6-6.1
[   45s] [113/243] preinstalled perl-5.36.0-4.1
[   45s] [114/243] preinstalled perl-base-5.36.0-4.1
[   45s] [115/243] preinstalled permissions-1599_20221220-1.2
[   45s] [116/243] preinstalled permissions-config-1599_20221220-1.2
[   45s] [117/243] preinstalled pkgconf-1.8.0-2.1
[   45s] [118/243] preinstalled pkgconf-m4-1.8.0-2.1
[   45s] [119/243] preinstalled pkgconf-pkg-config-1.8.0-2.1
[   45s] [120/243] preinstalled polkit-default-privs-1550+20221102.9f111fa-1.1
[   45s] [121/243] preinstalled post-build-checks-84.87+git20230106.3a359c5-1.1
[   45s] [122/243] preinstalled python-rpm-macros-20230128.e704796-1.2
[   45s] [123/243] preinstalled python-rpm-packaging-20210526+a18ca48-1.2
[   45s] [124/243] cumulate python310-apipkg-3.0.1-1.2
[   45s] [125/243] cumulate python310-attrs-22.2.0-1.2
[   45s] [126/243] preinstalled python310-base-3.10.9-2.2
[   45s] [127/243] cumulate python310-charset-normalizer-3.0.1-1.2
[   45s] [128/243] cumulate python310-exceptiongroup-1.1.0-1.2
[   45s] [129/243] cumulate python310-idna-3.4-1.2
[   45s] [130/243] cumulate python310-iniconfig-1.1.1-3.2
[   45s] [131/243] preinstalled python310-packaging-23.0-1.1
[   45s] [132/243] cumulate python310-pluggy-1.0.0-1.5
[   45s] [133/243] cumulate python310-pycparser-2.21-1.5
[   45s] [134/243] preinstalled python310-setuptools-65.6.3-1.2
[   46s] [135/243] cumulate python310-six-1.16.0-2.5
[   46s] [136/243] cumulate python310-tomli-2.0.1-1.3
[   46s] [137/243] cumulate python310-zipp-3.8.1-1.2
[   46s] [138/243] cumulate python311-apipkg-3.0.1-1.2
[   46s] [139/243] cumulate python311-attrs-22.2.0-1.2
[   46s] [140/243] preinstalled python311-base-3.11.1-4.2
[   46s] [141/243] cumulate python311-charset-normalizer-3.0.1-1.2
[   46s] [142/243] cumulate python311-exceptiongroup-1.1.0-1.2
[   46s] [143/243] cumulate python311-idna-3.4-1.2
[   46s] [144/243] cumulate python311-iniconfig-1.1.1-3.2
[   46s] [145/243] cumulate python311-packaging-23.0-1.2
[   46s] [146/243] cumulate python311-pluggy-1.0.0-1.5
[   46s] [147/243] cumulate python311-pycparser-2.21-1.5
[   46s] [148/243] preinstalled python311-setuptools-65.6.3-1.2
[   46s] [149/243] cumulate python311-six-1.16.0-2.5
[   46s] [150/243] cumulate python311-tomli-2.0.1-1.3
[   46s] [151/243] cumulate python311-zipp-3.8.1-1.2
[   46s] [152/243] cumulate python38-apipkg-3.0.1-1.2
[   46s] [153/243] cumulate python38-attrs-22.2.0-1.2
[   46s] [154/243] preinstalled python38-base-3.8.16-3.2
[   46s] [155/243] cumulate python38-charset-normalizer-3.0.1-1.2
[   46s] [156/243] cumulate python38-exceptiongroup-1.1.0-1.2
[   46s] [157/243] cumulate python38-idna-3.4-1.2
[   46s] [158/243] cumulate python38-iniconfig-1.1.1-3.2
[   46s] [159/243] cumulate python38-packaging-23.0-1.2
[   46s] [160/243] cumulate python38-pluggy-1.0.0-1.5
[   46s] [161/243] cumulate python38-pycparser-2.21-1.5
[   46s] [162/243] preinstalled python38-setuptools-65.6.3-1.2
[   46s] [163/243] cumulate python38-six-1.16.0-2.5
[   46s] [164/243] cumulate python38-tomli-2.0.1-1.3
[   46s] [165/243] cumulate python38-zipp-3.8.1-1.2
[   46s] [166/243] cumulate python39-apipkg-3.0.1-1.2
[   46s] [167/243] cumulate python39-attrs-22.2.0-1.2
[   46s] [168/243] preinstalled python39-base-3.9.16-3.2
[   46s] [169/243] cumulate python39-charset-normalizer-3.0.1-1.2
[   46s] [170/243] cumulate python39-exceptiongroup-1.1.0-1.2
[   46s] [171/243] cumulate python39-idna-3.4-1.2
[   46s] [172/243] cumulate python39-iniconfig-1.1.1-3.2
[   46s] [173/243] cumulate python39-packaging-23.0-1.2
[   46s] [174/243] cumulate python39-pluggy-1.0.0-1.5
[   46s] [175/243] cumulate python39-pycparser-2.21-1.5
[   46s] [176/243] preinstalled python39-setuptools-65.6.3-1.2
[   46s] [177/243] cumulate python39-six-1.16.0-2.5
[   46s] [178/243] cumulate python39-tomli-2.0.1-1.3
[   46s] [179/243] cumulate python39-zipp-3.8.1-1.2
[   46s] [180/243] preinstalled qemu-linux-user-7.1.0-50.1
[   46s] [181/243] preinstalled rpm-4.18.0-3.2
[   46s] [182/243] preinstalled rpm-build-4.18.0-3.2
[   46s] [183/243] preinstalled rpm-build-perl-4.18.0-3.2
[   46s] [184/243] preinstalled rpm-config-SUSE-20220926-1.1
[   46s] [185/243] preinstalled rpmlint-mini-2.4.0+git20230214.1bab129-9.4
[   46s] [186/243] preinstalled rpmlint-strict-2.4.0+git20230214.1bab129-1.1
[   46s] [187/243] preinstalled sed-4.9-2.1
[   46s] [188/243] preinstalled shadow-4.13-3.1
[   46s] [189/243] preinstalled system-group-hardware-20170617-24.1
[   46s] [190/243] preinstalled system-user-root-20190513-2.1
[   46s] [191/243] preinstalled systemd-rpm-macros-19-1.1
[   46s] [192/243] preinstalled sysuser-shadow-3.1-5.1
[   46s] [193/243] preinstalled tar-1.34-9.1
[   46s] [194/243] preinstalled terminfo-base-6.4.20230128-5.1
[   46s] [195/243] preinstalled update-alternatives-1.21.8-1.1
[   46s] [196/243] preinstalled util-linux-2.38.1-7.1
[   46s] [197/243] preinstalled which-2.21-5.1
[   46s] [198/243] preinstalled xz-5.4.1-1.1
[   46s] [199/243] cumulate alts-1.2+3.b848aad-3.1
[   46s] [200/243] cumulate python310-3.10.9-2.1
[   46s] [201/243] cumulate python310-cffi-1.15.1-3.2
[   46s] [202/243] cumulate python310-importlib-metadata-6.0.0-1.2
[   46s] [203/243] cumulate python311-3.11.1-4.1
[   46s] [204/243] cumulate python311-cffi-1.15.1-3.2
[   46s] [205/243] cumulate python311-importlib-metadata-6.0.0-1.2
[   46s] [206/243] cumulate python38-3.8.16-3.1
[   46s] [207/243] cumulate python38-cffi-1.15.1-3.2
[   46s] [208/243] cumulate python38-importlib-metadata-6.0.0-1.2
[   46s] [209/243] cumulate python39-3.9.16-3.1
[   46s] [210/243] cumulate python39-cffi-1.15.1-3.2
[   46s] [211/243] cumulate python39-importlib-metadata-6.0.0-1.2
[   46s] [212/243] cumulate p11-kit-0.24.1-2.1
[   46s] [213/243] cumulate p11-kit-tools-0.24.1-2.1
[   46s] [214/243] cumulate python310-py-1.11.0-3.2
[   46s] [215/243] cumulate python311-py-1.11.0-3.2
[   46s] [216/243] cumulate python38-py-1.11.0-3.2
[   46s] [217/243] cumulate python39-py-1.11.0-3.2
[   46s] [218/243] cumulate python310-pyOpenSSL-23.0.0-1.2
[   46s] [219/243] cumulate python311-pyOpenSSL-23.0.0-1.2
[   46s] [220/243] cumulate python38-pyOpenSSL-23.0.0-1.2
[   46s] [221/243] cumulate python39-pyOpenSSL-23.0.0-1.2
[   46s] [222/243] cumulate ca-certificates-2+git20211004.3efbea9-1.1
[   46s] [223/243] cumulate python310-cryptography-39.0.1-1.2
[   46s] [224/243] cumulate python311-cryptography-39.0.1-1.2
[   46s] [225/243] cumulate python38-cryptography-39.0.1-1.2
[   46s] [226/243] cumulate python39-cryptography-39.0.1-1.2
[   46s] [227/243] cumulate python310-pytest-7.2.0-2.2
[   46s] [228/243] cumulate python311-pytest-7.2.0-2.2
[   46s] [229/243] cumulate python38-pytest-7.2.0-2.2
[   46s] [230/243] cumulate python39-pytest-7.2.0-2.2
[   46s] [231/243] cumulate ca-certificates-mozilla-2.60-1.2
[   46s] [232/243] cumulate python310-certifi-2022.9.24-1.2
[   46s] [233/243] cumulate python311-certifi-2022.9.24-1.2
[   46s] [234/243] cumulate python38-certifi-2022.9.24-1.2
[   46s] [235/243] cumulate python39-certifi-2022.9.24-1.2
[   46s] [236/243] cumulate python310-urllib3-1.26.14-1.2
[   46s] [237/243] cumulate python311-urllib3-1.26.14-1.2
[   46s] [238/243] cumulate python38-urllib3-1.26.14-1.2
[   46s] [239/243] cumulate python39-urllib3-1.26.14-1.2
[   46s] [240/243] cumulate python310-requests-2.28.2-1.2
[   46s] [241/243] cumulate python311-requests-2.28.2-1.2
[   46s] [242/243] cumulate python38-requests-2.28.2-1.2
[   46s] [243/243] cumulate python39-requests-2.28.2-1.2
[   46s] now installing cumulated packages
[   46s] Preparing...                          ########################################
[   47s] Updating / installing...
[   47s] libsqlite3-0-3.40.1-1.1               ########################################
[   47s] python310-3.10.9-2.1                  ########################################
[   47s] python311-3.11.1-4.1                  ########################################
[   47s] python38-3.8.16-3.1                   ########################################
[   47s] python39-3.9.16-3.1                   ########################################
[   47s] python39-iniconfig-1.1.1-3.2          ########################################
[   47s] python39-idna-3.4-1.2                 ########################################
[   47s] python38-iniconfig-1.1.1-3.2          ########################################
[   47s] python38-idna-3.4-1.2                 ########################################
[   47s] python311-iniconfig-1.1.1-3.2         ########################################
[   47s] python311-idna-3.4-1.2                ########################################
[   47s] python310-iniconfig-1.1.1-3.2         ########################################
[   48s] python310-idna-3.4-1.2                ########################################
[   48s] libtasn1-6-4.19.0-1.1                 ########################################
[   48s] libp11-kit0-0.24.1-2.1                ########################################
[   48s] p11-kit-0.24.1-2.1                    ########################################
[   48s] p11-kit-tools-0.24.1-2.1              ########################################
[   48s] ca-certificates-2+git20211004.3efbea9-########################################
[   51s] ca-certificates-mozilla-2.60-1.2      ########################################
[   56s] python310-certifi-2022.9.24-1.2       ########################################
[   56s] python311-certifi-2022.9.24-1.2       ########################################
[   56s] python38-certifi-2022.9.24-1.2        ########################################
[   56s] python39-certifi-2022.9.24-1.2        ########################################
[   56s] python39-zipp-3.8.1-1.2               ########################################
[   57s] python39-importlib-metadata-6.0.0-1.2 ########################################
[   57s] python39-tomli-2.0.1-1.3              ########################################
[   57s] python39-six-1.16.0-2.5               ########################################
[   57s] python39-pycparser-2.21-1.5           ########################################
[   57s] python39-cffi-1.15.1-3.2              ########################################
[   58s] python39-cryptography-39.0.1-1.2      ########################################
[   58s] python39-pyOpenSSL-23.0.0-1.2         ########################################
[   58s] python39-urllib3-1.26.14-1.2          ########################################
[   58s] python39-pluggy-1.0.0-1.5             ########################################
[   58s] python39-packaging-23.0-1.2           ########################################
[   58s] python39-exceptiongroup-1.1.0-1.2     ########################################
[   58s] python39-charset-normalizer-3.0.1-1.2 ########################################
[   58s] python39-attrs-22.2.0-1.2             ########################################
[   58s] python39-apipkg-3.0.1-1.2             ########################################
[   59s] python39-py-1.11.0-3.2                ########################################
[   59s] python38-zipp-3.8.1-1.2               ########################################
[   59s] python38-importlib-metadata-6.0.0-1.2 ########################################
[   59s] python38-tomli-2.0.1-1.3              ########################################
[   59s] python38-six-1.16.0-2.5               ########################################
[   59s] python38-pycparser-2.21-1.5           ########################################
[   59s] python38-cffi-1.15.1-3.2              ########################################
[   60s] python38-cryptography-39.0.1-1.2      ########################################
[   60s] python38-pyOpenSSL-23.0.0-1.2         ########################################
[   60s] python38-urllib3-1.26.14-1.2          ########################################
[   60s] python38-pluggy-1.0.0-1.5             ########################################
[   60s] python38-packaging-23.0-1.2           ########################################
[   60s] python38-exceptiongroup-1.1.0-1.2     ########################################
[   60s] python38-charset-normalizer-3.0.1-1.2 ########################################
[   61s] python38-attrs-22.2.0-1.2             ########################################
[   61s] python38-apipkg-3.0.1-1.2             ########################################
[   61s] python38-py-1.11.0-3.2                ########################################
[   61s] python311-zipp-3.8.1-1.2              ########################################
[   61s] python311-importlib-metadata-6.0.0-1.2########################################
[   61s] python311-tomli-2.0.1-1.3             ########################################
[   61s] python311-six-1.16.0-2.5              ########################################
[   61s] python311-pycparser-2.21-1.5          ########################################
[   61s] python311-cffi-1.15.1-3.2             ########################################
[   62s] python311-cryptography-39.0.1-1.2     ########################################
[   62s] python311-pyOpenSSL-23.0.0-1.2        ########################################
[   62s] python311-urllib3-1.26.14-1.2         ########################################
[   62s] python311-pluggy-1.0.0-1.5            ########################################
[   62s] python311-packaging-23.0-1.2          ########################################
[   62s] python311-exceptiongroup-1.1.0-1.2    ########################################
[   63s] python311-charset-normalizer-3.0.1-1.2########################################
[   63s] python311-attrs-22.2.0-1.2            ########################################
[   63s] python311-apipkg-3.0.1-1.2            ########################################
[   63s] python311-py-1.11.0-3.2               ########################################
[   63s] python310-zipp-3.8.1-1.2              ########################################
[   63s] python310-importlib-metadata-6.0.0-1.2########################################
[   63s] python310-tomli-2.0.1-1.3             ########################################
[   63s] python310-six-1.16.0-2.5              ########################################
[   63s] python310-pycparser-2.21-1.5          ########################################
[   64s] python310-cffi-1.15.1-3.2             ########################################
[   64s] python310-cryptography-39.0.1-1.2     ########################################
[   64s] python310-pyOpenSSL-23.0.0-1.2        ########################################
[   64s] python310-urllib3-1.26.14-1.2         ########################################
[   64s] python310-pluggy-1.0.0-1.5            ########################################
[   65s] python310-exceptiongroup-1.1.0-1.2    ########################################
[   65s] python310-charset-normalizer-3.0.1-1.2########################################
[   65s] python310-attrs-22.2.0-1.2            ########################################
[   65s] python310-apipkg-3.0.1-1.2            ########################################
[   65s] python310-py-1.11.0-3.2               ########################################
[   65s] libalternatives1-1.2+3.b848aad-3.1    ########################################
[   65s] alts-1.2+3.b848aad-3.1                ########################################
[   66s] python310-pytest-7.2.0-2.2            ########################################
[   66s] python311-pytest-7.2.0-2.2            ########################################
[   67s] python38-pytest-7.2.0-2.2             ########################################
[   68s] python39-pytest-7.2.0-2.2             ########################################
[   68s] python310-requests-2.28.2-1.2         ########################################
[   68s] python311-requests-2.28.2-1.2         ########################################
[   68s] python38-requests-2.28.2-1.2          ########################################
[   68s] python39-requests-2.28.2-1.2          ########################################
[   68s] fdupes-2.2.1-1.1                      ########################################
[   79s] now finalizing build dir...
[   79s] ... running 01-add_abuild_user_to_trusted_group
[   80s] ... running 02-set_timezone_to_utc
[   80s] ... running 03-set-permissions-secure
[   80s] ... running 11-hack_uname_version_to_kernel_version
[   89s] -----------------------------------------------------------------
[   89s] I have the following modifications for python-ntlm-auth.spec:
[   89s] 22c22
[   89s] < Release:        0
[   89s] ---
[   89s] > Release:        1.7
[   96s] build target is riscv64-suse-linux
[   96s] -----------------------------------------------------------------
[   96s] ----- building python-ntlm-auth.spec (user abuild)
[   96s] -----------------------------------------------------------------
[   96s] -----------------------------------------------------------------
[  100s] + exec rpmbuild -ba --define '_srcdefattr (-,root,root)' --nosignature --target=riscv64-suse-linux --define '_build_create_debug 1' --define 'disturl obs://build.opensuse.org/openSUSE:Factory:RISCV/standard/4701bdd2fb842912bf82d820d979b61e-python-ntlm-auth' /home/abuild/rpmbuild/SOURCES/python-ntlm-auth.spec
[  135s] Building target platforms: riscv64-suse-linux
[  135s] Building for target riscv64-suse-linux
[  135s] setting SOURCE_DATE_EPOCH=1594771200
[  135s] Executing(%prep): /usr/bin/bash -e /var/tmp/rpm-tmp.nrypeJ
[  136s] + umask 022
[  136s] + cd /home/abuild/rpmbuild/BUILD
[  136s] + cd /home/abuild/rpmbuild/BUILD
[  136s] + rm -rf ntlm-auth-1.5.0
[  136s] + /usr/lib/rpm/rpmuncompress -x /home/abuild/rpmbuild/SOURCES/python-ntlm-auth-1.5.0.tar.gz
[  136s] + STATUS=0
[  136s] + '[' 0 -ne 0 ']'
[  136s] + cd ntlm-auth-1.5.0
[  136s] + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
[  136s] + RPM_EC=0
[  136s] ++ jobs -p
[  136s] + exit 0
[  136s] Executing(%build): /usr/bin/bash -e /var/tmp/rpm-tmp.JPjS1G
[  136s] + umask 022
[  136s] + cd /home/abuild/rpmbuild/BUILD
[  136s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64
[  136s] ++ dirname /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64
[  136s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[  137s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64
[  137s] + cd ntlm-auth-1.5.0
[  137s] + ref=/usr/lib/rpm
[  137s] + mints=0
[  137s] + case $(uname -m) in
[  137s] ++ uname -m
[  137s] + mints=20160911
[  137s] + for s in guess sub
[  137s] ++ find -maxdepth 8 -name config.guess
[  137s] + for s in guess sub
[  137s] ++ find -maxdepth 8 -name config.sub
[  137s] ++ '[' -f _current_flavor ']'
[  137s] ++ true
[  137s] + last_flavor=
[  137s] + '[' -z '' ']'
[  137s] + last_flavor=tmp
[  137s] + '[' tmp '!=' python38 ']'
[  137s] + '[' -d build ']'
[  137s] + '[' -d _build.python38 ']'
[  137s] + echo python38
[  137s] + python_flavor=python38
[  137s] + /usr/bin/python3.8 setup.py build '--executable=/usr/bin/python3.8 -s'
[  142s] running build
[  142s] running build_py
[  142s] creating build
[  142s] creating build/lib
[  142s] creating build/lib/ntlm_auth
[  142s] copying ntlm_auth/__init__.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/compute_hash.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/compute_keys.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/compute_response.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/constants.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/des.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/exceptions.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/gss_channel_bindings.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/messages.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/ntlm.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/rc4.py -> build/lib/ntlm_auth
[  142s] copying ntlm_auth/session_security.py -> build/lib/ntlm_auth
[  142s] /usr/lib/python3.8/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  142s]   warnings.warn(msg, warning_class)
[  142s] ++ '[' -f _current_flavor ']'
[  142s] ++ cat _current_flavor
[  142s] + last_flavor=python38
[  142s] + '[' -z python38 ']'
[  142s] + '[' python38 '!=' python39 ']'
[  142s] + '[' -d build ']'
[  142s] + mv build _build.python38
[  142s] + '[' -d _build.python39 ']'
[  142s] + echo python39
[  142s] + python_flavor=python39
[  142s] + /usr/bin/python3.9 setup.py build '--executable=/usr/bin/python3.9 -s'
[  145s] /usr/lib/python3.9/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  145s]   warnings.warn(msg, warning_class)
[  146s] running build
[  146s] running build_py
[  146s] creating build
[  146s] creating build/lib
[  146s] creating build/lib/ntlm_auth
[  146s] copying ntlm_auth/__init__.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/compute_hash.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/compute_keys.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/compute_response.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/constants.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/des.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/exceptions.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/gss_channel_bindings.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/messages.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/ntlm.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/rc4.py -> build/lib/ntlm_auth
[  146s] copying ntlm_auth/session_security.py -> build/lib/ntlm_auth
[  146s] ++ '[' -f _current_flavor ']'
[  146s] ++ cat _current_flavor
[  146s] + last_flavor=python39
[  146s] + '[' -z python39 ']'
[  146s] + '[' python39 '!=' python311 ']'
[  146s] + '[' -d build ']'
[  146s] + mv build _build.python39
[  146s] + '[' -d _build.python311 ']'
[  146s] + echo python311
[  146s] + python_flavor=python311
[  146s] + /usr/bin/python3.11 setup.py build '--executable=/usr/bin/python3.11 -s'
[  149s] /usr/lib/python3.11/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  149s]   warnings.warn(msg, warning_class)
[  149s] running build
[  149s] running build_py
[  149s] creating build
[  149s] creating build/lib
[  149s] creating build/lib/ntlm_auth
[  149s] copying ntlm_auth/__init__.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/compute_hash.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/compute_keys.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/compute_response.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/constants.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/des.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/exceptions.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/gss_channel_bindings.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/messages.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/ntlm.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/rc4.py -> build/lib/ntlm_auth
[  149s] copying ntlm_auth/session_security.py -> build/lib/ntlm_auth
[  150s] ++ '[' -f _current_flavor ']'
[  150s] ++ cat _current_flavor
[  150s] + last_flavor=python311
[  150s] + '[' -z python311 ']'
[  150s] + '[' python311 '!=' python310 ']'
[  150s] + '[' -d build ']'
[  150s] + mv build _build.python311
[  150s] + '[' -d _build.python310 ']'
[  150s] + echo python310
[  150s] + python_flavor=python310
[  150s] + /usr/bin/python3.10 setup.py build '--executable=/usr/bin/python3.10 -s'
[  154s] /usr/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  154s]   warnings.warn(msg, warning_class)
[  154s] running build
[  154s] running build_py
[  154s] creating build
[  154s] creating build/lib
[  154s] creating build/lib/ntlm_auth
[  154s] copying ntlm_auth/__init__.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/compute_hash.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/compute_keys.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/compute_response.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/constants.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/des.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/exceptions.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/gss_channel_bindings.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/messages.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/ntlm.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/rc4.py -> build/lib/ntlm_auth
[  154s] copying ntlm_auth/session_security.py -> build/lib/ntlm_auth
[  154s] + RPM_EC=0
[  154s] ++ jobs -p
[  154s] + exit 0
[  154s] Executing(%install): /usr/bin/bash -e /var/tmp/rpm-tmp.Cy3TFG
[  155s] + umask 022
[  155s] + cd /home/abuild/rpmbuild/BUILD
[  155s] + /usr/bin/rm -rf /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64
[  155s] + /usr/bin/mkdir -p /home/abuild/rpmbuild/BUILDROOT
[  155s] + /usr/bin/mkdir /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64
[  155s] + cd ntlm-auth-1.5.0
[  155s] ++ '[' -f _current_flavor ']'
[  155s] ++ cat _current_flavor
[  155s] + last_flavor=python310
[  155s] + '[' -z python310 ']'
[  155s] + '[' python310 '!=' python38 ']'
[  155s] + '[' -d build ']'
[  155s] + mv build _build.python310
[  155s] + '[' -d _build.python38 ']'
[  155s] + mv _build.python38 build
[  155s] + echo python38
[  155s] + python_flavor=python38
[  155s] + /usr/bin/python3.8 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64 --prefix /usr
[  159s] running install
[  159s] running install_lib
[  160s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr
[  160s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib
[  160s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8
[  160s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages
[  160s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/compute_hash.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/compute_keys.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/compute_response.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/des.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/gss_channel_bindings.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/messages.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/ntlm.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/rc4.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] copying build/lib/ntlm_auth/session_security.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__init__.py to __init__.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/compute_hash.py to compute_hash.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/compute_keys.py to compute_keys.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/compute_response.py to compute_response.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/constants.py to constants.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/des.py to des.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/exceptions.py to exceptions.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/gss_channel_bindings.py to gss_channel_bindings.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/messages.py to messages.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/ntlm.py to ntlm.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/rc4.py to rc4.cpython-38.pyc
[  160s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/session_security.py to session_security.cpython-38.pyc
[  160s] writing byte-compilation script '/tmp/tmpna2p560q.py'
[  160s] /usr/bin/python3.8 /tmp/tmpna2p560q.py
[  164s] removing /tmp/tmpna2p560q.py
[  164s] running install_egg_info
[  164s] running egg_info
[  164s] creating ntlm_auth.egg-info
[  164s] writing ntlm_auth.egg-info/PKG-INFO
[  164s] writing dependency_links to ntlm_auth.egg-info/dependency_links.txt
[  164s] writing requirements to ntlm_auth.egg-info/requires.txt
[  164s] writing top-level names to ntlm_auth.egg-info/top_level.txt
[  164s] writing manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  164s] reading manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  164s] reading manifest template 'MANIFEST.in'
[  164s] adding license file 'LICENSE'
[  164s] writing manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  164s] Copying ntlm_auth.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth-1.5.0-py3.8.egg-info
[  164s] running install_scripts
[  165s] /usr/lib/python3.8/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  165s]   warnings.warn(msg, warning_class)
[  165s] /usr/lib/python3.8/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  165s]   warnings.warn(
[  165s] ++ '[' -f _current_flavor ']'
[  165s] ++ cat _current_flavor
[  165s] + last_flavor=python38
[  165s] + '[' -z python38 ']'
[  165s] + '[' python38 '!=' python39 ']'
[  165s] + '[' -d build ']'
[  165s] + mv build _build.python38
[  165s] + '[' -d _build.python39 ']'
[  165s] + mv _build.python39 build
[  165s] + echo python39
[  165s] + python_flavor=python39
[  165s] + /usr/bin/python3.9 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64 --prefix /usr
[  168s] /usr/lib/python3.9/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  168s]   warnings.warn(msg, warning_class)
[  169s] running install
[  169s] /usr/lib/python3.9/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  169s]   warnings.warn(
[  169s] running install_lib
[  169s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9
[  169s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages
[  169s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/compute_hash.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/compute_keys.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/compute_response.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/des.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/gss_channel_bindings.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/messages.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/ntlm.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/rc4.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] copying build/lib/ntlm_auth/session_security.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__init__.py to __init__.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/compute_hash.py to compute_hash.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/compute_keys.py to compute_keys.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/compute_response.py to compute_response.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/constants.py to constants.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/des.py to des.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/exceptions.py to exceptions.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/gss_channel_bindings.py to gss_channel_bindings.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/messages.py to messages.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/ntlm.py to ntlm.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/rc4.py to rc4.cpython-39.pyc
[  169s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/session_security.py to session_security.cpython-39.pyc
[  169s] writing byte-compilation script '/tmp/tmpwbc8tozl.py'
[  169s] /usr/bin/python3.9 /tmp/tmpwbc8tozl.py
[  173s] removing /tmp/tmpwbc8tozl.py
[  173s] running install_egg_info
[  173s] running egg_info
[  173s] writing ntlm_auth.egg-info/PKG-INFO
[  173s] writing dependency_links to ntlm_auth.egg-info/dependency_links.txt
[  173s] writing requirements to ntlm_auth.egg-info/requires.txt
[  173s] writing top-level names to ntlm_auth.egg-info/top_level.txt
[  173s] reading manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  173s] reading manifest template 'MANIFEST.in'
[  173s] adding license file 'LICENSE'
[  173s] writing manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  173s] Copying ntlm_auth.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth-1.5.0-py3.9.egg-info
[  173s] running install_scripts
[  174s] ++ '[' -f _current_flavor ']'
[  174s] ++ cat _current_flavor
[  174s] + last_flavor=python39
[  174s] + '[' -z python39 ']'
[  174s] + '[' python39 '!=' python311 ']'
[  174s] + '[' -d build ']'
[  174s] + mv build _build.python39
[  174s] + '[' -d _build.python311 ']'
[  174s] + mv _build.python311 build
[  174s] + echo python311
[  174s] + python_flavor=python311
[  174s] + /usr/bin/python3.11 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64 --prefix /usr
[  177s] /usr/lib/python3.11/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  177s]   warnings.warn(msg, warning_class)
[  177s] running install
[  177s] /usr/lib/python3.11/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  177s]   warnings.warn(
[  178s] running install_lib
[  178s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11
[  178s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages
[  178s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/compute_hash.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/compute_keys.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/compute_response.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/des.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/gss_channel_bindings.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/messages.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/ntlm.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/rc4.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] copying build/lib/ntlm_auth/session_security.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__init__.py to __init__.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/compute_hash.py to compute_hash.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/compute_keys.py to compute_keys.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/compute_response.py to compute_response.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/constants.py to constants.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/des.py to des.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/exceptions.py to exceptions.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/gss_channel_bindings.py to gss_channel_bindings.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/messages.py to messages.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/ntlm.py to ntlm.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/rc4.py to rc4.cpython-311.pyc
[  178s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/session_security.py to session_security.cpython-311.pyc
[  178s] writing byte-compilation script '/tmp/tmpkryb3sng.py'
[  178s] /usr/bin/python3.11 /tmp/tmpkryb3sng.py
[  182s] removing /tmp/tmpkryb3sng.py
[  182s] running install_egg_info
[  182s] running egg_info
[  182s] writing ntlm_auth.egg-info/PKG-INFO
[  182s] writing dependency_links to ntlm_auth.egg-info/dependency_links.txt
[  182s] writing requirements to ntlm_auth.egg-info/requires.txt
[  182s] writing top-level names to ntlm_auth.egg-info/top_level.txt
[  182s] reading manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  182s] reading manifest template 'MANIFEST.in'
[  182s] adding license file 'LICENSE'
[  182s] writing manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  182s] Copying ntlm_auth.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth-1.5.0-py3.11.egg-info
[  182s] running install_scripts
[  183s] ++ '[' -f _current_flavor ']'
[  183s] ++ cat _current_flavor
[  183s] + last_flavor=python311
[  183s] + '[' -z python311 ']'
[  183s] + '[' python311 '!=' python310 ']'
[  183s] + '[' -d build ']'
[  183s] + mv build _build.python311
[  183s] + '[' -d _build.python310 ']'
[  183s] + mv _build.python310 build
[  183s] + echo python310
[  183s] + python_flavor=python310
[  183s] + /usr/bin/python3.10 setup.py install -O1 --skip-build --force --root /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64 --prefix /usr
[  187s] /usr/lib/python3.10/site-packages/setuptools/config/setupcfg.py:508: SetuptoolsDeprecationWarning: The license_file parameter is deprecated, use license_files instead.
[  187s]   warnings.warn(msg, warning_class)
[  187s] running install
[  187s] /usr/lib/python3.10/site-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.
[  187s]   warnings.warn(
[  187s] running install_lib
[  187s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10
[  187s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages
[  187s] creating /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/__init__.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/compute_hash.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/compute_keys.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/compute_response.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/constants.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/des.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/exceptions.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/gss_channel_bindings.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/messages.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/ntlm.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/rc4.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] copying build/lib/ntlm_auth/session_security.py -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth
[  187s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__init__.py to __init__.cpython-310.pyc
[  187s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/compute_hash.py to compute_hash.cpython-310.pyc
[  187s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/compute_keys.py to compute_keys.cpython-310.pyc
[  187s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/compute_response.py to compute_response.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/constants.py to constants.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/des.py to des.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/exceptions.py to exceptions.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/gss_channel_bindings.py to gss_channel_bindings.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/messages.py to messages.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/ntlm.py to ntlm.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/rc4.py to rc4.cpython-310.pyc
[  188s] byte-compiling /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/session_security.py to session_security.cpython-310.pyc
[  188s] writing byte-compilation script '/tmp/tmps2y0xlro.py'
[  188s] /usr/bin/python3.10 /tmp/tmps2y0xlro.py
[  192s] removing /tmp/tmps2y0xlro.py
[  192s] running install_egg_info
[  192s] running egg_info
[  192s] writing ntlm_auth.egg-info/PKG-INFO
[  192s] writing dependency_links to ntlm_auth.egg-info/dependency_links.txt
[  192s] writing requirements to ntlm_auth.egg-info/requires.txt
[  192s] writing top-level names to ntlm_auth.egg-info/top_level.txt
[  192s] reading manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  192s] reading manifest template 'MANIFEST.in'
[  192s] adding license file 'LICENSE'
[  192s] writing manifest file 'ntlm_auth.egg-info/SOURCES.txt'
[  192s] Copying ntlm_auth.egg-info to /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth-1.5.0-py3.10.egg-info
[  192s] running install_scripts
[  192s] ++ '[' -f _current_flavor ']'
[  192s] ++ cat _current_flavor
[  193s] + last_flavor=python310
[  193s] + '[' -z python310 ']'
[  193s] + '[' python310 '!=' python38 ']'
[  193s] + '[' -d build ']'
[  193s] + mv build _build.python310
[  193s] + '[' -d _build.python38 ']'
[  193s] + mv _build.python38 build
[  193s] + echo python38
[  193s] + python_flavor=python38
[  193s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/rc4.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/rc4.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/ntlm.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/ntlm.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/session_security.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/session_security.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/exceptions.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/exceptions.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/des.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/des.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/constants.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/constants.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_response.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_response.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/__init__.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/__init__.cpython-38.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-38.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-38.pyc
[  193s] ++ '[' -f _current_flavor ']'
[  193s] ++ cat _current_flavor
[  193s] + last_flavor=python38
[  193s] + '[' -z python38 ']'
[  193s] + '[' python38 '!=' python39 ']'
[  193s] + '[' -d build ']'
[  193s] + mv build _build.python38
[  193s] + '[' -d _build.python39 ']'
[  193s] + mv _build.python39 build
[  193s] + echo python39
[  193s] + python_flavor=python39
[  193s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/rc4.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/rc4.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/ntlm.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/ntlm.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/session_security.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/session_security.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/exceptions.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/exceptions.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/des.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/des.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/constants.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/constants.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_response.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_response.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/__init__.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/__init__.cpython-39.pyc
[  193s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-39.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.9/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-39.pyc
[  193s] ++ '[' -f _current_flavor ']'
[  193s] ++ cat _current_flavor
[  193s] + last_flavor=python39
[  193s] + '[' -z python39 ']'
[  193s] + '[' python39 '!=' python311 ']'
[  193s] + '[' -d build ']'
[  193s] + mv build _build.python39
[  193s] + '[' -d _build.python311 ']'
[  193s] + mv _build.python311 build
[  193s] + echo python311
[  193s] + python_flavor=python311
[  193s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/rc4.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/rc4.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/ntlm.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/ntlm.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/messages.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/messages.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/session_security.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/session_security.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/exceptions.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/exceptions.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/des.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/des.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/constants.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/constants.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_response.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_response.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/__init__.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/__init__.cpython-311.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-311.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.11/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-311.pyc
[  194s] ++ '[' -f _current_flavor ']'
[  194s] ++ cat _current_flavor
[  194s] + last_flavor=python311
[  194s] + '[' -z python311 ']'
[  194s] + '[' python311 '!=' python310 ']'
[  194s] + '[' -d build ']'
[  194s] + mv build _build.python311
[  194s] + '[' -d _build.python310 ']'
[  194s] + mv _build.python310 build
[  194s] + echo python310
[  194s] + python_flavor=python310
[  194s] + /usr/lib/rpm/fdupes_wrapper /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/rc4.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/rc4.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/ntlm.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/ntlm.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/session_security.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/session_security.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/exceptions.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/exceptions.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/des.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/des.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/constants.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/constants.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/gss_channel_bindings.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_keys.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_response.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_response.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/__init__.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/__init__.cpython-310.pyc
[  194s] Linking /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-310.opt-1.pyc -> /home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.10/site-packages/ntlm_auth/__pycache__/compute_hash.cpython-310.pyc
[  194s] + /usr/lib/rpm/find-debuginfo -j4 -n --run-dwz --dwz-low-mem-die-limit 10000000 --dwz-max-die-limit 50000000 -S debugsourcefiles.list /home/abuild/rpmbuild/BUILD/ntlm-auth-1.5.0
[  195s] + /usr/lib/rpm/brp-compress
[  195s] + /usr/lib/rpm/brp-suse
[  195s] calling /usr/lib/rpm/brp-suse.d/brp-05-permissions
[  195s] calling /usr/lib/rpm/brp-suse.d/brp-15-strip-debug
[  195s] calling /usr/lib/rpm/brp-suse.d/brp-25-symlink
[  195s] calling /usr/lib/rpm/brp-suse.d/brp-50-generate-fips-hmac
[  196s] calling /usr/lib/rpm/brp-suse.d/brp-75-ar
[  196s] Executing(%check): /usr/bin/bash -e /var/tmp/rpm-tmp.OpDqex
[  196s] + umask 022
[  196s] + cd /home/abuild/rpmbuild/BUILD
[  196s] + cd ntlm-auth-1.5.0
[  196s] + set +x
[  196s] Using libalternatives variant 38 for py.test in XDG_CONFIG_HOME during Python 3.8 expansions.
[  196s] Using libalternatives variant 38 for pytest in XDG_CONFIG_HOME during Python 3.8 expansions.
[  197s] Using alternative normalizer-3.8 for normalizer in ./build/flavorbin during Python 3.8 expansions.
[  197s] Using libalternatives variant 39 for py.test in XDG_CONFIG_HOME during Python 3.9 expansions.
[  197s] Using libalternatives variant 39 for pytest in XDG_CONFIG_HOME during Python 3.9 expansions.
[  197s] Using alternative normalizer-3.9 for normalizer in ./build/flavorbin during Python 3.9 expansions.
[  198s] Using libalternatives variant 311 for py.test in XDG_CONFIG_HOME during Python 3.11 expansions.
[  198s] Using libalternatives variant 311 for pytest in XDG_CONFIG_HOME during Python 3.11 expansions.
[  198s] Using alternative normalizer-3.11 for normalizer in ./build/flavorbin during Python 3.11 expansions.
[  199s] Using alternative normalizer-3.10 for normalizer in ./build/flavorbin during Python 3.10 expansions.
[  199s] + export PATH=/home/abuild/rpmbuild/BUILD/ntlm-auth-1.5.0/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  199s] + PATH=/home/abuild/rpmbuild/BUILD/ntlm-auth-1.5.0/build/flavorbin:/usr/local/bin:/usr/bin:/bin
[  199s] ++ '[' -f _current_flavor ']'
[  199s] ++ cat _current_flavor
[  199s] + last_flavor=python310
[  199s] + '[' -z python310 ']'
[  199s] + '[' python310 '!=' python38 ']'
[  199s] + '[' -d build ']'
[  199s] + mv build _build.python310
[  199s] + '[' -d _build.python38 ']'
[  199s] + mv _build.python38 build
[  199s] + echo python38
[  199s] + python_flavor=python38
[  199s] + PYTHONPATH=/home/abuild/rpmbuild/BUILDROOT/python-ntlm-auth-1.5.0-1.7.riscv64/usr/lib/python3.8/site-packages
[  199s] + PYTHONDONTWRITEBYTECODE=1
[  199s] + pytest-3.8 --ignore=_build.python38 --ignore=_build.python39 --ignore=_build.python311 --ignore=_build.python310 -v
[  203s] ============================= test session starts ==============================
[  203s] platform linux -- Python 3.8.16, pytest-7.2.0, pluggy-1.0.0 -- /usr/bin/python3.8
[  203s] cachedir: .pytest_cache
[  203s] rootdir: /home/abuild/rpmbuild/BUILD/ntlm-auth-1.5.0, configfile: setup.cfg
[  208s] collecting ... collected 124 items
[  208s] 
[  208s] tests/test_compute_hash.py::TestComputeHash::test_lmowfv1 PASSED         [  0%]
[  209s] tests/test_compute_hash.py::TestComputeHash::test_ntowfv1 FAILED         [  1%]
[  209s] tests/test_compute_hash.py::TestComputeHash::test_lmofv1_hash PASSED     [  2%]
[  209s] tests/test_compute_hash.py::TestComputeHash::test_ntowfv1_hash PASSED    [  3%]
[  209s] tests/test_compute_hash.py::TestComputeHash::test_ntowfv2 FAILED         [  4%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_exchange_key_ntlm_v1_no_keys PASSED [  4%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_exchange_key_ntlm_v1_non_nt_key PASSED [  5%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_exchange_key_ntlm_v1_lm_key PASSED [  6%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_exchange_key_ntlm_v1_extended_session_security PASSED [  7%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_exchange_key_ntlm_v2 PASSED [  8%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_sign_key PASSED    [  8%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_no_flag PASSED [  9%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_ntlm1_56 PASSED [ 10%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_ntlm1_40 PASSED [ 11%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_ntlm2_128 PASSED [ 12%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_ntlm2_56 PASSED [ 12%]
[  209s] tests/test_compute_keys.py::TestComputeKeys::test_get_seal_key_ntlm2_40 PASSED [ 13%]
[  210s] tests/test_compute_response.py::TestGeneric::test_get_timestamp_format PASSED [ 14%]
[  211s] tests/test_compute_response.py::TestHashResults::test_get_LMv1_response PASSED [ 15%]
[  211s] tests/test_compute_response.py::TestHashResults::test_get_LMv2_response FAILED [ 16%]
[  211s] tests/test_compute_response.py::TestHashResults::test_get_NTLMv1_response FAILED [ 16%]
[  212s] tests/test_compute_response.py::TestHashResults::test_get_NTLM2_response FAILED [ 17%]
[  212s] tests/test_compute_response.py::TestHashResults::test_nt_v2_temp_response PASSED [ 18%]
[  212s] tests/test_compute_response.py::TestHashResults::test_get_NTLMv2_response FAILED [ 19%]
[  212s] tests/test_compute_response.py::TestChallengeResults::test_lm_v1_response PASSED [ 20%]
[  212s] tests/test_compute_response.py::TestChallengeResults::test_lm_v1_with_extended_security_response PASSED [ 20%]
[  213s] tests/test_compute_response.py::TestChallengeResults::test_lm_v1_with_ntlm_2_response FAILED [ 21%]
[  213s] tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response FAILED [ 22%]
[  213s] tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response_with_no_target_info_timestamp FAILED [ 23%]
[  214s] tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response_with_server_target_info_timestamp FAILED [ 24%]
[  214s] tests/test_compute_response.py::TestChallengeResults::test_nt_v1_response FAILED [ 25%]
[  215s] tests/test_compute_response.py::TestChallengeResults::test_nt_v1_with_extended_security_response FAILED [ 25%]
[  215s] tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response FAILED [ 26%]
[  215s] tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response_no_target_info FAILED [ 27%]
[  216s] tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response_with_timestamp_av_pair FAILED [ 28%]
[  216s] tests/test_des.py::TestDES::test_des_invalid_key_size PASSED             [ 29%]
[  216s] tests/test_des.py::TestDES::test_expand_56bit_key PASSED                 [ 29%]
[  216s] tests/test_des.py::TestDES::test_encrypt_block PASSED                    [ 30%]
[  216s] tests/test_des.py::TestDES::test_encrypt PASSED                          [ 31%]
[  216s] tests/test_des.py::TestDES::test_encrypt_large_bytes_padding PASSED      [ 32%]
[  216s] tests/test_des.py::TestDES::test_encrypt_large_bytes_fail_no_padding PASSED [ 33%]
[  216s] tests/test_des.py::TestDES::test_decrypt PASSED                          [ 33%]
[  216s] tests/test_des.py::TestDES::test_decrypt_large_bytes_padding PASSED      [ 34%]
[  216s] tests/test_des.py::TestDES::test_decrypt_fail_invalid_size PASSED        [ 35%]
[  256s] tests/test_des.py::TestDES::test_encrypt_decrypt_multiple_keys PASSED    [ 36%]
[  256s] tests/test_gss_channel_bindings.py::TestGssChannelBindingsStruct::test_application_data PASSED [ 37%]
[  256s] tests/test_gss_channel_bindings.py::TestGssChannelBindingsStruct::test_full_data PASSED [ 37%]
[  256s] tests/test_messages.py::TestGeneric::test_random_session_key PASSED      [ 38%]
[  256s] tests/test_messages.py::TestTargetInfo::test_del_item PASSED             [ 39%]
[  256s] tests/test_messages.py::TestTargetInfo::test_add_item PASSED             [ 40%]
[  256s] tests/test_messages.py::TestTargetInfo::test_get_item PASSED             [ 41%]
[  256s] tests/test_messages.py::TestNegotiate::test_negotiate_with_all PASSED    [ 41%]
[  256s] tests/test_messages.py::TestNegotiate::test_negotiate_without_version PASSED [ 42%]
[  256s] tests/test_messages.py::TestNegotiate::test_negotiate_without_domain_workstation PASSED [ 43%]
[  256s] tests/test_messages.py::TestChallenge::test_challenge_no_version PASSED  [ 44%]
[  257s] tests/test_messages.py::TestChallenge::test_challenge PASSED             [ 45%]
[  257s] tests/test_messages.py::TestChallenge::test_challenge_message_with_target_name PASSED [ 45%]
[  257s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1 FAILED [ 46%]
[  258s] tests/test_messages.py::TestAuthenticate::test_authenticate_without_domain_workstation FAILED [ 47%]
[  258s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1_non_unicode FAILED [ 48%]
[  259s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1_with_ess FAILED [ 49%]
[  260s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v2 FAILED [ 50%]
[  260s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_with_cbt FAILED [ 50%]
[  261s] tests/test_messages.py::TestAuthenticate::test_authenticate_message_with_mic FAILED [ 51%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_defaults PASSED  [ 52%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm0 PASSED [ 53%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm1 PASSED [ 54%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm2 PASSED [ 54%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm3 PASSED [ 55%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm4 PASSED [ 56%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_ntlm5 PASSED [ 57%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_illegal_ntlm_compatibility_high PASSED [ 58%]
[  261s] tests/test_ntlm.py::TestInitialiseNtlm::test_initialise_with_illegal_ntlm_compatibility_low PASSED [ 58%]
[  261s] tests/test_ntlm.py::TestMessages::test_create_negotiate_message PASSED   [ 59%]
[  262s] tests/test_ntlm.py::TestMessages::test_create_authenticate_message FAILED [ 60%]
[  262s] tests/test_ntlm.py::TestMessages::test_create_authenticate_message_without_security FAILED [ 61%]
[  263s] tests/test_ntlm.py::TestNtlmContext::test_ntlm_context FAILED            [ 62%]
[  264s] tests/test_ntlm.py::TestNtlmContext::test_ntlm_context_with_mic FAILED   [ 62%]
[  264s] tests/test_ntlm.py::TestNtlmContext::test_fail_wrap_no_context PASSED    [ 63%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_0_http_with_cbt SKIPPED [ 64%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_0_http_without_cbt SKIPPED [ 65%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_0_https_with_cbt SKIPPED [ 66%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_0_https_without_cbt SKIPPED [ 66%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_1_http_with_cbt SKIPPED [ 67%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_1_http_without_cbt SKIPPED [ 68%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_1_https_with_cbt SKIPPED [ 69%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_1_https_without_cbt SKIPPED [ 70%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_2_http_with_cbt SKIPPED [ 70%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_2_http_without_cbt SKIPPED [ 71%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_2_https_with_cbt SKIPPED [ 72%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_2_https_without_cbt SKIPPED [ 73%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_http_with_cbt_dep SKIPPED [ 74%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_http_without_cbt_dep SKIPPED [ 75%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_https_with_cbt_dep SKIPPED [ 75%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_https_without_cbt_dep SKIPPED [ 76%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_http_with_cbt SKIPPED [ 77%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_http_without_cbt SKIPPED [ 78%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_https_with_cbt SKIPPED [ 79%]
[  264s] tests/test_ntlm.py::TestNtlmFunctional::test_ntlm_3_https_without_cbt SKIPPED [ 79%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_40bit_key[True] PASSED         [ 80%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_40bit_key[False] PASSED        [ 81%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_40bit_key[True] PASSED         [ 82%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_40bit_key[False] PASSED        [ 83%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_56bit_key[True] PASSED         [ 83%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_56bit_key[False] PASSED        [ 84%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_56bit_key[True] PASSED         [ 85%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_56bit_key[False] PASSED        [ 86%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_128bit_key[True] PASSED        [ 87%]
[  265s] tests/test_rc4.py::TestARC4::test_encrypt_128bit_key[False] PASSED       [ 87%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_128bit_key[True] PASSED        [ 88%]
[  265s] tests/test_rc4.py::TestARC4::test_decrypt_128bit_key[False] PASSED       [ 89%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_invalid_source_param PASSED [ 90%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_sign_and_seal_message_ntlmv1 PASSED [ 91%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_sign_and_seal_message_ntlm2_no_key_exchange PASSED [ 91%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_sign_and_seal_message_ntlm2_key_exchange PASSED [ 92%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_unseal_message_ntlm1 PASSED [ 93%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_unseal_message_ntlm2_no_key_exchange PASSED [ 94%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_unseal_message_ntlm2_key_exchange PASSED [ 95%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_unseal_message_incorrect_checksum PASSED [ 95%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_unseal_message_incorrect_seq_num PASSED [ 96%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_sign_no_seal_message PASSED [ 97%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_verify_sign_no_unseal_message PASSED [ 98%]
[  265s] tests/test_session_security.py::TestSessionSecurity::test_nosign_or_seal_message PASSED [ 99%]
[  266s] tests/test_session_security.py::TestSessionSecurity::test_no_verify_or_unseal_message PASSED [100%]
[  266s] 
[  266s] =================================== FAILURES ===================================
[  266s] _________________________ TestComputeHash.test_ntowfv1 _________________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_hash.TestComputeHash object at 0x4004d13be0>
[  266s] 
[  266s]     def test_ntowfv1(self):
[  266s]         # 4.2.2.1.2 - NTOWFv1()
[  266s]         expected = b"\xa4\xf4\x9c\x40\x65\x10\xbd\xca" \
[  266s]                    b"\xb6\x82\x4e\xe7\xc3\x0f\xd8\x52"
[  266s] >       actual = compute_hash._ntowfv1("Password")
[  266s] 
[  266s] tests/test_compute_hash.py:17: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _________________________ TestComputeHash.test_ntowfv2 _________________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_hash.TestComputeHash object at 0x4004e63f70>
[  266s] 
[  266s]     def test_ntowfv2(self):
[  266s]         # 4.2.4.1.1 - NTOWFv2() and LMOWFv2()
[  266s]         expected = b"\x0c\x86\x8a\x40\x3b\xfd\x7a\x93" \
[  266s]                    b"\xa3\x00\x1e\xf2\x2e\xf0\x2e\x3f"
[  266s] >       actual = compute_hash._ntowfv2("User", "Password", "Domain")
[  266s] 
[  266s] tests/test_compute_hash.py:42: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ____________________ TestHashResults.test_get_LMv2_response ____________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestHashResults object at 0x4004f9b8e0>
[  266s] 
[  266s]     def test_get_LMv2_response(self):
[  266s]         # 4.2.4.2.1 - LMv2 Response
[  266s]         server_challenge = b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]         client_challenge = b"\xaa" * 8
[  266s]         expected = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                    b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                    b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s] >       actual = ComputeResponse._get_LMv2_response("User", "Password",
[  266s]                                                     "Domain", server_challenge,
[  266s]                                                     client_challenge)
[  266s] 
[  266s] tests/test_compute_response.py:37: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestHashResults.test_get_NTLMv1_response ___________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestHashResults object at 0x4004f9b310>
[  266s] 
[  266s]     def test_get_NTLMv1_response(self):
[  266s]         # 4.2.2.2.1 - NTLMv1 Response
[  266s]         server_challenge = b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]         expected_response = b"\x67\xc4\x30\x11\xf3\x02\x98\xa2" \
[  266s]                             b"\xad\x35\xec\xe6\x4f\x16\x33\x1c" \
[  266s]                             b"\x44\xbd\xbe\xd9\x27\x84\x1f\x94"
[  266s]         expected_key = b"\xd8\x72\x62\xb0\xcd\xe4\xb1\xcb" \
[  266s]                        b"\x74\x99\xbe\xcc\xcd\xf1\x07\x84"
[  266s]         actual_response, actual_key = \
[  266s] >           ComputeResponse._get_NTLMv1_response("Password", server_challenge)
[  266s] 
[  266s] tests/test_compute_response.py:51: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestHashResults.test_get_NTLM2_response ____________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestHashResults object at 0x4004fbd310>
[  266s] 
[  266s]     def test_get_NTLM2_response(self):
[  266s]         # 4.2.3.2.2 - NTLMv1 Response
[  266s]         server_challenge = b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]         client_challenge = b"\xaa" * 8
[  266s]         expected_response = b"\x75\x37\xf8\x03\xae\x36\x71\x28" \
[  266s]                             b"\xca\x45\x82\x04\xbd\xe7\xca\xf8" \
[  266s]                             b"\x1e\x97\xed\x26\x83\x26\x72\x32"
[  266s]         expected_key = b"\xd8\x72\x62\xb0\xcd\xe4\xb1\xcb" \
[  266s]                        b"\x74\x99\xbe\xcc\xcd\xf1\x07\x84"
[  266s]     
[  266s]         actual_response, actual_key = \
[  266s] >           ComputeResponse._get_NTLM2_response("Password", server_challenge,
[  266s]                                                 client_challenge)
[  266s] 
[  266s] tests/test_compute_response.py:66: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:326: in _get_NTLM2_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestHashResults.test_get_NTLMv2_response ___________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestHashResults object at 0x4004fbd490>
[  266s] 
[  266s]     def test_get_NTLMv2_response(self):
[  266s]         # 4.2.4.2.2 - NTLMv2 Response
[  266s]         server_challenge = b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]         client_challenge = b"\xaa" * 8
[  266s]         test_target_info = TargetInfo()
[  266s]         test_target_info[AvId.MSV_AV_NB_DOMAIN_NAME] = \
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]         test_target_info[AvId.MSV_AV_NB_COMPUTER_NAME] = \
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]     
[  266s]         expected_response = b"\x68\xcd\x0a\xb8\x51\xe5\x1c\x96" \
[  266s]                             b"\xaa\xbc\x92\x7b\xeb\xef\x6a\x1c" \
[  266s]                             b"\x01\x01\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa" \
[  266s]                             b"\x00\x00\x00\x00\x02\x00\x0c\x00" \
[  266s]                             b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                             b"\x69\x00\x6e\x00\x01\x00\x0c\x00" \
[  266s]                             b"\x53\x00\x65\x00\x72\x00\x76\x00" \
[  266s]                             b"\x65\x00\x72\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00"
[  266s]         expected_key = b"\x8d\xe4\x0c\xca\xdb\xc1\x4a\x82" \
[  266s]                        b"\xf1\x5c\xb0\xad\x0d\xe9\x5c\xa3"
[  266s]     
[  266s]         actual_response, actual_key = \
[  266s] >           ComputeResponse._get_NTLMv2_response("User", "Password", "Domain",
[  266s]                                                  server_challenge,
[  266s]                                                  client_challenge, b"\x00" * 8,
[  266s]                                                  test_target_info)
[  266s] 
[  266s] tests/test_compute_response.py:118: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:368: in _get_NTLMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _____________ TestChallengeResults.test_lm_v1_with_ntlm_2_response _____________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbda60>
[  266s] 
[  266s]     def test_lm_v1_with_ntlm_2_response(self):
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x02\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]     
[  266s]         # Not explicitly in the example shown but it does expect the same
[  266s]         # response that we already have set
[  266s]         expected = b"\x67\xc4\x30\x11\xf3\x02\x98\xa2" \
[  266s]                    b"\xad\x35\xec\xe6\x4f\x16\x33\x1c" \
[  266s]                    b"\x44\xbd\xbe\xd9\x27\x84\x1f\x94"
[  266s] >       actual = ComputeResponse("User", "Password", "Domain",
[  266s]                                  test_challenge_message,
[  266s]                                  2).get_lm_challenge_response()
[  266s] 
[  266s] tests/test_compute_response.py:185: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:80: in get_lm_challenge_response
[  266s]     self._get_NTLMv1_response(self._password,
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestChallengeResults.test_lm_v2_response ___________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbd790>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40055fcf10>
[  266s] 
[  266s]     def test_lm_v2_response(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]     
[  266s]         expected = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                    b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                    b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s] >       actual = ComputeResponse("User", "Password", "Domain",
[  266s]                                  test_challenge_message,
[  266s]                                  3).get_lm_challenge_response()
[  266s] 
[  266s] tests/test_compute_response.py:212: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ____ TestChallengeResults.test_lm_v2_response_with_no_target_info_timestamp ____
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbdd90>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40056a7610>
[  266s] 
[  266s]     def test_lm_v2_response_with_no_target_info_timestamp(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]     
[  266s]         test_target_info = TargetInfo()
[  266s]         test_target_info[AvId.MSV_AV_NB_DOMAIN_NAME] = \
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]         test_target_info[AvId.MSV_AV_NB_COMPUTER_NAME] = \
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info = test_target_info
[  266s]     
[  266s]         expected = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                    b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                    b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s] >       actual = ComputeResponse("User", "Password", "Domain",
[  266s]                                  test_challenge_message,
[  266s]                                  3).get_lm_challenge_response()
[  266s] 
[  266s] tests/test_compute_response.py:246: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] __ TestChallengeResults.test_lm_v2_response_with_server_target_info_timestamp __
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbdc70>
[  266s] 
[  266s]     def test_lm_v2_response_with_server_target_info_timestamp(self):
[  266s]         test_target_info = TargetInfo()
[  266s]         test_target_info[AvId.MSV_AV_NB_DOMAIN_NAME] = \
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]         test_target_info[AvId.MSV_AV_NB_COMPUTER_NAME] = \
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]         test_target_info[AvId.MSV_AV_TIMESTAMP] = b"\x00" * 8
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info = test_target_info
[  266s]     
[  266s]         # Not in MS-NLMP, using expected value
[  266s]         expected = b"\x00" * 24
[  266s] >       actual = ComputeResponse("User", "Password", "Domain",
[  266s]                                  test_challenge_message,
[  266s]                                  3).get_lm_challenge_response()
[  266s] 
[  266s] tests/test_compute_response.py:278: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestChallengeResults.test_nt_v1_response ___________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbd640>
[  266s] 
[  266s]     def test_nt_v1_response(self):
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x02\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]         test_lmv1_response = b"\x98\xde\xf7\xb8\x7f\x88\xaa\x5d" \
[  266s]                              b"\xaf\xe2\xdf\x77\x96\x88\xa1\x72" \
[  266s]                              b"\xde\xf1\x1c\x7d\x5c\xcd\xef\x13"
[  266s]     
[  266s]         expected_response = b"\x67\xc4\x30\x11\xf3\x02\x98\xa2" \
[  266s]                             b"\xad\x35\xec\xe6\x4f\x16\x33\x1c" \
[  266s]                             b"\x44\xbd\xbe\xd9\x27\x84\x1f\x94"
[  266s]         expected_exchange_key = b"\xd8\x72\x62\xb0\xcd\xe4\xb1\xcb" \
[  266s]                                 b"\x74\x99\xbe\xcc\xcd\xf1\x07\x84"
[  266s]         expected_target_info = None
[  266s]     
[  266s]         comp_response = ComputeResponse("User", "Password", "Domain",
[  266s]                                         test_challenge_message, 1)
[  266s]         actual_response, actual_exchange_key, actual_target_info = \
[  266s] >           comp_response.get_nt_challenge_response(test_lmv1_response, None)
[  266s] 
[  266s] tests/test_compute_response.py:307: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:153: in get_nt_challenge_response
[  266s]     self._get_NTLMv1_response(self._password,
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _______ TestChallengeResults.test_nt_v1_with_extended_security_response ________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbdeb0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40056a9e80>
[  266s] 
[  266s]     def test_nt_v1_with_extended_security_response(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x0a\x82"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]         test_lmv1_response = b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa" \
[  266s]                              b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                              b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]     
[  266s]         expected_response = b"\x75\x37\xf8\x03\xae\x36\x71\x28" \
[  266s]                             b"\xca\x45\x82\x04\xbd\xe7\xca\xf8" \
[  266s]                             b"\x1e\x97\xed\x26\x83\x26\x72\x32"
[  266s]         expected_exchange_key = b"\xeb\x93\x42\x9a\x8b\xd9\x52\xf8" \
[  266s]                                 b"\xb8\x9c\x55\xb8\x7f\x47\x5e\xdc"
[  266s]         expected_target_info = None
[  266s]     
[  266s]         comp_response = ComputeResponse("User", "Password", "Domain",
[  266s]                                         test_challenge_message, 1)
[  266s]         actual_response, actual_exchange_key, actual_target_info = \
[  266s] >           comp_response.get_nt_challenge_response(test_lmv1_response, None)
[  266s] 
[  266s] tests/test_compute_response.py:340: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:139: in get_nt_challenge_response
[  266s]     self._get_NTLM2_response(self._password,
[  266s] ntlm_auth/compute_response.py:326: in _get_NTLM2_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________________ TestChallengeResults.test_nt_v2_response ___________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbde20>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40055ffc70>
[  266s] 
[  266s]     def test_nt_v2_response(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_target_info = TargetInfo()
[  266s]         test_target_info[AvId.MSV_AV_NB_DOMAIN_NAME] = \
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]         test_target_info[AvId.MSV_AV_NB_COMPUTER_NAME] = \
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info = test_target_info
[  266s]     
[  266s]         test_lmv2_response = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                              b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                              b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s]     
[  266s]         expected_response = b"\x68\xcd\x0a\xb8\x51\xe5\x1c\x96" \
[  266s]                             b"\xaa\xbc\x92\x7b\xeb\xef\x6a\x1c" \
[  266s]                             b"\x01\x01\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa" \
[  266s]                             b"\x00\x00\x00\x00\x02\x00\x0c\x00" \
[  266s]                             b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                             b"\x69\x00\x6e\x00\x01\x00\x0c\x00" \
[  266s]                             b"\x53\x00\x65\x00\x72\x00\x76\x00" \
[  266s]                             b"\x65\x00\x72\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00"
[  266s]         expected_exchange_key = b"\x8d\xe4\x0c\xca\xdb\xc1\x4a\x82" \
[  266s]                                 b"\xf1\x5c\xb0\xad\x0d\xe9\x5c\xa3"
[  266s]         expected_target_info = test_target_info
[  266s]     
[  266s]         comp_response = ComputeResponse("User", "Password", "Domain",
[  266s]                                         test_challenge_message, 3)
[  266s]         actual_response, actual_exchange_key, actual_target_info = \
[  266s] >           comp_response.get_nt_challenge_response(test_lmv2_response, None)
[  266s] 
[  266s] tests/test_compute_response.py:395: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:197: in get_nt_challenge_response
[  266s]     self._get_NTLMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:368: in _get_NTLMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ___________ TestChallengeResults.test_nt_v2_response_no_target_info ____________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbddc0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40054e3400>
[  266s] 
[  266s]     def test_nt_v2_response_no_target_info(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info = None
[  266s]     
[  266s]         test_lmv2_response = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                              b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                              b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s]     
[  266s]         expected_response = b"\x39\x56\xf2\xe5\x69\xd9\xaf\xa3" \
[  266s]                             b"\xac\x2d\x4f\x36\x7d\x38\xb9\xc5" \
[  266s]                             b"\x01\x01\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00"
[  266s]         expected_exchange_key = b"\xe3\x35\x1f\x5b\xe0\xa0\x2b\xc2" \
[  266s]                                 b"\xee\xb8\x76\x52\xf7\xe0\x77\x75"
[  266s]         expected_target_info = TargetInfo()
[  266s]     
[  266s]         comp_response = ComputeResponse("User", "Password", "Domain",
[  266s]                                         test_challenge_message, 3)
[  266s]         actual_response, actual_exchange_key, actual_target_info = \
[  266s] >           comp_response.get_nt_challenge_response(test_lmv2_response, None)
[  266s] 
[  266s] tests/test_compute_response.py:443: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:197: in get_nt_challenge_response
[  266s]     self._get_NTLMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:368: in _get_NTLMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _______ TestChallengeResults.test_nt_v2_response_with_timestamp_av_pair ________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_compute_response.TestChallengeResults object at 0x4004fbd1c0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40055fb0d0>
[  266s] 
[  266s]     def test_nt_v2_response_with_timestamp_av_pair(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]     
[  266s]         test_target_info = TargetInfo()
[  266s]         test_target_info[AvId.MSV_AV_NB_DOMAIN_NAME] = \
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]         test_target_info[AvId.MSV_AV_NB_COMPUTER_NAME] = \
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]         test_target_info[AvId.MSV_AV_TIMESTAMP] = b"\x00" * 8
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info = test_target_info
[  266s]     
[  266s]         test_lmv2_response = b"\x86\xc3\x50\x97\xac\x9c\xec\x10" \
[  266s]                              b"\x25\x54\x76\x4a\x57\xcc\xcc\x19" \
[  266s]                              b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa"
[  266s]     
[  266s]         expected_response = b"\x5d\xeb\xf3\x87\x1c\x28\x94\xb8" \
[  266s]                             b"\x1f\x16\x42\x81\xed\xbf\x0b\xff" \
[  266s]                             b"\x01\x01\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa" \
[  266s]                             b"\x00\x00\x00\x00\x02\x00\x0c\x00" \
[  266s]                             b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                             b"\x69\x00\x6e\x00\x01\x00\x0c\x00" \
[  266s]                             b"\x53\x00\x65\x00\x72\x00\x76\x00" \
[  266s]                             b"\x65\x00\x72\x00\x07\x00\x08\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                             b"\x06\x00\x04\x00\x02\x00\x00\x00" \
[  266s]                             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]         expected_exchange_key = b"\x9b\x37\x06\x8f\x99\x7a\x06\x5f" \
[  266s]                                 b"\xe9\xc7\x20\x63\x32\x88\xd4\x8f"
[  266s]         expected_target_info = test_target_info
[  266s]         expected_target_info[AvId.MSV_AV_FLAGS] = \
[  266s]             struct.pack("<L", AvFlags.MIC_PROVIDED)
[  266s]     
[  266s]         comp_response = ComputeResponse("User", "Password", "Domain",
[  266s]                                         test_challenge_message, 3)
[  266s]         actual_response, actual_exchange_key, actual_target_info = \
[  266s] >           comp_response.get_nt_challenge_response(test_lmv2_response, None)
[  266s] 
[  266s] tests/test_compute_response.py:501: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/compute_response.py:197: in get_nt_challenge_response
[  266s]     self._get_NTLMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:368: in _get_NTLMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ______________ TestAuthenticate.test_authenticate_message_ntlm_v1 ______________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505e940>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40055d1790>
[  266s] 
[  266s]     def test_authenticate_message_ntlm_v1(self, monkeypatch):
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x02\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]         # Need to override the flags in the challenge message to match the
[  266s]         # expectation, these flags are inconsequential and are done manualy for
[  266s]         # sanity
[  266s]         test_challenge_message.negotiate_flags -= \
[  266s]             NegotiateFlags.NTLMSSP_TARGET_TYPE_SERVER
[  266s]         test_challenge_message.negotiate_flags |= \
[  266s]             NegotiateFlags.NTLMSSP_REQUEST_TARGET
[  266s]         test_challenge_message.negotiate_flags |= \
[  266s]             NegotiateFlags.NTLMSSP_NEGOTIATE_TARGET_INFO
[  266s]     
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x6c\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x84\x00\x00\x00\x0c\x00\x0c\x00" \
[  266s]                    b"\x48\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x54\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x5c\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x9c\x00\x00\x00\x35\x82\x80\xe2" \
[  266s]                    b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                    b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                    b"\x69\x00\x6e\x00\x55\x00\x73\x00" \
[  266s]                    b"\x65\x00\x72\x00\x43\x00\x4f\x00" \
[  266s]                    b"\x4d\x00\x50\x00\x55\x00\x54\x00" \
[  266s]                    b"\x45\x00\x52\x00\x98\xde\xf7\xb8" \
[  266s]                    b"\x7f\x88\xaa\x5d\xaf\xe2\xdf\x77" \
[  266s]                    b"\x96\x88\xa1\x72\xde\xf1\x1c\x7d" \
[  266s]                    b"\x5c\xcd\xef\x13\x67\xc4\x30\x11" \
[  266s]                    b"\xf3\x02\x98\xa2\xad\x35\xec\xe6" \
[  266s]                    b"\x4f\x16\x33\x1c\x44\xbd\xbe\xd9" \
[  266s]                    b"\x27\x84\x1f\x94\x51\x88\x22\xb1" \
[  266s]                    b"\xb3\xf3\x50\xc8\x95\x86\x82\xec" \
[  266s]                    b"\xbb\x3e\x3c\xb7"
[  266s]     
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 1, None)
[  266s] 
[  266s] tests/test_messages.py:276: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:350: in __init__
[  266s]     compute_response.get_nt_challenge_response(
[  266s] ntlm_auth/compute_response.py:153: in get_nt_challenge_response
[  266s]     self._get_NTLMv1_response(self._password,
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ________ TestAuthenticate.test_authenticate_without_domain_workstation _________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505ec40>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005c37430>
[  266s] 
[  266s]     def test_authenticate_without_domain_workstation(self, monkeypatch):
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x02\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]     
[  266s]         # Not a Microsoft example, using pre-computed value
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x50\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x68\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x48\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x48\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x50\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x80\x00\x00\x00\x31\x82\x02\xe2" \
[  266s]                    b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                    b"\x55\x00\x73\x00\x65\x00\x72\x00" \
[  266s]                    b"\x98\xde\xf7\xb8\x7f\x88\xaa\x5d" \
[  266s]                    b"\xaf\xe2\xdf\x77\x96\x88\xa1\x72" \
[  266s]                    b"\xde\xf1\x1c\x7d\x5c\xcd\xef\x13" \
[  266s]                    b"\x67\xc4\x30\x11\xf3\x02\x98\xa2" \
[  266s]                    b"\xad\x35\xec\xe6\x4f\x16\x33\x1c" \
[  266s]                    b"\x44\xbd\xbe\xd9\x27\x84\x1f\x94" \
[  266s]                    b"\x51\x88\x22\xb1\xb3\xf3\x50\xc8" \
[  266s]                    b"\x95\x86\x82\xec\xbb\x3e\x3c\xb7"
[  266s]     
[  266s] >       actual = AuthenticateMessage("User", "Password", None, None,
[  266s]                                      test_challenge_message, 1, None)
[  266s] 
[  266s] tests/test_messages.py:318: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:350: in __init__
[  266s]     compute_response.get_nt_challenge_response(
[  266s] ntlm_auth/compute_response.py:153: in get_nt_challenge_response
[  266s]     self._get_NTLMv1_response(self._password,
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ________ TestAuthenticate.test_authenticate_message_ntlm_v1_non_unicode ________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505ed90>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005c40730>
[  266s] 
[  266s]     def test_authenticate_message_ntlm_v1_non_unicode(self, monkeypatch):
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x02\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]         test_challenge_message.negotiate_flags -= \
[  266s]             NegotiateFlags.NTLMSSP_NEGOTIATE_UNICODE
[  266s]         test_challenge_message.negotiate_flags |= \
[  266s]             NegotiateFlags.NTLMSSP_NEGOTIATE_OEM
[  266s]     
[  266s]         # Not a Microsoft example, using pre-computed value
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x5a\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x72\x00\x00\x00\x06\x00\x06\x00" \
[  266s]                    b"\x48\x00\x00\x00\x04\x00\x04\x00" \
[  266s]                    b"\x4e\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x52\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x8a\x00\x00\x00\x32\x82\x02\xe2" \
[  266s]                    b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                    b"\x44\x6f\x6d\x61\x69\x6e\x55\x73" \
[  266s]                    b"\x65\x72\x43\x4f\x4d\x50\x55\x54" \
[  266s]                    b"\x45\x52\x98\xde\xf7\xb8\x7f\x88" \
[  266s]                    b"\xaa\x5d\xaf\xe2\xdf\x77\x96\x88" \
[  266s]                    b"\xa1\x72\xde\xf1\x1c\x7d\x5c\xcd" \
[  266s]                    b"\xef\x13\x67\xc4\x30\x11\xf3\x02" \
[  266s]                    b"\x98\xa2\xad\x35\xec\xe6\x4f\x16" \
[  266s]                    b"\x33\x1c\x44\xbd\xbe\xd9\x27\x84" \
[  266s]                    b"\x1f\x94\x51\x88\x22\xb1\xb3\xf3" \
[  266s]                    b"\x50\xc8\x95\x86\x82\xec\xbb\x3e" \
[  266s]                    b"\x3c\xb7"
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 1, None)
[  266s] 
[  266s] tests/test_messages.py:365: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:350: in __init__
[  266s]     compute_response.get_nt_challenge_response(
[  266s] ntlm_auth/compute_response.py:153: in get_nt_challenge_response
[  266s]     self._get_NTLMv1_response(self._password,
[  266s] ntlm_auth/compute_response.py:297: in _get_NTLMv1_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _________ TestAuthenticate.test_authenticate_message_ntlm_v1_with_ess __________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505e8b0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005c5b670>
[  266s] 
[  266s]     def test_authenticate_message_ntlm_v1_with_ess(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x0a\x82"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00"
[  266s]         )
[  266s]         # Need to override the flags in the challenge message to match the
[  266s]         # expectation, these flags are inconsequential and are done manualy
[  266s]         # for sanity
[  266s]         test_challenge_message.negotiate_flags -= \
[  266s]             NegotiateFlags.NTLMSSP_TARGET_TYPE_SERVER
[  266s]         test_challenge_message.negotiate_flags |= \
[  266s]             NegotiateFlags.NTLMSSP_REQUEST_TARGET
[  266s]     
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x6c\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x84\x00\x00\x00\x0c\x00\x0c\x00" \
[  266s]                    b"\x48\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x54\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x5c\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x9c\x00\x00\x00\x35\x82\x08\x82" \
[  266s]                    b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                    b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                    b"\x69\x00\x6e\x00\x55\x00\x73\x00" \
[  266s]                    b"\x65\x00\x72\x00\x43\x00\x4f\x00" \
[  266s]                    b"\x4d\x00\x50\x00\x55\x00\x54\x00" \
[  266s]                    b"\x45\x00\x52\x00\xaa\xaa\xaa\xaa" \
[  266s]                    b"\xaa\xaa\xaa\xaa\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x75\x37\xf8\x03" \
[  266s]                    b"\xae\x36\x71\x28\xca\x45\x82\x04" \
[  266s]                    b"\xbd\xe7\xca\xf8\x1e\x97\xed\x26" \
[  266s]                    b"\x83\x26\x72\x32"
[  266s]     
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 1, None)
[  266s] 
[  266s] tests/test_messages.py:416: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:350: in __init__
[  266s]     compute_response.get_nt_challenge_response(
[  266s] ntlm_auth/compute_response.py:139: in get_nt_challenge_response
[  266s]     self._get_NTLM2_response(self._password,
[  266s] ntlm_auth/compute_response.py:326: in _get_NTLM2_response
[  266s]     ntlm_hash = comphash._ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ______________ TestAuthenticate.test_authenticate_message_ntlm_v2 ______________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505e760>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005c52700>
[  266s] 
[  266s]     def test_authenticate_message_ntlm_v2(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]     
[  266s]         # Need to override the flags in the challenge message to match the
[  266s]         # expectation, these flags are inconsequential and are done manualy for
[  266s]         # sanity
[  266s]         test_challenge_message.negotiate_flags -= \
[  266s]             NegotiateFlags.NTLMSSP_TARGET_TYPE_SERVER
[  266s]         test_challenge_message.negotiate_flags |= \
[  266s]             NegotiateFlags.NTLMSSP_REQUEST_TARGET
[  266s]     
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x6c\x00\x00\x00\x54\x00\x54\x00" \
[  266s]                    b"\x84\x00\x00\x00\x0c\x00\x0c\x00" \
[  266s]                    b"\x48\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x54\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x5c\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\xd8\x00\x00\x00\x35\x82\x88\xe2" \
[  266s]                    b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                    b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                    b"\x69\x00\x6e\x00\x55\x00\x73\x00" \
[  266s]                    b"\x65\x00\x72\x00\x43\x00\x4f\x00" \
[  266s]                    b"\x4d\x00\x50\x00\x55\x00\x54\x00" \
[  266s]                    b"\x45\x00\x52\x00\x86\xc3\x50\x97" \
[  266s]                    b"\xac\x9c\xec\x10\x25\x54\x76\x4a" \
[  266s]                    b"\x57\xcc\xcc\x19\xaa\xaa\xaa\xaa" \
[  266s]                    b"\xaa\xaa\xaa\xaa\x68\xcd\x0a\xb8" \
[  266s]                    b"\x51\xe5\x1c\x96\xaa\xbc\x92\x7b" \
[  266s]                    b"\xeb\xef\x6a\x1c\x01\x01\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\xaa\xaa\xaa\xaa" \
[  266s]                    b"\xaa\xaa\xaa\xaa\x00\x00\x00\x00" \
[  266s]                    b"\x02\x00\x0c\x00\x44\x00\x6f\x00" \
[  266s]                    b"\x6d\x00\x61\x00\x69\x00\x6e\x00" \
[  266s]                    b"\x01\x00\x0c\x00\x53\x00\x65\x00" \
[  266s]                    b"\x72\x00\x76\x00\x65\x00\x72\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\xc5\xda\xd2\x54\x4f\xc9\x79\x90" \
[  266s]                    b"\x94\xce\x1c\xe9\x0b\xc9\xd0\x3e"
[  266s]     
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 3, None)
[  266s] 
[  266s] tests/test_messages.py:485: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _____________ TestAuthenticate.test_authenticate_message_with_cbt ______________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505eb80>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005b59b50>
[  266s] 
[  266s]     def test_authenticate_message_with_cbt(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_server_cert_hash = \
[  266s]             'E3CA49271E5089CC48CE82109F1324F41DBEDDC29A777410C738F7868C4FF405'
[  266s]     
[  266s]         # Not a Microsoft example, using pre-computed value
[  266s]         expected = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x6c\x00\x00\x00\x68\x00\x68\x00" \
[  266s]                    b"\x84\x00\x00\x00\x0c\x00\x0c\x00" \
[  266s]                    b"\x48\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x54\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x5c\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\xec\x00\x00\x00\x31\x82\x8a\xe2" \
[  266s]                    b"\x06\x01\xb1\x1d\x00\x00\x00\x0f" \
[  266s]                    b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                    b"\x69\x00\x6e\x00\x55\x00\x73\x00" \
[  266s]                    b"\x65\x00\x72\x00\x43\x00\x4f\x00" \
[  266s]                    b"\x4d\x00\x50\x00\x55\x00\x54\x00" \
[  266s]                    b"\x45\x00\x52\x00\x86\xc3\x50\x97" \
[  266s]                    b"\xac\x9c\xec\x10\x25\x54\x76\x4a" \
[  266s]                    b"\x57\xcc\xcc\x19\xaa\xaa\xaa\xaa" \
[  266s]                    b"\xaa\xaa\xaa\xaa\x04\x10\xc4\x7a" \
[  266s]                    b"\xcf\x19\x97\x89\xde\x7f\x20\x11" \
[  266s]                    b"\x95\x7a\xea\x50\x01\x01\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\xaa\xaa\xaa\xaa" \
[  266s]                    b"\xaa\xaa\xaa\xaa\x00\x00\x00\x00" \
[  266s]                    b"\x02\x00\x0c\x00\x44\x00\x6f\x00" \
[  266s]                    b"\x6d\x00\x61\x00\x69\x00\x6e\x00" \
[  266s]                    b"\x01\x00\x0c\x00\x53\x00\x65\x00" \
[  266s]                    b"\x72\x00\x76\x00\x65\x00\x72\x00" \
[  266s]                    b"\x0a\x00\x10\x00\x6e\xa1\x9d\xf0" \
[  266s]                    b"\x66\xda\x46\x22\x05\x1f\x9c\x4f" \
[  266s]                    b"\x92\xc6\xdf\x74\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\xe5\x69\x95\x1d" \
[  266s]                    b"\x15\xd4\x73\x5f\x49\xe1\x4c\xf9" \
[  266s]                    b"\xa7\xd3\xe6\x72"
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 3,
[  266s]                                      test_server_cert_hash)
[  266s] 
[  266s] tests/test_messages.py:549: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] _____________ TestAuthenticate.test_authenticate_message_with_mic ______________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_messages.TestAuthenticate object at 0x400505ea00>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005c34be0>
[  266s] 
[  266s]     def test_authenticate_message_with_mic(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]     
[  266s]         test_challenge_message = ChallengeMessage(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_challenge_message.target_info[AvId.MSV_AV_TIMESTAMP] = b"\x00" * 8
[  266s]         test_server_cert_hash = \
[  266s]             'E3CA49271E5089CC48CE82109F1324F41DBEDDC29A777410C738F7868C4FF405'
[  266s]         test_negotiate_message = NegotiateMessage(3800728115, "Domain",
[  266s]                                                   "COMPUTER")
[  266s]     
[  266s]         # Not a Microsoft example, using pre-computed value
[  266s]         expected = b"\x4E\x54\x4C\x4D\x53\x53\x50\x00" \
[  266s]                    b"\x03\x00\x00\x00\x18\x00\x18\x00" \
[  266s]                    b"\x7C\x00\x00\x00\x7C\x00\x7C\x00" \
[  266s]                    b"\x94\x00\x00\x00\x0C\x00\x0C\x00" \
[  266s]                    b"\x58\x00\x00\x00\x08\x00\x08\x00" \
[  266s]                    b"\x64\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x6C\x00\x00\x00\x10\x00\x10\x00" \
[  266s]                    b"\x10\x01\x00\x00\x31\x82\x8A\xE2" \
[  266s]                    b"\x06\x01\xB1\x1D\x00\x00\x00\x0F" \
[  266s]                    b"\xD2\xA1\x45\xDE\xA4\x25\x3E\x19" \
[  266s]                    b"\x10\xFE\x0F\x5B\x7A\x0D\x2A\x90" \
[  266s]                    b"\x44\x00\x6F\x00\x6D\x00\x61\x00" \
[  266s]                    b"\x69\x00\x6E\x00\x55\x00\x73\x00" \
[  266s]                    b"\x65\x00\x72\x00\x43\x00\x4F\x00" \
[  266s]                    b"\x4D\x00\x50\x00\x55\x00\x54\x00" \
[  266s]                    b"\x45\x00\x52\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\xA1\x3D\x03\x8A" \
[  266s]                    b"\xD0\xCA\x02\x64\x33\x89\x7C\x33" \
[  266s]                    b"\x5E\x0F\x56\xDF\x01\x01\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\xAA\xAA\xAA\xAA" \
[  266s]                    b"\xAA\xAA\xAA\xAA\x00\x00\x00\x00" \
[  266s]                    b"\x02\x00\x0C\x00\x44\x00\x6F\x00" \
[  266s]                    b"\x6D\x00\x61\x00\x69\x00\x6E\x00" \
[  266s]                    b"\x01\x00\x0C\x00\x53\x00\x65\x00" \
[  266s]                    b"\x72\x00\x76\x00\x65\x00\x72\x00" \
[  266s]                    b"\x07\x00\x08\x00\x00\x00\x00\x00" \
[  266s]                    b"\x00\x00\x00\x00\x06\x00\x04\x00" \
[  266s]                    b"\x02\x00\x00\x00\x0A\x00\x10\x00" \
[  266s]                    b"\x6E\xA1\x9D\xF0\x66\xDA\x46\x22" \
[  266s]                    b"\x05\x1F\x9C\x4F\x92\xC6\xDF\x74" \
[  266s]                    b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                    b"\x1D\x08\x89\xD1\xA5\xEE\xED\x21" \
[  266s]                    b"\x91\x9E\x1A\xB8\x27\xC3\x0B\x17"
[  266s]     
[  266s] >       actual = AuthenticateMessage("User", "Password", "Domain", "COMPUTER",
[  266s]                                      test_challenge_message, 3,
[  266s]                                      test_server_cert_hash)
[  266s] 
[  266s] tests/test_messages.py:620: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ________________ TestMessages.test_create_authenticate_message _________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_ntlm.TestMessages object at 0x400537e1f0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4005ca1cd0>
[  266s] 
[  266s]     def test_create_authenticate_message(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_challenge_string = base64.b64encode(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x2f\x82\x88\xe2"
[  266s]             b"\x38\x00\x00\x00\x33\x82\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]     
[  266s]         test_ntlm_context = Ntlm()
[  266s]         test_ntlm_context.create_negotiate_message("Domain", "COMPUTER")
[  266s]         test_ntlm_context.parse_challenge_message(test_challenge_string)
[  266s]     
[  266s]         expected_message = base64.b64encode(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x03\x00\x00\x00\x18\x00\x18\x00"
[  266s]             b"\x6c\x00\x00\x00\x54\x00\x54\x00"
[  266s]             b"\x84\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x48\x00\x00\x00\x08\x00\x08\x00"
[  266s]             b"\x54\x00\x00\x00\x10\x00\x10\x00"
[  266s]             b"\x5c\x00\x00\x00\x10\x00\x10\x00"
[  266s]             b"\xd8\x00\x00\x00\x31\x82\x8a\xe2"
[  266s]             b"\x05\x01\x28\x0a\x00\x00\x00\x0f"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x55\x00\x73\x00"
[  266s]             b"\x65\x00\x72\x00\x43\x00\x4f\x00"
[  266s]             b"\x4d\x00\x50\x00\x55\x00\x54\x00"
[  266s]             b"\x45\x00\x52\x00\x86\xc3\x50\x97"
[  266s]             b"\xac\x9c\xec\x10\x25\x54\x76\x4a"
[  266s]             b"\x57\xcc\xcc\x19\xaa\xaa\xaa\xaa"
[  266s]             b"\xaa\xaa\xaa\xaa\x68\xcd\x0a\xb8"
[  266s]             b"\x51\xe5\x1c\x96\xaa\xbc\x92\x7b"
[  266s]             b"\xeb\xef\x6a\x1c\x01\x01\x00\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x00\x00\x00\x00\xaa\xaa\xaa\xaa"
[  266s]             b"\xaa\xaa\xaa\xaa\x00\x00\x00\x00"
[  266s]             b"\x02\x00\x0c\x00\x44\x00\x6f\x00"
[  266s]             b"\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]             b"\x01\x00\x0c\x00\x53\x00\x65\x00"
[  266s]             b"\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\xc5\xda\xd2\x54\x4f\xc9\x79\x90"
[  266s]             b"\x94\xce\x1c\xe9\x0b\xc9\xd0\x3e"
[  266s]         )
[  266s]     
[  266s]         actual_message = \
[  266s] >           test_ntlm_context.create_authenticate_message("User", "Password",
[  266s]                                                           "Domain", "COMPUTER")
[  266s] 
[  266s] tests/test_ntlm.py:195: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/ntlm.py:235: in create_authenticate_message
[  266s]     msg = self._context.step(self._challenge_token)
[  266s] ntlm_auth/ntlm.py:98: in step
[  266s]     self._authenticate_message = AuthenticateMessage(
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ________ TestMessages.test_create_authenticate_message_without_security ________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_ntlm.TestMessages object at 0x400537e310>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x4006136df0>
[  266s] 
[  266s]     def test_create_authenticate_message_without_security(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         test_challenge_string = base64.b64encode(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x02\x00\x00\x00\x03\x00\x0c\x00"
[  266s]             b"\x38\x00\x00\x00\x03\x92\x8a\xe2"
[  266s]             b"\x01\x23\x45\x67\x89\xab\xcd\xef"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x24\x00\x24\x00\x44\x00\x00\x00"
[  266s]             b"\x06\x00\x70\x17\x00\x00\x00\x0f"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x02\x00\x0c\x00"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x01\x00\x0c\x00"
[  266s]             b"\x53\x00\x65\x00\x72\x00\x76\x00"
[  266s]             b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s]         )
[  266s]         test_ntlm_context = Ntlm()
[  266s]         test_ntlm_context.create_negotiate_message("Domain", "COMPUTER")
[  266s]         test_ntlm_context.parse_challenge_message(test_challenge_string)
[  266s]     
[  266s]         expected_message = base64.b64encode(
[  266s]             b"\x4e\x54\x4c\x4d\x53\x53\x50\x00"
[  266s]             b"\x03\x00\x00\x00\x18\x00\x18\x00"
[  266s]             b"\x6c\x00\x00\x00\x54\x00\x54\x00"
[  266s]             b"\x84\x00\x00\x00\x0c\x00\x0c\x00"
[  266s]             b"\x48\x00\x00\x00\x08\x00\x08\x00"
[  266s]             b"\x54\x00\x00\x00\x10\x00\x10\x00"
[  266s]             b"\x5c\x00\x00\x00\x10\x00\x10\x00"
[  266s]             b"\xd8\x00\x00\x00\x01\x92\x8a\xe2"
[  266s]             b"\x05\x01\x28\x0a\x00\x00\x00\x0f"
[  266s]             b"\x44\x00\x6f\x00\x6d\x00\x61\x00"
[  266s]             b"\x69\x00\x6e\x00\x55\x00\x73\x00"
[  266s]             b"\x65\x00\x72\x00\x43\x00\x4f\x00"
[  266s]             b"\x4d\x00\x50\x00\x55\x00\x54\x00"
[  266s]             b"\x45\x00\x52\x00\x86\xc3\x50\x97"
[  266s]             b"\xac\x9c\xec\x10\x25\x54\x76\x4a"
[  266s]             b"\x57\xcc\xcc\x19\xaa\xaa\xaa\xaa"
[  266s]             b"\xaa\xaa\xaa\xaa\x68\xcd\x0a\xb8"
[  266s]             b"\x51\xe5\x1c\x96\xaa\xbc\x92\x7b"
[  266s]             b"\xeb\xef\x6a\x1c\x01\x01\x00\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\x00\x00\x00\x00\xaa\xaa\xaa\xaa"
[  266s]             b"\xaa\xaa\xaa\xaa\x00\x00\x00\x00"
[  266s]             b"\x02\x00\x0c\x00\x44\x00\x6f\x00"
[  266s]             b"\x6d\x00\x61\x00\x69\x00\x6e\x00"
[  266s]             b"\x01\x00\x0c\x00\x53\x00\x65\x00"
[  266s]             b"\x72\x00\x76\x00\x65\x00\x72\x00"
[  266s]             b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s]             b"\xc5\xda\xd2\x54\x4f\xc9\x79\x90"
[  266s]             b"\x94\xce\x1c\xe9\x0b\xc9\xd0\x3e"
[  266s]         )
[  266s]     
[  266s]         actual_message = \
[  266s] >           test_ntlm_context.create_authenticate_message("User", "Password",
[  266s]                                                           "Domain", "COMPUTER")
[  266s] 
[  266s] tests/test_ntlm.py:264: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/ntlm.py:235: in create_authenticate_message
[  266s]     msg = self._context.step(self._challenge_token)
[  266s] ntlm_auth/ntlm.py:98: in step
[  266s]     self._authenticate_message = AuthenticateMessage(
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] ______________________ TestNtlmContext.test_ntlm_context _______________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_ntlm.TestNtlmContext object at 0x400537e490>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x40061df5b0>
[  266s] 
[  266s]     def test_ntlm_context(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version',
[  266s]                             lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key',
[  266s]                             lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp',
[  266s]                             lambda: b"\x00" * 8)
[  266s]     
[  266s]         ch = 'E3CA49271E5089CC48CE82109F1324F41DBEDDC29A777410C738F7868C4FF405'
[  266s]         cbt_data = GssChannelBindingsStruct()
[  266s]         cbt_data[cbt_data.APPLICATION_DATA] = b"tls-server-end-point:" + \
[  266s]                                               base64.b16decode(ch)
[  266s]         ntlm_context = NtlmContext("User", "Password", "Domain", "COMPUTER",
[  266s]                                    cbt_data=cbt_data)
[  266s]         actual_nego = ntlm_context.step()
[  266s]         expected_nego = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                         b"\x01\x00\x00\x00\x31\xb0\x88\xe2" \
[  266s]                         b"\x06\x00\x06\x00\x28\x00\x00\x00" \
[  266s]                         b"\x08\x00\x08\x00\x2e\x00\x00\x00" \
[  266s]                         b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                         b"\x44\x6f\x6d\x61\x69\x6e\x43\x4f" \
[  266s]                         b"\x4d\x50\x55\x54\x45\x52"
[  266s]         assert actual_nego == expected_nego
[  266s]         assert not ntlm_context.mic_present
[  266s]         assert not ntlm_context.complete
[  266s]     
[  266s]         challenge_msg = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                         b"\x02\x00\x00\x00\x2f\x82\x88\xe2" \
[  266s]                         b"\x38\x00\x00\x00\x33\x82\x8a\xe2" \
[  266s]                         b"\x01\x23\x45\x67\x89\xab\xcd\xef" \
[  266s]                         b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                         b"\x24\x00\x24\x00\x44\x00\x00\x00" \
[  266s]                         b"\x06\x00\x70\x17\x00\x00\x00\x0f" \
[  266s]                         b"\x53\x00\x65\x00\x72\x00\x76\x00" \
[  266s]                         b"\x65\x00\x72\x00\x02\x00\x0c\x00" \
[  266s]                         b"\x44\x00\x6f\x00\x6d\x00\x61\x00" \
[  266s]                         b"\x69\x00\x6e\x00\x01\x00\x0c\x00" \
[  266s]                         b"\x53\x00\x65\x00\x72\x00\x76\x00" \
[  266s]                         b"\x65\x00\x72\x00\x00\x00\x00\x00"
[  266s] >       actual_auth = ntlm_context.step(challenge_msg)
[  266s] 
[  266s] tests/test_ntlm.py:345: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/ntlm.py:98: in step
[  266s]     self._authenticate_message = AuthenticateMessage(
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] __________________ TestNtlmContext.test_ntlm_context_with_mic __________________
[  266s] 
[  266s] name = 'md4', data = b'P\x00a\x00s\x00s\x00w\x00o\x00r\x00d\x00', kwargs = {}
[  266s] 
[  266s]     def __hash_new(name, data=b'', **kwargs):
[  266s]         """new(name, data=b'') - Return a new hashing object using the named algorithm;
[  266s]         optionally initialized with data (which must be a bytes-like object).
[  266s]         """
[  266s]         if name in __block_openssl_constructor:
[  266s]             # Prefer our blake2 and sha3 implementation
[  266s]             # OpenSSL 1.1.0 comes with a limited implementation of blake2b/s.
[  266s]             # It does neither support keyed blake2 nor advanced features like
[  266s]             # salt, personal, tree hashing or SSE.
[  266s]             return __get_builtin_constructor(name)(data, **kwargs)
[  266s]         try:
[  266s] >           return _hashlib.new(name, data)
[  266s] E           ValueError: [digital envelope routines] initialization error
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:157: ValueError
[  266s] 
[  266s] During handling of the above exception, another exception occurred:
[  266s] 
[  266s] self = <tests.test_ntlm.TestNtlmContext object at 0x400521baf0>
[  266s] monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x400601d640>
[  266s] 
[  266s]     def test_ntlm_context_with_mic(self, monkeypatch):
[  266s]         monkeypatch.setattr('os.urandom', lambda s: b"\xaa" * 8)
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_version', lambda s: b"\x05\x01\x28\x0A\x00\x00\x00\x0F")
[  266s]         monkeypatch.setattr('ntlm_auth.messages.get_random_export_session_key', lambda: b"\x55" * 16)
[  266s]         monkeypatch.setattr('ntlm_auth.compute_response.get_windows_timestamp', lambda: b"\x00" * 8)
[  266s]     
[  266s]         ch = 'E3CA49271E5089CC48CE82109F1324F41DBEDDC29A777410C738F7868C4FF405'
[  266s]         cbt_data = GssChannelBindingsStruct()
[  266s]         cbt_data[cbt_data.APPLICATION_DATA] = b"tls-server-end-point:" + \
[  266s]                                               base64.b16decode(ch)
[  266s]         ntlm_context = NtlmContext("User", "Password", "Domain", "COMPUTER",
[  266s]                                    cbt_data=cbt_data)
[  266s]         ntlm_context.reset_rc4_state()  # Verifies it won't fail when the session security isn't set up.
[  266s]     
[  266s]         actual_nego = ntlm_context.step()
[  266s]         expected_nego = b"\x4e\x54\x4c\x4d\x53\x53\x50\x00" \
[  266s]                         b"\x01\x00\x00\x00\x31\xb0\x88\xe2" \
[  266s]                         b"\x06\x00\x06\x00\x28\x00\x00\x00" \
[  266s]                         b"\x08\x00\x08\x00\x2e\x00\x00\x00" \
[  266s]                         b"\x05\x01\x28\x0a\x00\x00\x00\x0f" \
[  266s]                         b"\x44\x6f\x6d\x61\x69\x6e\x43\x4f" \
[  266s]                         b"\x4d\x50\x55\x54\x45\x52"
[  266s]         assert actual_nego == expected_nego
[  266s]         assert not ntlm_context.mic_present
[  266s]         assert not ntlm_context.complete
[  266s]     
[  266s]         challenge_msg = b"\x4E\x54\x4C\x4D\x53\x53\x50\x00" \
[  266s]                         b"\x02\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                         b"\x38\x00\x00\x00\x33\x82\x8A\xE2" \
[  266s]                         b"\x01\x23\x45\x67\x89\xAB\xCD\xEF" \
[  266s]                         b"\x00\x00\x00\x00\x00\x00\x00\x00" \
[  266s]                         b"\x30\x00\x30\x00\x38\x00\x00\x00" \
[  266s]                         b"\x06\x01\xB1\x1D\x00\x00\x00\x0F" \
[  266s]                         b"\x02\x00\x0C\x00\x44\x00\x6F\x00" \
[  266s]                         b"\x6D\x00\x61\x00\x69\x00\x6E\x00" \
[  266s]                         b"\x01\x00\x0C\x00\x53\x00\x65\x00" \
[  266s]                         b"\x72\x00\x76\x00\x65\x00\x72\x00" \
[  266s]                         b"\x07\x00\x08\x00\x00\x00\x00\x00" \
[  266s]                         b"\x00\x00\x00\x00\x00\x00\x00\x00"
[  266s] >       actual_auth = ntlm_context.step(challenge_msg)
[  266s] 
[  266s] tests/test_ntlm.py:445: 
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] ntlm_auth/ntlm.py:98: in step
[  266s]     self._authenticate_message = AuthenticateMessage(
[  266s] ntlm_auth/messages.py:348: in __init__
[  266s]     compute_response.get_lm_challenge_response()
[  266s] ntlm_auth/compute_response.py:91: in get_lm_challenge_response
[  266s]     response = self._get_LMv2_response(self._user_name, self._password,
[  266s] ntlm_auth/compute_response.py:272: in _get_LMv2_response
[  266s]     nt_hash = comphash._ntowfv2(user_name, password, domain_name)
[  266s] ntlm_auth/compute_hash.py:87: in _ntowfv2
[  266s]     digest = _ntowfv1(password)
[  266s] ntlm_auth/compute_hash.py:66: in _ntowfv1
[  266s]     digest = hashlib.new('md4', password.encode('utf-16-le')).digest()
[  266s] /usr/lib64/python3.8/hashlib.py:163: in __hash_new
[  266s]     return __get_builtin_constructor(name)(data)
[  266s] _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
[  266s] 
[  266s] name = 'md4'
[  266s] 
[  266s]     def __get_builtin_constructor(name):
[  266s]         cache = __builtin_constructor_cache
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]         try:
[  266s]             if name in {'SHA1', 'sha1'}:
[  266s]                 import _sha1
[  266s]                 cache['SHA1'] = cache['sha1'] = _sha1.sha1
[  266s]             elif name in {'MD5', 'md5'}:
[  266s]                 import _md5
[  266s]                 cache['MD5'] = cache['md5'] = _md5.md5
[  266s]             elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
[  266s]                 import _sha256
[  266s]                 cache['SHA224'] = cache['sha224'] = _sha256.sha224
[  266s]                 cache['SHA256'] = cache['sha256'] = _sha256.sha256
[  266s]             elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
[  266s]                 import _sha512
[  266s]                 cache['SHA384'] = cache['sha384'] = _sha512.sha384
[  266s]                 cache['SHA512'] = cache['sha512'] = _sha512.sha512
[  266s]             elif name in {'blake2b', 'blake2s'}:
[  266s]                 import _blake2
[  266s]                 cache['blake2b'] = _blake2.blake2b
[  266s]                 cache['blake2s'] = _blake2.blake2s
[  266s]             elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
[  266s]                 import _sha3
[  266s]                 cache['sha3_224'] = _sha3.sha3_224
[  266s]                 cache['sha3_256'] = _sha3.sha3_256
[  266s]                 cache['sha3_384'] = _sha3.sha3_384
[  266s]                 cache['sha3_512'] = _sha3.sha3_512
[  266s]             elif name in {'shake_128', 'shake_256'}:
[  266s]                 import _sha3
[  266s]                 cache['shake_128'] = _sha3.shake_128
[  266s]                 cache['shake_256'] = _sha3.shake_256
[  266s]         except ImportError:
[  266s]             pass  # no extension module, this hash is unsupported.
[  266s]     
[  266s]         constructor = cache.get(name)
[  266s]         if constructor is not None:
[  266s]             return constructor
[  266s]     
[  266s] >       raise ValueError('unsupported hash type ' + name)
[  266s] E       ValueError: unsupported hash type md4
[  266s] 
[  266s] /usr/lib64/python3.8/hashlib.py:120: ValueError
[  266s] =============================== warnings summary ===============================
[  266s] ../../../../../usr/lib/python3.8/site-packages/_pytest/config/__init__.py:1294
[  266s]   /usr/lib/python3.8/site-packages/_pytest/config/__init__.py:1294: PytestConfigWarning: Unknown config option: pep8maxlinelength
[  266s]   
[  266s]     self._warn_or_fail_if_strict(f"Unknown config option: {key}\n")
[  266s] 
[  266s] -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[  266s] =========================== short test summary info ============================
[  266s] FAILED tests/test_compute_hash.py::TestComputeHash::test_ntowfv1 - ValueError...
[  266s] FAILED tests/test_compute_hash.py::TestComputeHash::test_ntowfv2 - ValueError...
[  266s] FAILED tests/test_compute_response.py::TestHashResults::test_get_LMv2_response
[  266s] FAILED tests/test_compute_response.py::TestHashResults::test_get_NTLMv1_response
[  266s] FAILED tests/test_compute_response.py::TestHashResults::test_get_NTLM2_response
[  266s] FAILED tests/test_compute_response.py::TestHashResults::test_get_NTLMv2_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_lm_v1_with_ntlm_2_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response_with_no_target_info_timestamp
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_lm_v2_response_with_server_target_info_timestamp
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_nt_v1_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_nt_v1_with_extended_security_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response_no_target_info
[  266s] FAILED tests/test_compute_response.py::TestChallengeResults::test_nt_v2_response_with_timestamp_av_pair
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_without_domain_workstation
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1_non_unicode
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v1_with_ess
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_ntlm_v2
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_with_cbt
[  266s] FAILED tests/test_messages.py::TestAuthenticate::test_authenticate_message_with_mic
[  266s] FAILED tests/test_ntlm.py::TestMessages::test_create_authenticate_message - V...
[  266s] FAILED tests/test_ntlm.py::TestMessages::test_create_authenticate_message_without_security
[  266s] FAILED tests/test_ntlm.py::TestNtlmContext::test_ntlm_context - ValueError: u...
[  266s] FAILED tests/test_ntlm.py::TestNtlmContext::test_ntlm_context_with_mic - Valu...
[  266s] ======= 26 failed, 78 passed, 20 skipped, 1 warning in 62.65s (0:01:02) ========
[  266s] error: Bad exit status from /var/tmp/rpm-tmp.OpDqex (%check)
[  266s] 
[  266s] RPM build errors:
[  266s]     Bad exit status from /var/tmp/rpm-tmp.OpDqex (%check)
[  267s] ### VM INTERACTION START ###
[  267s] [  259.293609][    T1] sysrq: Power Off
[  267s] [  259.295516][  T283] reboot: Power down
[  267s] ### VM INTERACTION END ###
[  267s] 
[  267s] old-cirrus1 failed "build python-ntlm-auth.spec" at Sun Feb 19 07:16:17 UTC 2023.
[  267s] 
