[    0s] Memory limit set to 10955196KB
[    0s] Using BUILD_ROOT=/var/cache/obs/worker/root_3
[    0s] Using BUILD_ARCH=riscv64
[    0s] 
[    4s] 
[    4s] oe-RISCV-worker28 started "build _service:extract_file:rubygem-aruba.spec" at Fri Apr 22 23:36:02 UTC 2022.
[    4s] 
[    4s] Building rubygem-aruba for project 'openEuler:Mainline:RISC-V' repository 'advanced_riscv64' arch 'riscv64' srcmd5 'b16ab656cb7b2ee4fcfb1b7af117bc76'
[    4s] 
[    4s] processing recipe /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:rubygem-aruba.spec ...
[    8s] running changelog2spec --target rpm --file /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:rubygem-aruba.spec
[    9s] init_buildsystem --configdir /var/run/obs/worker/3/build/configs --cachedir /var/cache/build --clean --rpmlist /var/cache/obs/worker/root_3/.build.rpmlist /var/cache/obs/worker/root_3/.build-srcdir/_service:extract_file:rubygem-aruba.spec build ...
[  105s] cycle: bash -> coreutils
[  105s]   breaking dependency coreutils -> bash
[  105s] cycle: bash -> coreutils -> info
[  105s]   breaking dependency coreutils -> info
[  105s] cycle: glibc -> filesystem -> bash -> coreutils
[  105s]   breaking dependency filesystem -> bash
[  105s] cycle: glibc -> filesystem -> coreutils
[  105s]   breaking dependency coreutils -> glibc
[  105s] cycle: glibc -> filesystem -> coreutils -> libacl
[  105s]   breaking dependency coreutils -> libacl
[  105s] cycle: glibc -> filesystem -> coreutils -> attr
[  105s]   breaking dependency coreutils -> attr
[  105s] cycle: coreutils -> libcap -> bash
[  105s]   breaking dependency coreutils -> libcap
[  105s] cycle: glibc -> filesystem -> coreutils -> openssl-libs
[  105s]   breaking dependency coreutils -> openssl-libs
[  105s] cycle: glibc -> filesystem -> coreutils -> libselinux
[  105s]   breaking dependency libselinux -> glibc
[  105s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2
[  105s]   breaking dependency pcre2 -> glibc
[  105s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2 -> readline
[  105s]   breaking dependency readline -> glibc
[  105s] cycle: glibc -> filesystem -> coreutils -> libselinux -> pcre2 -> readline -> ncurses-libs
[  105s]   breaking dependency coreutils -> libselinux
[  105s] cycle: glibc -> filesystem -> coreutils -> ncurses
[  105s]   breaking dependency ncurses -> glibc
[  105s] cycle: glibc -> filesystem -> coreutils -> ncurses -> ncurses-libs
[  105s]   breaking dependency ncurses -> ncurses-libs
[  105s] cycle: filesystem -> coreutils -> ncurses -> libgcc
[  105s]   breaking dependency ncurses -> libgcc
[  105s] cycle: perl-Carp -> perl-libs
[  105s]   breaking dependency perl-libs -> perl-Carp
[  105s] cycle: perl-libs -> perl-Exporter
[  105s]   breaking dependency perl-libs -> perl-Exporter
[  105s] cycle: perl-Carp -> perl-Exporter
[  105s]   breaking dependency perl-Exporter -> perl-Carp
[  105s] cycle: nss-util -> nss
[  105s]   breaking dependency nss -> nss-util
[  105s] cycle: nss-softokn -> nss-util -> nss
[  105s]   breaking dependency nss -> nss-softokn
[  105s] cycle: systemd -> cryptsetup -> device-mapper
[  105s]   breaking dependency systemd -> cryptsetup
[  105s] cycle: audit -> systemd -> pam
[  105s]   breaking dependency systemd -> pam
[  106s] [1/84] preinstalling dbus...
[  107s] [2/84] preinstalling libffi-devel...
[  107s] [3/84] preinstalling nodejs-source-map...
[  108s] [4/84] preinstalling python3-pip...
[  111s] [5/84] preinstalling python3-setuptools_scm...
[  112s] [6/84] preinstalling ncurses...
[  117s] [7/84] preinstalling coreutils...
[  123s] [8/84] preinstalling filesystem...
[  125s] [9/84] preinstalling glibc...
[  129s] [10/84] preinstalling libgcc...
[  130s] [11/84] preinstalling diffutils...
[  131s] [12/84] preinstalling libcap-ng...
[  132s] [13/84] preinstalling libgpg-error...
[  133s] [14/84] preinstalling libpcap...
[  134s] [15/84] preinstalling libsmartcols...
[  135s] [16/84] preinstalling libuuid...
[  136s] [17/84] preinstalling libxcrypt...
[  137s] [18/84] preinstalling lz4...
[  138s] [19/84] preinstalling m4...
[  139s] [20/84] preinstalling ncurses-libs...
[  140s] [21/84] preinstalling nspr...
[  141s] [22/84] preinstalling xz-libs...
[  142s] [23/84] preinstalling zlib...
[  143s] [24/84] preinstalling attr...
[  143s] [25/84] preinstalling libdb...
[  148s] [26/84] preinstalling zstd...
[  150s] [27/84] preinstalling audit-libs...
[  151s] [28/84] preinstalling file...
[  151s] [29/84] preinstalling iptables-libs...
[  152s] [30/84] preinstalling libacl...
[  153s] [31/84] preinstalling libgcrypt...
[  154s] [32/84] preinstalling openssl-libs...
[  156s] [33/84] preinstalling readline...
[  157s] [34/84] preinstalling bash...
[  159s] [35/84] preinstalling cmake...
[  175s] [36/84] preinstalling perl-libs...
[  178s] [37/84] preinstalling dnf...
[  179s] [38/84] preinstalling pcre2...
[  180s] [39/84] preinstalling perl-Exporter...
[  181s] [40/84] preinstalling bzip2...
[  181s] [41/84] preinstalling hostname...
[  182s] [42/84] preinstalling libcap...
[  183s] [43/84] preinstalling pcre...
[  184s] [44/84] preinstalling popt...
[  185s] [45/84] preinstalling acl...
[  185s] [46/84] preinstalling elfutils...
[  187s] [47/84] preinstalling libblkid...
[  188s] [48/84] preinstalling openssl...
[  189s] [49/84] preinstalling sqlite...
[  191s] [50/84] preinstalling tar...
[  193s] [51/84] preinstalling info...
[  193s] [52/84] preinstalling libgcrypt-devel...
[  194s] [53/84] preinstalling lua...
[  195s] [54/84] preinstalling libselinux...
[  196s] [55/84] preinstalling perl-Carp...
[  197s] [56/84] preinstalling copy-jdk-configs...
[  198s] [57/84] preinstalling libfdisk...
[  199s] [58/84] preinstalling perl-Digest-MD5...
[  200s] [59/84] preinstalling grep...
[  201s] [60/84] preinstalling rpm-libs...
[  202s] [61/84] preinstalling chkconfig...
[  202s] [62/84] preinstalling sed...
[  203s] [63/84] preinstalling libmount...
[  204s] [64/84] preinstalling libsemanage...
[  205s] [65/84] preinstalling perl-constant...
[  206s] [66/84] preinstalling findutils...
[  207s] [67/84] preinstalling xz...
[  208s] [68/84] preinstalling perl-Getopt-Long...
[  209s] [69/84] preinstalling glib2...
[  213s] [70/84] preinstalling nss...
[  214s] [71/84] preinstalling perl-Data-Dumper...
[  215s] [72/84] preinstalling systemd-libs...
[  216s] [73/84] preinstalling systemd...
[  220s] [74/84] preinstalling dbus-libs...
[  221s] [75/84] preinstalling nss-util...
[  222s] [76/84] preinstalling audit...
[  223s] [77/84] preinstalling nss-softokn...
[  225s] [78/84] preinstalling pam...
[  226s] [79/84] preinstalling rpm...
[  228s] [80/84] preinstalling openEuler-rpm-config...
[  228s] [81/84] preinstalling util-linux...
[  232s] [82/84] preinstalling device-mapper...
[  233s] [83/84] preinstalling cryptsetup...
[  234s] [84/84] preinstalling lvm2...
[  237s] 
[  254s] initializing rpm db...
[  264s] reordering...cycle: bash -> coreutils
[  264s]   breaking dependency coreutils -> bash
[  264s] cycle: bash -> coreutils -> info
[  264s]   breaking dependency coreutils -> info
[  264s] cycle: glibc -> basesystem -> filesystem -> bash -> coreutils -> gmp
[  264s]   breaking dependency filesystem -> bash
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> gmp
[  264s]   breaking dependency coreutils -> gmp
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils
[  264s]   breaking dependency coreutils -> glibc
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> libacl
[  264s]   breaking dependency coreutils -> libacl
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> attr
[  264s]   breaking dependency coreutils -> attr
[  264s] cycle: coreutils -> libcap -> bash
[  264s]   breaking dependency coreutils -> libcap
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs
[  264s]   breaking dependency openssl-libs -> glibc
[  264s] cycle: coreutils -> openssl-libs -> ca-certificates -> bash
[  264s]   breaking dependency ca-certificates -> bash
[  264s] cycle: coreutils -> openssl-libs -> ca-certificates
[  264s]   breaking dependency ca-certificates -> coreutils
[  264s] cycle: coreutils -> openssl-libs -> ca-certificates -> grep -> bash
[  264s]   breaking dependency grep -> bash
[  264s] cycle: coreutils -> openssl-libs -> ca-certificates -> grep
[  264s]   breaking dependency ca-certificates -> grep
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> ca-certificates -> p11-kit
[  264s]   breaking dependency p11-kit -> glibc
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> ca-certificates -> p11-kit -> libffi
[  264s]   breaking dependency openssl-libs -> ca-certificates
[  264s] cycle: coreutils -> openssl-libs -> crypto-policies -> bash
[  264s]   breaking dependency crypto-policies -> bash
[  264s] cycle: coreutils -> openssl-libs -> crypto-policies
[  264s]   breaking dependency crypto-policies -> coreutils
[  264s] cycle: coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency grep -> coreutils
[  264s] cycle: glibc -> basesystem -> filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency glibc -> basesystem
[  264s] cycle: glibc -> glibc-common -> bash -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency glibc-common -> bash
[  264s] cycle: glibc -> glibc-common -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency glibc-common -> coreutils
[  264s] cycle: glibc -> glibc-common
[  264s]   breaking dependency glibc-common -> glibc
[  264s] cycle: glibc -> glibc-common -> libselinux
[  264s]   breaking dependency libselinux -> glibc
[  264s] cycle: glibc -> glibc-common -> libselinux -> pcre2
[  264s]   breaking dependency pcre2 -> glibc
[  264s] cycle: glibc -> glibc-common -> libselinux -> pcre2 -> readline
[  264s]   breaking dependency readline -> glibc
[  264s] cycle: glibc -> glibc-common -> libselinux -> pcre2 -> readline -> ncurses-libs
[  264s]   breaking dependency libselinux -> pcre2
[  264s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> bash -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency bash -> coreutils
[  264s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> bash -> filesystem -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency libsepol -> bash
[  264s] cycle: glibc -> glibc-common -> libselinux -> libsepol -> coreutils -> openssl-libs -> crypto-policies -> grep
[  264s]   breaking dependency coreutils -> openssl-libs
[  264s] cycle: libselinux -> libsepol -> coreutils
[  264s]   breaking dependency libsepol -> coreutils
[  264s] cycle: glibc -> glibc-common -> libselinux -> libsepol
[  264s]   breaking dependency glibc -> glibc-common
[  264s] cycle: glibc -> filesystem -> coreutils -> libselinux -> libsepol
[  264s]   breaking dependency filesystem -> coreutils
[  264s] cycle: filesystem -> setup
[  264s]   breaking dependency filesystem -> setup
[  264s] cycle: systemd -> cryptsetup -> device-mapper
[  264s]   breaking dependency systemd -> cryptsetup
[  264s] cycle: perl-libs -> perl-Carp
[  264s]   breaking dependency perl-libs -> perl-Carp
[  264s] cycle: perl-libs -> perl-Exporter
[  264s]   breaking dependency perl-libs -> perl-Exporter
[  264s] cycle: perl-Carp -> perl-Exporter
[  264s]   breaking dependency perl-Exporter -> perl-Carp
[  264s] cycle: perl -> perl-PathTools
[  264s]   breaking dependency perl -> perl-PathTools
[  264s] cycle: perl -> perl-ExtUtils-MakeMaker
[  264s]   breaking dependency perl -> perl-ExtUtils-MakeMaker
[  264s] cycle: perl -> perl-File-Path -> perl-PathTools
[  264s]   breaking dependency perl -> perl-File-Path
[  264s] cycle: perl -> perl-Getopt-Long -> perl-Pod-Usage
[  264s]   breaking dependency perl -> perl-Getopt-Long
[  264s] cycle: perl -> perl-Locale-Maketext
[  264s]   breaking dependency perl -> perl-Locale-Maketext
[  264s] cycle: perl -> perl-Pod-Simple
[  264s]   breaking dependency perl -> perl-Pod-Simple
[  264s] cycle: perl -> perl-Socket
[  264s]   breaking dependency perl -> perl-Socket
[  264s] cycle: perl -> perl-Storable
[  264s]   breaking dependency perl -> perl-Storable
[  264s] cycle: perl -> perl-Text-Tabs+Wrap
[  264s]   breaking dependency perl -> perl-Text-Tabs+Wrap
[  264s] cycle: perl -> perl-Time-Local -> perl-constant
[  264s]   breaking dependency perl -> perl-Time-Local
[  264s] cycle: perl -> perl-constant
[  264s]   breaking dependency perl -> perl-constant
[  264s] cycle: perl -> perl-threads
[  264s]   breaking dependency perl -> perl-threads
[  264s] cycle: perl -> perl-threads-shared
[  264s]   breaking dependency perl -> perl-threads-shared
[  264s] cycle: perl -> perl-Archive-Tar
[  264s]   breaking dependency perl -> perl-Archive-Tar
[  264s] cycle: perl -> perl-B-Debug
[  264s]   breaking dependency perl -> perl-B-Debug
[  264s] cycle: perl -> perl-CPAN-Meta -> perl-CPAN-Meta-Requirements
[  264s]   breaking dependency perl -> perl-CPAN-Meta
[  264s] cycle: perl -> perl-CPAN-Meta-Requirements
[  264s]   breaking dependency perl -> perl-CPAN-Meta-Requirements
[  264s] cycle: perl -> perl-CPAN-Meta-YAML
[  264s]   breaking dependency perl -> perl-CPAN-Meta-YAML
[  264s] cycle: perl -> perl-Compress-Raw-Bzip2
[  264s]   breaking dependency perl -> perl-Compress-Raw-Bzip2
[  264s] cycle: perl -> perl-Compress-Raw-Zlib
[  264s]   breaking dependency perl -> perl-Compress-Raw-Zlib
[  264s] cycle: perl -> perl-Config-Perl-V
[  264s]   breaking dependency perl -> perl-Config-Perl-V
[  264s] cycle: perl -> perl-DB_File
[  264s]   breaking dependency perl -> perl-DB_File
[  264s] cycle: perl -> perl-Data-Dumper
[  264s]   breaking dependency perl -> perl-Data-Dumper
[  264s] cycle: perl -> perl-Devel-PPPort
[  264s]   breaking dependency perl -> perl-Devel-PPPort
[  264s] cycle: perl -> perl-Digest -> perl-MIME-Base64
[  264s]   breaking dependency perl -> perl-Digest
[  264s] cycle: perl -> perl-Digest-MD5 -> perl-Digest -> perl-MIME-Base64
[  264s]   breaking dependency perl -> perl-Digest-MD5
[  264s] cycle: perl -> perl-Digest-SHA
[  264s]   breaking dependency perl -> perl-Digest-SHA
[  264s] cycle: perl -> perl-Encode
[  264s]   breaking dependency perl -> perl-Encode
[  264s] cycle: perl -> perl-Env
[  264s]   breaking dependency perl -> perl-Env
[  264s] cycle: perl -> perl-ExtUtils-Command
[  264s]   breaking dependency perl -> perl-ExtUtils-Command
[  264s] cycle: perl -> perl-ExtUtils-Install
[  264s]   breaking dependency perl -> perl-ExtUtils-Install
[  264s] cycle: perl -> perl-ExtUtils-Manifest
[  264s]   breaking dependency perl -> perl-ExtUtils-Manifest
[  264s] cycle: perl -> perl-ExtUtils-ParseXS
[  264s]   breaking dependency perl -> perl-ExtUtils-ParseXS
[  264s] cycle: perl -> perl-File-Fetch -> perl-PathTools
[  264s]   breaking dependency perl -> perl-File-Fetch
[  264s] cycle: perl -> perl-File-Temp -> perl-PathTools
[  264s]   breaking dependency perl -> perl-File-Temp
[  264s] cycle: perl -> perl-Filter
[  264s]   breaking dependency perl -> perl-Filter
[  264s] cycle: perl -> perl-Filter-Simple -> perl-Filter
[  264s]   breaking dependency perl -> perl-Filter-Simple
[  264s] cycle: perl -> perl-HTTP-Tiny
[  264s]   breaking dependency perl -> perl-HTTP-Tiny
[  264s] cycle: perl -> perl-IO-Compress
[  264s]   breaking dependency perl -> perl-IO-Compress
[  264s] cycle: perl -> perl-IO-Socket-IP
[  264s]   breaking dependency perl -> perl-IO-Socket-IP
[  264s] cycle: perl -> perl-IPC-Cmd -> perl-ExtUtils-MakeMaker
[  264s]   breaking dependency perl -> perl-IPC-Cmd
[  264s] cycle: perl -> perl-IPC-SysV
[  264s]   breaking dependency perl -> perl-IPC-SysV
[  264s] cycle: perl -> perl-JSON-PP
[  264s]   breaking dependency perl -> perl-JSON-PP
[  264s] cycle: perl -> perl-Locale-Codes -> perl-constant
[  264s]   breaking dependency perl -> perl-Locale-Codes
[  264s] cycle: perl -> perl-MIME-Base64
[  264s]   breaking dependency perl -> perl-MIME-Base64
[  264s] cycle: perl -> perl-Math-BigInt
[  264s]   breaking dependency perl -> perl-Math-BigInt
[  264s] cycle: perl -> perl-Math-BigInt-FastCalc -> perl-Math-BigInt
[  264s]   breaking dependency perl -> perl-Math-BigInt-FastCalc
[  264s] cycle: perl -> perl-Math-BigRat -> perl-Math-BigInt
[  264s]   breaking dependency perl -> perl-Math-BigRat
[  264s] cycle: perl -> perl-Module-CoreList
[  264s]   breaking dependency perl -> perl-Module-CoreList
[  264s] cycle: perl -> perl-Module-Load -> perl-PathTools
[  264s]   breaking dependency perl -> perl-Module-Load
[  264s] cycle: perl -> perl-Module-Load-Conditional
[  264s]   breaking dependency perl -> perl-Module-Load-Conditional
[  264s] cycle: perl -> perl-Module-Metadata
[  264s]   breaking dependency perl -> perl-Module-Metadata
[  264s] cycle: perl -> perl-Params-Check
[  264s]   breaking dependency perl -> perl-Params-Check
[  264s] cycle: perl -> perl-PerlIO-via-QuotedPrint -> perl-MIME-Base64
[  264s]   breaking dependency perl -> perl-PerlIO-via-QuotedPrint
[  264s] cycle: perl -> perl-Pod-Checker
[  264s]   breaking dependency perl -> perl-Pod-Checker
[  264s] cycle: perl -> perl-Pod-Escapes
[  264s]   breaking dependency perl -> perl-Pod-Escapes
[  264s] cycle: perl -> perl-Pod-Parser
[  264s]   breaking dependency perl -> perl-Pod-Parser
[  264s] cycle: perl -> perl-Pod-Perldoc
[  264s]   breaking dependency perl -> perl-Pod-Perldoc
[  264s] cycle: perl -> perl-Pod-Usage
[  264s]   breaking dependency perl -> perl-Pod-Usage
[  264s] cycle: perl -> perl-Sys-Syslog
[  264s]   breaking dependency perl -> perl-Sys-Syslog
[  264s] cycle: perl -> perl-Term-Cap
[  264s]   breaking dependency perl -> perl-Term-Cap
[  264s] cycle: perl -> perl-Test-Harness
[  264s]   breaking dependency perl -> perl-Test-Harness
[  264s] cycle: perl -> perl-Test-Simple
[  264s]   breaking dependency perl -> perl-Test-Simple
[  264s] cycle: perl -> perl-Text-Balanced
[  264s]   breaking dependency perl -> perl-Text-Balanced
[  264s] cycle: perl -> perl-Thread-Queue -> perl-threads-shared
[  264s]   breaking dependency perl -> perl-Thread-Queue
[  264s] cycle: perl -> perl-Unicode-Collate -> perl-PathTools
[  264s]   breaking dependency perl -> perl-Unicode-Collate
[  264s] cycle: perl -> perl-autodie
[  264s]   breaking dependency perl -> perl-autodie
[  264s] cycle: perl -> perl-bignum -> perl-Math-BigInt
[  264s]   breaking dependency perl -> perl-bignum
[  264s] cycle: perl -> perl-devel
[  264s]   breaking dependency perl -> perl-devel
[  264s] cycle: perl -> perl-Encode-devel
[  264s]   breaking dependency perl -> perl-Encode-devel
[  264s] cycle: perl -> perl-experimental
[  264s]   breaking dependency perl -> perl-experimental
[  264s] cycle: perl -> perl-libnet -> perl-Digest-MD5 -> perl-Digest -> perl-MIME-Base64
[  264s]   breaking dependency perl -> perl-libnet
[  264s] cycle: perl -> perl-podlators
[  264s]   breaking dependency perl -> perl-podlators
[  264s] cycle: perl -> perl-version
[  264s]   breaking dependency perl -> perl-version
[  264s] cycle: glib2 -> gamin
[  264s]   breaking dependency glib2 -> gamin
[  264s] cycle: systemd -> gnutls -> unbound-libs -> shadow -> pam -> audit
[  264s]   breaking dependency systemd -> gnutls
[  264s] cycle: systemd -> pam -> audit
[  264s]   breaking dependency systemd -> pam
[  264s] cycle: systemd -> shadow -> pam -> audit
[  264s]   breaking dependency systemd -> shadow
[  264s] cycle: pam -> libpwquality
[  264s]   breaking dependency pam -> libpwquality
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage
[  264s]   breaking dependency perl-Pod-Usage -> perl-Getopt-Long
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Encode
[  264s]   breaking dependency perl-podlators -> perl-Encode
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators
[  264s]   breaking dependency perl-podlators -> perl-Getopt-Long
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Pod-Simple -> perl-Encode
[  264s]   breaking dependency perl-Encode -> perl-Getopt-Long
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-podlators -> perl-Pod-Simple
[  264s]   breaking dependency perl-podlators -> perl-Pod-Simple
[  264s] cycle: perl-Pod-Usage -> perl-podlators
[  264s]   breaking dependency perl-podlators -> perl-Pod-Usage
[  264s] cycle: groff -> perl-Getopt-Long -> perl-Pod-Usage -> perl-Pod-Perldoc
[  264s]   breaking dependency groff -> perl-Getopt-Long
[  264s] cycle: rubygems -> rubygem-openssl
[  264s]   breaking dependency rubygem-openssl -> rubygems
[  264s] cycle: rubygems -> rubygem-psych
[  264s]   breaking dependency rubygem-psych -> rubygems
[  264s] cycle: libxcrypt-devel -> glibc-devel
[  264s]   breaking dependency glibc-devel -> libxcrypt-devel
[  264s] cycle: cmake-data -> cmake
[  264s]   breaking dependency cmake -> cmake-data
[  264s] cycle: nss-util -> nss
[  264s]   breaking dependency nss -> nss-util
[  264s] cycle: nss-softokn -> nss-util -> nss
[  264s]   breaking dependency nss -> nss-softokn
[  264s] cycle: perl-Getopt-Long -> perl-Pod-Usage -> perl-Pod-Perldoc -> perl-Pod-Simple
[  264s]   breaking dependency perl-Pod-Perldoc -> perl-Pod-Simple
[  264s] cycle: openssh -> openssh-server
[  264s]   breaking dependency openssh-server -> openssh
[  264s] cycle: git -> perl-Git
[  264s]   breaking dependency git -> perl-Git
[  264s] cycle: perl-ExtUtils-Install -> perl-ExtUtils-MakeMaker
[  264s]   breaking dependency perl-ExtUtils-MakeMaker -> perl-ExtUtils-Install
[  265s] done
[  265s] querying package ids...
[  297s] [1/378] installing cmake-filesystem-3.22.0-1.oe1
[  298s] [2/378] installing fuse-common-3.9.2-5.oe1
[  301s] [3/378] installing kernel-headers-5.10-3.oe1
[  306s] [4/378] installing libreport-filesystem-2.13.1-5.oe1
[  307s] [5/378] installing ncurses-base-6.1-14.oe1
[  309s] [6/378] installing openEuler-gpg-keys-1.0-2.5.oe1
[  310s] [7/378] installing python-setuptools-59.4.0-3.oe1
[  310s] [8/378] installing qt5-srpm-macros-5.15.2-1.oe1
[  311s] [9/378] installing tzdata-2021a-2.oe1
[  319s] [10/378] installing web-assets-5-9.oe1
[  320s] [11/378] installing dnf-data-4.10.0-1.oe1
[  320s] [12/378] installing js-jquery-3.5.0-1.oe1
[  322s] [13/378] installing openEuler-repos-1.0-2.5.oe1
[  322s] [14/378] installing openEuler-release-20.03LTS-40.oe1
[  323s] [15/378] installing filesystem-3.9-3.oe1
[  334s] warning: group mail does not exist - using root
[  334s] [16/378] installing emacs-filesystem-1:27.1-5.oe1
[  335s] [17/378] installing libgcc-10.3.1-10.oe1
[  337s] [18/378] installing setup-2.13.3-4.oe1
[  340s] [19/378] installing glibc-2.34-74.oe1
[  345s] [20/378] installing brotli-1.0.9-2.oe1
[  348s] [21/378] installing chrpath-0.16-12.oe1
[  349s] [22/378] installing cpio-2.13-4.oe1
[  350s] [23/378] installing diffutils-3.7-4.oe1
[  356s] [24/378] installing expat-2.2.10-1.oe1
[  358s] [25/378] installing json-c-0.15-1.oe1
[  358s] [26/378] installing keyutils-libs-1.6.3-3.oe1
[  360s] [27/378] installing libICE-1.0.10-2.oe1
[  361s] [28/378] installing libXau-1.0.9-2.oe1
[  361s] [29/378] installing libaio-0.3.112-1.oe1
[  362s] [30/378] installing libargon2-20190702-1.oe1
[  363s] [31/378] installing libatomic-10.3.1-10.oe1
[  364s] [32/378] installing libcap-ng-0.7.11-1.oe1
[  365s] [33/378] installing libev-4.24-11.oe1
[  366s] [34/378] installing libffi-3.3-31.oe1
[  367s] [35/378] installing libgomp-10.3.1-10.oe1
[  368s] [36/378] installing libgpg-error-1.41-1.oe1
[  370s] [37/378] installing libnghttp2-1.42.0-1.oe1
[  371s] [38/378] installing libpcap-14:1.9.1-7.oe1
[  372s] [39/378] installing libpipeline-1.5.3-1.oe1
[  374s] [40/378] installing libsigsegv-2.11-10.oe1
[  375s] [41/378] installing libsmartcols-2.36.1-3.oe1
[  376s] [42/378] installing libtasn1-4.16.0-2.oe1
[  377s] [43/378] installing libtool-ltdl-2.4.6-34.oe1
[  378s] [44/378] installing libunistring-0.9.10-8.oe1
[  380s] [45/378] installing libuuid-2.36.1-3.oe1
[  381s] [46/378] installing libuv-1:1.40.0-1.oe1
[  383s] [47/378] installing libxcrypt-4.4.8-4.oe1
[  385s] [48/378] installing libyaml-0.2.5-1.oe1
[  386s] [49/378] installing lz4-1.9.3-1.oe1
[  388s] [50/378] installing m4-1.4.18-14.oe1
[  389s] [51/378] installing nspr-4.32.0-1.oe1
[  390s] [52/378] installing pkgconf-1.7.3-1.oe1
[  391s] [53/378] installing rhash-1.3.5-5.oe1
[  392s] [54/378] installing which-2.21-14.oe1
[  393s] [55/378] installing xz-libs-5.2.5-1.oe1
[  394s] [56/378] installing zlib-1.2.11-18.oe1
[  395s] [57/378] installing attr-2.4.48-12.oe1
[  398s] [58/378] installing basesystem-12-2.oe1
[  399s] [59/378] installing libstdc++-10.3.1-10.oe1
[  401s] [60/378] installing ncurses-libs-6.1-14.oe1
[  402s] [61/378] installing libsepol-3.1-4.oe1
[  403s] [62/378] installing libstdc++-devel-10.3.1-10.oe1
[  413s] [63/378] installing audit-libs-1:3.0-2.oe1
[  414s] [64/378] installing file-libs-5.39-6.oe1
[  416s] [65/378] installing gmp-1:6.2.1-1.oe1
[  418s] [66/378] installing iptables-libs-1.8.1-4.oe1
[  419s] [67/378] installing less-563-2.oe1
[  421s] [68/378] installing libacl-2.2.53-7.oe1
[  422s] [69/378] installing libassuan-2.5.4-1.oe1
[  423s] [70/378] installing libedit-3.1-27.oe1
[  424s] [71/378] installing libffi-devel-3.3-31.oe1
[  427s] [72/378] installing libgcrypt-1.8.7-1.oe1
[  428s] [73/378] installing libpng-2:1.6.37-1.oe1
[  430s] [74/378] installing libxcb-1.14-1.oe1
[  431s] [75/378] installing readline-8.0-2.oe1
[  432s] [76/378] installing fuse-2.9.9-6.oe1
[  434s] [77/378] installing gc-8.0.4-2.oe1
[  435s] [78/378] installing libSM-1.2.3-2.oe1
[  436s] [79/378] installing libdb-5.3.28-35.oe1
[  441s] [80/378] installing libselinux-3.1-3.oe1
[  442s] [81/378] installing libxml2-2.9.12-5.oe1
[  444s] [82/378] installing bash-5.1-1.oe1
[  448s] [83/378] installing perl-libs-4:5.28.0-435.oe1
[  454s] [84/378] installing zstd-1.4.8-2.oe1
[  457s] [85/378] installing ncurses-6.1-14.oe1
[  467s] [86/378] installing thin-provisioning-tools-0.8.5-1.oe1
[  468s] [87/378] installing perl-parent-1:0.237-4.oe1
[  469s] [88/378] installing perl-perlfaq-5.20180915-5.oe1
[  471s] [89/378] installing libX11-1.6.9-2.oe1
[  474s] [90/378] installing mpfr-4.1.0-1.oe1
[  477s] [91/378] installing nettle-3.6-6.oe1
[  479s] [92/378] installing pcre2-10.36-1.oe1
[  481s] [93/378] installing perl-Exporter-5.74-1.oe1
[  482s] [94/378] installing file-5.39-6.oe1
[  483s] [95/378] installing gdbm-1:1.18.1-1.oe1
[  484s] [96/378] installing patch-2.7.6-12.oe1
[  486s] [97/378] installing qrencode-4.1.1-1
[  487s] [98/378] installing sed-4.8-2.oe1
[  488s] [99/378] installing acl-2.2.53-7.oe1
[  489s] [100/378] installing libcomps-0.1.15-1.oe1
[  490s] [101/378] installing pcre-8.44-1.oe1
[  492s] [102/378] installing glibc-common-2.34-74.oe1
[  507s] [103/378] installing coreutils-8.31-4.oe1
[  519s] [104/378] installing crontabs-1.11-21.oe1
[  521s] [105/378] installing libXext-1.3.4-2.oe1
[  522s] [106/378] installing libXpm-3.5.12-11.oe1
[  525s] [107/378] installing perl-Carp-1.50-418.oe1
[  526s] [108/378] installing perl-Perl-OSType-1.010-421.oe1
[  527s] [109/378] installing perl-Term-ANSIColor-4.06-511.oe1
[  529s] [110/378] installing publicsuffix-list-20200718-1.oe1
[  531s] [111/378] installing uname-build-checks-1.0-0.4.oe1
[  532s] [112/378] installing bzip2-1.0.8-3.oe1
[  534s] [113/378] installing gzip-1.10-1.oe1
[  535s] [114/378] installing hostname-3.21-2.oe1
[  537s] [115/378] installing libcap-2.32-2.oe1
[  539s] [116/378] installing libmpc-1.2.0-2.oe1
[  541s] [117/378] installing libseccomp-2.4.3-2.oe1
[  544s] [118/378] installing npth-1.5-7.oe1
[  546s] [119/378] installing popt-1.18-1.oe1
[  548s] [120/378] installing grep-3.6-1.oe1
[  550s] [121/378] installing libXt-1.2.0-0.oe1
[  552s] [122/378] installing libblkid-2.36.1-3.oe1
[  554s] [123/378] installing libidn2-2.3.0-1.oe1
[  556s] [124/378] installing libksba-1.3.5-12.oe1
[  557s] [125/378] installing tar-2:1.32-3.oe1
[  560s] [126/378] installing tcl-1:8.6.10-3.oe1
[  565s] [127/378] installing elfutils-0.185-5.oe1
[  568s] /usr/lib/systemd/systemd-sysctl: error while loading shared libraries: libkmod.so.2: cannot open shared object file: No such file or directory
[  568s] [128/378] installing info-6.7-2.oe1
[  569s] [129/378] installing jsoncpp-1.9.4-1.oe1
[  572s] [130/378] installing libgpg-error-devel-1.41-1.oe1
[  574s] [131/378] installing lua-5.3.5-6.oe1
[  577s] [132/378] installing slang-2.3.2-8.oe1
[  580s] [133/378] installing gawk-5.0.1-2.oe1
[  582s] [134/378] installing glibc-devel-2.34-74.oe1
[  593s] [135/378] installing guile-5:2.0.14-15.oe1
[  601s] [136/378] installing zip-3.0-29.oe1
[  602s] [137/378] installing libfdisk-2.36.1-3.oe1
[  604s] [138/378] installing libxcrypt-devel-4.4.8-4.oe1
[  606s] [139/378] installing newt-0.52.21-4.oe1
[  609s] [140/378] installing perl-Text-ParseWords-3.30-419.oe1
[  611s] [141/378] installing crypto-policies-20180925-3.git71ca85f.oe1
[  618s] [142/378] installing libXmu-1.1.3-1.oe1
[  619s] [143/378] installing libmount-2.36.1-3.oe1
[  621s] [144/378] installing lua-posix-33.3.1-12.oe1
[  623s] [145/378] installing unzip-6.0-47.oe1
[  625s] [146/378] installing cracklib-2.9.7-6.oe1
[  632s] [147/378] installing e2fsprogs-1.45.6-3.oe1
[  636s] [148/378] installing findutils-2:4.7.0-7.oe1
[  640s] [149/378] installing libsemanage-3.1-4.oe1
[  642s] [150/378] installing make-1:4.2.1-15.oe1
[  644s] [151/378] installing sqlite-3.24.0-9.oe1
[  648s] [152/378] installing xz-5.2.5-1.oe1
[  651s] [153/378] installing logrotate-3.15.1-2.oe1
[  652s] [154/378] installing perl-Scalar-List-Utils-3:1.52-2.oe1
[  654s] [155/378] installing perl-Time-HiRes-1.9760-2.oe1
[  656s] [156/378] installing perl-Unicode-Normalize-1.26-419.oe1
[  660s] [157/378] installing libgcrypt-devel-1.8.7-1.oe1
[  663s] [158/378] installing cpp-10.3.1-10.oe1
[  672s] [159/378] installing gnupg2-2.2.27-2.oe1
[  677s] [160/378] installing systemd-libs-243-22.oe1
[  684s] [161/378] installing dbus-libs-1:1.12.20-3.oe1
[  687s] [162/378] installing p11-kit-0.23.22-1.oe1
[  690s] [163/378] installing procps-ng-3.3.16-15.oe1
[  693s] [164/378] installing copy-jdk-configs-4.0-1.oe1
[  696s] [165/378] installing gpgme-1.15.1-1.oe1
[  698s] [166/378] installing openssl-libs-1:1.1.1f-2.oe1
[  702s] [167/378] installing chkconfig-1.14-2.oe1
[  704s] [168/378] installing libXaw-1.0.13-13.oe1
[  706s] [169/378] installing glib2-2.66.8-1.oe1
[  714s] [170/378] installing dbus-tools-1:1.12.20-3.oe1
[  716s] [171/378] installing ima-evm-utils-libs-1.2.1-8.oe1
[  718s] [172/378] installing libevent-2.1.12-4
[  721s] [173/378] installing libcroco-0.6.12-13.oe1
[  723s] [174/378] installing fipscheck-1.5.0-7.oe1
[  725s] [175/378] installing gamin-0.1.10-38.oe1
[  728s] [176/378] installing kmod-libs-27-4.oe1
[  731s] [177/378] installing libsecret-0.18.6-5.oe1
[  733s] [178/378] installing obs-env-1.0-5.oe1
[  743s] [179/378] installing kmod-27-4.oe1
[  747s] [180/378] installing binutils-2.37-6.oe1
[  758s] [181/378] installing babeltrace-1.5.8-1.oe1
[  761s] [182/378] installing p11-kit-trust-0.23.22-1.oe1
[  763s] [183/378] installing libarchive-3.5.1-1.oe1
[  771s] [184/378] installing nodejs-libs-1:16.10.0-1.oe1
[  830s] [185/378] installing ruby-2.5.8-113.oe1
[  839s] [186/378] installing ruby-irb-2.5.8-113.oe1
[  840s] [187/378] installing libverto-0.3.1-2.oe1
[  842s] [188/378] installing rubygem-openssl-2.1.2-113.oe1
[  844s] [189/378] installing rubygem-psych-3.0.2-113.oe1
[  846s] [190/378] installing ca-certificates-2020.2.46-2.oe1
[  856s] [191/378] installing gettext-0.20.1-2.oe1
[  861s] [192/378] installing gcc-10.3.1-10.oe1
[  889s] [193/378] installing rpm-libs-4.15.1-25.oe1
[  892s] [194/378] installing python-pip-wheel-19.2.3-2.fc32
[  894s] [195/378] installing rubygems-2.7.6-113.oe1
[  899s] [196/378] installing libmodulemd-2.13.0-1.oe1
[  902s] [197/378] installing gcc-c++-10.3.1-10.oe1
[  915s] [198/378] installing krb5-libs-1.18.2-3.oe1
[  918s] [199/378] installing rubygem-backports-3.11.4-1.oe1
[  923s] [200/378] installing rubygem-childprocess-0.5.9-1.oe1
[  925s] [201/378] installing rubygem-contracts-0.16.0-1.oe1
[  927s] [202/378] installing rubygem-cucumber-expressions-6.0.1-1.oe1
[  928s] [203/378] installing rubygem-cucumber-wire-0.0.1-1.oe1
[  930s] [204/378] installing rubygem-method_source-0.8.2-1.oe1
[  931s] [205/378] installing rubygem-multi_json-1.13.1-1.oe1
[  932s] [206/378] installing rubygem-multi_test-0.1.2-1.oe1
[  933s] [207/378] installing rubygem-rspec-3.8.0-1.oe1
[  935s] [208/378] installing rubygem-rspec-expectations-3.8.4-1.oe1
[  936s] [209/378] installing rubygem-rspec-mocks-3.8.1-1.oe1
[  939s] [210/378] installing rubygem-rspec-support-3.8.2-1.oe1
[  944s] [211/378] installing rubygem-slop-3.5.0-1.oe1
[  945s] [212/378] installing rubygem-builder-3.2.3-1.oe1
[  947s] [213/378] installing rubygem-diff-lcs-1.3-1.oe1
[  948s] [214/378] installing rubygem-gherkin-5.1.0-1.oe1
[  950s] [215/378] installing rubygem-minitest-5.10.3-113.oe1
[  951s] [216/378] installing libtirpc-1.3.1-1.oe1
[  953s] [217/378] installing rubygem-coderay-1.1.2-1.oe1
[  957s] [218/378] installing rubygem-cucumber-tag_expressions-1.1.1-1.oe1
[  959s] [219/378] installing rubygem-io-console-0.4.6-113.oe1
[  962s] [220/378] installing rubygem-json-2.1.0-113.oe1
[  964s] [221/378] installing rubygem-pry-0.10.4-1.oe1
[  966s] [222/378] installing rubygem-rake-12.3.0-113.oe1
[  968s] [223/378] installing rubygem-ffi-1.10.0-1.oe1
[  971s] [224/378] installing cyrus-sasl-lib-2.1.27-10.oe1
[  973s] [225/378] installing libssh-0.9.5-1.oe1
[  976s] [226/378] installing openldap-2.4.46-15.oe1
[  980s] [227/378] installing rubygem-cucumber-core-3.2.0-2.oe1
[  984s] [228/378] installing rubygem-thor-0.20.3-2.oe1
[  986s] [229/378] installing libnsl2-1.3.0-2.oe1
[  994s] [230/378] installing rubygem-rspec-core-3.8.2-2.oe1
[  996s] [231/378] installing rubygem-rdoc-6.0.1.1-113.oe1
[  999s] [232/378] installing rubygem-cucumber-3.1.2-1.oe1
[ 1001s] [233/378] installing rubygems-devel-2.7.6-113.oe1
[ 1003s] [234/378] installing python3-3.8.5-13.oe1
[ 1035s] [235/378] installing python3-pyparsing-2.4.5-1.fc32
[ 1037s] [236/378] installing python3-setuptools-59.4.0-3.oe1
[ 1042s] [237/378] installing python3-setuptools_scm-3.3.3-6.fc32
[ 1044s] [238/378] installing python3-gpgme-1.15.1-1.oe1
[ 1047s] [239/378] installing python3-libcomps-0.1.15-1.oe1
[ 1049s] [240/378] installing libpsl-0.21.1-1.oe1
[ 1052s] [241/378] installing gdb-headless-9.2-5.oe1
[ 1062s] [242/378] installing systemtap-sdt-devel-4.1-3.oe1
[ 1064s] [243/378] installing gdb-9.2-5.oe1
[ 1067s] [244/378] installing python3-pip-19.2.3-2.fc32
[ 1076s] [245/378] installing libcurl-7.79.1-1.oe1
[ 1078s] [246/378] installing curl-7.79.1-1.oe1
[ 1080s] [247/378] installing librepo-1.14.2-2.oe1
[ 1083s] [248/378] installing rpm-4.15.1-25.oe1
[ 1087s] [249/378] installing efi-srpm-macros-4-3.oe1
[ 1089s] [250/378] installing cmake-rpm-macros-3.22.0-1.oe1
[ 1092s] [251/378] installing libsolv-0.7.20-1.oe1
[ 1099s] [252/378] installing python3-rpm-4.15.1-25.oe1
[ 1101s] [253/378] installing openEuler-rpm-config-30-22.oe1
[ 1103s] [254/378] installing cmake-3.22.0-1.oe1
[ 1117s] [255/378] installing libdnf-0.65.0-2.oe1
[ 1120s] [256/378] installing cmake-data-3.22.0-1.oe1
[ 1139s] [257/378] installing python3-libdnf-0.65.0-2.oe1
[ 1142s] [258/378] installing perl-4:5.28.0-435.oe1
[ 1151s] [259/378] installing perl-B-Debug-1.26-4.oe1
[ 1152s] [260/378] installing perl-Env-1.04-397.oe1
[ 1153s] [261/378] installing perl-Devel-PPPort-3.42-4.oe1
[ 1155s] [262/378] installing perl-Pod-Escapes-1:1.07-419.oe1
[ 1156s] [263/378] installing perl-Text-Tabs+Wrap-2013.0523-419.oe1
[ 1157s] [264/378] installing perl-Algorithm-Diff-1.1903-14.oe1
[ 1159s] [265/378] installing perl-Params-Check-1:0.38-418.oe1
[ 1160s] [266/378] installing perl-Term-Cap-1.17-510.oe1
[ 1161s] [267/378] installing perl-TermReadKey-2.38-2.oe1
[ 1164s] [268/378] installing perl-Text-Balanced-2.03-420.oe1
[ 1166s] [269/378] installing perl-threads-1:2.22-419.oe1
[ 1168s] [270/378] installing openssl-1:1.1.1f-2.oe1
[ 1170s] [271/378] installing perl-Config-Perl-V-0.30-5.oe1
[ 1172s] [272/378] installing perl-Error-1:0.17029-1.oe1
[ 1174s] [273/378] installing perl-Filter-2:1.59-2.oe1
[ 1177s] [274/378] installing perl-IPC-SysV-2.07-5.oe1
[ 1179s] [275/378] installing perl-Locale-Maketext-1:1.28-1.oe1
[ 1181s] [276/378] installing perl-constant-1.33-421.oe1
[ 1183s] [277/378] installing perl-MIME-Base64-3.15-418.oe1
[ 1185s] [278/378] installing perl-CPAN-Meta-YAML-0.018-420.oe1
[ 1187s] [279/378] installing perl-Socket-4:2.029-2.oe1
[ 1188s] [280/378] installing perl-Storable-1:3.15-2.oe1
[ 1191s] [281/378] installing python3-hawkey-0.65.0-2.oe1
[ 1193s] [282/378] installing perl-PerlIO-via-QuotedPrint-0.08-397.oe1
[ 1195s] [283/378] installing perl-Digest-1.17-419.oe1
[ 1196s] [284/378] installing perl-Filter-Simple-1:0.94-1.oe1
[ 1197s] [285/378] installing perl-IO-Socket-IP-0.39-420.oe1
[ 1199s] [286/378] installing perl-Text-Diff-1.45-7.oe1
[ 1200s] [287/378] installing perl-Time-Local-2:1.280-6.oe1
[ 1201s] [288/378] installing perl-version-8:0.99.24-3.oe1
[ 1203s] [289/378] installing perl-IPC-System-Simple-1.25-19.oe1
[ 1205s] [290/378] installing perl-threads-shared-1.59-2.oe1
[ 1207s] [291/378] installing perl-Compress-Raw-Bzip2-2.100-1.oe1
[ 1208s] [292/378] installing perl-Compress-Raw-Zlib-1:2.100-1.oe1
[ 1210s] [293/378] installing perl-Locale-Codes-3.58-2.oe1
[ 1212s] [294/378] installing perl-Math-BigInt-1:1.9998.13-5.oe1
[ 1214s] [295/378] installing perl-PathTools-3.75-4.oe1
[ 1216s] [296/378] installing python3-dnf-4.10.0-1.oe1
[ 1221s] [297/378] installing perl-Data-Dumper-2.172-3.oe1
[ 1223s] [298/378] installing perl-Sys-Syslog-0.35-420.oe1
[ 1225s] [299/378] installing perl-Encode-4:2.98-9.oe1
[ 1230s] [300/378] installing autogen-5.18.16-1.oe1
[ 1233s] [301/378] installing nodejs-1:16.10.0-1.oe1
[ 1236s] [302/378] installing systemd-243-22.oe1
[ 1254s] /var/tmp/rpm-tmp.7aFNKc: line 8: groupadd: command not found
[ 1254s] /var/tmp/rpm-tmp.7aFNKc: line 10: groupadd: command not found
[ 1254s] /var/tmp/rpm-tmp.7aFNKc: line 13: groupadd: command not found
[ 1254s] /var/tmp/rpm-tmp.7aFNKc: line 16: groupadd: command not found
[ 1254s] [303/378] installing dbus-common-1:1.12.20-3.oe1
[ 1256s] [304/378] installing nodejs-source-map-0.5.6-1.oe1
[ 1259s] [305/378] installing perl-Module-Load-1:0.32-418.oe1
[ 1260s] [306/378] installing nodejs-packaging-20-1.oe1
[ 1262s] [307/378] installing dnf-4.10.0-1.oe1
[ 1265s] Failed to preset unit, unit dnf-automatic.timer does not exist.
[ 1265s] Failed to preset unit, unit dnf-automatic-notifyonly.timer does not exist.
[ 1265s] Failed to preset unit, unit dnf-automatic-download.timer does not exist.
[ 1265s] Failed to preset unit, unit dnf-automatic-install.timer does not exist.
[ 1265s] [308/378] installing perl-File-Which-1.23-1.oe1
[ 1266s] [309/378] installing perl-Thread-Queue-3.13-3.oe1
[ 1268s] [310/378] installing perl-experimental-0.020-2.oe1
[ 1269s] [311/378] installing perl-Digest-MD5-2.55-419.oe1
[ 1271s] [312/378] installing perl-File-Path-2.16-4.oe1
[ 1272s] [313/378] installing perl-Math-BigInt-FastCalc-0.500.700-4.oe1
[ 1275s] [314/378] installing perl-Module-Metadata-1.000036-3.oe1
[ 1276s] [315/378] installing perl-CPAN-Meta-Requirements-2.140-419.oe1
[ 1280s] [316/378] installing perl-Encode-devel-4:2.98-9.oe1
[ 1282s] [317/378] installing perl-HTTP-Tiny-0.076-3.oe1
[ 1283s] [318/378] installing perl-Math-BigRat-0.2614-2.oe1
[ 1285s] [319/378] installing audit-1:3.0-2.oe1
[ 1288s] [320/378] installing perl-DB_File-1.842-2.oe1
[ 1290s] [321/378] installing perl-autodie-2.29-398.oe1
[ 1291s] [322/378] installing perl-Unicode-Collate-1.25-4.oe1
[ 1296s] [323/378] installing perl-IO-Compress-2.081-6.oe1
[ 1297s] [324/378] installing perl-podlators-1:4.14-1.oe1
[ 1299s] [325/378] installing perl-ExtUtils-Command-1:7.60-1.oe1
[ 1300s] [326/378] installing perl-ExtUtils-Manifest-1:1.71-4.oe1
[ 1301s] [327/378] installing perl-bignum-0.50-4.oe1
[ 1303s] [328/378] installing perl-File-Temp-1:0.230.800-4.oe1
[ 1305s] [329/378] installing perl-libnet-3.11-420.oe1
[ 1306s] [330/378] installing pam-1.5.1-1.oe1
[ 1311s] [331/378] installing libpwquality-1.4.4-1.oe1
[ 1314s] [332/378] installing perl-File-HomeDir-1.004-4.oe1
[ 1315s] [333/378] installing shadow-2:4.8.1-5.oe1
[ 1318s] [334/378] installing perl-Test-Simple-2:1.302175-2.oe1
[ 1320s] [335/378] installing libutempter-1.1.6-16.oe1
[ 1328s] [336/378] installing unbound-libs-1.10.1-4.oe1
[ 1333s] [337/378] installing dbus-daemon-1:1.12.20-3.oe1
[ 1338s] [338/378] installing openssh-server-8.2p1-10.oe1
[ 1342s] Created symlink /etc/systemd/system/multi-user.target.wants/sshd.service -> /usr/lib/systemd/system/sshd.service.
[ 1342s] [339/378] installing groff-1.22.4-4.oe1
[ 1365s] [340/378] installing dbus-1:1.12.20-3.oe1
[ 1368s] [341/378] installing man-db-2.9.3-2.oe1
[ 1375s] [342/378] installing perl-Pod-Perldoc-1:3.28-3.oe1
[ 1377s] [343/378] installing gnutls-3.6.15-3.oe1
[ 1381s] [344/378] installing util-linux-2.36.1-3.oe1
[ 1389s] [345/378] installing nss-help-3.72.0-2.oe1
[ 1391s] [346/378] installing perl-Pod-Usage-4:1.69-418.oe1
[ 1394s] [347/378] installing device-mapper-8:1.02.172-1.oe1
[ 1403s] [348/378] installing openssh-8.2p1-10.oe1
[ 1407s] [349/378] installing perl-Getopt-Long-1:2.52-1.oe1
[ 1409s] [350/378] installing cryptsetup-2.3.3-3.oe1
[ 1413s] [351/378] installing device-mapper-event-8:1.02.172-1.oe1
[ 1416s] Created symlink /etc/systemd/system/sockets.target.wants/dm-event.socket -> /usr/lib/systemd/system/dm-event.socket.
[ 1416s] [352/378] installing nss-3.72.0-2.oe1
[ 1426s] [353/378] installing openssh-clients-8.2p1-10.oe1
[ 1430s] [354/378] installing nss-util-3.72.0-2.oe1
[ 1433s] [355/378] installing perl-ExtUtils-ParseXS-2:3.35-1.oe1
[ 1435s] [356/378] installing perl-Module-CoreList-1:5.20180920-2.oe1
[ 1436s] [357/378] installing perl-Digest-SHA-1:6.02-7.oe1
[ 1438s] [358/378] installing perl-Pod-Parser-1.63-397.oe1
[ 1440s] [359/378] installing perl-Pod-Simple-1:3.35-418.oe1
[ 1442s] [360/378] installing perl-Test-Harness-1:3.43_02-1.oe1
[ 1444s] [361/378] installing perl-Archive-Tar-2.30-421.oe1
[ 1445s] [362/378] installing perl-JSON-PP-1:4.04-2.oe1
[ 1448s] [363/378] installing lvm2-8:2.03.11-1.oe1
[ 1455s] Created symlink /etc/systemd/system/sysinit.target.wants/lvm2-lvmpolld.socket -> /usr/lib/systemd/system/lvm2-lvmpolld.socket.
[ 1455s] [364/378] installing autoconf-2.69-30.oe1
[ 1458s] [365/378] installing git-2.23.0-12.oe1
[ 1469s] [366/378] installing nss-softokn-3.72.0-2.oe1
[ 1472s] [367/378] installing perl-Pod-Checker-4:1.73-398.oe1
[ 1474s] [368/378] installing perl-Git-2.23.0-12.oe1
[ 1475s] [369/378] installing perl-CPAN-Meta-2.150010-419.oe1
[ 1479s] [370/378] installing perl-Module-Load-Conditional-0.68-418.oe1
[ 1481s] [371/378] installing automake-1.16.1-6.oe1
[ 1483s] [372/378] installing perl-ExtUtils-MakeMaker-1:7.60-1.oe1
[ 1486s] [373/378] installing perl-ExtUtils-Install-2.14-419.oe1
[ 1493s] [374/378] installing perl-IPC-Cmd-2:1.04-4.oe1
[ 1495s] [375/378] installing rpm-build-4.15.1-25.oe1
[ 1497s] [376/378] installing gcc_secure-1.0-0.9.oe1
[ 1499s] [377/378] installing perl-File-Fetch-0.56-4.oe1
[ 1500s] [378/378] installing perl-devel-4:5.28.0-435.oe1
[ 1516s] removing nis flags from /var/cache/obs/worker/root_3/etc/nsswitch.conf...
[ 1517s] now finalizing build dir...
[ 1528s] Running build time source services...
[ 1546s] -----------------------------------------------------------------
[ 1546s] ----- building rubygem-aruba.spec (user abuild)
[ 1546s] -----------------------------------------------------------------
[ 1546s] -----------------------------------------------------------------
[ 1553s] + exec rpmbuild -ba --define '_srcdefattr (-,root,root)' --nosignature --define 'disturl obs://private/openEuler:Mainline:RISC-V/advanced_riscv64/b16ab656cb7b2ee4fcfb1b7af117bc76-rubygem-aruba' /home/abuild/rpmbuild/SOURCES/rubygem-aruba.spec
[ 1553s] error: bad date in %changelog: Thur Mar 3 2022 liqiuyu <liqiuyu@kylinos.cn> - 0.14.14-1
[ 1554s] Executing(%prep): /bin/sh -e /var/tmp/rpm-tmp.UoW2xK
[ 1554s] + umask 022
[ 1554s] + cd /home/abuild/rpmbuild/BUILD
[ 1554s] + cd /home/abuild/rpmbuild/BUILD
[ 1554s] + rm -rf aruba-0.14.14
[ 1554s] + /usr/bin/gem unpack /home/abuild/rpmbuild/SOURCES/aruba-0.14.14.gem
[ 1568s] Unpacked gem: '/home/abuild/rpmbuild/BUILD/aruba-0.14.14'
[ 1568s] + /usr/bin/gem spec /home/abuild/rpmbuild/SOURCES/aruba-0.14.14.gem --ruby
[ 1572s] + STATUS=0
[ 1572s] + '[' 0 -ne 0 ']'
[ 1572s] + cd aruba-0.14.14
[ 1572s] + /usr/bin/chmod -Rf a+rX,u+w,g-w,o-w .
[ 1572s] + read -d '' gemspec_remove_dep_script
[ 1572s] + :
[ 1572s] + echo 'gemspec_file = '\''/home/abuild/rpmbuild/BUILD/aruba-0.14.14.gemspec'\'' 
[ 1572s]   
[ 1572s]   name = '\''childprocess'\'' 
[ 1572s]   requirements = '\''>= 0.6.3'\'' 
[ 1572s]   
[ 1572s]   type = :runtime 
[ 1572s]   
[ 1572s]   spec = Gem::Specification.load(gemspec_file) 
[ 1572s]   abort("#{gemspec_file} is not accessible.") unless spec 
[ 1572s]   
[ 1572s]   dep = spec.dependencies.detect { |d| d.type == type && d.name == name } 
[ 1572s]   if dep 
[ 1572s]     if requirements 
[ 1572s]       requirements = Gem::Requirement.create(requirements).requirements 
[ 1572s]       requirements.each do |r| 
[ 1572s]         unless dep.requirement.requirements.reject! { |dependency_requirements| dependency_requirements == r } 
[ 1572s]           abort("Requirement '\''#{r.first} #{r.last}'\'' was not possible to remove for dependency '\''#{dep}'\''!") 
[ 1572s]         end 
[ 1572s]       end 
[ 1572s]       spec.dependencies.delete dep if dep.requirement.requirements.empty? 
[ 1572s]     else 
[ 1572s]       spec.dependencies.delete dep 
[ 1572s]     end 
[ 1572s]   else 
[ 1572s]     abort("Dependency '\''#{name}'\'' was not found!") 
[ 1572s]   end 
[ 1572s]   File.write gemspec_file, spec.to_ruby'
[ 1572s] + ruby
[ 1575s] + unset -v gemspec_remove_dep_script
[ 1575s] + RPM_EC=0
[ 1575s] ++ jobs -p
[ 1575s] + exit 0
[ 1575s] Executing(%build): /bin/sh -e /var/tmp/rpm-tmp.Gtpgy5
[ 1575s] + umask 022
[ 1575s] + cd /home/abuild/rpmbuild/BUILD
[ 1575s] + cd aruba-0.14.14
[ 1575s] + gem build ../aruba-0.14.14.gemspec
[ 1579s] WARNING:  open-ended dependency on cucumber (>= 1.3.19) is not recommended
[ 1579s]   if cucumber is semantically versioned, use:
[ 1579s]     add_runtime_dependency 'cucumber', '~> 1.3', '>= 1.3.19'
[ 1579s] WARNING:  open-ended dependency on rspec-expectations (>= 2.99) is not recommended
[ 1579s]   if rspec-expectations is semantically versioned, use:
[ 1579s]     add_runtime_dependency 'rspec-expectations', '~> 2.99'
[ 1579s] WARNING:  See http://guides.rubygems.org/specification-reference/ for help
[ 1582s]   Successfully built RubyGem
[ 1582s]   Name: aruba
[ 1582s]   Version: 0.14.14
[ 1582s]   File: aruba-0.14.14.gem
[ 1582s] + mkdir -p ./usr/share/gems
[ 1582s] + CONFIGURE_ARGS='--with-cflags='\''-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/generic-hardened-cc1 -fasynchronous-unwind-tables -fstack-clash-protection'\'' '
[ 1582s] + gem install -V --local --build-root . --force --document=ri,rdoc aruba-0.14.14.gem
[ 1590s] WARNING:  You build with buildroot.
[ 1590s]   Build root: /home/abuild/rpmbuild/BUILD/aruba-0.14.14
[ 1590s]   Bin dir: /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/bin
[ 1590s]   Gem home: /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.document
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.gitignore
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.rspec
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.rubocop.yml
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.simplecov
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.travis.yml
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/.yardopts
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/CHANGELOG.md
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/CONTRIBUTING.md
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/Gemfile
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/LICENSE
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/README.md
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/Rakefile
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/TODO.md
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/appveyor.yml
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/aruba.gemspec
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/bin/aruba
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/config/.gitignore
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/cucumber.yml
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/doc/dependency_decisions.yml
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/.nav
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/01_getting_started_with_aruba/cleanup_working_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/01_getting_started_with_aruba/run_commands.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/01_getting_started_with_aruba/supported_testing_frameworks.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/activate_announcer_on_command_failure.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/basics.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/command_runtime_environment.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/console_history_file.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/exit_timeout.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/fixtures_directories.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/fixtures_path_prefix.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/home_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/io_timeout.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/keep_ansi.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/log_level.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/physical_block_size.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/remove_ansi_escape_sequences.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/root_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/startup_wait_time.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/02_configure_aruba/working_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/disable_bunder.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/check_stderr_of_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/run_a_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/send_signal_to_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/command/stop_command.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/environment/append_environment_variable.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/environment/modify_home_variable_for_testing.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/environment/prepend_environment_variable.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/environment/set_environment_variable.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/append_to_file.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/cd_to_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_directory.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_file.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature
[ 1593s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/check_permissions_of_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/compare_files.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/copy_file_or_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/create_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/move_file_or_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/overwrite_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/remove_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/remove_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/rspec/hooks/define_after_hook_for_commands.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/rspec/hooks/define_before_hook_for_commands.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/find_a_started_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/find_command_in_PATH.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/read_stderr_of_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/read_stdout_of_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/run_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/run_simple.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/send_signal_to_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/stop_all_commands.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/stop_single_command.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/terminate_all_commands.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/use_last_command_started.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/command/use_last_command_stopped.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/core/expand_path.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/environment/append_environment_variable.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/environment/delete_environment_variable.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/environment/prepend_environment_variable.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/environment/set_environment_variable.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/cd_to_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/check_existence_file_or_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/check_if_path_is_absolute.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/check_if_path_is_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/check_if_path_is_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/check_if_path_is_relative.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/create_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/move_file_or_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/report_disk_usage.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/filesystem/use_fixtures.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/text/extract_text.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/text/replace_variables.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/text/sanitize_text.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/04_aruba_api/text/unescape_text.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/command/check_timeouts.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/directory/have_sub_directory.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/file/be_existing_executable.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/file/be_existing_file.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/file/have_file_content.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/file/have_file_size.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/path/be_an_absolute_path.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/path/be_an_existing_path.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/05_use_rspec_matchers/path/have_permissions.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/06_use_aruba_cli/initialize_project_with_aruba.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/06_use_aruba_cli/open_console.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/08_other/improve_performance_if_using_jruby.feature
[ 1595s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/step_definitions/hooks.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/support/aruba.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/support/env.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/features/support/simplecov_setup.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/.gitignore
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/.rspec
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/README.md
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/Rakefile
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/bin/aruba-test-cli
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/cli-app.gemspec
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/features/support/env.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/lib/cli/app.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/lib/cli/app/suppress_simple_cov_output.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/lib/cli/app/version.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/script/console
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/spec/spec_helper.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/cli-app/spec/support/aruba.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/copy/file.txt
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/.gitignore
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/.rspec
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/README.md
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/Rakefile
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/cli-app.gemspec
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/lib/cli/app.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/empty-app/lib/cli/app/version.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/getting-started-app/.gitignore
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/getting-started-app/Gemfile
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/getting-started-app/README.md
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/getting-started-app/features/support/env.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/fixtures/spawn_process/stderr.sh
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/bundler.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/commands.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/core.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/deprecated.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/environment.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/filesystem.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/text.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/aruba_path.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/basic_configuration.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/basic_configuration/option.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cli.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/colorizer.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/command.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/config.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/config/jruby.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/config_wrapper.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/console.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/console/help.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/contracts/absolute_path.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/contracts/enum.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/contracts/is_power_of_two.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/contracts/relative_path.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/command.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/core.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/deprecated.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/environment.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/file.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/hooks.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/rvm.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/cucumber/testing_frameworks.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/errors.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/event_bus.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/event_bus/name_resolver.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/events.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/extensions/string/strip.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/file_size.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/generators/script_file.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/hooks.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/in_config_wrapper.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/in_process.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/initializer.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/jruby.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/base/base_matcher.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/base/object_formatter.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/collection.rb
[ 1598s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/collection/all.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/collection/include_an_object.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/be_successfully_executed.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_exit_status.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_finished_in_time.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_output.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_output_on_stderr.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_output_on_stdout.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/command/have_output_size.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/deprecated.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/deprecated/file.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/directory.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/directory/be_an_existing_directory.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/directory/have_sub_directory.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/environment.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/be_a_command_found_in_path.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/be_an_existing_executable.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/be_an_existing_file.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/have_file_content.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/have_file_size.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/file/have_same_file_content.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path/a_path_matching_pattern.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path/be_an_absolute_path.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path/be_an_existing_path.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path/have_permissions.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/path/match_path_pattern.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/rspec_matcher_include_regexp.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/string.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/string/include_output_string.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/string/match_output_string.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/string/output_string_eq.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platform.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/announcer.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/aruba_file_creator.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/aruba_fixed_size_file_creator.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/aruba_logger.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/command_monitor.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/determine_disk_usage.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/determine_file_size.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/disk_usage_calculator.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/filesystem_status.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/local_environment.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/simple_table.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/unix_command_string.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/unix_environment_variables.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/unix_platform.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/unix_which.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/windows_command_string.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/windows_environment_variables.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/windows_platform.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/platforms/windows_which.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/processes/basic_process.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/processes/debug_process.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/processes/in_process.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/processes/spawn_process.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/reporting.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/rspec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/runtime.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/setup.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/spawn_process.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/version.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/script/bootstrap
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/script/console
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/script/test
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/bundler_spec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/commands_spec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/core_spec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/deprecated_spec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/filesystem_spec.rb
[ 1600s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api/runtime_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/api_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/aruba_path_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/basic_configuration_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/configuration_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/hooks_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/in_config_wrapper_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/jruby_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/command/have_output_size_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/command_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/deprecated_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/directory_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/file_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/matchers/path_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/platform/simple_table_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/platform/windows_environment_variables_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/platforms/unix_command_string_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/platforms/windows_command_string_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/processes/spawn_process_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/rspec_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/aruba/runtime_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/event_bus/name_resolver_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/event_bus_spec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/spec_helper.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/configs/.keep
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/configs/aruba.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/configs/pry.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/configs/rspec.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/helpers/.keep
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/helpers/reporting.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/matchers/.keep
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/matchers/option.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_contexts/.keep
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_contexts/aruba.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_examples/.keep
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_examples/configuration.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_examples/directory.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/spec/support/shared_examples/file.rb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/css/console.css
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/css/filesystem.css
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/css/pygments-autumn.css
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/files.erb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/images/LICENSE
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/images/folder.png
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/images/page_white.png
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/images/page_white_gherkin.png
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/images/page_white_ruby.png
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/index.erb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/js/filesystem.js
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/js/jquery-1.11.3.min.js
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/templates/main.erb
[ 1604s] /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/bin/aruba
[ 1604s] Use on ruby 1.8.7
[ 1604s] * Make sure you add something like that to your `Gemfile`. Otherwise you will
[ 1604s]   get cucumber > 2 and this will fail on ruby 1.8.7
[ 1604s] 
[ 1604s]   gem 'cucumber', '~> 1.3.20'
[ 1604s] 
[ 1604s] With aruba >= 1.0 there will be breaking changes. Make sure to read https://github.com/cucumber/aruba/blob/master/History.md for 1.0.0
[ 1604s] Successfully installed aruba-0.14.14
[ 1604s] Parsing documentation for aruba-0.14.14
[ 1604s] Parsing sources...
[ 1604s]   0% [ 1/112]  lib/aruba.rb
[ 1604s]   1% [ 2/112]  lib/aruba/api.rb
[ 1604s]   2% [ 3/112]  lib/aruba/api/bundler.rb
[ 1604s]   3% [ 4/112]  lib/aruba/api/commands.rb
[ 1605s]   4% [ 5/112]  lib/aruba/api/core.rb
[ 1606s]   5% [ 6/112]  lib/aruba/api/deprecated.rb
[ 1609s]   6% [ 7/112]  lib/aruba/api/environment.rb
[ 1609s]   7% [ 8/112]  lib/aruba/api/filesystem.rb
[ 1610s]   8% [ 9/112]  lib/aruba/api/text.rb
[ 1610s]   8% [10/112]  lib/aruba/aruba_path.rb
[ 1611s]   9% [11/112]  lib/aruba/basic_configuration.rb
[ 1611s]  10% [12/112]  lib/aruba/basic_configuration/option.rb
[ 1612s]  11% [13/112]  lib/aruba/cli.rb
[ 1612s]  12% [14/112]  lib/aruba/colorizer.rb
[ 1612s]  13% [15/112]  lib/aruba/command.rb
[ 1613s]  14% [16/112]  lib/aruba/config.rb
[ 1613s]  15% [17/112]  lib/aruba/config/jruby.rb
[ 1614s]  16% [18/112]  lib/aruba/config_wrapper.rb
[ 1614s]  16% [19/112]  lib/aruba/console.rb
[ 1614s]  17% [20/112]  lib/aruba/console/help.rb
[ 1614s]  18% [21/112]  lib/aruba/contracts/absolute_path.rb
[ 1614s]  19% [22/112]  lib/aruba/contracts/enum.rb
[ 1614s]  20% [23/112]  lib/aruba/contracts/is_power_of_two.rb
[ 1614s]  21% [24/112]  lib/aruba/contracts/relative_path.rb
[ 1614s]  22% [25/112]  lib/aruba/cucumber.rb
[ 1614s]  23% [26/112]  lib/aruba/cucumber/command.rb
[ 1615s]  24% [27/112]  lib/aruba/cucumber/core.rb
[ 1615s]  25% [28/112]  lib/aruba/cucumber/deprecated.rb
[ 1616s]  25% [29/112]  lib/aruba/cucumber/environment.rb
[ 1616s]  26% [30/112]  lib/aruba/cucumber/file.rb
[ 1616s]  27% [31/112]  lib/aruba/cucumber/hooks.rb
[ 1617s]  28% [32/112]  lib/aruba/cucumber/rvm.rb
[ 1617s]  29% [33/112]  lib/aruba/cucumber/testing_frameworks.rb
[ 1617s]  30% [34/112]  lib/aruba/errors.rb
[ 1617s]  31% [35/112]  lib/aruba/event_bus.rb
[ 1617s]  32% [36/112]  lib/aruba/event_bus/name_resolver.rb
[ 1618s]  33% [37/112]  lib/aruba/events.rb
[ 1618s]  33% [38/112]  lib/aruba/extensions/string/strip.rb
[ 1618s]  34% [39/112]  lib/aruba/file_size.rb
[ 1618s]  35% [40/112]  lib/aruba/generators/script_file.rb
[ 1618s]  36% [41/112]  lib/aruba/hooks.rb
[ 1619s]  37% [42/112]  lib/aruba/in_config_wrapper.rb
[ 1619s]  38% [43/112]  lib/aruba/in_process.rb
[ 1619s]  39% [44/112]  lib/aruba/initializer.rb
[ 1619s]  40% [45/112]  lib/aruba/jruby.rb
[ 1619s]  41% [46/112]  lib/aruba/matchers/base/base_matcher.rb
[ 1620s]  41% [47/112]  lib/aruba/matchers/base/object_formatter.rb
[ 1620s]  42% [48/112]  lib/aruba/matchers/collection.rb
[ 1620s]  43% [49/112]  lib/aruba/matchers/collection/all.rb
[ 1620s]  44% [50/112]  lib/aruba/matchers/collection/include_an_object.rb
[ 1620s]  45% [51/112]  lib/aruba/matchers/command.rb
[ 1620s]  46% [52/112]  lib/aruba/matchers/command/be_successfully_executed.rb
[ 1621s]  47% [53/112]  lib/aruba/matchers/command/have_exit_status.rb
[ 1621s]  48% [54/112]  lib/aruba/matchers/command/have_finished_in_time.rb
[ 1621s]  49% [55/112]  lib/aruba/matchers/command/have_output.rb
[ 1621s]  50% [56/112]  lib/aruba/matchers/command/have_output_on_stderr.rb
[ 1621s]  50% [57/112]  lib/aruba/matchers/command/have_output_on_stdout.rb
[ 1621s]  51% [58/112]  lib/aruba/matchers/command/have_output_size.rb
[ 1621s]  52% [59/112]  lib/aruba/matchers/deprecated.rb
[ 1621s]  53% [60/112]  lib/aruba/matchers/deprecated/file.rb
[ 1621s]  54% [61/112]  lib/aruba/matchers/directory.rb
[ 1621s]  55% [62/112]  lib/aruba/matchers/directory/be_an_existing_directory.rb
[ 1621s]  56% [63/112]  lib/aruba/matchers/directory/have_sub_directory.rb
[ 1621s]  57% [64/112]  lib/aruba/matchers/environment.rb
[ 1621s]  58% [65/112]  lib/aruba/matchers/file.rb
[ 1621s]  58% [66/112]  lib/aruba/matchers/file/be_a_command_found_in_path.rb
[ 1621s]  59% [67/112]  lib/aruba/matchers/file/be_an_existing_executable.rb
[ 1621s]  60% [68/112]  lib/aruba/matchers/file/be_an_existing_file.rb
[ 1622s]  61% [69/112]  lib/aruba/matchers/file/have_file_content.rb
[ 1622s]  62% [70/112]  lib/aruba/matchers/file/have_file_size.rb
[ 1622s]  63% [71/112]  lib/aruba/matchers/file/have_same_file_content.rb
[ 1622s]  64% [72/112]  lib/aruba/matchers/path.rb
[ 1622s]  65% [73/112]  lib/aruba/matchers/path/a_path_matching_pattern.rb
[ 1622s]  66% [74/112]  lib/aruba/matchers/path/be_an_absolute_path.rb
[ 1622s]  66% [75/112]  lib/aruba/matchers/path/be_an_existing_path.rb
[ 1622s]  67% [76/112]  lib/aruba/matchers/path/have_permissions.rb
[ 1622s]  68% [77/112]  lib/aruba/matchers/path/match_path_pattern.rb
[ 1622s]  69% [78/112]  lib/aruba/matchers/rspec_matcher_include_regexp.rb
[ 1622s]  70% [79/112]  lib/aruba/matchers/string.rb
[ 1622s]  71% [80/112]  lib/aruba/matchers/string/include_output_string.rb
[ 1622s]  72% [81/112]  lib/aruba/matchers/string/match_output_string.rb
[ 1623s]  73% [82/112]  lib/aruba/matchers/string/output_string_eq.rb
[ 1623s]  74% [83/112]  lib/aruba/platform.rb
[ 1623s]  75% [84/112]  lib/aruba/platforms/announcer.rb
[ 1623s]  75% [85/112]  lib/aruba/platforms/aruba_file_creator.rb
[ 1624s]  76% [86/112]  lib/aruba/platforms/aruba_fixed_size_file_creator.rb
[ 1624s]  77% [87/112]  lib/aruba/platforms/aruba_logger.rb
[ 1624s]  78% [88/112]  lib/aruba/platforms/command_monitor.rb
[ 1625s]  79% [89/112]  lib/aruba/platforms/determine_disk_usage.rb
[ 1625s]  80% [90/112]  lib/aruba/platforms/determine_file_size.rb
[ 1625s]  81% [91/112]  lib/aruba/platforms/disk_usage_calculator.rb
[ 1625s]  82% [92/112]  lib/aruba/platforms/filesystem_status.rb
[ 1625s]  83% [93/112]  lib/aruba/platforms/local_environment.rb
[ 1625s]  83% [94/112]  lib/aruba/platforms/simple_table.rb
[ 1625s]  84% [95/112]  lib/aruba/platforms/unix_command_string.rb
[ 1625s]  85% [96/112]  lib/aruba/platforms/unix_environment_variables.rb
[ 1626s]  86% [97/112]  lib/aruba/platforms/unix_platform.rb
[ 1627s]  87% [98/112]  lib/aruba/platforms/unix_which.rb
[ 1627s]  88% [99/112]  lib/aruba/platforms/windows_command_string.rb
[ 1628s]  89% [100/112]  lib/aruba/platforms/windows_environment_variables.rb
[ 1628s]  90% [101/112]  lib/aruba/platforms/windows_platform.rb
[ 1628s]  91% [102/112]  lib/aruba/platforms/windows_which.rb
[ 1628s]  91% [103/112]  lib/aruba/processes/basic_process.rb
[ 1629s]  92% [104/112]  lib/aruba/processes/debug_process.rb
[ 1629s]  93% [105/112]  lib/aruba/processes/in_process.rb
[ 1629s]  94% [106/112]  lib/aruba/processes/spawn_process.rb
[ 1630s]  95% [107/112]  lib/aruba/reporting.rb
[ 1630s]  96% [108/112]  lib/aruba/rspec.rb
[ 1631s]  97% [109/112]  lib/aruba/runtime.rb
[ 1631s]  98% [110/112]  lib/aruba/setup.rb
[ 1632s]  99% [111/112]  lib/aruba/spawn_process.rb
[ 1632s] 100% [112/112]  lib/aruba/version.rb
[ 1637s] 
[ 1637s] Installing ri documentation for aruba-0.14.14
[ 1637s] Installing darkfish documentation for aruba-0.14.14
[ 1659s] Done installing documentation for aruba after 57 seconds
[ 1659s] 1 gem installed
[ 1659s] + RPM_EC=0
[ 1659s] ++ jobs -p
[ 1659s] + exit 0
[ 1659s] Executing(%install): /bin/sh -e /var/tmp/rpm-tmp.cILqGq
[ 1659s] + umask 022
[ 1659s] + cd /home/abuild/rpmbuild/BUILD
[ 1659s] + '[' /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64 '!=' / ']'
[ 1659s] + rm -rf /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64
[ 1659s] ++ dirname /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64
[ 1659s] + mkdir -p /home/abuild/rpmbuild/BUILDROOT
[ 1659s] + mkdir /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64
[ 1659s] + cd aruba-0.14.14
[ 1659s] + mkdir -p /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64/usr/share/gems
[ 1659s] + cp -a ./usr/share/gems/build_info ./usr/share/gems/cache ./usr/share/gems/doc ./usr/share/gems/extensions ./usr/share/gems/gems ./usr/share/gems/specifications /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64/usr/share/gems/
[ 1663s] + rm -f /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64/usr/share/gems/cache/aruba-0.14.14.gem
[ 1663s] + pushd /home/abuild/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64/usr/share/gems/gems/aruba-0.14.14
[ 1663s] ~/rpmbuild/BUILDROOT/rubygem-aruba-0.14.14-1.oe1.riscv64/usr/share/gems/gems/aruba-0.14.14 ~/rpmbuild/BUILD/aruba-0.14.14
[ 1663s] + rm -rf .document .gitignore .rspec .rubocop.yml .simplecov .travis.yml .yardopts Gemfile Rakefile appveyor.yml aruba.gemspec cucumber.yml config/ fixtures/ spec/ script/
[ 1663s] + /usr/lib/rpm/find-debuginfo.sh -j8 --strict-build-id -i --build-id-seed 0.14.14-1.oe1 --unique-debug-suffix -0.14.14-1.oe1.riscv64 --unique-debug-src-base rubygem-aruba-0.14.14-1.oe1.riscv64 -S debugsourcefiles.list /home/abuild/rpmbuild/BUILD/aruba-0.14.14
[ 1665s] + /usr/lib/rpm/check-buildroot
[ 1668s] + /usr/lib/rpm/brp-ldconfig
[ 1668s] + /usr/lib/rpm/brp-compress
[ 1669s] + /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip
[ 1677s] + /usr/lib/rpm/brp-python-bytecompile /usr/bin/python 1 1
[ 1678s] + /usr/lib/rpm/brp-python-hardlink
[ 1678s] Executing(%check): /bin/sh -e /var/tmp/rpm-tmp.cMFr7J
[ 1678s] + umask 022
[ 1678s] + cd /home/abuild/rpmbuild/BUILD
[ 1678s] + cd aruba-0.14.14
[ 1678s] + pushd ./usr/share/gems/gems/aruba-0.14.14
[ 1678s] ~/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14 ~/rpmbuild/BUILD/aruba-0.14.14
[ 1678s] + rm .rspec
[ 1678s] + sed -i spec/spec_helper.rb -e '\@[sS]imple[Cc]ov@d' -e '\@[Bb]undler@d'
[ 1679s] + RUBYOPT=-rtime
[ 1679s] + rspec spec
[ 1688s] Run options: include {:focus=>true}
[ 1688s] 
[ 1688s] All examples were filtered out; ignoring {:focus=>true}
[ 1725s] ................................................................................................................................................................................................................................................................................................................................................................................
[ 1725s] 
[ 1725s] Deprecation Warnings:
[ 1725s] 
[ 1725s] `a_file_with_same_content_like` is deprecated. Use `a_file_with_same_content_as` instead. Called from /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/deprecated/file.rb:12:in `a_file_with_same_content_like'.
[ 1725s] 
[ 1725s] `have_same_file_content_like` is deprecated. Use `have_same_file_content_as` instead. Called from /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/matchers/deprecated/file.rb:5:in `have_same_file_content_like'.
[ 1725s] 
[ 1725s] 
[ 1725s] If you need more of the backtrace for any of these deprecations to
[ 1725s] identify where to make the necessary changes, you can configure
[ 1725s] `config.raise_errors_for_deprecations!`, and it will turn the
[ 1725s] deprecation warnings into errors, giving you the full backtrace.
[ 1725s] 
[ 1725s] 2 deprecation warnings total
[ 1725s] 
[ 1725s] Finished in 36.69 seconds (files took 7.26 seconds to load)
[ 1725s] 368 examples, 0 failures
[ 1725s] 
[ 1725s] + sed -i features/support/env.rb -e '\@require.*simplecov@d'
[ 1725s] ++ pwd
[ 1725s] + sed -i fixtures/cli-app/spec/spec_helper.rb -e '\@$LOAD_PATH@s|\.\./\.\./lib|/home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib|'
[ 1725s] + grep -q python3 features/steps/command/shell.feature
[ 1725s] grep: features/steps/command/shell.feature: No such file or directory
[ 1725s] + sed -i features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature -e 's|python|python3|'
[ 1725s] + sed -i lib/aruba/generators/script_file.rb -e '\@interpreter@s|A-Z|A-Z0-9|'
[ 1726s] + sed -i features/01_getting_started_with_aruba/run_commands.feature -e '\@[^-]python@s|python|python3|'
[ 1726s] + mv features/04_aruba_api/filesystem/report_disk_usage.feature features/04_aruba_api/filesystem/report_disk_usage.feature.skip
[ 1726s] + sed -i Rakefile -e '\@[Bb]undler@d' -e 's|bundle exec ||'
[ 1726s] ++ echo /home/abuild
[ 1726s] + sed -i features/04_aruba_api/core/expand_path.feature -e 's|/home/\[\^/\]+|/home/abuild|'
[ 1726s] ++ echo /home/abuild
[ 1726s] + sed -i features/02_configure_aruba/home_directory.feature -e '\@Scenario: Default value@,\@Scenario@s|/home/|/home/abuild|'
[ 1726s] ++ echo /home/abuild
[ 1726s] + sed -i features/02_configure_aruba/home_directory.feature -e '\@Set to aruba'\''s working directory@,\@Scenario@s|/home/|/home/abuild/|'
[ 1726s] ++ pwd
[ 1726s] + RUBYOPT=-I/home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib
[ 1726s] + cucumber
[ 1733s] Deprecated: Found tags option '~@unsupported-on'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1733s] Deprecated: Found tags option '~@wip'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1733s] Deprecated: Found tags option '~@ignore'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1733s] Deprecated: Found tags option '~@unsupported-on-platform-mri'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1733s] Deprecated: Found tags option '~@unsupported-on-platform-unix'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1733s] Deprecated: Found tags option '~@requires-aruba-version-1'. Support for '~@tag' will be removed from the next release of Cucumber. Please use 'not @tag' instead.
[ 1748s] Using the default profile...
[ 1748s] Feature: Cleanup Aruba Working Directory
[ 1748s]   By default Aruba removes its scratch directory *before* every scenario. This
[ 1748s]   isn't always the right thing to do, especially when the path to the default
[ 1748s]   directory has been changed. Use the `@no-clobber`-tag on your scenarios to
[ 1748s]   stop Aruba from cleaning up *before* it runs.
[ 1748s] 
[ 1748s]   Background: [90m                            # features/01_getting_started_with_aruba/cleanup_working_directory.feature:8[0m
[ 1748s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1748s] 
[ 1748s]   Scenario: Clean up artifacts and pwd from a previous scenario[90m # features/01_getting_started_with_aruba/cleanup_working_directory.feature:11[0m
[ 1748s]     [32mGiven a file named "[32m[1mfeatures/cleanup.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1748s] [32m      """[0m
[ 1748s] [32m      Feature: Check[0m
[ 1748s] [32m        Scenario: Check #1[0m
[ 1748s] [32m          Given a file named "file.txt" with "content"[0m
[ 1748s] [32m          And a directory named "dir.d"[0m
[ 1748s] [32m          Then a file named "file.txt" should exist[0m
[ 1748s] [32m          And a directory named "dir.d" should exist[0m
[ 1748s] [32m          When I cd to "dir.d"[0m
[ 1748s] [32m          And I run `pwd`[0m
[ 1748s] [32m          Then the output should match %r</tmp/aruba/dir.d$>[0m
[ 1748s] [32m[0m
[ 1748s] [32m        Scenario: Check #2[0m
[ 1748s] [32m          Then a file named "file.txt" should not exist[0m
[ 1748s] [32m          And a directory named "dir.d" should not exist[0m
[ 1748s] [32m          When I run `pwd`[0m
[ 1748s] [32m          Then the output should match %r</tmp/aruba$>[0m
[ 1748s] [32m      """[0m
[ 1760s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1760s]     [32mThen the features should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1760s] 
[ 1760s]   Scenario: Do not clobber before run[90m                      # features/01_getting_started_with_aruba/cleanup_working_directory.feature:33[0m
[ 1760s]     The `@no-clobber` tag stops Aruba from clearing out its scratch directory.
[ 1760s]     Other setup steps are still performed, such as setting the current working
[ 1760s]     directory.
[ 1760s]     [32mGiven a file named "[32m[1mtmp/aruba/file.txt[0m[0m[32m" with "[32m[1mcontent[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:31[0m[0m
[ 1760s]     [32mAnd a directory named "[32m[1mtmp/aruba/dir.d[0m[0m[32m"[90m                # lib/aruba/cucumber/file.rb:14[0m[0m
[ 1760s]     [32mAnd a file named "[32m[1mfeatures/cleanup.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1760s] [32m      """[0m
[ 1760s] [32m      Feature: Check[0m
[ 1760s] [32m        Scenario: Check #1[0m
[ 1760s] [32m          Given a file named "file.txt" with "content"[0m
[ 1760s] [32m          And a directory named "dir.d"[0m
[ 1760s] [32m          Then a file named "file.txt" should exist[0m
[ 1760s] [32m          And a directory named "dir.d" should exist[0m
[ 1760s] [32m[0m
[ 1760s] [32m        @no-clobber[0m
[ 1760s] [32m        Scenario: Check #2[0m
[ 1760s] [32m          Then a file named "file.txt" should exist[0m
[ 1760s] [32m          And a directory named "dir.d" should exist[0m
[ 1760s] [32m          When I run `pwd`[0m
[ 1760s] [32m          Then the output should match %r</tmp/aruba$>[0m
[ 1760s] [32m      """[0m
[ 1771s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1771s]     [32mThen the features should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1771s] 
[ 1771s] Feature: Run commands with Aruba
[ 1771s]   As long as you've got the neccessary programs, libraries, runtime
[ 1771s]   environments, interpreters installed, it doesn't matter in which programming
[ 1771s]   language your commandline application is implemented. You can even use POSIX
[ 1771s]   standard tools like "printf".
[ 1771s] 
[ 1771s]   Below you find some examples of the "Hello, Aruba!"-application implemented
[ 1771s]   with different programming languages and a single example for a POSIX
[ 1771s]   standard tool. This is NOT an exclusive list. Every commandline application
[ 1771s]   should run with `aruba`.
[ 1771s] 
[ 1772s]   Background: [90m                                        # features/01_getting_started_with_aruba/run_commands.feature:13[0m
[ 1772s]     [32mGiven I use a fixture named "[32m[1mgetting-started-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1772s] 
[ 1772s]   [36m@requires-bash[0m
[ 1772s]   Scenario: Bash Program[90m                                  # features/01_getting_started_with_aruba/run_commands.feature:17[0m
[ 1772s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 1772s] [32m      """[0m
[ 1772s] [32m      #!/usr/bin/env bash[0m
[ 1772s] [32m[0m
[ 1772s] [32m      echo "Hello, Aruba!"[0m
[ 1772s] [32m      """[0m
[ 1772s]     [32mAnd a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1772s] [32m      """[0m
[ 1772s] [32m      Feature: Getting Started With Aruba[0m
[ 1772s] [32m        Scenario: First Run of Command[0m
[ 1772s] [32m          Given I successfully run `aruba-test-cli`[0m
[ 1772s] [32m          Then the output should contain:[0m
[ 1772s] [32m          """[0m
[ 1772s] [32m          Hello, Aruba![0m
[ 1772s] [32m          """[0m
[ 1772s] [32m      """[0m
[ 1782s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                    # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1782s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1782s] 
[ 1782s]   [36m@requires-bash[0m
[ 1782s]   Scenario: Bash Program run via bash[90m                       # features/01_getting_started_with_aruba/run_commands.feature:38[0m
[ 1782s]     [32mGiven a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1782s] [32m      """[0m
[ 1782s] [32m      Feature: Getting Started With Aruba[0m
[ 1782s] [32m        Scenario: First Run of Command[0m
[ 1782s] [32m          Given a file named "cli.sh" with:[0m
[ 1782s] [32m          """[0m
[ 1782s] [32m          echo "Hello, Aruba!"[0m
[ 1782s] [32m          """[0m
[ 1782s] [32m          When I successfully run `bash ./cli.sh`[0m
[ 1782s] [32m          Then the output should contain:[0m
[ 1782s] [32m          """[0m
[ 1782s] [32m          Hello, Aruba![0m
[ 1782s] [32m          """[0m
[ 1782s] [32m      """[0m
[ 1792s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1792s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1792s] 
[ 1793s]   [36m@requires-ruby[0m
[ 1793s]   Scenario: Ruby Program[90m                                  # features/01_getting_started_with_aruba/run_commands.feature:57[0m
[ 1793s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 1793s] [32m      """[0m
[ 1793s] [32m      #!/usr/bin/env ruby[0m
[ 1793s] [32m[0m
[ 1793s] [32m      puts "Hello, Aruba!"[0m
[ 1793s] [32m      """[0m
[ 1793s]     [32mAnd a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1793s] [32m      """[0m
[ 1793s] [32m      Feature: Getting Started With Aruba[0m
[ 1793s] [32m        Scenario: First Run of Command[0m
[ 1793s] [32m          Given I successfully run `aruba-test-cli`[0m
[ 1793s] [32m          Then the output should contain:[0m
[ 1793s] [32m          """[0m
[ 1793s] [32m          Hello, Aruba![0m
[ 1793s] [32m          """[0m
[ 1793s] [32m      """[0m
[ 1806s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                    # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1806s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1806s] 
[ 1806s]   [36m@requires-ruby[0m
[ 1806s]   Scenario: Ruby Program via "ruby"[90m                         # features/01_getting_started_with_aruba/run_commands.feature:78[0m
[ 1806s]     [32mGiven a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1806s] [32m      """[0m
[ 1806s] [32m      Feature: Getting Started With Aruba[0m
[ 1806s] [32m        Scenario: First Run of Command[0m
[ 1806s] [32m          Given a file named "cli.rb" with:[0m
[ 1806s] [32m          """[0m
[ 1806s] [32m          puts "Hello, Aruba!"[0m
[ 1806s] [32m          """[0m
[ 1806s] [32m          When I successfully run `ruby ./cli.rb`[0m
[ 1806s] [32m          Then the output should contain:[0m
[ 1806s] [32m          """[0m
[ 1806s] [32m          Hello, Aruba![0m
[ 1806s] [32m          """[0m
[ 1806s] [32m      """[0m
[ 1819s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1819s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1819s] 
[ 1819s]   [36m@requires-python[0m
[ 1819s]   Scenario: Python Program[90m                                # features/01_getting_started_with_aruba/run_commands.feature:97[0m
[ 1819s]     [36mGiven an executable named "[36m[1mbin/aruba-test-cli[0m[0m[36m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 1819s] [36m      """[0m
[ 1819s] [36m      #!/usr/bin/env python3[0m
[ 1819s] [36m[0m
[ 1819s] [36m      print("Hello, Aruba!")[0m
[ 1819s] [36m      """[0m
[ 1819s]     [36mAnd a file named "[36m[1mfeatures/hello_aruba.feature[0m[0m[36m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1819s] [36m      """[0m
[ 1819s] [36m      Feature: Getting Started With Aruba[0m
[ 1819s] [36m        Scenario: First Run of Command[0m
[ 1819s] [36m          Given I successfully run `aruba-test-cli`[0m
[ 1819s] [36m          Then the output should contain:[0m
[ 1819s] [36m          """[0m
[ 1819s] [36m          Hello, Aruba![0m
[ 1819s] [36m          """[0m
[ 1819s] [36m      """[0m
[ 1819s]     [36mWhen I successfully run `[36m[1mcucumber[0m[0m[36m`[90m                    # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1819s]     [36mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1819s] 
[ 1820s]   [36m@requires-python[0m
[ 1820s]   Scenario: Python Program via "python3"[90m                    # features/01_getting_started_with_aruba/run_commands.feature:118[0m
[ 1820s]     [36mGiven a file named "[36m[1mfeatures/hello_aruba.feature[0m[0m[36m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1820s] [36m      """[0m
[ 1820s] [36m      Feature: Getting Started With Aruba[0m
[ 1820s] [36m        Scenario: First Run of Command[0m
[ 1820s] [36m          Given a file named "cli.py" with:[0m
[ 1820s] [36m          """[0m
[ 1820s] [36m          print("Hello, Aruba!")[0m
[ 1820s] [36m          """[0m
[ 1820s] [36m          When I successfully run `python3 ./cli.py`[0m
[ 1820s] [36m          Then the output should contain:[0m
[ 1820s] [36m          """[0m
[ 1820s] [36m          Hello, Aruba![0m
[ 1820s] [36m          """[0m
[ 1820s] [36m      """[0m
[ 1820s]     [36mWhen I successfully run `[36m[1mcucumber[0m[0m[36m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1820s]     [36mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1820s] 
[ 1820s]   [36m@requires-perl[0m
[ 1820s]   Scenario: Perl Program[90m                                  # features/01_getting_started_with_aruba/run_commands.feature:137[0m
[ 1820s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 1820s] [32m      """[0m
[ 1820s] [32m      #!/usr/bin/env perl[0m
[ 1820s] [32m[0m
[ 1820s] [32m      print "Hello, Aruba!\n";[0m
[ 1820s] [32m      """[0m
[ 1820s]     [32mAnd a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1820s] [32m      """[0m
[ 1820s] [32m      Feature: Getting Started With Aruba[0m
[ 1820s] [32m        Scenario: First Run of Command[0m
[ 1820s] [32m          Given I successfully run `aruba-test-cli`[0m
[ 1820s] [32m          Then the output should contain:[0m
[ 1820s] [32m          """[0m
[ 1820s] [32m          Hello, Aruba![0m
[ 1820s] [32m          """[0m
[ 1820s] [32m      """[0m
[ 1831s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                    # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1831s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1831s] 
[ 1831s]   [36m@requires-perl[0m
[ 1831s]   Scenario: Perl Program via "perl"[90m                         # features/01_getting_started_with_aruba/run_commands.feature:158[0m
[ 1831s]     [32mGiven a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1831s] [32m      """[0m
[ 1831s] [32m      Feature: Getting Started With Aruba[0m
[ 1831s] [32m        Scenario: First Run of Command[0m
[ 1831s] [32m          Given a file named "cli.pl" with:[0m
[ 1831s] [32m          """perl[0m
[ 1831s] [32m          print "Hello, Aruba!\n";[0m
[ 1831s] [32m          """[0m
[ 1831s] [32m          When I successfully run `perl ./cli.pl`[0m
[ 1831s] [32m          Then the output should contain:[0m
[ 1831s] [32m          """[0m
[ 1831s] [32m          Hello, Aruba![0m
[ 1831s] [32m          """[0m
[ 1831s] [32m      """[0m
[ 1843s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1843s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1843s] 
[ 1843s]   [36m@requires-java[0m
[ 1843s]   Scenario: Java Program[90m                                    # features/01_getting_started_with_aruba/run_commands.feature:177[0m
[ 1843s]     It's even possible to compile and run Java programs with Aruba.
[ 1843s]     [36mGiven a file named "[36m[1mfeatures/hello_aruba.feature[0m[0m[36m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1843s] [36m      """[0m
[ 1843s] [36m      Feature: Getting Started With Aruba[0m
[ 1843s] [36m        Scenario: First Run of Command[0m
[ 1843s] [36m          Given a file named "tmp/HelloArubaApp.java" with:[0m
[ 1843s] [36m          """[0m
[ 1843s] [36m          class HelloArubaApp {[0m
[ 1843s] [36m            public static void main(String[] args) {[0m
[ 1843s] [36m              System.out.println("Hello, Aruba!");[0m
[ 1843s] [36m            }[0m
[ 1843s] [36m          }[0m
[ 1843s] [36m          """[0m
[ 1843s] [36m          And I successfully run `javac tmp/HelloArubaApp.java` for up to 20 seconds[0m
[ 1843s] [36m          And I cd to "tmp/"[0m
[ 1843s] [36m          And I successfully run `java HelloArubaApp`[0m
[ 1843s] [36m          Then the output should contain:[0m
[ 1843s] [36m          """[0m
[ 1843s] [36m          Hello, Aruba![0m
[ 1843s] [36m          """[0m
[ 1843s] [36m      """[0m
[ 1843s]     [36mWhen I successfully run `[36m[1mcucumber[0m[0m[36m` for up to [36m[1m21[0m[0m[36m seconds[90m # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1843s]     [36mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1843s] 
[ 1843s]   [36m@requires-posix-standard-tools[0m
[ 1843s]   Scenario: POSIX standard tools[90m                            # features/01_getting_started_with_aruba/run_commands.feature:205[0m
[ 1843s]     [32mGiven a file named "[32m[1mfeatures/hello_aruba.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1843s] [32m      """[0m
[ 1843s] [32m      Feature: Getting Started With Aruba[0m
[ 1843s] [32m        Scenario: First Run of Command[0m
[ 1843s] [32m          Given I successfully run `printf "%s" "Hello, Aruba!"`[0m
[ 1843s] [32m          Then the output should contain:[0m
[ 1843s] [32m          """[0m
[ 1843s] [32m          Hello, Aruba![0m
[ 1843s] [32m          """[0m
[ 1843s] [32m      """[0m
[ 1854s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1854s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1854s] 
[ 1854s] Feature: Supported Testing Frameworks
[ 1854s]   You can use `aruba` with all major testing frameworks from the Ruby World:
[ 1854s] 
[ 1854s]     \* Cucumber
[ 1854s]     \* RSpec
[ 1854s]     \* Minitest
[ 1854s] 
[ 1854s]   Background: [90m                            # features/01_getting_started_with_aruba/supported_testing_frameworks.feature:9[0m
[ 1854s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1854s] 
[ 1854s]   Scenario: Use "aruba" with "Cucumber"[90m                               # features/01_getting_started_with_aruba/supported_testing_frameworks.feature:12[0m
[ 1854s]     [32mGiven a file named "[32m[1mfeatures/support/env.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1854s] [32m      """[0m
[ 1854s] [32m      require 'aruba/cucumber'[0m
[ 1854s] [32m      """[0m
[ 1854s]     [32mAnd a file named "[32m[1mfeatures/use_aruba_with_cucumber.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1854s] [32m      """[0m
[ 1854s] [32m      Feature: Cucumber[0m
[ 1854s] [32m        Scenario: First Run[0m
[ 1854s] [32m          Given a file named "file.txt" with:[0m
[ 1854s] [32m          """[0m
[ 1854s] [32m          Hello World[0m
[ 1854s] [32m          """[0m
[ 1854s] [32m          Then the file "file.txt" should contain:[0m
[ 1854s] [32m          """[0m
[ 1854s] [32m          Hello World[0m
[ 1854s] [32m          """[0m
[ 1854s] [32m      """[0m
[ 1865s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1865s]     [32mThen the features should all pass[90m                                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1865s] 
[ 1866s]   Scenario: Use "aruba" with "RSpec"[90m                           # features/01_getting_started_with_aruba/supported_testing_frameworks.feature:33[0m
[ 1866s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1866s] [32m      """[0m
[ 1866s] [32m      $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)[0m
[ 1866s] [32m[0m
[ 1866s] [32m      require 'aruba/rspec'[0m
[ 1866s] [32m      """[0m
[ 1866s]     [32mAnd a file named "[32m[1mspec/use_aruba_with_rspec_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1866s] [32m      """[0m
[ 1866s] [32m      require 'spec_helper'[0m
[ 1866s] [32m[0m
[ 1866s] [32m      RSpec.describe 'First Run', :type => :aruba do[0m
[ 1866s] [32m        let(:file) { 'file.txt' }[0m
[ 1866s] [32m        let(:content) { 'Hello World' }[0m
[ 1866s] [32m[0m
[ 1866s] [32m        before(:each) { write_file file, content }[0m
[ 1866s] [32m[0m
[ 1866s] [32m        it { expect(read(file)).to eq [content] }[0m
[ 1866s] [32m      end[0m
[ 1866s] [32m      """[0m
[ 1873s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1873s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1873s] 
[ 1873s]   Scenario: Use "aruba" with "Minitest"[90m                          # features/01_getting_started_with_aruba/supported_testing_frameworks.feature:57[0m
[ 1873s]     [32mGiven a file named "[32m[1mtest/test_helper.rb[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1873s] [32m      """[0m
[ 1873s] [32m      $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)[0m
[ 1873s] [32m[0m
[ 1873s] [32m      require 'aruba/api'[0m
[ 1873s] [32m      """[0m
[ 1873s]     [32mAnd a file named "[32m[1mtest/use_aruba_with_minitest.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1873s] [32m      """[0m
[ 1873s] [32m      $LOAD_PATH.unshift File.expand_path('../test', __FILE__)[0m
[ 1873s] [32m[0m
[ 1873s] [32m      require 'test_helper'[0m
[ 1873s] [32m      require 'minitest/autorun'[0m
[ 1873s] [32m[0m
[ 1873s] [32m      class FirstRun < Minitest::Test[0m
[ 1873s] [32m        include Aruba::Api[0m
[ 1873s] [32m[0m
[ 1873s] [32m        def setup[0m
[ 1873s] [32m          aruba_setup[0m
[ 1873s] [32m        end[0m
[ 1873s] [32m[0m
[ 1873s] [32m        def getting_started_with_aruba[0m
[ 1873s] [32m          file = 'file.txt'[0m
[ 1873s] [32m          content = 'Hello World'[0m
[ 1873s] [32m[0m
[ 1873s] [32m          write_file file, content[0m
[ 1873s] [32m          read(file).must_equal [content][0m
[ 1873s] [32m        end[0m
[ 1873s] [32m      end[0m
[ 1873s] [32m      """[0m
[ 1879s]     [32mWhen I run `[32m[1mruby -Ilib:test test/use_aruba_with_minitest.rb[0m[0m[32m`[90m # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1879s]     [32mThen the tests should all pass[90m                               # lib/aruba/cucumber/testing_frameworks.rb:65[0m[0m
[ 1879s] 
[ 1879s] Feature: Configure announcer activation on command failure
[ 1879s]   As a developer
[ 1879s]   I want to configure which announcers should get activated on command failure
[ 1879s]   In order to understand what caused a command to fail
[ 1879s] 
[ 1880s]   Background: [90m                        # features/02_configure_aruba/activate_announcer_on_command_failure.feature:7[0m
[ 1880s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1880s] 
[ 1880s]   Scenario: Default value[90m                                       # features/02_configure_aruba/activate_announcer_on_command_failure.feature:10[0m
[ 1880s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1880s] [32m      """[0m
[ 1880s] [32m      Aruba.configure do |config|[0m
[ 1880s] [32m        puts %(The default value is "#{config.activate_announcer_on_command_failure.inspect}")[0m
[ 1880s] [32m      end[0m
[ 1880s] [32m      """[0m
[ 1890s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1890s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 1890s] [32m      """[0m
[ 1890s] [32m      The default value is "[]"[0m
[ 1890s] [32m      """[0m
[ 1890s] 
[ 1890s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/activate_announcer_on_command_failure.feature:23[0m
[ 1890s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1890s] [32m      """[0m
[ 1890s] [32m      Aruba.configure do |config|[0m
[ 1890s] [32m        config.activate_announcer_on_command_failure = [:foo, :bar][0m
[ 1890s] [32m      end[0m
[ 1890s] [32m[0m
[ 1890s] [32m      Aruba.configure do |config|[0m
[ 1890s] [32m        puts %(The value is "#{config.activate_announcer_on_command_failure.inspect}")[0m
[ 1890s] [32m      end[0m
[ 1890s] [32m      """[0m
[ 1901s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1901s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 1901s] [32m      """[0m
[ 1901s] [32m      The value is "[:foo, :bar]"[0m
[ 1901s] [32m      """[0m
[ 1901s] 
[ 1901s] Feature: Usage of configuration
[ 1901s]   You can configure `aruba` in two ways:
[ 1901s] 
[ 1901s]   1. Using `Aruba.configure`-block
[ 1901s]   2. Using `aruba.config.<option> = <value>`
[ 1901s] 
[ 1901s]   The first (1.) should be used to set defaults for ALL your tests. It changes
[ 1901s]   values on loadtime. The latter (2.) should be used to change options only for
[ 1901s]   specific tests during runtime. `aruba.config` contains the runtime
[ 1901s]   configuration of aruba which is reset to the loadtime configuration before
[ 1901s]   each test is run.
[ 1901s] 
[ 1901s]   Background: [90m                                         # features/02_configure_aruba/basics.feature:14[0m
[ 1901s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m              # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1901s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 1901s] [32m      """[0m
[ 1901s] [32m      #!/bin/bash[0m
[ 1901s] [32m      trap "exit 128" SIGTERM SIGINT[0m
[ 1901s] [32m      sleep $*[0m
[ 1901s] [32m      """[0m
[ 1901s] 
[ 1901s]   Scenario: Setting default values for option for RSpec[90m       # features/02_configure_aruba/basics.feature:23[0m
[ 1901s]     [32mGiven a file named "[32m[1mspec/support/aruba_config.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1901s] [32m      """[0m
[ 1901s] [32m      Aruba.configure do |config|[0m
[ 1901s] [32m        config.exit_timeout = 0.1[0m
[ 1901s] [32m      end[0m
[ 1901s] [32m      """[0m
[ 1901s]     [32mAnd a file named "[32m[1mspec/usage_configuration_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1901s] [32m      """[0m
[ 1901s] [32m      require 'spec_helper'[0m
[ 1901s] [32m[0m
[ 1901s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 1901s] [32m        context 'when fast command' do[0m
[ 1901s] [32m          before(:each) { run_command('aruba-test-cli 0') }[0m
[ 1901s] [32m          it { expect(last_command_started).to be_successfully_executed }[0m
[ 1901s] [32m        end[0m
[ 1901s] [32m[0m
[ 1901s] [32m        context 'when slow command' do[0m
[ 1901s] [32m          before(:each) { run_command('aruba-test-cli 0.2') }[0m
[ 1901s] [32m          it { expect(last_command_started).not_to be_successfully_executed }[0m
[ 1901s] [32m        end[0m
[ 1901s] [32m      end[0m
[ 1901s] [32m      """[0m
[ 1910s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1910s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1910s] 
[ 1911s]   Scenario: Setting option during runtime for RSpec[90m           # features/02_configure_aruba/basics.feature:49[0m
[ 1911s]     Maybe there are some long running tests, which need longer. You may not
[ 1911s]     want to set the default timeout for all commands to the maximum value only
[ 1911s]     to prevent those commands from failing.
[ 1911s]     [32mGiven a file named "[32m[1mspec/support/aruba_config.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1911s] [32m      """[0m
[ 1911s] [32m      Aruba.configure do |config|[0m
[ 1911s] [32m        config.exit_timeout = 0.1[0m
[ 1911s] [32m      end[0m
[ 1911s] [32m      """[0m
[ 1911s]     [32mAnd a file named "[32m[1mspec/support/hooks.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1911s] [32m      """[0m
[ 1911s] [32m      RSpec.configure do |config|[0m
[ 1911s] [32m        config.before :each do |example|[0m
[ 1911s] [32m          next unless example.metadata.key? :slow_command[0m
[ 1911s] [32m[0m
[ 1911s] [32m          aruba.config.exit_timeout = 0.3[0m
[ 1911s] [32m        end[0m
[ 1911s] [32m      end[0m
[ 1911s] [32m      """[0m
[ 1911s]     [32mAnd a file named "[32m[1mspec/usage_configuration_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1911s] [32m      """[0m
[ 1911s] [32m      require 'spec_helper'[0m
[ 1911s] [32m[0m
[ 1911s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 1911s] [32m        context 'when fast command' do[0m
[ 1911s] [32m          before(:each) { run_command('aruba-test-cli 0') }[0m
[ 1911s] [32m          it { expect(last_command_started).to be_successfully_executed }[0m
[ 1911s] [32m        end[0m
[ 1911s] [32m[0m
[ 1911s] [32m        context 'when slow command and this is known by the developer', :slow_command => true do[0m
[ 1911s] [32m          before(:each) { run_command('aruba-test-cli 0.2') }[0m
[ 1911s] [32m          it { expect(last_command_started).to be_successfully_executed }[0m
[ 1911s] [32m        end[0m
[ 1911s] [32m[0m
[ 1911s] [32m        context 'when slow command, but this might be a failure' do[0m
[ 1911s] [32m          before(:each) { run_command('aruba-test-cli 0.2') }[0m
[ 1911s] [32m          it { expect(last_command_started).not_to be_successfully_executed }[0m
[ 1911s] [32m        end[0m
[ 1911s] [32m      end[0m
[ 1911s] [32m      """[0m
[ 1921s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1921s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1921s] 
[ 1921s]   Scenario: Setting default values for option for Cucumber[90m      # features/02_configure_aruba/basics.feature:95[0m
[ 1921s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1921s] [32m      """[0m
[ 1921s] [32m      Aruba.configure do |config|[0m
[ 1921s] [32m        config.exit_timeout = 0.1[0m
[ 1921s] [32m      end[0m
[ 1921s] [32m      """[0m
[ 1921s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1921s] [32m      """[0m
[ 1921s] [32m      Feature: Run it[0m
[ 1921s] [32m        Scenario: Fast command[0m
[ 1921s] [32m          When I run `aruba-test-cli 0`[0m
[ 1921s] [32m          Then the exit status should be 0[0m
[ 1921s] [32m[0m
[ 1921s] [32m        Scenario: Slow command[0m
[ 1921s] [32m          When I run `aruba-test-cli 0.2`[0m
[ 1921s] [32m          Then the exit status should be 128[0m
[ 1921s] [32m      """[0m
[ 1932s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1932s]     [32mThen the features should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1932s] 
[ 1933s]   Scenario: Setting option during runtime for Cucumber[90m            # features/02_configure_aruba/basics.feature:116[0m
[ 1933s]     Maybe there are some long running tests, which need longer. You may not
[ 1933s]     want to set the default timeout for all commands to the maximum value only
[ 1933s]     to prevent those commands from failing.
[ 1933s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1933s] [32m      """[0m
[ 1933s] [32m      Aruba.configure do |config|[0m
[ 1933s] [32m        config.exit_timeout = 0.1[0m
[ 1933s] [32m      end[0m
[ 1933s] [32m      """[0m
[ 1933s]     [32mAnd a file named "[32m[1mfeatures/support/hooks.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1933s] [32m      """[0m
[ 1933s] [32m      Before '@slow-command' do[0m
[ 1933s] [32m        aruba.config.exit_timeout = 0.3[0m
[ 1933s] [32m      end[0m
[ 1933s] [32m      """[0m
[ 1933s]     [32mAnd a file named "[32m[1mfeatures/usage_configuration.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1933s] [32m      """[0m
[ 1933s] [32m      Feature: Run it[0m
[ 1933s] [32m        Scenario: Fast command[0m
[ 1933s] [32m          When I run `aruba-test-cli 0`[0m
[ 1933s] [32m          Then the exit status should be 0[0m
[ 1933s] [32m[0m
[ 1933s] [32m        @slow-command[0m
[ 1933s] [32m        Scenario: Slow command known by the developer[0m
[ 1933s] [32m          When I run `aruba-test-cli 0.2`[0m
[ 1933s] [32m          Then the exit status should be 0[0m
[ 1933s] [32m[0m
[ 1933s] [32m        Scenario: Slow command which might be a failure[0m
[ 1933s] [32m          When I run `aruba-test-cli 0.2`[0m
[ 1933s] [32m          Then the exit status should be 128[0m
[ 1933s] [32m      """[0m
[ 1946s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1946s]     [31mThen the features should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 1946s] [31m      expected that command "cucumber" has exit status of "0", but has "1". (RSpec::Expectations::ExpectationNotMetError)[0m
[ 1946s] [31m      ./lib/aruba/cucumber/command.rb:267:in `/^the exit status should( not)? be (\d+)$/'[0m
[ 1946s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:9:in `/^the feature(?:s)? should( not)?(?: all)? pass$/'[0m
[ 1946s] [31m      features/02_configure_aruba/basics.feature:151:in `Then the features should all pass'[0m
[ 1946s] 
[ 1946s] Feature: Define default process environment
[ 1946s]   Say you want to have a default set of environment variables, then use this
[ 1946s]   code.
[ 1946s] 
[ 1946s]   ~~~ruby
[ 1946s]   Aruba.configure do |config|
[ 1946s]     config.command_runtime_environment = { 'MY_VARIABLE' => 'x' }
[ 1946s]   end
[ 1946s]   ~~~
[ 1946s] 
[ 1946s]   This can be changed via `#set_environment_variable`,
[ 1946s]   `#append_environment_variable`, `#delete_environment_variable` or
[ 1946s]   `#prepend_environment_variable`.
[ 1946s] 
[ 1947s]   Background: [90m                        # features/02_configure_aruba/command_runtime_environment.feature:15[0m
[ 1947s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1947s] 
[ 1947s]   Scenario: Overwrite existing variable with new default value[90m # features/02_configure_aruba/command_runtime_environment.feature:18[0m
[ 1947s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1947s] [32m      """[0m
[ 1947s] [32m      require 'spec_helper'[0m
[ 1947s] [32m[0m
[ 1947s] [32m      ENV['LONG_LONG_VARIABLE'] = 'y'[0m
[ 1947s] [32m[0m
[ 1947s] [32m      Aruba.configure do |config|[0m
[ 1947s] [32m        config.command_runtime_environment = { 'LONG_LONG_VARIABLE' => 'x' }[0m
[ 1947s] [32m      end[0m
[ 1947s] [32m[0m
[ 1947s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 1947s] [32m        before(:each) { run_command('env') }[0m
[ 1947s] [32m        before(:each) { stop_all_commands }[0m
[ 1947s] [32m[0m
[ 1947s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=x' }[0m
[ 1947s] [32m      end[0m
[ 1947s] [32m      """[0m
[ 1954s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1954s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1954s] 
[ 1954s]   Scenario: Overwrite default value for variable[90m        # features/02_configure_aruba/command_runtime_environment.feature:39[0m
[ 1954s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1954s] [32m      """[0m
[ 1954s] [32m      require 'spec_helper'[0m
[ 1954s] [32m[0m
[ 1954s] [32m      ENV['LONG_LONG_VARIABLE'] = 'y'[0m
[ 1954s] [32m[0m
[ 1954s] [32m      Aruba.configure do |config|[0m
[ 1954s] [32m        config.command_runtime_environment = { 'LONG_LONG_VARIABLE' => 'x' }[0m
[ 1954s] [32m      end[0m
[ 1954s] [32m[0m
[ 1954s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 1954s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', 'z' }[0m
[ 1954s] [32m[0m
[ 1954s] [32m        before(:each) { run_command('env') }[0m
[ 1954s] [32m        before(:each) { stop_all_commands }[0m
[ 1954s] [32m[0m
[ 1954s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=z' }[0m
[ 1954s] [32m      end[0m
[ 1954s] [32m      """[0m
[ 1963s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1963s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1963s] 
[ 1963s]   Scenario: Append value to default value[90m               # features/02_configure_aruba/command_runtime_environment.feature:62[0m
[ 1963s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1963s] [32m      """[0m
[ 1963s] [32m      require 'spec_helper'[0m
[ 1963s] [32m[0m
[ 1963s] [32m      ENV['LONG_LONG_VARIABLE'] = 'y'[0m
[ 1963s] [32m[0m
[ 1963s] [32m      Aruba.configure do |config|[0m
[ 1963s] [32m        config.command_runtime_environment = { 'LONG_LONG_VARIABLE' => 'x' }[0m
[ 1963s] [32m      end[0m
[ 1963s] [32m[0m
[ 1963s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 1963s] [32m        before(:each) { append_environment_variable 'LONG_LONG_VARIABLE', 'z' }[0m
[ 1963s] [32m[0m
[ 1963s] [32m        before(:each) { run_command('env') }[0m
[ 1963s] [32m        before(:each) { stop_all_commands }[0m
[ 1963s] [32m[0m
[ 1963s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=xz' }[0m
[ 1963s] [32m      end[0m
[ 1963s] [32m      """[0m
[ 1970s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1970s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1970s] 
[ 1970s]   Scenario: Prepend value[90m                               # features/02_configure_aruba/command_runtime_environment.feature:85[0m
[ 1970s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1970s] [32m      """[0m
[ 1970s] [32m      require 'spec_helper'[0m
[ 1970s] [32m[0m
[ 1970s] [32m      ENV['LONG_LONG_VARIABLE'] = 'y'[0m
[ 1970s] [32m[0m
[ 1970s] [32m      Aruba.configure do |config|[0m
[ 1970s] [32m        config.command_runtime_environment = { 'LONG_LONG_VARIABLE' => 'x' }[0m
[ 1970s] [32m      end[0m
[ 1970s] [32m[0m
[ 1970s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 1970s] [32m        before(:each) { prepend_environment_variable 'LONG_LONG_VARIABLE', 'z' }[0m
[ 1970s] [32m[0m
[ 1970s] [32m        before(:each) { run_command('env') }[0m
[ 1970s] [32m        before(:each) { stop_all_commands }[0m
[ 1970s] [32m[0m
[ 1970s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=zx' }[0m
[ 1970s] [32m      end[0m
[ 1970s] [32m      """[0m
[ 1978s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1978s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1978s] 
[ 1978s]   Scenario: Remove variable from default set of variables[90m # features/02_configure_aruba/command_runtime_environment.feature:108[0m
[ 1978s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1978s] [32m      """[0m
[ 1978s] [32m      require 'spec_helper'[0m
[ 1978s] [32m[0m
[ 1978s] [32m      ENV['LONG_LONG_VARIABLE'] = 'y'[0m
[ 1978s] [32m[0m
[ 1978s] [32m      Aruba.configure do |config|[0m
[ 1978s] [32m        config.command_runtime_environment = { 'LONG_LONG_VARIABLE' => 'x' }[0m
[ 1978s] [32m      end[0m
[ 1978s] [32m[0m
[ 1978s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 1978s] [32m        before(:each) { delete_environment_variable 'LONG_LONG_VARIABLE' }[0m
[ 1978s] [32m[0m
[ 1978s] [32m        before(:each) { run_command('env') }[0m
[ 1978s] [32m        before(:each) { stop_all_commands }[0m
[ 1978s] [32m[0m
[ 1978s] [32m        it { expect(last_command_started.output).not_to include 'LONG_LONG_VARIABLE' }[0m
[ 1978s] [32m      end[0m
[ 1978s] [32m      """[0m
[ 1986s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 1986s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 1986s] 
[ 1986s] Feature: Configure the aruba console history file
[ 1986s]   As a developer
[ 1986s]   I want to configure the history file of aruba console
[ 1986s]   In order to have a better isolation of tests
[ 1986s] 
[ 1987s]   Background: [90m                        # features/02_configure_aruba/console_history_file.feature:7[0m
[ 1987s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 1987s] 
[ 1987s]   Scenario: Default value[90m                                       # features/02_configure_aruba/console_history_file.feature:10[0m
[ 1987s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1987s] [32m      """[0m
[ 1987s] [32m      Aruba.configure do |config|[0m
[ 1987s] [32m        puts %(The default value is "#{config.console_history_file}")[0m
[ 1987s] [32m      end[0m
[ 1987s] [32m      """[0m
[ 1997s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 1997s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 1997s] [32m      """[0m
[ 1997s] [32m      The default value is "~/.aruba_history"[0m
[ 1997s] [32m      """[0m
[ 1997s] 
[ 1998s]   Scenario: Set some value[90m                                      # features/02_configure_aruba/console_history_file.feature:23[0m
[ 1998s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 1998s] [32m      """[0m
[ 1998s] [32m      Aruba.configure do |config|[0m
[ 1998s] [32m        config.console_history_file = '~/.config/aruba/history.txt'[0m
[ 1998s] [32m      end[0m
[ 1998s] [32m[0m
[ 1998s] [32m      Aruba.configure do |config|[0m
[ 1998s] [32m        puts %(The value is "#{config.console_history_file}")[0m
[ 1998s] [32m      end[0m
[ 1998s] [32m      """[0m
[ 2007s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2007s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2007s] [32m      """[0m
[ 2007s] [32m      The value is "~/.config/aruba/history.txt"[0m
[ 2007s] [32m      """[0m
[ 2007s] 
[ 2007s] Feature: Configure timeout for command execution
[ 2007s]   As a developer
[ 2007s]   I want to configure the timeout when executing a command
[ 2007s]   In order to support some longer running commands
[ 2007s] 
[ 2008s]   Background: [90m                                         # features/02_configure_aruba/exit_timeout.feature:7[0m
[ 2008s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m                  # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2008s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2008s] [32m      """[0m
[ 2008s] [32m      #!/bin/bash[0m
[ 2008s] [32m      trap "exit 128" SIGTERM SIGINT[0m
[ 2008s] [32m      sleep $*[0m
[ 2008s] [32m      """[0m
[ 2008s] 
[ 2008s]   Scenario: Default value[90m                                       # features/02_configure_aruba/exit_timeout.feature:16[0m
[ 2008s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2008s] [32m      """[0m
[ 2008s] [32m      Aruba.configure do |config|[0m
[ 2008s] [32m        puts %(The default value is "#{config.exit_timeout}")[0m
[ 2008s] [32m      end[0m
[ 2008s] [32m      """[0m
[ 2018s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2018s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2018s] [32m      """[0m
[ 2018s] [32m      The default value is "15"[0m
[ 2018s] [32m      """[0m
[ 2018s] 
[ 2019s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/exit_timeout.feature:29[0m
[ 2019s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2019s] [32m      """[0m
[ 2019s] [32m      Aruba.configure do |config|[0m
[ 2019s] [32m        config.exit_timeout = 0.2[0m
[ 2019s] [32m      end[0m
[ 2019s] [32m      """[0m
[ 2019s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2019s] [32m      """[0m
[ 2019s] [32m      Feature: Run it[0m
[ 2019s] [32m        Scenario: Fast command[0m
[ 2019s] [32m          When I run `aruba-test-cli 0.1`[0m
[ 2019s] [32m          Then the exit status should be 0[0m
[ 2019s] [32m      """[0m
[ 2028s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2028s] 
[ 2029s]   Scenario: Fails if takes longer[90m                               # features/02_configure_aruba/exit_timeout.feature:45[0m
[ 2029s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2029s] [32m      """[0m
[ 2029s] [32m      Aruba.configure do |config|[0m
[ 2029s] [32m        config.exit_timeout = 0.1[0m
[ 2029s] [32m      end[0m
[ 2029s] [32m      """[0m
[ 2029s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2029s] [32m      """[0m
[ 2029s] [32m      Feature: Run it[0m
[ 2029s] [32m        Scenario: Fast command[0m
[ 2029s] [32m          When I run `aruba-test-cli 0.2`[0m
[ 2029s] [32m          Then the exit status should be 0[0m
[ 2029s] [32m      """[0m
[ 2040s]     [32mThen I run `[32m[1mcucumber[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2040s]     [32mAnd the exit status should be [32m[1m1[0m[0m[32m[90m                             # lib/aruba/cucumber/command.rb:263[0m[0m
[ 2040s] 
[ 2040s] Feature: Configure directory where to look for fixtures
[ 2040s]   As a developer
[ 2040s]   I want to configure the directory where aruba looks for fixtures
[ 2040s]   In order to use them in my tests
[ 2040s] 
[ 2040s]   Background: [90m                        # features/02_configure_aruba/fixtures_directories.feature:7[0m
[ 2040s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2040s] 
[ 2040s]   Scenario: Default value[90m                                       # features/02_configure_aruba/fixtures_directories.feature:10[0m
[ 2040s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2040s] [32m      """[0m
[ 2040s] [32m      Aruba.configure do |config|[0m
[ 2040s] [32m        puts %(The default value is "%w(#{config.fixtures_directories.join(" ")})")[0m
[ 2040s] [32m      end[0m
[ 2040s] [32m      """[0m
[ 2051s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2051s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2051s] [32m      """[0m
[ 2051s] [32m      The default value is "%w(features/fixtures spec/fixtures test/fixtures fixtures)"[0m
[ 2051s] [32m      """[0m
[ 2051s] 
[ 2051s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/fixtures_directories.feature:23[0m
[ 2051s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2051s] [32m      """[0m
[ 2051s] [32m      Aruba.configure do |config|[0m
[ 2051s] [32m        config.fixtures_directories = %w(spec/fixtures)[0m
[ 2051s] [32m      end[0m
[ 2051s] [32m[0m
[ 2051s] [32m      Aruba.configure do |config|[0m
[ 2051s] [32m        puts %(The default value is "%w(#{config.fixtures_directories.join(" ")})")[0m
[ 2051s] [32m      end[0m
[ 2051s] [32m      """[0m
[ 2060s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2060s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2060s] [32m      """[0m
[ 2060s] [32m      The default value is "%w(spec/fixtures)"[0m
[ 2060s] [32m      """[0m
[ 2060s] 
[ 2060s] Feature: Use fixtures path prefix of aruba
[ 2060s]   As a developer
[ 2060s]   I want to use the fixtures path prefix in aruba
[ 2060s]   In some API-method for using the fixtures path
[ 2060s] 
[ 2061s]   Background: [90m                        # features/02_configure_aruba/fixtures_path_prefix.feature:7[0m
[ 2061s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2061s] 
[ 2061s]   Scenario: Default value[90m                                       # features/02_configure_aruba/fixtures_path_prefix.feature:10[0m
[ 2061s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2061s] [32m      """[0m
[ 2061s] [32m      Aruba.configure do |config|[0m
[ 2061s] [32m        puts "The prefix is \"#{config.fixtures_path_prefix}\"."[0m
[ 2061s] [32m      end[0m
[ 2061s] [32m      """[0m
[ 2071s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2071s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2071s] [32m      """[0m
[ 2071s] [32m      The prefix is "%".[0m
[ 2071s] [32m      """[0m
[ 2071s] 
[ 2071s] Feature: Configure the home directory to be used with aruba
[ 2071s]   As a developer
[ 2071s]   I want to configure the home directory
[ 2071s]   In order to have a better isolation of tests
[ 2071s] 
[ 2071s]   Be careful to set the HOME-variable aka `config.home_directory` to something
[ 2071s]   else than `<project_root>/tmp/aruba`. This is a dance with the devil and
[ 2071s]   violates the isolation of your test suite. Thus will be not supported from
[ 2071s]   aruba as of 1.0.0.
[ 2071s] 
[ 2071s]   Background: [90m                        # features/02_configure_aruba/home_directory.feature:12[0m
[ 2071s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2071s] 
[ 2071s]   Scenario: Default value[90m                                       # features/02_configure_aruba/home_directory.feature:15[0m
[ 2071s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2071s] [32m      """[0m
[ 2071s] [32m      Aruba.configure do |config|[0m
[ 2071s] [32m        puts %(The default value is "#{config.home_directory}")[0m
[ 2071s] [32m      end[0m
[ 2071s] [32m      """[0m
[ 2080s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2080s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2080s] [32m      """[0m
[ 2080s] [32m      The default value is "/home/abuild[0m
[ 2080s] [32m      """[0m
[ 2080s] 
[ 2080s]   Scenario: Set to current working directory[90m                    # features/02_configure_aruba/home_directory.feature:28[0m
[ 2080s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2080s] [32m      """[0m
[ 2080s] [32m      Aruba.configure do |config|[0m
[ 2080s] [32m        # use current working directory[0m
[ 2080s] [32m        config.home_directory = '.'[0m
[ 2080s] [32m      end[0m
[ 2080s] [32m[0m
[ 2080s] [32m      Aruba.configure do |config|[0m
[ 2080s] [32m        puts %(The default value is "#{config.home_directory}")[0m
[ 2080s] [32m      end[0m
[ 2080s] [32m      """[0m
[ 2090s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2090s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2090s] [32m      """[0m
[ 2090s] [32m      The default value is "."[0m
[ 2090s] [32m      """[0m
[ 2090s] 
[ 2090s]   Scenario: Set to aruba's working directory[90m                    # features/02_configure_aruba/home_directory.feature:46[0m
[ 2090s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2090s] [32m      """[0m
[ 2090s] [32m      Aruba.configure do |config|[0m
[ 2090s] [32m        # Use aruba working directory[0m
[ 2090s] [32m        config.home_directory = File.join(config.root_directory, config.working_directory)[0m
[ 2090s] [32m      end[0m
[ 2090s] [32m[0m
[ 2090s] [32m      Aruba.configure do |config|[0m
[ 2090s] [32m        puts %(The default value is "#{config.home_directory}")[0m
[ 2090s] [32m      end[0m
[ 2090s] [32m      """[0m
[ 2101s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2101s]     [32mThen the output should match:[90m                               # lib/aruba/cucumber/command.rb:255[0m[0m
[ 2101s] [32m      """[0m
[ 2101s] [32m      The default value is "/.*/tmp/aruba"[0m
[ 2101s] [32m      """[0m
[ 2101s] 
[ 2101s]   Scenario: Set to some other path (deprecated)[90m                 # features/02_configure_aruba/home_directory.feature:64[0m
[ 2101s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2101s] [32m      """[0m
[ 2101s] [32m      Aruba.configure do |config|[0m
[ 2101s] [32m        # use current working directory[0m
[ 2101s] [32m        config.home_directory = '/tmp/home'[0m
[ 2101s] [32m      end[0m
[ 2101s] [32m[0m
[ 2101s] [32m      Aruba.configure do |config|[0m
[ 2101s] [32m        puts %(The default value is "#{config.home_directory}")[0m
[ 2101s] [32m      end[0m
[ 2101s] [32m      """[0m
[ 2111s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2111s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2111s] [32m      """[0m
[ 2111s] [32m      The default value is "/tmp/home"[0m
[ 2111s] [32m      """[0m
[ 2111s] 
[ 2111s] Feature: Configure timeout for io of commands
[ 2111s]   As a developer
[ 2111s]   I want to configure the timeout waiting for io of a command
[ 2111s]   In order to support some longer running commands
[ 2111s] 
[ 2111s]   Background: [90m                        # features/02_configure_aruba/io_timeout.feature:7[0m
[ 2111s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2111s] 
[ 2111s]   Scenario: Default value[90m                                       # features/02_configure_aruba/io_timeout.feature:10[0m
[ 2111s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2111s] [32m      """[0m
[ 2111s] [32m      Aruba.configure do |config|[0m
[ 2111s] [32m        puts %(The default value is "#{config.io_wait_timeout}")[0m
[ 2111s] [32m      end[0m
[ 2111s] [32m      """[0m
[ 2121s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2121s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2121s] [32m      """[0m
[ 2121s] [32m      The default value is "0.1"[0m
[ 2121s] [32m      """[0m
[ 2121s] 
[ 2122s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/io_timeout.feature:23[0m
[ 2122s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2122s] [32m      """[0m
[ 2122s] [32m      Aruba.configure do |config|[0m
[ 2122s] [32m        config.io_wait_timeout = 2[0m
[ 2122s] [32m      end[0m
[ 2122s] [32m      """[0m
[ 2132s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2132s] 
[ 2132s] Feature: Configure if ansi color codes should be stripped off from command output (deprecated)
[ 2132s]   As a developer
[ 2132s]   I want to strip off ansi color codes
[ 2132s]   In order to make checking of those outputs easier
[ 2132s] 
[ 2132s]   Background: [90m                        # features/02_configure_aruba/keep_ansi.feature:7[0m
[ 2132s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2132s] 
[ 2132s]   Scenario: Default value[90m                                # features/02_configure_aruba/keep_ansi.feature:10[0m
[ 2132s]     [32mGiven a file named "[32m[1mfeatures/support/aruba.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2132s] [32m      """[0m
[ 2132s] [32m      Aruba.configure do |config|[0m
[ 2133s] [32m        puts %(The default value is "#{config.keep_ansi}")[0m
[ 2133s] [32m      end[0m
[ 2133s] [32m      """[0m
[ 2142s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2142s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                      # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2142s] [32m      """[0m
[ 2142s] [32m      The default value is "false"[0m
[ 2142s] [32m      """[0m
[ 2142s] 
[ 2142s]   Scenario: Modify value[90m                                 # features/02_configure_aruba/keep_ansi.feature:23[0m
[ 2142s]     [32mGiven a file named "[32m[1mfeatures/support/aruba.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2142s] [32m      """[0m
[ 2142s] [32m      Aruba.configure do |config|[0m
[ 2142s] [32m        config.keep_ansi = true[0m
[ 2142s] [32m      end[0m
[ 2142s] [32m      """[0m
[ 2153s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2153s] 
[ 2153s] Feature: Configure Log level of aruba logger
[ 2153s]   As a developer
[ 2153s]   I want to configure the level of information put to output by logger
[ 2153s]   In order to modify the amount of information
[ 2153s] 
[ 2153s]   Background: [90m                        # features/02_configure_aruba/log_level.feature:7[0m
[ 2153s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2153s] 
[ 2153s]   Scenario: Default value[90m                                       # features/02_configure_aruba/log_level.feature:10[0m
[ 2153s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2153s] [32m      """[0m
[ 2153s] [32m      Aruba.configure do |config|[0m
[ 2153s] [32m        puts %(The default value is "#{config.log_level}")[0m
[ 2153s] [32m      end[0m
[ 2153s] [32m      """[0m
[ 2163s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2163s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2163s] [32m      """[0m
[ 2163s] [32m      The default value is "info"[0m
[ 2163s] [32m      """[0m
[ 2163s] 
[ 2163s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/log_level.feature:23[0m
[ 2163s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2163s] [32m      """[0m
[ 2163s] [32m      Aruba.configure do |config|[0m
[ 2163s] [32m        config.log_level = :warn[0m
[ 2163s] [32m      end[0m
[ 2163s] [32m[0m
[ 2163s] [32m      Aruba.configure do |config|[0m
[ 2163s] [32m        puts %(The default value is "#{config.log_level}")[0m
[ 2163s] [32m      end[0m
[ 2163s] [32m      """[0m
[ 2174s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2174s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2174s] [32m      """[0m
[ 2174s] [32m      The default value is "warn"[0m
[ 2174s] [32m      """[0m
[ 2174s] 
[ 2174s] Feature: Configure the phsical block size of disk
[ 2174s]   As a developer
[ 2174s]   I want to configure the physical block size
[ 2174s]   In order to make the disk usage work for my application's setup
[ 2174s] 
[ 2174s]   Background: [90m                        # features/02_configure_aruba/physical_block_size.feature:7[0m
[ 2174s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2174s] 
[ 2174s]   Scenario: Default value[90m                                       # features/02_configure_aruba/physical_block_size.feature:10[0m
[ 2174s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2174s] [32m      """[0m
[ 2174s] [32m      Aruba.configure do |config|[0m
[ 2174s] [32m        puts %(The default value is "#{config.physical_block_size}")[0m
[ 2174s] [32m      end[0m
[ 2174s] [32m      """[0m
[ 2184s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2184s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2184s] [32m      """[0m
[ 2184s] [32m      The default value is "512"[0m
[ 2184s] [32m      """[0m
[ 2184s] 
[ 2184s]   Scenario: Set the block size to something else which is a power of two[90m # features/02_configure_aruba/physical_block_size.feature:23[0m
[ 2184s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2184s] [32m      """[0m
[ 2184s] [32m      Aruba.configure do |config|[0m
[ 2184s] [32m        # use current working directory[0m
[ 2184s] [32m        config.physical_block_size = 4096[0m
[ 2184s] [32m      end[0m
[ 2184s] [32m[0m
[ 2184s] [32m      Aruba.configure do |config|[0m
[ 2184s] [32m        puts %(The default value is "#{config.physical_block_size}")[0m
[ 2184s] [32m      end[0m
[ 2184s] [32m      """[0m
[ 2194s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2194s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                                      # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2194s] [32m      """[0m
[ 2194s] [32m      The default value is "4096"[0m
[ 2194s] [32m      """[0m
[ 2194s] 
[ 2194s]   Scenario: The value needs to be a power of two, otherwise it will fail[90m # features/02_configure_aruba/physical_block_size.feature:41[0m
[ 2194s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2194s] [32m      """[0m
[ 2194s] [32m      Aruba.configure do |config|[0m
[ 2194s] [32m        config.physical_block_size = 3[0m
[ 2194s] [32m      end[0m
[ 2194s] [32m      """[0m
[ 2203s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2203s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                                      # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2203s] [32m      """[0m
[ 2203s] [32m      Contract violation for argument[0m
[ 2203s] [32m      """[0m
[ 2203s] 
[ 2203s] Feature: Configure if ansi color codes should be stripped off from command output
[ 2203s]   As a developer
[ 2203s]   I want to strip off ansi color codes
[ 2203s]   In order to make checking of those outputs easier
[ 2203s] 
[ 2204s]   Background: [90m                        # features/02_configure_aruba/remove_ansi_escape_sequences.feature:7[0m
[ 2204s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2204s] 
[ 2204s]   Scenario: Default value[90m                                       # features/02_configure_aruba/remove_ansi_escape_sequences.feature:10[0m
[ 2204s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2204s] [32m      """[0m
[ 2204s] [32m      Aruba.configure do |config|[0m
[ 2204s] [32m        puts %(The default value is "#{config.remove_ansi_escape_sequences}")[0m
[ 2204s] [32m      end[0m
[ 2204s] [32m      """[0m
[ 2215s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2215s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2215s] [32m      """[0m
[ 2215s] [32m      The default value is "true"[0m
[ 2215s] [32m      """[0m
[ 2215s] 
[ 2215s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/remove_ansi_escape_sequences.feature:23[0m
[ 2215s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2215s] [32m      """[0m
[ 2215s] [32m      Aruba.configure do |config|[0m
[ 2215s] [32m        config.remove_ansi_escape_sequences = false[0m
[ 2215s] [32m      end[0m
[ 2215s] [32m[0m
[ 2215s] [32m      Aruba.configure do |config|[0m
[ 2215s] [32m        puts %(The value is "#{config.remove_ansi_escape_sequences}")[0m
[ 2215s] [32m      end[0m
[ 2215s] [32m      """[0m
[ 2224s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2224s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                              # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2224s] [32m      """[0m
[ 2224s] [32m      The value is "false"[0m
[ 2224s] [32m      """[0m
[ 2224s] 
[ 2224s] Feature: Use root directory of aruba
[ 2224s]   As a developer
[ 2224s]   I want to use the root directory of aruba
[ 2224s]   In order to use it elsewhere
[ 2224s] 
[ 2224s]   Background: [90m                        # features/02_configure_aruba/root_directory.feature:7[0m
[ 2224s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2224s] 
[ 2224s]   Scenario: Default configuration[90m                               # features/02_configure_aruba/root_directory.feature:10[0m
[ 2224s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2224s] [32m      """[0m
[ 2224s] [32m      Aruba.configure do |config|[0m
[ 2224s] [32m        puts config.root_directory[0m
[ 2224s] [32m      end[0m
[ 2224s] [32m      """[0m
[ 2233s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2233s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2233s] [32m      """[0m
[ 2233s] [32m      tmp/aruba[0m
[ 2233s] [32m      """[0m
[ 2233s] 
[ 2234s]   Scenario: Modify value (deprecated)[90m                    # features/02_configure_aruba/root_directory.feature:23[0m
[ 2234s]     [32mGiven a file named "[32m[1mfeatures/support/aruba.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2234s] [32m      """[0m
[ 2234s] [32m      Aruba.configure do |config|[0m
[ 2234s] [32m        config.root_directory = '/tmp/'[0m
[ 2234s] [32m      end[0m
[ 2234s] [32m      """[0m
[ 2243s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2243s] 
[ 2243s] Feature: Set time to wait after spawning command
[ 2243s]   As a developer
[ 2243s]   I want to configure a time span to wait after the command was spawned
[ 2243s]   In order to prevent failure of some commands which take a little bit longer
[ 2243s]   to load.
[ 2243s] 
[ 2243s] 
[ 2243s]   If you setup a ruby script, this may load bundler. This makes the script to
[ 2243s]   start up a little bit longer. If you want to run a command in background,
[ 2243s]   starting the command in a background process may take longer then sending it
[ 2243s]   a signal.
[ 2243s] 
[ 2243s]   If you experience some brittle tests with background commands, try to set the
[ 2243s]   `#startup_wait_time`.
[ 2243s] 
[ 2243s]   Background: [90m                        # features/02_configure_aruba/startup_wait_time.feature:17[0m
[ 2243s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2243s] 
[ 2243s]   Scenario: Default value[90m                                       # features/02_configure_aruba/startup_wait_time.feature:20[0m
[ 2243s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2243s] [32m      """[0m
[ 2243s] [32m      Aruba.configure do |config|[0m
[ 2243s] [32m        puts %(The default value is "#{config.startup_wait_time}")[0m
[ 2243s] [32m      end[0m
[ 2243s] [32m      """[0m
[ 2252s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2252s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2252s] [32m      """[0m
[ 2252s] [32m      The default value is "0"[0m
[ 2252s] [32m      """[0m
[ 2252s] 
[ 2252s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/startup_wait_time.feature:33[0m
[ 2252s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2252s] [32m      """[0m
[ 2252s] [32m      Aruba.configure do |config|[0m
[ 2252s] [32m        config.startup_wait_time = 2[0m
[ 2252s] [32m      end[0m
[ 2252s] [32m[0m
[ 2252s] [32m      Aruba.configure do |config|[0m
[ 2252s] [32m        puts %(The new value is "#{config.startup_wait_time}")[0m
[ 2252s] [32m      end[0m
[ 2252s] [32m      """[0m
[ 2262s]     [32mThen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2262s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2262s] [32m      """[0m
[ 2262s] [32m      The new value is "2"[0m
[ 2262s] [32m      """[0m
[ 2262s] 
[ 2262s] Feature: Configure working directory of aruba
[ 2262s]   As a developer
[ 2262s]   I want to configure the working directory of aruba
[ 2262s]   In order to have a test directory for each used spec runner - e.g. cucumber or rspec
[ 2262s] 
[ 2262s]   Background: [90m                        # features/02_configure_aruba/working_directory.feature:7[0m
[ 2262s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2262s] 
[ 2262s]   Scenario: Default value[90m                                       # features/02_configure_aruba/working_directory.feature:10[0m
[ 2262s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2262s] [32m      """[0m
[ 2262s] [32m      Aruba.configure do |config|[0m
[ 2262s] [32m        puts %(The default value is "#{config.working_directory}")[0m
[ 2262s] [32m      end[0m
[ 2262s] [32m      """[0m
[ 2271s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2271s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2271s] [32m      """[0m
[ 2271s] [32m      The default value is "tmp/aruba"[0m
[ 2271s] [32m      """[0m
[ 2271s] 
[ 2272s]   Scenario: Modify value[90m                                        # features/02_configure_aruba/working_directory.feature:23[0m
[ 2272s]     [32mGiven a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2272s] [32m      """[0m
[ 2272s] [32m      Aruba.configure do |config|[0m
[ 2272s] [32m        config.working_directory = 'tmp/cucumber'[0m
[ 2272s] [32m      end[0m
[ 2272s] [32m      """[0m
[ 2272s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2272s] [32m      """[0m
[ 2272s] [32m      Feature: Run it[0m
[ 2272s] [32m        Scenario: Fast command[0m
[ 2272s] [32m          When I run `echo "Hello"`[0m
[ 2272s] [32m          Then the exit status should be 0[0m
[ 2272s] [32m      """[0m
[ 2281s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2281s]     [32mThen a [32m[1mdirectory[0m[0m[32m named "[32m[1mtmp/cucumber[0m[0m[32m" should exist[90m          # lib/aruba/cucumber/file.rb:91[0m[0m
[ 2281s] 
[ 2281s] Feature: Announce output during test run
[ 2281s]   In order to specify expected output
[ 2281s]   As a developer using Cucumber
[ 2281s]   I want to use the "the output should contain" step
[ 2281s] 
[ 2281s]   Background: [90m                            # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:7[0m
[ 2281s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2281s] 
[ 2281s]   Scenario: Announce change of directory[90m                    # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:10[0m
[ 2281s]     [32mGiven a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2281s] [32m      """[0m
[ 2281s] [32m      Feature: Announce[0m
[ 2281s] [32m        @announce-directory[0m
[ 2281s] [32m        Scenario: Run command[0m
[ 2281s] [32m          Given a directory named "dir.d"[0m
[ 2281s] [32m          When I cd to "dir.d"[0m
[ 2281s] [32m      """[0m
[ 2291s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2291s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2291s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                          # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2291s] [32m      """[0m
[ 2291s] [32m      $ cd /[0m
[ 2291s] [32m      """[0m
[ 2291s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                          # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2291s] [32m      """[0m
[ 2291s] [32m      tmp/aruba/dir.d[0m
[ 2291s] [32m      """[0m
[ 2291s] 
[ 2291s]   Scenario: Announce stdout[90m                               # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:30[0m
[ 2291s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2291s] [32m      """[0m
[ 2291s] [32m      #!/usr/bin/env bash[0m
[ 2291s] [32m[0m
[ 2291s] [32m      echo 'Hello World'[0m
[ 2291s] [32m      """[0m
[ 2291s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2291s] [32m      """[0m
[ 2291s] [32m      Feature: Announce[0m
[ 2291s] [32m        @announce-stdout[0m
[ 2291s] [32m        Scenario: Run command[0m
[ 2291s] [32m          When I run `aruba-test-cli`[0m
[ 2291s] [32m          Then the exit status should be 0[0m
[ 2291s] [32m      """[0m
[ 2302s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2302s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2302s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2302s] [32m      """[0m
[ 2302s] [32m      <<-STDOUT[0m
[ 2302s] [32m      Hello World[0m
[ 2302s] [32m[0m
[ 2302s] [32m      STDOUT[0m
[ 2302s] [32m      """[0m
[ 2302s] 
[ 2302s]   Scenario: Announce stderr[90m                               # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:55[0m
[ 2302s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2302s] [32m      """[0m
[ 2302s] [32m      #!/usr/bin/env bash[0m
[ 2302s] [32m[0m
[ 2302s] [32m      echo 'Hello World' >&2[0m
[ 2302s] [32m      """[0m
[ 2302s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2302s] [32m      """[0m
[ 2302s] [32m      Feature: Announce[0m
[ 2302s] [32m        @announce-stderr[0m
[ 2302s] [32m        Scenario: Run command[0m
[ 2302s] [32m          When I run `aruba-test-cli`[0m
[ 2302s] [32m          Then the exit status should be 0[0m
[ 2302s] [32m      """[0m
[ 2312s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2312s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2312s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2312s] [32m      """[0m
[ 2312s] [32m      <<-STDERR[0m
[ 2312s] [32m      Hello World[0m
[ 2312s] [32m[0m
[ 2312s] [32m      STDERR[0m
[ 2312s] [32m      """[0m
[ 2312s] 
[ 2312s]   Scenario: Announce both stderr and stdout[90m               # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:80[0m
[ 2312s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2312s] [32m      """[0m
[ 2312s] [32m      #!/usr/bin/env bash[0m
[ 2312s] [32m[0m
[ 2312s] [32m      echo 'Hello' >&2[0m
[ 2312s] [32m      echo 'World'[0m
[ 2312s] [32m      """[0m
[ 2312s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2312s] [32m      """[0m
[ 2312s] [32m      Feature: Announce[0m
[ 2312s] [32m        @announce-output[0m
[ 2312s] [32m        Scenario: Run command[0m
[ 2312s] [32m          When I run `aruba-test-cli`[0m
[ 2312s] [32m          Then the exit status should be 0[0m
[ 2312s] [32m      """[0m
[ 2322s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2322s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2322s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2322s] [32m      """[0m
[ 2322s] [32m      <<-STDERR[0m
[ 2322s] [32m      Hello[0m
[ 2322s] [32m[0m
[ 2322s] [32m      STDERR[0m
[ 2322s] [32m      """[0m
[ 2322s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2322s] [32m      """[0m
[ 2322s] [32m      <<-STDOUT[0m
[ 2322s] [32m      World[0m
[ 2322s] [32m[0m
[ 2322s] [32m      STDOUT[0m
[ 2322s] [32m      """[0m
[ 2322s] 
[ 2322s]   Scenario: Announce command[90m                              # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:113[0m
[ 2322s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2322s] [32m      """[0m
[ 2322s] [32m      #!/usr/bin/env bash[0m
[ 2322s] [32m[0m
[ 2322s] [32m      echo 'Hello World'[0m
[ 2322s] [32m      """[0m
[ 2322s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2322s] [32m      """[0m
[ 2322s] [32m      Feature: Announce[0m
[ 2322s] [32m        @announce-command[0m
[ 2322s] [32m        Scenario: Run command[0m
[ 2322s] [32m          When I run `aruba-test-cli`[0m
[ 2322s] [32m          Then the exit status should be 0[0m
[ 2322s] [32m      """[0m
[ 2332s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2332s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2332s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2332s] [32m      """[0m
[ 2332s] [32m      $ aruba-test-cli[0m
[ 2332s] [32m      """[0m
[ 2332s] 
[ 2332s]   Scenario: Announce change of environment variable[90m       # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:135[0m
[ 2332s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2332s] [32m      """[0m
[ 2332s] [32m      #!/usr/bin/env bash[0m
[ 2332s] [32m[0m
[ 2332s] [32m      echo 'Hello World'[0m
[ 2332s] [32m      """[0m
[ 2332s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2332s] [32m      """[0m
[ 2332s] [32m      Feature: Announce[0m
[ 2332s] [32m        @announce-changed-environment[0m
[ 2332s] [32m        Scenario: Run command[0m
[ 2332s] [32m          When I set the environment variables to:[0m
[ 2332s] [32m            | variable | value    |[0m
[ 2332s] [32m            | MY_VAR   | my_value |[0m
[ 2332s] [32m          And I run `aruba-test-cli`[0m
[ 2332s] [32m          Then the exit status should be 0[0m
[ 2332s] [32m      """[0m
[ 2343s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2343s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2343s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2343s] [32m      """[0m
[ 2343s] [32m      $ export MY_VAR=my_value[0m
[ 2343s] [32m      """[0m
[ 2343s] 
[ 2343s]   Scenario: Announce change of environment variable which contains special characters[90m # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:160[0m
[ 2343s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m                              # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2343s] [32m      """[0m
[ 2343s] [32m      #!/usr/bin/env bash[0m
[ 2343s] [32m[0m
[ 2343s] [32m      echo 'Hello World'[0m
[ 2343s] [32m      """[0m
[ 2343s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m                             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2343s] [32m      """[0m
[ 2343s] [32m      Feature: Announce[0m
[ 2343s] [32m        @announce-changed-environment[0m
[ 2343s] [32m        Scenario: Run command[0m
[ 2343s] [32m          When I set the environment variables to:[0m
[ 2343s] [32m            | variable | value      |[0m
[ 2343s] [32m            | MY_VAR   | my value ! |[0m
[ 2343s] [32m          And I run `aruba-test-cli`[0m
[ 2343s] [32m          Then the exit status should be 0[0m
[ 2343s] [32m      """[0m
[ 2353s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2353s]     [32mThen the features should all pass[90m                                                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2353s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                                                    # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2353s] [32m      """[0m
[ 2353s] [32m      $ export MY_VAR=my\ value\ \[0m
[ 2353s] [32m      """[0m
[ 2353s] 
[ 2353s]   Scenario: Announce file system status of command[90m        # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:185[0m
[ 2353s]     This will output information like owner, group, atime, mtime, ctime, size,
[ 2353s]     mode and if command is executable.
[ 2353s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2353s] [32m      """[0m
[ 2353s] [32m      #!/usr/bin/env bash[0m
[ 2353s] [32m[0m
[ 2353s] [32m      echo 'Hello World'[0m
[ 2353s] [32m      """[0m
[ 2353s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2353s] [32m      """[0m
[ 2353s] [32m      Feature: Announce[0m
[ 2353s] [32m        @announce-command-filesystem-status[0m
[ 2353s] [32m        Scenario: Run command[0m
[ 2353s] [32m          And I run `aruba-test-cli`[0m
[ 2353s] [32m          Then the exit status should be 0[0m
[ 2353s] [32m      """[0m
[ 2363s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2363s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # mode       => 755[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # owner[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # group[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # ctime[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # mtime[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # atime[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # size[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      # executable[0m
[ 2363s] [32m      """[0m
[ 2363s] 
[ 2363s]   Scenario: Announce content of command[90m                   # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:238[0m
[ 2363s]     This will output the content of the executable command. Be careful doing
[ 2363s]     this with binary executables. This hook should be used with scripts only.
[ 2363s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      #!/usr/bin/env bash[0m
[ 2363s] [32m[0m
[ 2363s] [32m      echo 'Hello World'[0m
[ 2363s] [32m      """[0m
[ 2363s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2363s] [32m      """[0m
[ 2363s] [32m      Feature: Announce[0m
[ 2363s] [32m        @announce-command-content[0m
[ 2363s] [32m        Scenario: Run command[0m
[ 2363s] [32m          And I run `aruba-test-cli`[0m
[ 2363s] [32m          Then the exit status should be 0[0m
[ 2363s] [32m      """[0m
[ 2373s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2373s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2373s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2373s] [32m      """[0m
[ 2373s] [32m      #!/usr/bin/env bash[0m
[ 2373s] [32m[0m
[ 2373s] [32m      echo 'Hello World'[0m
[ 2373s] [32m      """[0m
[ 2373s] 
[ 2373s]   Scenario: Announce everything[90m                           # features/03_testing_frameworks/cucumber/announce_information_for_troubleshooting.feature:265[0m
[ 2373s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2373s] [32m      """[0m
[ 2373s] [32m      #!/usr/bin/env bash[0m
[ 2373s] [32m[0m
[ 2373s] [32m      echo 'Hello World'[0m
[ 2373s] [32m      """[0m
[ 2373s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2373s] [32m      """[0m
[ 2373s] [32m      Feature: Announce[0m
[ 2373s] [32m        @announce[0m
[ 2373s] [32m        Scenario: Run command[0m
[ 2373s] [32m          When I run `aruba-test-cli`[0m
[ 2373s] [32m          Then the exit status should be 0[0m
[ 2373s] [32m      """[0m
[ 2383s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2383s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2383s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2383s] [32m      """[0m
[ 2383s] [32m      <<-STDOUT[0m
[ 2383s] [32m      Hello World[0m
[ 2383s] [32m[0m
[ 2383s] [32m      STDOUT[0m
[ 2383s] [32m      """[0m
[ 2383s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2383s] [32m      """[0m
[ 2383s] [32m      <<-STDERR[0m
[ 2383s] [32m[0m
[ 2383s] [32m      STDERR[0m
[ 2383s] [32m      """[0m
[ 2384s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2384s] [32m      """[0m
[ 2384s] [32m      <<-COMMAND[0m
[ 2384s] [32m      #!/usr/bin/env bash[0m
[ 2384s] [32m[0m
[ 2384s] [32m      echo 'Hello World'[0m
[ 2384s] [32m      COMMAND[0m
[ 2384s] [32m      """[0m
[ 2384s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                        # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2384s] [32m      """[0m
[ 2384s] [32m      <<-COMMAND FILESYSTEM STATUS[0m
[ 2384s] [32m      """[0m
[ 2384s] 
[ 2384s] Feature: Disable Bundler environment
[ 2384s]   Use the @disable-bundler tag to escape from your project's Gemfile.
[ 2384s] 
[ 2384s]   Background: [90m                        # features/03_testing_frameworks/cucumber/disable_bunder.feature:4[0m
[ 2384s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2384s] 
[ 2384s]   Scenario: Clear the Bundler environment[90m           # features/03_testing_frameworks/cucumber/disable_bunder.feature:7[0m
[ 2384s]     [32mGiven a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2384s] [32m      """[0m
[ 2384s] [32m      Feature: My Feature[0m
[ 2384s] [32m        @disable-bundler[0m
[ 2384s] [32m        Scenario: Check environment[0m
[ 2384s] [32m          When I run `env`[0m
[ 2384s] [32m          Then the output should not match /^BUNDLE_GEMFILE=/[0m
[ 2384s] [32m      """[0m
[ 2393s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2393s]     [32mThen the features should all pass[90m               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2393s] 
[ 2393s] Feature: Check exit status of commands
[ 2393s]   Use the `the exit status should be \d`-step to check the exit status of the
[ 2393s]   last command which was executed.
[ 2393s] 
[ 2394s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:6[0m
[ 2394s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2394s] 
[ 2394s]   Scenario: Test for exit status of 0[90m                     # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:9[0m
[ 2394s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2394s] [32m      """[0m
[ 2394s] [32m      #!/bin/bash[0m
[ 2394s] [32m      exit 0[0m
[ 2394s] [32m      """[0m
[ 2394s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2394s] [32m      """[0m
[ 2394s] [32m      Feature: Exit status[0m
[ 2394s] [32m        Scenario: Run command[0m
[ 2394s] [32m          When I run `aruba-test-cli`[0m
[ 2394s] [32m          Then the exit status should be 0[0m
[ 2394s] [32m      """[0m
[ 2403s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2403s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2403s] 
[ 2404s]   Scenario: Test for exit status 1[90m                        # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:25[0m
[ 2404s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2404s] [32m      """[0m
[ 2404s] [32m      #!/bin/bash[0m
[ 2404s] [32m      exit 1[0m
[ 2404s] [32m      """[0m
[ 2404s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2404s] [32m      """[0m
[ 2404s] [32m      Feature: Failing program[0m
[ 2404s] [32m        Scenario: Run command[0m
[ 2404s] [32m          When I run `aruba-test-cli`[0m
[ 2404s] [32m          Then the exit status should be 1[0m
[ 2404s] [32m      """[0m
[ 2413s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2413s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2413s] 
[ 2413s]   Scenario: Test for non-zero exit status[90m                 # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:41[0m
[ 2413s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2413s] [32m      """[0m
[ 2413s] [32m      #!/bin/bash[0m
[ 2413s] [32m      exit 1[0m
[ 2413s] [32m      """[0m
[ 2413s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2413s] [32m      """[0m
[ 2413s] [32m      Feature: Failing program[0m
[ 2413s] [32m        Scenario: Run command[0m
[ 2413s] [32m          When I run `aruba-test-cli`[0m
[ 2413s] [32m          Then the exit status should not be 0[0m
[ 2413s] [32m      """[0m
[ 2423s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2423s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2423s] 
[ 2424s]   Scenario: Successfully run something[90m                    # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:57[0m
[ 2424s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2424s] [32m      """[0m
[ 2424s] [32m      #!/bin/bash[0m
[ 2424s] [32m      exit 0[0m
[ 2424s] [32m      """[0m
[ 2424s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2424s] [32m      """[0m
[ 2424s] [32m      Feature: Failing program[0m
[ 2424s] [32m        Scenario: Run command[0m
[ 2424s] [32m          When I successfully run `aruba-test-cli`[0m
[ 2424s] [32m      """[0m
[ 2433s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2433s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2433s] 
[ 2433s]   Scenario: Fail to run something successfully[90m            # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:72[0m
[ 2433s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2433s] [32m      """[0m
[ 2433s] [32m      #!/bin/bash[0m
[ 2433s] [32m      exit 1[0m
[ 2433s] [32m      """[0m
[ 2433s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2433s] [32m      """[0m
[ 2433s] [32m      Feature: Failing program[0m
[ 2433s] [32m        Scenario: Run command[0m
[ 2433s] [32m          When I successfully run `aruba-test-cli`[0m
[ 2433s] [32m      """[0m
[ 2443s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2443s]     [32mThen the features should[32m[1m not[0m[0m[32m all pass[90m                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2443s] 
[ 2443s]   Scenario: Overwrite the default exit timeout via step[90m   # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:87[0m
[ 2443s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2443s] [32m      """[0m
[ 2443s] [32m      #!/bin/bash[0m
[ 2443s] [32m      sleep 0.1[0m
[ 2443s] [32m      """[0m
[ 2443s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2443s] [32m      """[0m
[ 2443s] [32m      Feature: Failing program[0m
[ 2443s] [32m        Scenario: Run command[0m
[ 2443s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 2443s] [32m          When I successfully run `aruba-test-cli`[0m
[ 2443s] [32m      """[0m
[ 2453s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2453s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2453s] 
[ 2453s]   Scenario: Successfully run something longer then the default time[90m # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:103[0m
[ 2453s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2453s] [32m      """[0m
[ 2453s] [32m      #!/bin/bash[0m
[ 2453s] [32m      sleep 0.1[0m
[ 2453s] [32m      """[0m
[ 2453s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2453s] [32m      """[0m
[ 2453s] [32m      Feature: Failing program[0m
[ 2453s] [32m        Scenario: Run command[0m
[ 2453s] [32m          Given the default aruba exit timeout is 0 seconds[0m
[ 2453s] [32m          When I successfully run `aruba-test-cli` for up to 0.2 seconds[0m
[ 2453s] [32m      """[0m
[ 2463s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2463s]     [32mThen the features should all pass[90m                               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2463s] 
[ 2464s]   Scenario: Unsuccessfully run something that takes too long[90m # features/03_testing_frameworks/cucumber/steps/command/check_for_exit_statuses.feature:119[0m
[ 2464s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2464s] [32m      """[0m
[ 2464s] [32m      #!/bin/bash[0m
[ 2464s] [32m      sleep 2[0m
[ 2464s] [32m      """[0m
[ 2464s]     [32mAnd a file named "[32m[1mfeatures/exit_status.feature[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2464s] [32m      """[0m
[ 2464s] [32m      Feature: Failing program[0m
[ 2464s] [32m        Scenario: Run command[0m
[ 2464s] [32m          Given the default aruba exit timeout is 0 seconds[0m
[ 2464s] [32m          When I successfully run `aruba-test-cli` for up to 1 seconds[0m
[ 2464s] [32m      """[0m
[ 2474s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2474s]     [32mThen the features should[32m[1m not[0m[0m[32m all pass with:[90m              # lib/aruba/cucumber/testing_frameworks.rb:14[0m[0m
[ 2474s] [32m      """[0m
[ 2474s] [32m      expected "aruba-test-cli" to have finished in time[0m
[ 2474s] [32m      """[0m
[ 2474s] 
[ 2474s] Feature: All output of commands which were executed
[ 2474s]   In order to specify expected output
[ 2474s]   As a developer using Cucumber
[ 2474s]   I want to use the "the output should contain" step
[ 2474s] 
[ 2474s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:7[0m
[ 2474s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2474s] 
[ 2474s]   Scenario: Detect subset of one-line output[90m             # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:10[0m
[ 2474s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2474s] [32m      """[0m
[ 2474s] [32m      #!/usr/bin/env bash[0m
[ 2474s] [32m[0m
[ 2474s] [32m      echo 'hello world'[0m
[ 2474s] [32m      """[0m
[ 2474s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2474s] [32m      """[0m
[ 2474s] [32m      Feature: Run command[0m
[ 2474s] [32m        Scenario: Run command[0m
[ 2474s] [32m          When I run `aruba-test-cli`[0m
[ 2474s] [32m          Then the output should contain "hello world"[0m
[ 2474s] [32m      """[0m
[ 2484s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2484s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2484s] 
[ 2485s]   Scenario: Detect absence of one-line output[90m            # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:27[0m
[ 2485s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2485s] [32m      """[0m
[ 2485s] [32m      #!/usr/bin/env bash[0m
[ 2485s] [32m[0m
[ 2485s] [32m      echo 'hello world'[0m
[ 2485s] [32m      """[0m
[ 2485s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2485s] [32m      """[0m
[ 2485s] [32m      Feature: Run command[0m
[ 2485s] [32m        Scenario: Run command[0m
[ 2485s] [32m          When I run `aruba-test-cli`[0m
[ 2485s] [32m          Then the output should not contain "good-bye"[0m
[ 2485s] [32m      """[0m
[ 2494s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2494s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2494s] 
[ 2494s]   Scenario: Detect subset of multiline output[90m            # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:44[0m
[ 2494s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2494s] [32m      """[0m
[ 2494s] [32m      #!/usr/bin/env bash[0m
[ 2494s] [32m[0m
[ 2494s] [32m      echo -e "hello\nworld"[0m
[ 2494s] [32m      """[0m
[ 2494s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2494s] [32m      """[0m
[ 2494s] [32m      Feature: Run command[0m
[ 2494s] [32m        Scenario: Run command[0m
[ 2494s] [32m          When I run `aruba-test-cli`[0m
[ 2494s] [32m          Then the output should contain:[0m
[ 2494s] [32m          """[0m
[ 2494s] [32m          hello[0m
[ 2494s] [32m          """[0m
[ 2494s] [32m      """[0m
[ 2504s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2504s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2504s] 
[ 2504s]   Scenario: Detect absence of subset of multiline output[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:64[0m
[ 2504s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2504s] [32m      """[0m
[ 2504s] [32m      #!/usr/bin/env bash[0m
[ 2504s] [32m[0m
[ 2504s] [32m      echo -e "hello\nworld"[0m
[ 2504s] [32m      """[0m
[ 2504s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2504s] [32m      """[0m
[ 2504s] [32m      Feature: Run command[0m
[ 2504s] [32m        Scenario: Run command[0m
[ 2504s] [32m          When I run `aruba-test-cli`[0m
[ 2504s] [32m          Then the output should not contain:[0m
[ 2504s] [32m          """[0m
[ 2504s] [32m          good-bye[0m
[ 2504s] [32m          """[0m
[ 2504s] [32m      """[0m
[ 2514s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2514s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2514s] 
[ 2514s]   Scenario: Detect exact one-line output[90m               # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:84[0m
[ 2514s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2514s] [32m      """[0m
[ 2514s] [32m      Feature: Run command[0m
[ 2514s] [32m        Scenario: Run command[0m
[ 2514s] [32m          When I run `echo 'hello world'`[0m
[ 2514s] [32m          Then the output should contain exactly:[0m
[ 2514s] [32m          """[0m
[ 2514s] [32m          hello world[0m
[ 2514s] [32m          """[0m
[ 2514s] [32m      """[0m
[ 2524s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2524s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2524s] 
[ 2524s]   Scenario: Detect exact one-line output with ANSI output[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:98[0m
[ 2524s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2524s] [32m      """[0m
[ 2524s] [32m      #!/usr/bin/env bash[0m
[ 2524s] [32m[0m
[ 2524s] [32m      echo -e "\e[36mhello world\e[0m"[0m
[ 2524s] [32m      """[0m
[ 2524s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2524s] [32m      """[0m
[ 2524s] [32m      Feature: Run command[0m
[ 2524s] [32m        @keep-ansi-escape-sequences[0m
[ 2524s] [32m        Scenario: Run command[0m
[ 2524s] [32m          When I run `aruba-test-cli`[0m
[ 2524s] [32m          Then the output should contain exactly:[0m
[ 2524s] [32m          """[0m
[ 2524s] [32m          \e[36mhello world\e[0m[0m
[ 2524s] [32m          """[0m
[ 2524s] [32m      """[0m
[ 2534s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2534s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2534s] 
[ 2535s]   Scenario: Detect exact one-line output with ANSI output stripped by default[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:119[0m
[ 2535s]     [32mGiven the default aruba exit timeout is [32m[1m12[0m[0m[32m seconds[90m                        # lib/aruba/cucumber/command.rb:367[0m[0m
[ 2535s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m                      # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2535s] [32m      """[0m
[ 2535s] [32m      #!/usr/bin/env bash[0m
[ 2535s] [32m[0m
[ 2535s] [32m      echo -e "\e[36mhello world\e[0m"[0m
[ 2535s] [32m      """[0m
[ 2535s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m                          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2535s] [32m      """[0m
[ 2535s] [32m      Feature: Run command[0m
[ 2535s] [32m        Scenario: Run command[0m
[ 2535s] [32m          When I run `aruba-test-cli`[0m
[ 2535s] [32m          Then the output should contain exactly:[0m
[ 2535s] [32m          """[0m
[ 2535s] [32m          hello world[0m
[ 2535s] [32m          """[0m
[ 2535s] [32m      """[0m
[ 2544s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2544s]     [32mThen the features should all pass[90m                                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2544s] 
[ 2544s]   Scenario: Detect exact multiline output[90m                # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:140[0m
[ 2544s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2544s] [32m      """[0m
[ 2544s] [32m      #!/usr/bin/env bash[0m
[ 2544s] [32m[0m
[ 2544s] [32m      echo -ne "hello\nworld"[0m
[ 2544s] [32m      """[0m
[ 2544s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2544s] [32m      """[0m
[ 2544s] [32m      Feature: Run command[0m
[ 2544s] [32m        Scenario: Run command[0m
[ 2544s] [32m          When I run `aruba-test-cli`[0m
[ 2544s] [32m          Then the output should contain exactly:[0m
[ 2544s] [32m          """[0m
[ 2544s] [32m          hello[0m
[ 2544s] [32m          world[0m
[ 2544s] [32m          """[0m
[ 2544s] [32m      """[0m
[ 2554s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2554s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2554s] 
[ 2554s]   Scenario: Detect subset of one-line output with regex[90m  # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:161[0m
[ 2554s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2554s] [32m      """[0m
[ 2554s] [32m      #!/usr/bin/env bash[0m
[ 2554s] [32m[0m
[ 2554s] [32m      echo 'hello, ruby'[0m
[ 2554s] [32m      """[0m
[ 2554s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2554s] [32m      """[0m
[ 2554s] [32m      Feature: Run command[0m
[ 2554s] [32m        Scenario: Run command[0m
[ 2554s] [32m          When I run `aruba-test-cli`[0m
[ 2554s] [32m          Then the output should match /^hello(, world)?/[0m
[ 2554s] [32m      """[0m
[ 2564s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2564s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2564s] 
[ 2564s]   Scenario: Detect subset of multiline output with regex[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:178[0m
[ 2564s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2564s] [32m      """[0m
[ 2564s] [32m      #!/usr/bin/env bash[0m
[ 2564s] [32m[0m
[ 2564s] [32m      echo -e "hello\nworld\nextra line1\nextra line2\nimportant line"[0m
[ 2564s] [32m      """[0m
[ 2564s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2564s] [32m      """[0m
[ 2564s] [32m      Feature: Run command[0m
[ 2564s] [32m        Scenario: Run command[0m
[ 2564s] [32m          When I run `aruba-test-cli`[0m
[ 2564s] [32m          Then the output should match:[0m
[ 2564s] [32m          """[0m
[ 2564s] [32m          he..o[0m
[ 2564s] [32m          wor.d[0m
[ 2564s] [32m          .*[0m
[ 2564s] [32m          important line[0m
[ 2564s] [32m          """[0m
[ 2564s] [32m      """[0m
[ 2575s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2575s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2575s] 
[ 2575s]   Scenario: Negative matching of one-line output with regex[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:201[0m
[ 2575s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2575s] [32m      """[0m
[ 2575s] [32m      #!/usr/bin/env bash[0m
[ 2575s] [32m[0m
[ 2575s] [32m      echo "hello, ruby"[0m
[ 2575s] [32m      """[0m
[ 2575s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2575s] [32m      """[0m
[ 2575s] [32m      Feature: Run command[0m
[ 2575s] [32m        Scenario: Run command[0m
[ 2575s] [32m          When I run `aruba-test-cli`[0m
[ 2575s] [32m          Then the output should not match /ruby is a better perl$/[0m
[ 2575s] [32m      """[0m
[ 2585s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2585s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2585s] 
[ 2585s]   Scenario: Negative matching of multiline output with regex[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:218[0m
[ 2585s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2585s] [32m      """[0m
[ 2585s] [32m      #!/usr/bin/env bash[0m
[ 2585s] [32m[0m
[ 2585s] [32m      echo -e "hello\nworld\nextra line1\nextra line2\nimportant line"[0m
[ 2585s] [32m      """[0m
[ 2585s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2585s] [32m      """[0m
[ 2585s] [32m      Feature: Run command[0m
[ 2585s] [32m        Scenario: Run command[0m
[ 2585s] [32m          When I run `aruba-test-cli`[0m
[ 2585s] [32m          Then the output should not match:[0m
[ 2585s] [32m          """[0m
[ 2585s] [32m          ruby[0m
[ 2585s] [32m          is[0m
[ 2585s] [32m          a[0m
[ 2585s] [32m          .*[0m
[ 2585s] [32m          perl[0m
[ 2585s] [32m          """[0m
[ 2585s] [32m      """[0m
[ 2594s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2594s]     [32mThen the features should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2594s] 
[ 2594s]   Scenario: Match passing exit status and partial output[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:242[0m
[ 2595s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2595s] [32m      """[0m
[ 2595s] [32m      #!/usr/bin/env bash[0m
[ 2595s] [32m[0m
[ 2595s] [32m      echo "hello world"[0m
[ 2595s] [32m      exit 0[0m
[ 2595s] [32m      """[0m
[ 2595s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2595s] [32m      """[0m
[ 2595s] [32m      Feature: Run command[0m
[ 2595s] [32m        Scenario: Run command[0m
[ 2595s] [32m          When I run `aruba-test-cli`[0m
[ 2595s] [32m          Then it should pass with:[0m
[ 2595s] [32m          """[0m
[ 2595s] [32m          hello[0m
[ 2595s] [32m          """[0m
[ 2595s] [32m      """[0m
[ 2604s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2604s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2604s] 
[ 2605s]   Scenario: Match passing exit status and exact output[90m   # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:263[0m
[ 2605s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2605s] [32m      """[0m
[ 2605s] [32m      #!/usr/bin/env bash[0m
[ 2605s] [32m[0m
[ 2605s] [32m      echo -ne "hello\nworld"[0m
[ 2605s] [32m      exit 0[0m
[ 2605s] [32m      """[0m
[ 2605s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2605s] [32m      """[0m
[ 2605s] [32m      Feature: Run command[0m
[ 2605s] [32m        Scenario: Run command[0m
[ 2605s] [32m          When I run `aruba-test-cli`[0m
[ 2605s] [32m          Then it should pass with exactly:[0m
[ 2605s] [32m          """[0m
[ 2605s] [32m          hello[0m
[ 2605s] [32m          world[0m
[ 2605s] [32m          """[0m
[ 2605s] [32m      """[0m
[ 2614s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2614s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2614s] 
[ 2615s]   Scenario: Match failing exit status and partial output[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:285[0m
[ 2615s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2615s] [32m      """[0m
[ 2615s] [32m      #!/usr/bin/env bash[0m
[ 2615s] [32m[0m
[ 2615s] [32m      echo -e "hello\nworld"[0m
[ 2615s] [32m      exit 1[0m
[ 2615s] [32m      """[0m
[ 2615s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2615s] [32m      """[0m
[ 2615s] [32m      Feature: Run command[0m
[ 2615s] [32m        Scenario: Run command[0m
[ 2615s] [32m          When I run `aruba-test-cli`[0m
[ 2615s] [32m          Then it should fail with:[0m
[ 2615s] [32m          """[0m
[ 2615s] [32m          hello[0m
[ 2615s] [32m          """[0m
[ 2615s] [32m      """[0m
[ 2625s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2625s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2625s] 
[ 2625s]   Scenario: Match failing exit status and exact output[90m   # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:307[0m
[ 2625s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2625s] [32m      """[0m
[ 2625s] [32m      #!/usr/bin/env bash[0m
[ 2625s] [32m[0m
[ 2625s] [32m      echo -e "hello\nworld"[0m
[ 2625s] [32m      exit 1[0m
[ 2625s] [32m      """[0m
[ 2625s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2625s] [32m      """[0m
[ 2625s] [32m      Feature: Run command[0m
[ 2625s] [32m        Scenario: Run command[0m
[ 2625s] [32m          When I run `aruba-test-cli`[0m
[ 2625s] [32m          Then it should fail with:[0m
[ 2625s] [32m          """[0m
[ 2625s] [32m          hello[0m
[ 2625s] [32m          world[0m
[ 2625s] [32m          """[0m
[ 2625s] [32m      """[0m
[ 2635s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2635s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2635s] 
[ 2635s]   Scenario: Match failing exit status and output with regex[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:329[0m
[ 2635s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2635s] [32m      """[0m
[ 2635s] [32m      #!/usr/bin/env bash[0m
[ 2635s] [32m[0m
[ 2635s] [32m      echo -e "hello\nworld"[0m
[ 2635s] [32m      exit 1[0m
[ 2635s] [32m      """[0m
[ 2635s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2635s] [32m      """[0m
[ 2635s] [32m      Feature: Run command[0m
[ 2635s] [32m        Scenario: Run command[0m
[ 2635s] [32m          When I run `aruba-test-cli`[0m
[ 2635s] [32m          Then it should fail with regex:[0m
[ 2635s] [32m          """[0m
[ 2635s] [32m          hello\s*world[0m
[ 2635s] [32m          """[0m
[ 2635s] [32m      """[0m
[ 2645s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2645s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2645s] 
[ 2645s]   Scenario: Detect output from all processes[90m              # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:350[0m
[ 2645s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2645s] [32m      """[0m
[ 2645s] [32m      #!/usr/bin/env bash[0m
[ 2645s] [32m[0m
[ 2645s] [32m      echo 'This is cli1'[0m
[ 2645s] [32m      """[0m
[ 2645s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2645s] [32m      """[0m
[ 2645s] [32m      #!/usr/bin/env bash[0m
[ 2645s] [32m[0m
[ 2645s] [32m      echo 'This is cli2'[0m
[ 2645s] [32m      """[0m
[ 2645s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2645s] [32m      """[0m
[ 2645s] [32m      Feature: Run command[0m
[ 2645s] [32m        Scenario: Run command[0m
[ 2645s] [32m          When I run `aruba-test-cli1`[0m
[ 2645s] [32m          When I run `aruba-test-cli2`[0m
[ 2645s] [32m          Then the stdout should contain exactly:[0m
[ 2645s] [32m          """[0m
[ 2645s] [32m          This is cli1[0m
[ 2645s] [32m          This is cli2[0m
[ 2645s] [32m          """[0m
[ 2645s] [32m      """[0m
[ 2655s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2655s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2655s] 
[ 2655s]   Scenario: Detect combined output from normal and interactive processes[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:378[0m
[ 2655s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2655s] [32m      """[0m
[ 2655s] [32m      #!/usr/bin/env bash[0m
[ 2655s] [32m      echo 'This is cli1'[0m
[ 2655s] [32m      """[0m
[ 2655s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2655s] [32m      """[0m
[ 2655s] [32m      #!/usr/bin/env ruby[0m
[ 2655s] [32m[0m
[ 2655s] [32m      while input = gets do[0m
[ 2655s] [32m        break if "" == input[0m
[ 2655s] [32m        puts input[0m
[ 2655s] [32m      end[0m
[ 2655s] [32m      """[0m
[ 2655s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m                     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2655s] [32m      """[0m
[ 2655s] [32m      Feature: Run command[0m
[ 2655s] [32m        Scenario: Run command[0m
[ 2655s] [32m          When I run `aruba-test-cli1`[0m
[ 2655s] [32m          When I run `aruba-test-cli2` interactively[0m
[ 2655s] [32m          And I type "This is cli2"[0m
[ 2655s] [32m          And I type ""[0m
[ 2655s] [32m          Then the stdout should contain exactly:[0m
[ 2655s] [32m          """[0m
[ 2655s] [32m          This is cli1[0m
[ 2655s] [32m          This is cli2[0m
[ 2655s] [32m          """[0m
[ 2655s] [32m      """[0m
[ 2667s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2667s]     [32mThen the features should all pass[90m                                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2667s] 
[ 2668s]   Scenario: Handle little output[90m                         # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:410[0m
[ 2668s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2668s] [32m      """[0m
[ 2668s] [32m      #!/usr/bin/env bash[0m
[ 2668s] [32m[0m
[ 2668s] [32m      for ((c=0; c<256; c = c+1)); do[0m
[ 2668s] [32m        echo -n "a"[0m
[ 2668s] [32m      done[0m
[ 2668s] [32m      """[0m
[ 2668s]     [32mAnd a file named "[32m[1mfeatures/flushing.feature[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2668s] [32m      """[0m
[ 2668s] [32m      Feature: Flushing output[0m
[ 2668s] [32m        Scenario: Run command[0m
[ 2668s] [32m          When I run `aruba-test-cli`[0m
[ 2668s] [32m          Then the output should contain "a"[0m
[ 2668s] [32m          And the output should be 256 bytes long[0m
[ 2668s] [32m          And the exit status should be 0[0m
[ 2668s] [32m      """[0m
[ 2677s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2677s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2677s] 
[ 2677s]   Scenario: Handle tons of output[90m                      # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:431[0m
[ 2677s]     In order to test processes that output a lot of data
[ 2677s]     As a developer using Aruba
[ 2677s]     I want to make sure that large amounts of output aren't buffered
[ 2678s]     [32mGiven the default aruba exit timeout is [32m[1m10[0m[0m[32m seconds[90m # lib/aruba/cucumber/command.rb:367[0m[0m
[ 2678s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2678s] [32m      """[0m
[ 2678s] [32m      #!/usr/bin/env bash[0m
[ 2678s] [32m[0m
[ 2678s] [32m      for ((c=0; c<65536; c = c+1)); do[0m
[ 2678s] [32m        echo -n "a"[0m
[ 2678s] [32m      done[0m
[ 2678s] [32m      """[0m
[ 2678s]     [32mAnd a file named "[32m[1mfeatures/flushing.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2678s] [32m      """[0m
[ 2678s] [32m      Feature: Flushing output[0m
[ 2678s] [32m        Scenario: Run command[0m
[ 2678s] [32m          When I run `aruba-test-cli`[0m
[ 2678s] [32m          Then the output should contain "a"[0m
[ 2678s] [32m          And the output should be 65536 bytes long[0m
[ 2678s] [32m          And the exit status should be 0[0m
[ 2678s] [32m      """[0m
[ 2688s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2688s]     [31mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2688s] [31m      expected "Feature: Flushing output\n\n  Scenario: Run command                       # features/flushing.featur...feature:2 # Scenario: Run command\n\n1 scenario (1 failed)\n4 steps (1 failed, 3 skipped)\n0m1.239s" not to string includes: " failed)"[0m
[ 2688s] [31m      Diff:[0m
[ 2688s] [31m      @@ -1,2 +1,17 @@[0m
[ 2688s] [31m      - failed)[0m
[ 2688s] [31m      +Feature: Flushing output[0m
[ 2688s] [31m      +[0m
[ 2688s] [31m      +  Scenario: Run command                       # features/flushing.feature:2[0m
[ 2688s] [31m      +    When I run `aruba-test-cli`               # aruba-0.14.14/lib/aruba/cucumber/command.rb:6[0m
[ 2688s] [31m      +      SIGTERM (SignalException)[0m
[ 2688s] [31m      +      features/flushing.feature:3:in `When I run `aruba-test-cli`'[0m
[ 2688s] [31m      +    Then the output should contain "a"        # aruba-0.14.14/lib/aruba/cucumber/command.rb:139[0m
[ 2688s] [31m      +    And the output should be 65536 bytes long # aruba-0.14.14/lib/aruba/cucumber/command.rb:135[0m
[ 2688s] [31m      +    And the exit status should be 0           # aruba-0.14.14/lib/aruba/cucumber/command.rb:263[0m
[ 2688s] [31m      +[0m
[ 2688s] [31m      +Failing Scenarios:[0m
[ 2688s] [31m      +cucumber features/flushing.feature:2 # Scenario: Run command[0m
[ 2688s] [31m      +[0m
[ 2688s] [31m      +1 scenario (1 failed)[0m
[ 2688s] [31m      +4 steps (1 failed, 3 skipped)[0m
[ 2688s] [31m      +0m1.239s[0m
[ 2688s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 2688s] [31m      ./lib/aruba/cucumber/command.rb:156:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 2688s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:7:in `/^the feature(?:s)? should( not)?(?: all)? pass$/'[0m
[ 2688s] [31m      features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:456:in `Then the features should all pass'[0m
[ 2688s] 
[ 2688s]   Scenario: Handle tons of interactive output[90m          # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:458[0m
[ 2688s]     [32mGiven the default aruba exit timeout is [32m[1m10[0m[0m[32m seconds[90m # lib/aruba/cucumber/command.rb:367[0m[0m
[ 2688s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2688s] [32m      """[0m
[ 2688s] [32m      #!/usr/bin/env bash[0m
[ 2688s] [32m[0m
[ 2688s] [32m      read size; for ((c=0; c<$size; c = c+1)); do[0m
[ 2688s] [32m        echo -n "a"[0m
[ 2688s] [32m      done[0m
[ 2688s] [32m      """[0m
[ 2689s]     [32mAnd a file named "[32m[1mfeatures/flushing.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2689s] [32m      """[0m
[ 2689s] [32m      Feature: Flushing output[0m
[ 2689s] [32m        Scenario: Run command[0m
[ 2689s] [32m          When I run `aruba-test-cli` interactively[0m
[ 2689s] [32m          And I type "65536"[0m
[ 2689s] [32m          Then the output should contain "a"[0m
[ 2689s] [32m          And the output should be 65536 bytes long[0m
[ 2689s] [32m          And the exit status should be 0[0m
[ 2689s] [32m      """[0m
[ 2699s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2699s]     [31mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2699s] [31m      expected "Feature: Flushing output\n\n  Scenario: Run command                       # features/flushing.featur...# Scenario: Run command\n\n1 scenario (1 failed)\n5 steps (1 failed, 2 skipped, 2 passed)\n0m0.682s" not to string includes: " failed)"[0m
[ 2699s] [31m      Diff:[0m
[ 2699s] [31m      @@ -1,2 +1,18 @@[0m
[ 2699s] [31m      - failed)[0m
[ 2699s] [31m      +Feature: Flushing output[0m
[ 2699s] [31m      +[0m
[ 2699s] [31m      +  Scenario: Run command                       # features/flushing.feature:2[0m
[ 2699s] [31m      +    When I run `aruba-test-cli` interactively # aruba-0.14.14/lib/aruba/cucumber/command.rb:29[0m
[ 2699s] [31m      +    And I type "65536"                        # aruba-0.14.14/lib/aruba/cucumber/command.rb:39[0m
[ 2699s] [31m      +    Then the output should contain "a"        # aruba-0.14.14/lib/aruba/cucumber/command.rb:139[0m
[ 2699s] [31m      +      SIGTERM (SignalException)[0m
[ 2699s] [31m      +      features/flushing.feature:5:in `Then the output should contain "a"'[0m
[ 2699s] [31m      +    And the output should be 65536 bytes long # aruba-0.14.14/lib/aruba/cucumber/command.rb:135[0m
[ 2699s] [31m      +    And the exit status should be 0           # aruba-0.14.14/lib/aruba/cucumber/command.rb:263[0m
[ 2699s] [31m      +[0m
[ 2699s] [31m      +Failing Scenarios:[0m
[ 2699s] [31m      +cucumber features/flushing.feature:2 # Scenario: Run command[0m
[ 2699s] [31m      +[0m
[ 2699s] [31m      +1 scenario (1 failed)[0m
[ 2699s] [31m      +5 steps (1 failed, 2 skipped, 2 passed)[0m
[ 2699s] [31m      +0m0.682s[0m
[ 2699s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 2699s] [31m      ./lib/aruba/cucumber/command.rb:156:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 2699s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:7:in `/^the feature(?:s)? should( not)?(?: all)? pass$/'[0m
[ 2699s] [31m      features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:479:in `Then the features should all pass'[0m
[ 2699s] 
[ 2699s]   Scenario: Detect output from named source[90m            # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:481[0m
[ 2699s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2699s] [32m      """[0m
[ 2699s] [32m      Feature: Run command[0m
[ 2699s] [32m        Scenario: Run command[0m
[ 2699s] [32m          When I run `printf 'simple'`[0m
[ 2699s] [32m          And I run `cat` interactively[0m
[ 2699s] [32m          And I type "interactive"[0m
[ 2700s] [32m          And I type ""[0m
[ 2700s] [32m          Then the output from "printf 'simple'" should contain "simple"[0m
[ 2700s] [32m          And the output from "printf 'simple'" should contain exactly "simple"[0m
[ 2700s] [32m          And the output from "printf 'simple'" should contain exactly:[0m
[ 2700s] [32m          """[0m
[ 2700s] [32m          simple[0m
[ 2700s] [32m          """[0m
[ 2700s] [32m          And the output from "cat" should not contain "simple"[0m
[ 2700s] [32m      """[0m
[ 2709s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2709s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2709s] 
[ 2709s]   Scenario: Detect second output from named source with custom name[90m # features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:501[0m
[ 2709s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m              # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2709s] [32m      """[0m
[ 2709s] [32m      Feature: Run command[0m
[ 2709s] [32m        Scenario: Run command[0m
[ 2709s] [32m          When I set the environment variable "ARUBA_TEST_VAR" to "first"[0m
[ 2709s] [32m          And I run `bash -c 'printf $ARUBA_TEST_VAR'`[0m
[ 2709s] [32m          Then the output from "bash -c 'printf $ARUBA_TEST_VAR'" should contain "first"[0m
[ 2709s] [32m          When I set the environment variable "ARUBA_TEST_VAR" to "second"[0m
[ 2709s] [32m          And I run `bash -c 'printf $ARUBA_TEST_VAR'`[0m
[ 2709s] [32m          Then the output from "bash -c 'printf $ARUBA_TEST_VAR'" should contain "second"[0m
[ 2709s] [32m      """[0m
[ 2719s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2719s]     [32mThen the features should all pass[90m                               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2719s] 
[ 2719s] Feature: STDERR of commands which were executed
[ 2719s]   In order to specify expected output
[ 2719s]   As a developer using Cucumber
[ 2719s]   I want to use the "the stderr should contain" step
[ 2719s] 
[ 2719s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/check_stderr_of_command.feature:7[0m
[ 2719s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2719s] 
[ 2719s]   Scenario: Detect stderr from all processes[90m           # features/03_testing_frameworks/cucumber/steps/command/check_stderr_of_command.feature:10[0m
[ 2719s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2719s] [32m      """[0m
[ 2719s] [32m      Feature: Run command[0m
[ 2719s] [32m        Scenario: Run command[0m
[ 2719s] [32m          When I run `bash -c 'printf "hello world!\n" >&2'`[0m
[ 2719s] [32m          And I run `bash -c 'cat >&2 '` interactively[0m
[ 2719s] [32m          And I type "hola"[0m
[ 2719s] [32m          And I type ""[0m
[ 2719s] [32m          Then the stderr should contain:[0m
[ 2719s] [32m          """[0m
[ 2719s] [32m          hello world![0m
[ 2719s] [32m          """[0m
[ 2719s] [32m          And the stderr should contain:[0m
[ 2719s] [32m          """[0m
[ 2719s] [32m          hola[0m
[ 2719s] [32m          """[0m
[ 2719s] [32m          And the stdout should not contain anything[0m
[ 2719s] [32m      """[0m
[ 2729s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2729s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2729s] 
[ 2729s]   Scenario: Detect stderr from all processes[90m           # features/03_testing_frameworks/cucumber/steps/command/check_stderr_of_command.feature:32[0m
[ 2730s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2730s] [32m      """[0m
[ 2730s] [32m      Feature: Run command[0m
[ 2730s] [32m        Scenario: Run command[0m
[ 2730s] [32m          When I run `bash -c 'printf "hello world!\n" >&2'`[0m
[ 2730s] [32m          And I run `bash -c 'cat >&2 '` interactively[0m
[ 2730s] [32m          And I type "hola"[0m
[ 2730s] [32m          And I type ""[0m
[ 2730s] [32m          Then the stderr should contain:[0m
[ 2730s] [32m          """[0m
[ 2730s] [32m          hello world![0m
[ 2730s] [32m          hola[0m
[ 2730s] [32m          """[0m
[ 2730s] [32m          And the stdout should not contain anything[0m
[ 2730s] [32m      """[0m
[ 2740s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2740s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2740s] 
[ 2740s]   Scenario: Detect stderr from named source[90m            # features/03_testing_frameworks/cucumber/steps/command/check_stderr_of_command.feature:51[0m
[ 2740s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2740s] [32m      """[0m
[ 2740s] [32m      Feature: Run command[0m
[ 2740s] [32m        Scenario: Run command[0m
[ 2740s] [32m          When I run `bash -c 'printf hello >&2'`[0m
[ 2740s] [32m          And I run `printf goodbye`[0m
[ 2740s] [32m          Then the stderr from "bash -c 'printf hello >&2'" should contain "hello"[0m
[ 2740s] [32m          And the stderr from "bash -c 'printf hello >&2'" should contain exactly "hello"[0m
[ 2740s] [32m          And the stderr from "bash -c 'printf hello >&2'" should contain exactly:[0m
[ 2740s] [32m          """[0m
[ 2740s] [32m          hello[0m
[ 2740s] [32m          """[0m
[ 2740s] [32m          And the stdout from "bash -c 'printf hello >&2'" should not contain "hello"[0m
[ 2740s] [32m          And the stderr from "printf goodbye" should not contain "hello"[0m
[ 2740s] [32m      """[0m
[ 2750s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2750s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2750s] 
[ 2750s] Feature: STDOUT of commands which were executed
[ 2750s]   In order to specify expected output
[ 2750s]   As a developer using Cucumber
[ 2750s]   I want to use the "the stdout should contain" step
[ 2750s] 
[ 2750s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:7[0m
[ 2750s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2750s] 
[ 2750s]   Scenario: Match output in stdout[90m                       # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:10[0m
[ 2750s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2750s] [32m      """[0m
[ 2750s] [32m      #!/usr/bin/env bash[0m
[ 2750s] [32m[0m
[ 2750s] [32m      echo -e "hello\nworld"[0m
[ 2750s] [32m      """[0m
[ 2750s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2750s] [32m      """[0m
[ 2750s] [32m      Feature: Run command[0m
[ 2750s] [32m        Scenario: Run command[0m
[ 2750s] [32m          When I run `aruba-test-cli`[0m
[ 2750s] [32m          Then the stdout should contain "hello"[0m
[ 2750s] [32m          Then the stderr should not contain "hello"[0m
[ 2750s] [32m      """[0m
[ 2760s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2760s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2760s] 
[ 2760s]   Scenario: Match stdout on several lines[90m                # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:28[0m
[ 2760s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2760s] [32m      """[0m
[ 2760s] [32m      #!/usr/bin/env bash[0m
[ 2760s] [32m[0m
[ 2760s] [32m      echo 'GET /'[0m
[ 2760s] [32m      """[0m
[ 2760s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2760s] [32m      """[0m
[ 2760s] [32m      Feature: Run command[0m
[ 2760s] [32m        Scenario: Run command[0m
[ 2760s] [32m          When I run `aruba-test-cli`[0m
[ 2760s] [32m          Then the stdout should contain:[0m
[ 2760s] [32m          """[0m
[ 2760s] [32m          GET /[0m
[ 2760s] [32m          """[0m
[ 2760s] [32m      """[0m
[ 2771s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2771s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2771s] 
[ 2771s]   Scenario: Match output on several lines where stdout contains quotes[90m # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:48[0m
[ 2771s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2771s] [32m      """[0m
[ 2771s] [32m      #!/usr/bin/env bash[0m
[ 2771s] [32m[0m
[ 2771s] [32m      echo 'GET "/"'[0m
[ 2771s] [32m      """[0m
[ 2771s]     [32mAnd a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m                   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2771s] [32m      """[0m
[ 2771s] [32m      Feature: Run command[0m
[ 2771s] [32m        Scenario: Run command[0m
[ 2771s] [32m          When I run `aruba-test-cli`[0m
[ 2771s] [32m          Then the stdout should contain:[0m
[ 2771s] [32m          """[0m
[ 2771s] [32m          GET "/"[0m
[ 2771s] [32m          """[0m
[ 2771s] [32m      """[0m
[ 2780s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2780s]     [32mThen the features should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2780s] 
[ 2781s]   Scenario: Detect stdout from all processes including interactive ones[90m # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:68[0m
[ 2781s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2781s] [32m      """[0m
[ 2781s] [32m      Feature: Run command[0m
[ 2781s] [32m        Scenario: Run command[0m
[ 2781s] [32m          When I run `printf "hello world!\n"`[0m
[ 2781s] [32m          And I run `cat` interactively[0m
[ 2781s] [32m          And I type "hola"[0m
[ 2781s] [32m          And I type ""[0m
[ 2781s] [32m          Then the stdout should contain:[0m
[ 2781s] [32m          """[0m
[ 2781s] [32m          hello world![0m
[ 2781s] [32m          """[0m
[ 2781s] [32m          And the stdout should contain:[0m
[ 2781s] [32m          """[0m
[ 2781s] [32m          hola[0m
[ 2781s] [32m          """[0m
[ 2781s] [32m          And the stderr should not contain anything[0m
[ 2781s] [32m      """[0m
[ 2791s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                               # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2791s]     [32mThen the features should all pass[90m                                   # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2791s] 
[ 2791s]   Scenario: Detect stdout from named source[90m            # features/03_testing_frameworks/cucumber/steps/command/check_stdout_of_command.feature:90[0m
[ 2791s]     [32mGiven a file named "[32m[1mfeatures/output.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2791s] [32m      """[0m
[ 2791s] [32m      Feature: Run command[0m
[ 2791s] [32m        Scenario: Run command[0m
[ 2791s] [32m          When I run `printf 'hello'`[0m
[ 2791s] [32m          And I run `printf 'goodbye'`[0m
[ 2791s] [32m          Then the stdout from "printf 'hello'" should contain "hello"[0m
[ 2791s] [32m          And the stdout from "printf 'hello'" should contain exactly "hello"[0m
[ 2791s] [32m          And the stdout from "printf 'hello'" should contain exactly:[0m
[ 2791s] [32m          """[0m
[ 2791s] [32m          hello[0m
[ 2791s] [32m          """[0m
[ 2791s] [32m          And the stderr from "printf 'hello'" should not contain "hello"[0m
[ 2791s] [32m          And the stdout from "printf 'goodbye'" should not contain "hello"[0m
[ 2791s] [32m      """[0m
[ 2801s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2801s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2801s] 
[ 2801s] Feature: Debug your command in cucumber-test-run
[ 2801s]   As a developer
[ 2801s]   I want to use some debugger in my code and therefor need system() to execute my program
[ 2801s]   In order to find a bug
[ 2801s] 
[ 2801s]   Background: [90m                                       # features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature:7[0m
[ 2801s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m            # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2801s]     [32mAnd the default aruba exit timeout is [32m[1m60[0m[0m[32m seconds[90m # lib/aruba/cucumber/command.rb:367[0m[0m
[ 2801s] 
[ 2801s]   Scenario: Can handle exit status 0[90m                     # features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature:11[0m
[ 2801s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2801s] [32m      """[0m
[ 2801s] [32m      #!/usr/bin/env bash[0m
[ 2801s] [32m[0m
[ 2801s] [32m      exit 0[0m
[ 2801s] [32m      """[0m
[ 2801s]     [32mAnd a file named "[32m[1mfeatures/debug.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2801s] [32m      """[0m
[ 2801s] [32m      Feature: Exit status in debug environment[0m
[ 2801s] [32m[0m
[ 2801s] [32m        @debug[0m
[ 2801s] [32m        Scenario: Run program with debug code[0m
[ 2801s] [32m          When I run `aruba-test-cli`[0m
[ 2801s] [32m          Then the exit status should be 0[0m
[ 2801s] [32m      """[0m
[ 2811s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2811s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2811s] 
[ 2812s]   Scenario: Can handle exit status 1[90m                     # features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature:30[0m
[ 2812s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2812s] [32m      """[0m
[ 2812s] [32m      #!/usr/bin/env bash[0m
[ 2812s] [32m[0m
[ 2812s] [32m      exit 1[0m
[ 2812s] [32m      """[0m
[ 2812s]     [32mAnd a file named "[32m[1mfeatures/debug.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2812s] [32m      """[0m
[ 2812s] [32m      Feature: Exit status in debug environment[0m
[ 2812s] [32m[0m
[ 2812s] [32m        @debug[0m
[ 2812s] [32m        Scenario: Run program with debug code[0m
[ 2812s] [32m          When I run `aruba-test-cli`[0m
[ 2812s] [32m          Then the exit status should be 1[0m
[ 2812s] [32m      """[0m
[ 2821s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2821s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2821s] 
[ 2821s]   Scenario: You can use a debug repl in your cli program[90m    # features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature:49[0m
[ 2821s]     If you want to debug a strange error, which only occures in one of your
[ 2821s]     `cucumber`-tests, the `@debug`-tag becomes handy. You can add `@debug` in
[ 2821s]     front of your feature/scenario to make `binding.pry` or `byebug` work in
[ 2821s]     your program.
[ 2821s] 
[ 2821s]     Please make sure, that there's a statement after the `binding.pry`-call.
[ 2821s]     Otherwise you might not get an interactive shell, because your program will
[ 2821s]     just exit.
[ 2821s] 
[ 2821s]     We are going to demonstrate this using `pry`, but any other interactive
[ 2821s]     debugger for any other programming language should also work.
[ 2821s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2821s] [32m      """[0m
[ 2821s] [32m      #!/usr/bin/env ruby[0m
[ 2821s] [32m[0m
[ 2821s] [32m      $stderr.sync = true[0m
[ 2821s] [32m      $stdout.sync = true[0m
[ 2821s] [32m[0m
[ 2821s] [32m      require 'pry'[0m
[ 2821s] [32m      binding.pry[0m
[ 2821s] [32m[0m
[ 2821s] [32m      exit 0[0m
[ 2821s] [32m      """[0m
[ 2821s]     [32mAnd a file named "[32m[1mfeatures/debug.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2821s] [32m      """[0m
[ 2821s] [32m      Feature: Exit status in debug environment[0m
[ 2821s] [32m[0m
[ 2821s] [32m        @debug[0m
[ 2821s] [32m        Scenario: Run program with debug code[0m
[ 2821s] [32m          When I run `aruba-test-cli`[0m
[ 2821s] [32m          Then the exit status should be 0[0m
[ 2821s] [32m      """[0m
[ 2835s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m` interactively[90m                     # lib/aruba/cucumber/command.rb:29[0m[0m
[ 2835s]     [32mAnd I stop the command started last if [32m[1moutput[0m[0m[32m contains:[90m # lib/aruba/cucumber/command.rb:76[0m[0m
[ 2835s] [32m      """[0m
[ 2835s] [32m      pry(main)>[0m
[ 2835s] [32m      """[0m
[ 2835s]     [32mThen the output should match:[90m                           # lib/aruba/cucumber/command.rb:255[0m[0m
[ 2835s] [32m      """[0m
[ 2835s] [32m      7:\s+binding.pry[0m
[ 2835s] [32m      """[0m
[ 2835s] 
[ 2835s]   Scenario: Can handle announcers[90m                        # features/03_testing_frameworks/cucumber/steps/command/debug_your_command_in_aruba.feature:94[0m
[ 2835s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2835s] [32m      """[0m
[ 2835s] [32m      #!/usr/bin/env bash[0m
[ 2835s] [32m[0m
[ 2835s] [32m      exit 0[0m
[ 2835s] [32m      """[0m
[ 2835s]     [32mAnd a file named "[32m[1mfeatures/debug.feature[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2835s] [32m      """[0m
[ 2835s] [32m      Feature: Exit status in debug environment[0m
[ 2835s] [32m[0m
[ 2835s] [32m        @debug[0m
[ 2835s] [32m        @announce[0m
[ 2835s] [32m        Scenario: Run program with debug code[0m
[ 2835s] [32m          When I run `aruba-test-cli`[0m
[ 2835s] [32m          Then the exit status should be 0[0m
[ 2835s] [32m      """[0m
[ 2845s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                   # lib/aruba/cucumber/command.rb:13[0m[0m
[ 2845s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2845s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                       # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2845s] [32m      """[0m
[ 2845s] [32m      <<-STDOUT[0m
[ 2845s] [32m      This is the debug launcher on STDOUT. If this output is unexpected, please check your setup.[0m
[ 2845s] [32m      STDOUT[0m
[ 2845s] [32m      """[0m
[ 2845s] 
[ 2845s] Feature: Run commands
[ 2845s]   There are several steps to run commands with `aruba`.
[ 2845s] 
[ 2845s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/run_a_command.feature:5[0m
[ 2845s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2845s] 
[ 2845s]   Scenario: Run command found in path[90m                    # features/03_testing_frameworks/cucumber/steps/command/run_a_command.feature:8[0m
[ 2845s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2845s] [32m      """[0m
[ 2845s] [32m      #!/bin/bash[0m
[ 2845s] [32m      exit 0[0m
[ 2845s] [32m      """[0m
[ 2845s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2845s] [32m      """[0m
[ 2845s] [32m      Feature: Run it[0m
[ 2845s] [32m        Scenario: Run command[0m
[ 2845s] [32m          When I run `aruba-test-cli`[0m
[ 2845s] [32m      """[0m
[ 2856s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2856s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2856s] 
[ 2856s]   Scenario: Activate desired announcers when running command fails[90m # features/03_testing_frameworks/cucumber/steps/command/run_a_command.feature:23[0m
[ 2856s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2856s] [32m      """[0m
[ 2856s] [32m      #!/bin/bash[0m
[ 2856s] [32m      echo "Hello, I'm STDOUT"[0m
[ 2856s] [32m      exit 1[0m
[ 2856s] [32m      """[0m
[ 2856s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2856s] [32m      """[0m
[ 2856s] [32m      Feature: Run it[0m
[ 2856s] [32m        Scenario: Run command[0m
[ 2856s] [32m          When I successfully run `aruba-test-cli`[0m
[ 2856s] [32m      """[0m
[ 2857s]     [32mAnd I append to "[32m[1mfeatures/support/env.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:61[0m[0m
[ 2857s] [32m      """[0m
[ 2857s] [32m      Before do[0m
[ 2857s] [32m        aruba.config.activate_announcer_on_command_failure = [:stdout][0m
[ 2857s] [32m      end[0m
[ 2857s] [32m      """[0m
[ 2866s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2866s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2866s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                                 # lib/aruba/cucumber/command.rb:187[0m[0m
[ 2866s] [32m      """[0m
[ 2866s] [32m      <<-STDOUT[0m
[ 2866s] [32m      Hello, I'm STDOUT[0m
[ 2866s] [32m[0m
[ 2866s] [32m      STDOUT[0m
[ 2866s] [32m      """[0m
[ 2866s] 
[ 2867s]   Scenario: Run command found in "bin"-directory which is found in the current directory[90m # features/03_testing_frameworks/cucumber/steps/command/run_a_command.feature:52[0m
[ 2867s]     [32mGiven a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m                                      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2867s] [32m      """[0m
[ 2867s] [32m      Feature: Run it[0m
[ 2867s] [32m        Scenario: Run command[0m
[ 2867s] [32m          Given an executable named "bin/local_cli" with:[0m
[ 2867s] [32m          """[0m
[ 2867s] [32m          #!/bin/bash[0m
[ 2867s] [32m          exit 0[0m
[ 2867s] [32m          """[0m
[ 2867s] [32m          And I look for executables in "bin" within the current directory[0m
[ 2867s] [32m          When I successfully run `local_cli`[0m
[ 2867s] [32m      """[0m
[ 2876s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2876s]     [32mThen the features should all pass[90m                                                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2876s] 
[ 2876s] Feature: Run commands in ruby process
[ 2876s]   Running a lot of scenarios where each scenario uses Aruba
[ 2876s]   to spawn a new ruby process can be time consuming.
[ 2876s] 
[ 2876s]   Aruba lets you plug in your own process class that can
[ 2876s]   run a command in the same ruby process as Cucumber/Aruba.
[ 2876s] 
[ 2876s]   We expect that the command supports the following API. It needs to accept:
[ 2876s]   argv, stdin, stdout, stderr and kernel on `#initialize` and it needs to have
[ 2876s]   an `execute!`-method.
[ 2876s] 
[ 2876s]   ```ruby
[ 2876s]   module Cli
[ 2876s]     module App
[ 2876s]       class Runner
[ 2876s]         def initialize(argv, stdin, stdout, stderr, kernel)
[ 2876s]           \@argv   = argv
[ 2876s]           \@stdin  = stdin
[ 2876s]           \@stdout = stdout
[ 2876s]           \@stderr = stderr
[ 2876s]           \@kernel = kernel
[ 2876s]         end
[ 2876s] 
[ 2876s]         def execute!
[ 2876s]         end
[ 2876s]       end
[ 2876s]     end
[ 2876s]   end
[ 2876s]   ```
[ 2876s] 
[ 2876s]   The switch to the working directory takes place around the `execute!`-method.
[ 2876s]   If needed make sure, that you determine the current working directory within
[ 2876s]   code called by the `execute!`-method or just use `Dir.getwd` during "runtime"
[ 2876s]   and not during "loadtime", when the `ruby`-interpreter reads in you class
[ 2876s]   files.
[ 2876s] 
[ 2876s]   *Pros*:
[ 2876s]   * Very fast compared to spawning processes
[ 2876s]   * You can use libraries like
[ 2876s]     [simplecov](https://github.com/colszowka/simplecov) more easily, because
[ 2876s]     there is only one "process" which adds data to `simplecov`'s database
[ 2876s] 
[ 2876s]   *Cons*:
[ 2876s]   * You might oversee some bugs: You might forget to require libraries in your
[ 2876s]     "production" code, because you have required them in your testing code
[ 2876s]   * Using `:in_process` interactively is not supported
[ 2876s] 
[ 2876s]   **WARNING**: Using `:in_process` interactively is not supported
[ 2876s] 
[ 2876s]   Background: [90m                                               # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:50[0m
[ 2876s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m                    # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2876s]     [32mAnd a file named "[32m[1mfeatures/support/cli_app.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2876s] [32m      """[0m
[ 2876s] [32m      require 'cli/app/runner'[0m
[ 2876s] [32m      """[0m
[ 2876s]     [32mAnd a file named "[32m[1mfeatures/support/in_proccess.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2876s] [32m      """[0m
[ 2876s] [32m      require 'aruba/cucumber'[0m
[ 2876s] [32m[0m
[ 2876s] [32m      Before('@in-process') do[0m
[ 2876s] [32m        aruba.config.command_launcher = :in_process[0m
[ 2876s] [32m        aruba.config.main_class = Cli::App::Runner[0m
[ 2876s] [32m      end[0m
[ 2876s] [32m[0m
[ 2876s] [32m      After('@in-process') do[0m
[ 2876s] [32m        aruba.config.command_launcher = :spawn[0m
[ 2876s] [32m      end[0m
[ 2876s] [32m      """[0m
[ 2876s] 
[ 2876s]   Scenario: Run custom code[90m                              # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:70[0m
[ 2876s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2876s] [32m      """[0m
[ 2876s] [32m      module Cli[0m
[ 2876s] [32m        module App[0m
[ 2876s] [32m          class Runner[0m
[ 2876s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2876s] [32m              @argv   = argv[0m
[ 2876s] [32m              @stdin  = stdin[0m
[ 2876s] [32m              @stdout = stdout[0m
[ 2876s] [32m              @stderr = stderr[0m
[ 2876s] [32m              @kernel = kernel[0m
[ 2876s] [32m            end[0m
[ 2876s] [32m[0m
[ 2876s] [32m            def execute![0m
[ 2876s] [32m              @stdout.puts(@argv.map(&:reverse).join(' '))[0m
[ 2876s] [32m            end[0m
[ 2876s] [32m          end[0m
[ 2876s] [32m        end[0m
[ 2876s] [32m      end[0m
[ 2876s] [32m      """[0m
[ 2876s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2876s] [32m      """[0m
[ 2876s] [32m      Feature: Run a command in process[0m
[ 2876s] [32m        @in-process[0m
[ 2876s] [32m        Scenario: Run command[0m
[ 2876s] [32m          When I run `reverse.rb Hello World`[0m
[ 2876s] [32m          Then the output should contain:[0m
[ 2876s] [32m          """[0m
[ 2876s] [32m          olleH dlroW[0m
[ 2876s] [32m          """[0m
[ 2876s] [32m      """[0m
[ 2886s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2886s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2886s] 
[ 2886s]   Scenario: Mixing custom code and normal cli[90m            # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:105[0m
[ 2886s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2886s] [32m      """[0m
[ 2886s] [32m      #!/bin/bash[0m
[ 2886s] [32m      echo $*[0m
[ 2886s] [32m      """[0m
[ 2886s]     [32mAnd a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2886s] [32m      """[0m
[ 2886s] [32m      module Cli[0m
[ 2886s] [32m        module App[0m
[ 2886s] [32m          class Runner[0m
[ 2886s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2886s] [32m              @argv   = argv[0m
[ 2886s] [32m              @stdin  = stdin[0m
[ 2886s] [32m              @stdout = stdout[0m
[ 2886s] [32m              @stderr = stderr[0m
[ 2886s] [32m              @kernel = kernel[0m
[ 2886s] [32m            end[0m
[ 2886s] [32m[0m
[ 2886s] [32m            def execute![0m
[ 2886s] [32m              @stdout.puts(@argv.map(&:reverse).join(' '))[0m
[ 2886s] [32m            end[0m
[ 2886s] [32m          end[0m
[ 2886s] [32m        end[0m
[ 2886s] [32m      end[0m
[ 2886s] [32m      """[0m
[ 2886s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2886s] [32m      """[0m
[ 2886s] [32m      Feature: Run a command in process[0m
[ 2886s] [32m        @in-process[0m
[ 2886s] [32m        Scenario: Run command in process[0m
[ 2886s] [32m          When I run `reverse.rb Hello World`[0m
[ 2886s] [32m          Then the output should contain:[0m
[ 2886s] [32m          """[0m
[ 2886s] [32m          olleH dlroW[0m
[ 2886s] [32m          """[0m
[ 2886s] [32m[0m
[ 2886s] [32m        Scenario: Run command[0m
[ 2886s] [32m          When I run `aruba-test-cli Hello World`[0m
[ 2886s] [32m          Then the output should contain:[0m
[ 2886s] [32m          """[0m
[ 2886s] [32m          Hello World[0m
[ 2886s] [32m          """[0m
[ 2886s] [32m      """[0m
[ 2897s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2897s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2897s] 
[ 2897s]   Scenario: The current working directory is changed as well[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:152[0m
[ 2897s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2897s] [32m      """[0m
[ 2897s] [32m      module Cli[0m
[ 2897s] [32m        module App[0m
[ 2897s] [32m          class Runner[0m
[ 2897s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2897s] [32m              @argv   = argv[0m
[ 2897s] [32m              @stdin  = stdin[0m
[ 2897s] [32m              @stdout = stdout[0m
[ 2897s] [32m              @stderr = stderr[0m
[ 2897s] [32m              @kernel = kernel[0m
[ 2897s] [32m            end[0m
[ 2897s] [32m[0m
[ 2897s] [32m            def execute![0m
[ 2897s] [32m              @stdout.puts("PWD-ENV is " + Dir.getwd)[0m
[ 2897s] [32m            end[0m
[ 2897s] [32m          end[0m
[ 2897s] [32m        end[0m
[ 2897s] [32m      end[0m
[ 2897s] [32m      """[0m
[ 2897s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2897s] [32m      """[0m
[ 2897s] [32m      Feature: Run a command in process[0m
[ 2897s] [32m        @in-process[0m
[ 2897s] [32m        Scenario: Run command[0m
[ 2897s] [32m          When I run `pwd.rb`[0m
[ 2897s] [32m          Then the output should match %r<PWD-ENV.*tmp/aruba>[0m
[ 2897s] [32m      """[0m
[ 2906s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2906s]     [32mThen the features should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2906s] 
[ 2907s]   Scenario: The PWD environment is changed to current working directory[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:184[0m
[ 2907s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m                    # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2907s] [32m      """[0m
[ 2907s] [32m      module Cli[0m
[ 2907s] [32m        module App[0m
[ 2907s] [32m          class Runner[0m
[ 2907s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2907s] [32m              @argv   = argv[0m
[ 2907s] [32m              @stdin  = stdin[0m
[ 2907s] [32m              @stdout = stdout[0m
[ 2907s] [32m              @stderr = stderr[0m
[ 2907s] [32m              @kernel = kernel[0m
[ 2907s] [32m            end[0m
[ 2907s] [32m[0m
[ 2907s] [32m            def execute![0m
[ 2907s] [32m              @stdout.puts("PWD-ENV is " + ENV['PWD'])[0m
[ 2907s] [32m            end[0m
[ 2907s] [32m          end[0m
[ 2907s] [32m        end[0m
[ 2907s] [32m      end[0m
[ 2907s] [32m      """[0m
[ 2907s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2907s] [32m      """[0m
[ 2907s] [32m      Feature: Run a command in process[0m
[ 2907s] [32m        @in-process[0m
[ 2907s] [32m        Scenario: Run command[0m
[ 2907s] [32m          When I run `pwd.rb`[0m
[ 2907s] [32m          Then the output should match %r<PWD-ENV.*tmp/aruba>[0m
[ 2907s] [32m      """[0m
[ 2916s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                               # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2916s]     [32mThen the features should all pass[90m                                   # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2916s] 
[ 2916s]   Scenario: Set runner via "Aruba.process ="-method (deprecated)[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:216[0m
[ 2916s]     [32mGiven a file named "[32m[1mfeatures/support/in_proccess.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2916s] [32m      """[0m
[ 2916s] [32m      require 'aruba/cucumber'[0m
[ 2916s] [32m      require 'aruba/processes/in_process'[0m
[ 2916s] [32m[0m
[ 2916s] [32m      Before('@in-process') do[0m
[ 2916s] [32m        Aruba.process = Aruba::Processes::InProcess[0m
[ 2916s] [32m        Aruba.process.main_class = Cli::App::Runner[0m
[ 2916s] [32m      end[0m
[ 2916s] [32m[0m
[ 2916s] [32m      After('@in-process') do[0m
[ 2916s] [32m        Aruba.process = Aruba::Processes::SpawnProcess[0m
[ 2916s] [32m      end[0m
[ 2916s] [32m      """[0m
[ 2916s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2916s] [32m      """[0m
[ 2916s] [32m      module Cli[0m
[ 2916s] [32m        module App[0m
[ 2916s] [32m          class Runner[0m
[ 2916s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2916s] [32m              @argv   = argv[0m
[ 2916s] [32m              @stdin  = stdin[0m
[ 2916s] [32m              @stdout = stdout[0m
[ 2916s] [32m              @stderr = stderr[0m
[ 2916s] [32m              @kernel = kernel[0m
[ 2916s] [32m            end[0m
[ 2916s] [32m[0m
[ 2916s] [32m            def execute![0m
[ 2916s] [32m              @stdout.puts(@argv.map(&:reverse).join(' '))[0m
[ 2916s] [32m            end[0m
[ 2916s] [32m          end[0m
[ 2916s] [32m        end[0m
[ 2916s] [32m      end[0m
[ 2916s] [32m      """[0m
[ 2916s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2916s] [32m      """[0m
[ 2916s] [32m      Feature: Run a command in process[0m
[ 2916s] [32m        @in-process[0m
[ 2916s] [32m        Scenario: Run command[0m
[ 2916s] [32m          When I run `reverse.rb Hello World`[0m
[ 2916s] [32m          Then the output should contain:[0m
[ 2916s] [32m          """[0m
[ 2916s] [32m          olleH dlroW[0m
[ 2916s] [32m          """[0m
[ 2916s] [32m      """[0m
[ 2926s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2926s]     [32mThen the features should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2926s] 
[ 2926s]   Scenario: Set runner via "Aruba.process ="-method and use old class name Aruba::InProcess (deprecated)[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:265[0m
[ 2926s]     [32mGiven a file named "[32m[1mfeatures/support/in_proccess.rb[0m[0m[32m" with:[90m                                           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2926s] [32m      """[0m
[ 2926s] [32m      require 'aruba/cucumber'[0m
[ 2926s] [32m      require 'aruba/in_process'[0m
[ 2926s] [32m      require 'aruba/spawn_process'[0m
[ 2926s] [32m[0m
[ 2926s] [32m      Before('@in-process') do[0m
[ 2926s] [32m        Aruba.process = Aruba::InProcess[0m
[ 2926s] [32m        Aruba.process.main_class = Cli::App::Runner[0m
[ 2926s] [32m      end[0m
[ 2926s] [32m[0m
[ 2926s] [32m      After('@in-process') do[0m
[ 2926s] [32m        Aruba.process = Aruba::SpawnProcess[0m
[ 2926s] [32m      end[0m
[ 2926s] [32m      """[0m
[ 2926s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m                                                     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2926s] [32m      """[0m
[ 2926s] [32m      module Cli[0m
[ 2926s] [32m        module App[0m
[ 2926s] [32m          class Runner[0m
[ 2926s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2926s] [32m              @argv   = argv[0m
[ 2926s] [32m              @stdin  = stdin[0m
[ 2926s] [32m              @stdout = stdout[0m
[ 2926s] [32m              @stderr = stderr[0m
[ 2926s] [32m              @kernel = kernel[0m
[ 2926s] [32m            end[0m
[ 2926s] [32m[0m
[ 2926s] [32m            def execute![0m
[ 2926s] [32m              @stdout.puts(@argv.map(&:reverse).join(' '))[0m
[ 2926s] [32m            end[0m
[ 2926s] [32m          end[0m
[ 2926s] [32m        end[0m
[ 2926s] [32m      end[0m
[ 2926s] [32m      """[0m
[ 2926s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m                                                 # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2926s] [32m      """[0m
[ 2926s] [32m      Feature: Run a command in process[0m
[ 2926s] [32m        @in-process[0m
[ 2926s] [32m        Scenario: Run command[0m
[ 2926s] [32m          When I run `reverse.rb Hello World`[0m
[ 2926s] [32m          Then the output should contain:[0m
[ 2926s] [32m          """[0m
[ 2926s] [32m          olleH dlroW[0m
[ 2926s] [32m          """[0m
[ 2926s] [32m      """[0m
[ 2936s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2936s]     [32mThen the features should all pass[90m                                                                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2936s] 
[ 2936s]   Scenario: Use $stderr, $stdout and $stdin to access IO[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:315[0m
[ 2936s]     May may need/want to use the default `STDERR`, `STDOUT`, `STDIN`-constants
[ 2936s]     to access IO from within your script. Unfortunately this does not work with
[ 2936s]     the `:in_process`-command launcher. You need to use `$stderr`, `$stdout`
[ 2936s]     and `$stdin` instead.
[ 2936s] 
[ 2936s]     For this example I chose `thor` to parse ARGV. Its `.start`-method accepts
[ 2936s]     an "Array" as ARGV and a "Hash" for some other options &ndash; `.start <ARGV>, <OPTIONS>`
[ 2936s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2936s] [32m      """[0m
[ 2936s] [32m      require 'cli/app/cli_parser'[0m
[ 2936s] [32m[0m
[ 2936s] [32m      module Cli[0m
[ 2936s] [32m        module App[0m
[ 2936s] [32m          class Runner[0m
[ 2936s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2936s] [32m              @argv   = argv[0m
[ 2936s] [32m              $kernel = kernel[0m
[ 2936s] [32m              $stdin  = stdin[0m
[ 2936s] [32m              $stdout = stdout[0m
[ 2936s] [32m              $stderr = stderr[0m
[ 2936s] [32m            end[0m
[ 2936s] [32m[0m
[ 2936s] [32m            def execute![0m
[ 2936s] [32m              Cli::App::CliParser.start @argv[0m
[ 2936s] [32m            end[0m
[ 2936s] [32m          end[0m
[ 2936s] [32m        end[0m
[ 2936s] [32m      end[0m
[ 2936s] [32m      """[0m
[ 2936s]     [32mAnd a file named "[32m[1mlib/cli/app/cli_parser.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2936s] [32m      """[0m
[ 2936s] [32m      require 'thor'[0m
[ 2936s] [32m[0m
[ 2936s] [32m      module Cli[0m
[ 2936s] [32m        module App[0m
[ 2936s] [32m          class CliParser < Thor[0m
[ 2936s] [32m            def self.exit_on_failure?[0m
[ 2936s] [32m              true[0m
[ 2936s] [32m            end[0m
[ 2936s] [32m[0m
[ 2936s] [32m            desc 'do_it', 'Reverse input'[0m
[ 2936s] [32m            def do_it(*args)[0m
[ 2936s] [32m              $stderr.puts 'Hey ya, Hey ya, check, check, check'[0m
[ 2936s] [32m              $stdout.puts(args.flatten.map(&:reverse).join(' '))[0m
[ 2936s] [32m            end[0m
[ 2936s] [32m          end[0m
[ 2936s] [32m        end[0m
[ 2936s] [32m      end[0m
[ 2936s] [32m      """[0m
[ 2936s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2936s] [32m      """[0m
[ 2936s] [32m      Feature: Run a command in process[0m
[ 2936s] [32m        @in-process[0m
[ 2936s] [32m        Scenario: Run command[0m
[ 2936s] [32m          When I run `reverse.rb do_it Hello World`[0m
[ 2936s] [32m          Then the stdout should contain:[0m
[ 2936s] [32m          """[0m
[ 2936s] [32m          olleH dlroW[0m
[ 2936s] [32m          """[0m
[ 2936s] [32m          And the stderr should contain:[0m
[ 2936s] [32m          """[0m
[ 2936s] [32m          Hey ya, Hey ya, check, check, check[0m
[ 2936s] [32m          """[0m
[ 2936s] [32m      """[0m
[ 2947s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2947s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2947s] 
[ 2947s]   Scenario: Use $kernel to use Kernel to capture exit code[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:385[0m
[ 2947s]     Ruby's `Kernel`-module provides some helper methods like `exit`.
[ 2947s]     Unfortunately running `#exit` with `:in_process` would make the whole ruby
[ 2947s]     interpreter exit. So you might want to use our `FakeKernel`-module module
[ 2947s]     instead which overwrites `#exit`. This will also make our tests for
[ 2947s]     checking the exit code work. This example also uses the `thor`-library.
[ 2947s]     [32mGiven a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2947s] [32m      """[0m
[ 2947s] [32m      require 'cli/app/cli_parser'[0m
[ 2947s] [32m[0m
[ 2947s] [32m      module Cli[0m
[ 2947s] [32m        module App[0m
[ 2947s] [32m          class Runner[0m
[ 2947s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2947s] [32m              @argv   = argv[0m
[ 2947s] [32m              $kernel = kernel[0m
[ 2947s] [32m              $stdin  = stdin[0m
[ 2947s] [32m              $stdout = stdout[0m
[ 2947s] [32m              $stderr = stderr[0m
[ 2947s] [32m            end[0m
[ 2947s] [32m[0m
[ 2947s] [32m            def execute![0m
[ 2947s] [32m              Cli::App::CliParser.start @argv[0m
[ 2947s] [32m            end[0m
[ 2947s] [32m          end[0m
[ 2947s] [32m        end[0m
[ 2947s] [32m      end[0m
[ 2947s] [32m      """[0m
[ 2947s]     [32mAnd a file named "[32m[1mlib/cli/app/cli_parser.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2947s] [32m      """[0m
[ 2947s] [32m      require 'thor'[0m
[ 2947s] [32m[0m
[ 2947s] [32m      module Cli[0m
[ 2947s] [32m        module App[0m
[ 2947s] [32m          class CliParser < Thor[0m
[ 2947s] [32m            def self.exit_on_failure?[0m
[ 2947s] [32m              true[0m
[ 2947s] [32m            end[0m
[ 2947s] [32m[0m
[ 2947s] [32m            desc 'do_it', 'Reverse input'[0m
[ 2947s] [32m            def do_it(*args)[0m
[ 2947s] [32m              $kernel.exit 5[0m
[ 2947s] [32m            end[0m
[ 2947s] [32m          end[0m
[ 2947s] [32m        end[0m
[ 2947s] [32m      end[0m
[ 2947s] [32m      """[0m
[ 2947s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2947s] [32m      """[0m
[ 2947s] [32m      Feature: Run a command in process[0m
[ 2947s] [32m        @in-process[0m
[ 2947s] [32m        Scenario: Run command[0m
[ 2947s] [32m          When I run `reverse.rb do_it`[0m
[ 2947s] [32m          Then the exit status should be 5[0m
[ 2947s] [32m      """[0m
[ 2957s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2957s]     [32mThen the features should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2957s] 
[ 2957s]   Scenario: Using `:in_process` interactively is not supported[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_in_process.feature:445[0m
[ 2957s]     Reading from STDIN blocks ruby from going on. But writing to STDIN - e.g.
[ 2957s]     type some letters on keyboard - can only appear later, but this point is
[ 2957s]     never reached, because ruby is blocked.
[ 2957s]     [32mGiven the default aruba exit timeout is [32m[1m5[0m[0m[32m seconds[90m          # lib/aruba/cucumber/command.rb:367[0m[0m
[ 2957s]     [32mAnd a file named "[32m[1mlib/cli/app/runner.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2957s] [32m      """[0m
[ 2957s] [32m      module Cli[0m
[ 2957s] [32m        module App[0m
[ 2957s] [32m          class Runner[0m
[ 2957s] [32m            def initialize(argv, stdin, stdout, stderr, kernel)[0m
[ 2957s] [32m              @stdin  = stdin[0m
[ 2957s] [32m            end[0m
[ 2957s] [32m[0m
[ 2957s] [32m            def execute![0m
[ 2957s] [32m              while res = @stdin.gets.to_s.chomp[0m
[ 2957s] [32m                break if res == 'quit'[0m
[ 2957s] [32m                puts res.reverse[0m
[ 2957s] [32m              end[0m
[ 2957s] [32m            end[0m
[ 2957s] [32m          end[0m
[ 2957s] [32m        end[0m
[ 2957s] [32m      end[0m
[ 2957s] [32m      """[0m
[ 2957s]     [32mAnd a file named "[32m[1mfeatures/in_process.feature[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2957s] [32m      """[0m
[ 2957s] [32m      Feature: Run a command in process[0m
[ 2957s] [32m        @in-process[0m
[ 2957s] [32m        Scenario: Run command[0m
[ 2957s] [32m          Given the default aruba exit timeout is 2 seconds[0m
[ 2957s] [32m          When I run `reverse.rb do_it` interactively[0m
[ 2957s] [32m          When I type "hello"[0m
[ 2957s] [32m          Then the output should contain:[0m
[ 2957s] [32m          """[0m
[ 2957s] [32m          hello[0m
[ 2957s] [32m          """[0m
[ 2957s] [32m      """[0m
[ 2963s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                      # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2963s]     [32mThen the exit status should[32m[1m not[0m[0m[32m be [32m[1m0[0m[0m[32m[90m                       # lib/aruba/cucumber/command.rb:263[0m[0m
[ 2963s] 
[ 2963s] Feature: Running an interactive command
[ 2963s]   In order to test interactive command line applications
[ 2963s]   As a developer using Cucumber
[ 2963s]   I want to use the interactive session steps
[ 2963s] 
[ 2963s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:7[0m
[ 2963s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 2963s] 
[ 2963s]   [36m@wip-jruby-java-1.6[0m
[ 2963s]   Scenario: Running ruby interactively[90m                    # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:11[0m
[ 2963s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 2963s] [32m      """[0m
[ 2963s] [32m      #!/usr/bin/env ruby[0m
[ 2963s] [32m[0m
[ 2963s] [32m      while res = gets.chomp[0m
[ 2963s] [32m        break if res == "quit"[0m
[ 2963s] [32m        puts res.reverse[0m
[ 2963s] [32m      end[0m
[ 2963s] [32m      """[0m
[ 2963s]     [32mAnd a file named "[32m[1mfeatures/interactive.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2963s] [32m      """[0m
[ 2963s] [32m      Feature: Run command[0m
[ 2963s] [32m        Scenario: Run command[0m
[ 2963s] [32m          When I run `aruba-test-cli` interactively[0m
[ 2963s] [32m          And I type "hello, world"[0m
[ 2963s] [32m          And I type "quit"[0m
[ 2963s] [32m          Then it should pass with "dlrow ,olleh"[0m
[ 2963s] [32m      """[0m
[ 2974s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2974s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2974s] 
[ 2975s]   [36m@posix[0m
[ 2975s]   Scenario: Running a native binary interactively[90m           # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:34[0m
[ 2975s]     [32mGiven a file named "[32m[1mfeatures/interactive.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2975s] [32m      """[0m
[ 2975s] [32m      Feature: Run command[0m
[ 2975s] [32m        Scenario: Run command[0m
[ 2975s] [32m        When I run `cat` interactively[0m
[ 2975s] [32m        And I type "Hello, world"[0m
[ 2975s] [32m        And I type ""[0m
[ 2975s] [32m        Then the output should contain "Hello, world"[0m
[ 2975s] [32m      """[0m
[ 2985s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2985s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2985s] 
[ 2985s]   [36m@posix[0m
[ 2985s]   Scenario: Pipe in a file[90m                                  # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:48[0m
[ 2985s]     [32mGiven a file named "[32m[1mfeatures/interactive.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2985s] [32m      """[0m
[ 2985s] [32m      Feature: Run command[0m
[ 2985s] [32m        Scenario: Run command[0m
[ 2985s] [32m          Given a file named "test.txt" with "line1\nline2"[0m
[ 2985s] [32m          When I run `cat` interactively[0m
[ 2985s] [32m          And I pipe in the file "test.txt"[0m
[ 2985s] [32m          Then the output should contain "line1\nline2"[0m
[ 2985s] [32m      """[0m
[ 2995s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 2995s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 2995s] 
[ 2995s]   [36m@posix[0m
[ 2995s]   Scenario: Close stdin stream[90m                              # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:62[0m
[ 2995s]     [32mGiven a file named "[32m[1mfeatures/interactive.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 2995s] [32m      """[0m
[ 2995s] [32m      Feature: Run command[0m
[ 2995s] [32m        Scenario: Run command[0m
[ 2995s] [32m          When I run `cat` interactively[0m
[ 2995s] [32m          And I type "Hello, world"[0m
[ 2995s] [32m          And I close the stdin stream[0m
[ 2995s] [32m          Then the output should contain "Hello, world"[0m
[ 2995s] [32m      """[0m
[ 3005s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3005s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3005s] 
[ 3005s]   [36m@posix[0m
[ 3005s]   Scenario: All processes are stopped before checking for filesystem changes[90m # features/03_testing_frameworks/cucumber/steps/command/run_command_interactively.feature:76[0m
[ 3005s]     See: http://github.com/aslakhellesoy/aruba/issues#issue/17 for context
[ 3005s]     [32mGiven a file named "[32m[1mfeatures/interactive.feature[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3005s] [32m      """[0m
[ 3005s] [32m      Feature: Run command[0m
[ 3005s] [32m        Scenario: Run command[0m
[ 3005s] [32m          Given a directory named "rename_me"[0m
[ 3005s] [32m          When I run `mv rename_me renamed` interactively[0m
[ 3005s] [32m          Then the directory "renamed" should exist[0m
[ 3005s] [32m          And the directory "rename_me" should not exist[0m
[ 3005s] [32m      """[0m
[ 3015s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3015s]     [32mThen the features should all pass[90m                                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3015s] 
[ 3015s] Feature: Running shell commands
[ 3015s]   You can run an *ad hoc* script with the following steps:
[ 3015s]   - `When I run the following script:`
[ 3015s] 
[ 3015s]   Or you can run shell commands with:
[ 3015s]   - `I run the following commands`
[ 3015s]   - `I run the following commands (in|with) \`interpreter\``
[ 3015s]   - `I run the following commands (in|with) \`/path/to/interpreter\``
[ 3015s] 
[ 3016s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature:11[0m
[ 3016s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3016s] 
[ 3016s]   Scenario: Creating and running scripts[90m              # features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature:14[0m
[ 3016s]     [32mGiven a file named "[32m[1mfeatures/shell.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3016s] [32m      """[0m
[ 3016s] [32m      Feature: Running scripts[0m
[ 3016s] [32m        Scenario: Running ruby script[0m
[ 3016s] [32m          When I run the following script:[0m
[ 3016s] [32m          """bash[0m
[ 3016s] [32m          #!/usr/bin/env ruby[0m
[ 3016s] [32m[0m
[ 3016s] [32m          puts "Hello"[0m
[ 3016s] [32m          """[0m
[ 3016s] [32m          Then the output should contain "Hello"[0m
[ 3016s] [32m[0m
[ 3016s] [32m        Scenario: Running python3 script[0m
[ 3016s] [32m          When I run the following script:[0m
[ 3016s] [32m          """bash[0m
[ 3016s] [32m          #!/usr/bin/env python3[0m
[ 3016s] [32m[0m
[ 3016s] [32m          print("Hello")[0m
[ 3016s] [32m          """[0m
[ 3016s] [32m          Then the output should contain exactly "Hello"[0m
[ 3016s] [32m      """[0m
[ 3028s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3028s]     [32mThen the features should all pass[90m                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3028s] 
[ 3028s]   Scenario: Running shell commands[90m                    # features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature:39[0m
[ 3028s]     [32mGiven a file named "[32m[1mfeatures/shell.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3028s] [32m      """[0m
[ 3028s] [32m      Feature: Running scripts[0m
[ 3028s] [32m        Scenario: Running shell commands[0m
[ 3028s] [32m          When I run the following commands:[0m
[ 3028s] [32m          """bash[0m
[ 3028s] [32m          echo "Hello shell"[0m
[ 3028s] [32m          """[0m
[ 3028s] [32m          Then the output should contain exactly "Hello shell"[0m
[ 3028s] [32m      """[0m
[ 3037s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3037s]     [32mThen the features should all pass[90m                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3037s] 
[ 3038s]   Scenario: Running commands with a named interpreter[90m # features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature:53[0m
[ 3038s]     [32mGiven a file named "[32m[1mfeatures/shell.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3038s] [32m      """[0m
[ 3038s] [32m      Feature: Running scripts[0m
[ 3038s] [32m        Scenario: Running ruby commands[0m
[ 3038s] [32m          When I run the following commands with `ruby`:[0m
[ 3038s] [32m          """[0m
[ 3038s] [32m          puts "Hello, Aruba!"[0m
[ 3038s] [32m          """[0m
[ 3038s] [32m          Then the output should contain "Hello, Aruba!"[0m
[ 3038s] [32m      """[0m
[ 3049s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3049s]     [32mThen the features should all pass[90m                 # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3049s] 
[ 3049s]   Scenario: Running commands if full path to interpreter is given[90m # features/03_testing_frameworks/cucumber/steps/command/run_commands_which_require_a_shell.feature:67[0m
[ 3049s]     [32mGiven a file named "[32m[1mfeatures/shell.feature[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3049s] [32m      """[0m
[ 3049s] [32m      Feature: Running full path[0m
[ 3049s] [32m        Scenario: Running full path bash[0m
[ 3049s] [32m          When I run the following commands with `/bin/bash`:[0m
[ 3049s] [32m          """bash[0m
[ 3049s] [32m          echo "Hello Aruba!"[0m
[ 3049s] [32m          """[0m
[ 3049s] [32m          Then the output should contain "Hello Aruba!"[0m
[ 3049s] [32m      """[0m
[ 3060s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3060s]     [32mThen the features should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3060s] 
[ 3060s] Feature: Send a signal to command
[ 3060s]   You can send a command a signal with the following steps:
[ 3060s] 
[ 3060s]   - `When I send the signal "HUP" to the command started last`
[ 3060s]   - `When I send the signal "HUP" to the command "bin/aruba-test-cli"`
[ 3060s] 
[ 3060s]   Or just use `kill` on compatible platforms.
[ 3060s] 
[ 3060s]   Background: [90m                                                # features/03_testing_frameworks/cucumber/steps/command/send_signal_to_command.feature:10[0m
[ 3060s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m                     # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3060s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3060s] [32m      """[0m
[ 3060s] [32m      #!/usr/bin/env bash[0m
[ 3060s] [32m      function hup {[0m
[ 3060s] [32m        echo "Got signal HUP."[0m
[ 3060s] [32m        exit 0[0m
[ 3060s] [32m      }[0m
[ 3060s] [32m[0m
[ 3060s] [32m      trap hup HUP[0m
[ 3060s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3060s] [32m      """[0m
[ 3060s]     [32mAnd a file named "[32m[1mfeatures/support/aruba_config.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3060s] [32m      """[0m
[ 3060s] [32m      Aruba.configure do |config|[0m
[ 3060s] [32m        config.startup_wait_time = 0.1[0m
[ 3060s] [32m        config.exit_timeout = 0.2[0m
[ 3060s] [32m      end[0m
[ 3060s] [32m      """[0m
[ 3060s] 
[ 3060s]   Scenario: Sending signal to the command started last[90m # features/03_testing_frameworks/cucumber/steps/command/send_signal_to_command.feature:31[0m
[ 3060s]     [32mGiven a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3060s] [32m      """[0m
[ 3060s] [32m      Feature: Run it[0m
[ 3060s] [32m        Scenario: Run command[0m
[ 3060s] [32m          When I run `aruba-test-cli` in background[0m
[ 3060s] [32m          And I send the signal "HUP" to the command started last[0m
[ 3060s] [32m          Then the exit status should be 0[0m
[ 3060s] [32m          And the output should contain:[0m
[ 3060s] [32m          """[0m
[ 3060s] [32m          Got signal HUP.[0m
[ 3060s] [32m          """[0m
[ 3060s] [32m      """[0m
[ 3070s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3070s]     [32mThen the features should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3070s] 
[ 3070s]   Scenario: Sending signal to a command given by command line[90m # features/03_testing_frameworks/cucumber/steps/command/send_signal_to_command.feature:47[0m
[ 3070s]     [32mGiven a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3070s] [32m      """[0m
[ 3070s] [32m      Feature: Run it[0m
[ 3070s] [32m        Scenario: Run command[0m
[ 3070s] [32m          When I run `aruba-test-cli` in background[0m
[ 3070s] [32m          And I send the signal "HUP" to the command "aruba-test-cli"[0m
[ 3070s] [32m          Then the exit status should be 0[0m
[ 3070s] [32m          And the output should contain:[0m
[ 3070s] [32m          """[0m
[ 3070s] [32m          Got signal HUP.[0m
[ 3070s] [32m          """[0m
[ 3070s] [32m      """[0m
[ 3080s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3080s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3080s] 
[ 3081s]   [36m@unsupported-on-platform-windows[0m [36m@experimental[0m
[ 3081s]   Scenario: Using the "kill"-command[90m                # features/03_testing_frameworks/cucumber/steps/command/send_signal_to_command.feature:65[0m
[ 3081s]     `<pid-last-command-started>` in your command line will be replaced by the
[ 3081s]     PID of the last command started. Please note, this feature is experimental.
[ 3081s]     The name of the variable may change without further notice.
[ 3081s]     [32mGiven a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3081s] [32m      """[0m
[ 3081s] [32m      Feature: Run it[0m
[ 3081s] [32m        Scenario: Run command[0m
[ 3081s] [32m          When I run `aruba-test-cli` in background[0m
[ 3081s] [32m          And I run `kill -HUP <pid-last-command-started>`[0m
[ 3081s] [32m          Then the output should contain:[0m
[ 3081s] [32m          """[0m
[ 3081s] [32m          Got signal HUP.[0m
[ 3081s] [32m          """[0m
[ 3081s] [32m      """[0m
[ 3091s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3091s]     [32mThen the features should all pass[90m               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3091s] 
[ 3091s] Feature: Stop commands
[ 3091s]   After you've started a command, you might want to stop a command. To do that
[ 3091s]   you've got multiple possibilities.
[ 3091s] 
[ 3091s]   On "JRuby" it's not possible to read the output of command which `echo`s a
[ 3091s]   string in a `signal`-handler - `TERM`, `HUP` etc. So please don't write
[ 3091s]   tests, which check on this, if your script needs to run on "JRuby". All other
[ 3091s]   output is logged to `STDERR` and/or `STDOUT` as normal.
[ 3091s] 
[ 3091s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:11[0m
[ 3091s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3091s] 
[ 3091s]   Scenario: Terminate last command started[90m                # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:14[0m
[ 3091s]     Terminating a command will send `SIGTERM` to the command.
[ 3091s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3091s] [32m      """[0m
[ 3091s] [32m      #!/bin/bash[0m
[ 3091s] [32m[0m
[ 3091s] [32m      function term {[0m
[ 3091s] [32m        exit 100[0m
[ 3091s] [32m      }[0m
[ 3091s] [32m[0m
[ 3091s] [32m      trap term TERM[0m
[ 3091s] [32m      echo "Hello, Aruba!"[0m
[ 3091s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3091s] [32m      exit 1[0m
[ 3091s] [32m      """[0m
[ 3091s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3091s] [32m      """[0m
[ 3091s] [32m      #!/bin/bash[0m
[ 3091s] [32m[0m
[ 3091s] [32m      function term {[0m
[ 3091s] [32m        exit 155[0m
[ 3091s] [32m      }[0m
[ 3091s] [32m[0m
[ 3091s] [32m      trap term TERM[0m
[ 3091s] [32m      echo "Hello, Aruba!"[0m
[ 3091s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3091s] [32m      exit 1[0m
[ 3091s] [32m      """[0m
[ 3091s]     [32mAnd a file named "[32m[1mfeatures/stop.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3091s] [32m      """[0m
[ 3091s] [32m      Feature: Run it[0m
[ 3091s] [32m        Scenario: Run command[0m
[ 3091s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 3091s] [32m          And I wait 0.1 seconds for a command to start up[0m
[ 3091s] [32m          When I run `aruba-test-cli1` in background[0m
[ 3091s] [32m          And I run `aruba-test-cli2` in background[0m
[ 3091s] [32m          And I terminate the command started last[0m
[ 3091s] [32m          Then the exit status should be 155[0m
[ 3091s] [32m          And the output should contain:[0m
[ 3091s] [32m          """[0m
[ 3091s] [32m          Hello, Aruba![0m
[ 3091s] [32m          """[0m
[ 3091s] [32m      """[0m
[ 3102s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3102s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3102s] 
[ 3103s]   Scenario: Stop last command started[90m                     # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:62[0m
[ 3103s]     Stopping a command will wait n seconds for the command to stop and then
[ 3103s]     send `SIGTERM` to the command. Normally "n" is defined by the default exit
[ 3103s]     timeout of aruba.
[ 3103s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3103s] [32m      """[0m
[ 3103s] [32m      #!/bin/bash[0m
[ 3103s] [32m[0m
[ 3103s] [32m      function term {[0m
[ 3103s] [32m        exit 100[0m
[ 3103s] [32m      }[0m
[ 3103s] [32m[0m
[ 3103s] [32m      trap term TERM[0m
[ 3103s] [32m      echo "Hello, Aruba!"[0m
[ 3103s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3103s] [32m      exit 1[0m
[ 3103s] [32m      """[0m
[ 3103s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3103s] [32m      """[0m
[ 3103s] [32m      #!/bin/bash[0m
[ 3103s] [32m[0m
[ 3103s] [32m      function term {[0m
[ 3103s] [32m        exit 155[0m
[ 3103s] [32m      }[0m
[ 3103s] [32m[0m
[ 3103s] [32m      trap term TERM[0m
[ 3103s] [32m      echo "Hello, Aruba!"[0m
[ 3103s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3103s] [32m      exit 1[0m
[ 3103s] [32m      """[0m
[ 3103s]     [32mAnd a file named "[32m[1mfeatures/stop.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3103s] [32m      """[0m
[ 3103s] [32m      Feature: Run it[0m
[ 3103s] [32m        Background:[0m
[ 3103s] [32m[0m
[ 3103s] [32m        Scenario: Run command[0m
[ 3103s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 3103s] [32m          And I wait 0.1 seconds for a command to start up[0m
[ 3103s] [32m          When I run `aruba-test-cli1` in background[0m
[ 3103s] [32m          And I run `aruba-test-cli2` in background[0m
[ 3103s] [32m          And I stop the command started last[0m
[ 3103s] [32m          Then the exit status should be 155[0m
[ 3103s] [32m          And the output should contain:[0m
[ 3103s] [32m          """[0m
[ 3103s] [32m          Hello, Aruba![0m
[ 3103s] [32m          """[0m
[ 3103s] [32m      """[0m
[ 3114s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3114s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3114s] 
[ 3114s]   Scenario: Terminate command given by commandline[90m        # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:114[0m
[ 3114s]     Pass the commandline to the step to find the command, which should be
[ 3114s]     stopped.
[ 3114s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3114s] [32m      """[0m
[ 3114s] [32m      #!/bin/bash[0m
[ 3114s] [32m[0m
[ 3114s] [32m      function term {[0m
[ 3114s] [32m        exit 100[0m
[ 3114s] [32m      }[0m
[ 3114s] [32m[0m
[ 3114s] [32m      trap term TERM[0m
[ 3114s] [32m      echo "Hello, Aruba!"[0m
[ 3114s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3114s] [32m      """[0m
[ 3114s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3114s] [32m      """[0m
[ 3114s] [32m      #!/bin/bash[0m
[ 3114s] [32m[0m
[ 3114s] [32m      function term {[0m
[ 3114s] [32m        exit 155[0m
[ 3114s] [32m      }[0m
[ 3114s] [32m[0m
[ 3114s] [32m      trap term TERM[0m
[ 3114s] [32m      echo "Hello, Aruba!"[0m
[ 3114s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3114s] [32m      exit 2[0m
[ 3114s] [32m      """[0m
[ 3114s]     [32mAnd a file named "[32m[1mfeatures/stop.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3114s] [32m      """[0m
[ 3114s] [32m      Feature: Run it[0m
[ 3114s] [32m        Background:[0m
[ 3114s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 3114s] [32m[0m
[ 3114s] [32m        Scenario: Run command[0m
[ 3114s] [32m          Given I wait 0.1 seconds for a command to start up[0m
[ 3114s] [32m          When I run `aruba-test-cli1` in background[0m
[ 3114s] [32m          When I run `aruba-test-cli2` in background[0m
[ 3114s] [32m          And I terminate the command "aruba-test-cli1"[0m
[ 3114s] [32m          Then the exit status should be 100[0m
[ 3114s] [32m          And the output should contain:[0m
[ 3114s] [32m          """[0m
[ 3114s] [32m          Hello, Aruba![0m
[ 3114s] [32m          """[0m
[ 3114s] [32m      """[0m
[ 3125s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3125s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3125s] 
[ 3126s]   Scenario: Stop command given by commandline[90m             # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:164[0m
[ 3126s]     Stopping a command will wait n seconds for the command to stop and then
[ 3126s]     send `SIGTERM` to the command. Normally "n" is defined by the default exit
[ 3126s]     timeout of aruba.
[ 3126s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3126s] [32m      """[0m
[ 3126s] [32m      #!/bin/bash[0m
[ 3126s] [32m[0m
[ 3126s] [32m      function term {[0m
[ 3126s] [32m        exit 155[0m
[ 3126s] [32m      }[0m
[ 3126s] [32m[0m
[ 3126s] [32m      trap term TERM[0m
[ 3126s] [32m      echo "Hello, Aruba!"[0m
[ 3126s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3126s] [32m      exit 1[0m
[ 3126s] [32m      """[0m
[ 3126s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3126s] [32m      """[0m
[ 3126s] [32m      #!/bin/bash[0m
[ 3126s] [32m[0m
[ 3126s] [32m      function term {[0m
[ 3126s] [32m        exit 100[0m
[ 3126s] [32m      }[0m
[ 3126s] [32m[0m
[ 3126s] [32m      trap term TERM[0m
[ 3126s] [32m      echo "Hello, Aruba!"[0m
[ 3126s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3126s] [32m      exit 1[0m
[ 3126s] [32m      """[0m
[ 3126s]     [32mAnd a file named "[32m[1mfeatures/stop.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3126s] [32m      """[0m
[ 3126s] [32m      Feature: Run it[0m
[ 3126s] [32m        Background:[0m
[ 3126s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 3126s] [32m[0m
[ 3126s] [32m        Scenario: Run command[0m
[ 3126s] [32m          Given I wait 0.1 seconds for a command to start up[0m
[ 3126s] [32m          When I run `aruba-test-cli1` in background[0m
[ 3126s] [32m          And I run `aruba-test-cli2` in background[0m
[ 3126s] [32m          When I stop the command "aruba-test-cli1"[0m
[ 3126s] [32m          Then the exit status should be 155[0m
[ 3126s] [32m          And the output should contain:[0m
[ 3126s] [32m          """[0m
[ 3126s] [32m          Hello, Aruba![0m
[ 3126s] [32m          """[0m
[ 3126s] [32m      """[0m
[ 3138s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3138s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3138s] 
[ 3138s]   Scenario: Stop command with configured signal[90m          # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:216[0m
[ 3138s]     You can define a default signal which is used to stop all commands.
[ 3138s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3138s] [32m      """[0m
[ 3138s] [32m      #!/bin/bash[0m
[ 3138s] [32m      function hup {[0m
[ 3138s] [32m        exit 155[0m
[ 3138s] [32m      }[0m
[ 3138s] [32m[0m
[ 3138s] [32m      function term {[0m
[ 3138s] [32m        exit 100[0m
[ 3138s] [32m      }[0m
[ 3138s] [32m[0m
[ 3138s] [32m      trap hup HUP[0m
[ 3138s] [32m      trap term TERM[0m
[ 3138s] [32m      echo "Hello, Aruba!"[0m
[ 3138s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3138s] [32m      exit 1[0m
[ 3138s] [32m      """[0m
[ 3138s]     [32mAnd a file named "[32m[1mfeatures/run.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3138s] [32m      """[0m
[ 3138s] [32m      Feature: Run it[0m
[ 3138s] [32m        Scenario: Run command[0m
[ 3138s] [32m          Given the default aruba stop signal is "HUP"[0m
[ 3138s] [32m          And the default aruba exit timeout is 0.2 seconds[0m
[ 3138s] [32m          When I run `aruba-test-cli`[0m
[ 3138s] [32m          Then the exit status should be 155[0m
[ 3138s] [32m      """[0m
[ 3149s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3149s]     [32mThen the features should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3149s] 
[ 3149s]   [36m@requires-ruby-platform-mri[0m
[ 3149s]   Scenario: STDERR/STDOUT is captured from signal handlers[90m # features/03_testing_frameworks/cucumber/steps/command/stop_command.feature:250[0m
[ 3149s]      STDERR/STDOUT is written normally on MRI if output was written in "signal"-handler
[ 3149s] 
[ 3149s]      This is currently broken on JRuby.
[ 3149s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3149s] [32m      """[0m
[ 3149s] [32m      #!/bin/bash[0m
[ 3149s] [32m[0m
[ 3149s] [32m      function term {[0m
[ 3149s] [32m        echo 'Hello, TERM'[0m
[ 3149s] [32m        exit 100[0m
[ 3149s] [32m      }[0m
[ 3149s] [32m[0m
[ 3149s] [32m      trap term TERM[0m
[ 3149s] [32m      echo "Hello, Aruba!"[0m
[ 3149s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3149s] [32m      exit 1[0m
[ 3149s] [32m      """[0m
[ 3149s]     [32mAnd a file named "[32m[1mfeatures/stop.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3149s] [32m      """[0m
[ 3149s] [32m      Feature: Run it[0m
[ 3149s] [32m        Scenario: Run command[0m
[ 3149s] [32m          Given the default aruba exit timeout is 0.2 seconds[0m
[ 3149s] [32m          And I wait 0.1 seconds for a command to start up[0m
[ 3149s] [32m          When I run `aruba-test-cli1` in background[0m
[ 3149s] [32m          And I terminate the command started last[0m
[ 3149s] [32m          Then the exit status should be 100[0m
[ 3149s] [32m          And the output should contain:[0m
[ 3149s] [32m          """[0m
[ 3149s] [32m          Hello, TERM[0m
[ 3149s] [32m          """[0m
[ 3149s] [32m      """[0m
[ 3160s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3160s]     [32mThen the features should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3160s] 
[ 3160s] Feature: Append environment variable via "cucumber"-step
[ 3160s]   It is quite handy to modify the environment of a process. To make this
[ 3160s]   possible, `aruba` provides several steps. One of these is
[ 3160s]   `I append the values to environment variables:`-step. Using this step appends
[ 3160s]   the values. Each variable name and each value is converted to a string.
[ 3160s]   Otherwise `ruby` would complain about an invalid argument.
[ 3160s] 
[ 3160s]   Background: [90m                                             # features/03_testing_frameworks/cucumber/steps/environment/append_environment_variable.feature:9[0m
[ 3160s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m                      # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3160s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3160s] [32m      """[0m
[ 3160s] [32m      #!/bin/bash[0m
[ 3160s] [32m[0m
[ 3160s] [32m      echo $LONG_LONG_VARIABLE[0m
[ 3160s] [32m      """[0m
[ 3160s]     [32mAnd a file named "[32m[1mfeatures/support/variables.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3160s] [32m      """[0m
[ 3160s] [32m      ENV['LONG_LONG_VARIABLE'] = '1'[0m
[ 3160s] [32m      """[0m
[ 3160s] 
[ 3160s]   Scenario: Append environment variable by using a step given in table[90m # features/03_testing_frameworks/cucumber/steps/environment/append_environment_variable.feature:22[0m
[ 3160s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3160s] [32m      """[0m
[ 3160s] [32m      Feature: Environment Variable[0m
[ 3160s] [32m        Scenario: Run command[0m
[ 3160s] [32m          Given I append the values to the environment variables:[0m
[ 3160s] [32m            | variable           | value      |[0m
[ 3160s] [32m            | LONG_LONG_VARIABLE | long_value |[0m
[ 3160s] [32m          When I run `aruba-test-cli`[0m
[ 3160s] [32m          Then the output should contain:[0m
[ 3160s] [32m          """[0m
[ 3160s] [32m          1long_value[0m
[ 3160s] [32m          """[0m
[ 3160s] [32m      """[0m
[ 3170s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3170s]     [32mThen the features should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3170s] 
[ 3170s]   Scenario: Append single environment variable by using a step[90m # features/03_testing_frameworks/cucumber/steps/environment/append_environment_variable.feature:39[0m
[ 3170s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3170s] [32m      """[0m
[ 3170s] [32m      Feature: Environment Variable[0m
[ 3170s] [32m        Scenario: Run command[0m
[ 3170s] [32m          Given I append "long_value" to the environment variable "LONG_LONG_VARIABLE"[0m
[ 3170s] [32m          When I run `aruba-test-cli`[0m
[ 3170s] [32m          Then the output should contain:[0m
[ 3170s] [32m          """[0m
[ 3170s] [32m          1long_value[0m
[ 3170s] [32m          """[0m
[ 3170s] [32m      """[0m
[ 3181s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                      # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3181s]     [32mThen the features should all pass[90m                          # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3181s] 
[ 3181s] Feature: Mock the HOME variable
[ 3181s]   If you develop commandline applications, you might want to give your users
[ 3181s]   the possibility to configure your program. Normally this is done via
[ 3181s]   `.your-app-rc` or via `.config/your-app` an systems which comply to the
[ 3181s]   freedesktop-specifications.
[ 3181s] 
[ 3181s]   To prevent to litter the developers HOME-directory `aruba` comes with a step
[ 3181s]   which mocks the `HOME`-variable. It is set to the
[ 3181s]   `aruba`-`working-directory`.
[ 3181s] 
[ 3182s]   Background: [90m                                         # features/03_testing_frameworks/cucumber/steps/environment/modify_home_variable_for_testing.feature:12[0m
[ 3182s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m                  # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3182s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3182s] [32m      """[0m
[ 3182s] [32m      #!/bin/bash[0m
[ 3182s] [32m[0m
[ 3182s] [32m      echo "HOME: $HOME"[0m
[ 3182s] [32m      """[0m
[ 3182s] 
[ 3182s]   Scenario: Mocked home directory by using a step[90m             # features/03_testing_frameworks/cucumber/steps/environment/modify_home_variable_for_testing.feature:21[0m
[ 3182s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3182s] [32m      """[0m
[ 3182s] [32m      Feature: Home Variable[0m
[ 3182s] [32m        Scenario: Run command[0m
[ 3182s] [32m          Given a mocked home directory[0m
[ 3182s] [32m          When I run `aruba-test-cli`[0m
[ 3182s] [32m          Then the output should match %r<HOME:.*tmp/aruba$>[0m
[ 3182s] [32m      """[0m
[ 3192s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3192s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3192s] 
[ 3192s]   Scenario: Mocked home directory by using a tag[90m              # features/03_testing_frameworks/cucumber/steps/environment/modify_home_variable_for_testing.feature:33[0m
[ 3192s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3192s] [32m      """[0m
[ 3192s] [32m      Feature: Home Variable[0m
[ 3192s] [32m        @mocked-home-directory[0m
[ 3192s] [32m        Scenario: Run command[0m
[ 3192s] [32m          When I run `aruba-test-cli`[0m
[ 3192s] [32m          Then the output should match %r<HOME:.*tmp/aruba$>[0m
[ 3192s] [32m      """[0m
[ 3203s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3203s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3203s] 
[ 3203s]   Scenario: Redefine home directory by using the aruba configuration[90m # features/03_testing_frameworks/cucumber/steps/environment/modify_home_variable_for_testing.feature:45[0m
[ 3203s]     [32mGiven a file named "[32m[1mfeatures/support/home_variable.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3203s] [32m      """[0m
[ 3203s] [32m      require 'aruba/cucumber'[0m
[ 3203s] [32m[0m
[ 3203s] [32m      Aruba.configure do |config|[0m
[ 3203s] [32m        config.home_directory = File.join(config.root_directory, config.working_directory)[0m
[ 3203s] [32m      end[0m
[ 3203s] [32m      """[0m
[ 3203s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3203s] [32m      """[0m
[ 3203s] [32m      Feature: Home Variable[0m
[ 3203s] [32m        Scenario: Run command[0m
[ 3203s] [32m          When I run `aruba-test-cli`[0m
[ 3203s] [32m          Then the output should match %r<HOME:.*tmp/aruba$>[0m
[ 3203s] [32m      """[0m
[ 3214s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3214s]     [32mThen the features should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3214s] 
[ 3214s] Feature: Prepend environment variable via "cucumber"-step
[ 3214s]   It is quite handy to modify the environment of a process. To make this
[ 3214s]   possible, `aruba` provides several steps. One of these is
[ 3214s]   `I prepend the values to environment variables:`-step. Using this step prepends
[ 3214s]   the values. Each variable name and each value is converted to a string.
[ 3214s]   Otherwise `ruby` would complain about an invalid argument.
[ 3214s] 
[ 3214s]   Background: [90m                                             # features/03_testing_frameworks/cucumber/steps/environment/prepend_environment_variable.feature:9[0m
[ 3214s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m                      # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3214s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3214s] [32m      """[0m
[ 3214s] [32m      #!/bin/bash[0m
[ 3214s] [32m[0m
[ 3214s] [32m      echo $LONG_LONG_VARIABLE[0m
[ 3214s] [32m      """[0m
[ 3214s]     [32mAnd a file named "[32m[1mfeatures/support/variables.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3214s] [32m      """[0m
[ 3214s] [32m      ENV['LONG_LONG_VARIABLE'] = '1'[0m
[ 3214s] [32m      """[0m
[ 3214s] 
[ 3214s]   Scenario: Prepend environment variable by using a step given in table[90m # features/03_testing_frameworks/cucumber/steps/environment/prepend_environment_variable.feature:22[0m
[ 3214s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3214s] [32m      """[0m
[ 3214s] [32m      Feature: Environment Variable[0m
[ 3214s] [32m        Scenario: Run command[0m
[ 3214s] [32m          Given I prepend the values to the environment variables:[0m
[ 3214s] [32m            | variable           | value      |[0m
[ 3214s] [32m            | LONG_LONG_VARIABLE | long_value |[0m
[ 3214s] [32m          When I run `aruba-test-cli`[0m
[ 3214s] [32m          Then the output should contain:[0m
[ 3214s] [32m          """[0m
[ 3214s] [32m          long_value1[0m
[ 3214s] [32m          """[0m
[ 3214s] [32m      """[0m
[ 3226s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                               # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3226s]     [32mThen the features should all pass[90m                                   # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3226s] 
[ 3226s]   Scenario: Prepend single environment variable by using a step[90m # features/03_testing_frameworks/cucumber/steps/environment/prepend_environment_variable.feature:39[0m
[ 3226s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3226s] [32m      """[0m
[ 3226s] [32m      Feature: Environment Variable[0m
[ 3226s] [32m        Scenario: Run command[0m
[ 3226s] [32m          Given I prepend "long_value" to the environment variable "LONG_LONG_VARIABLE"[0m
[ 3226s] [32m          When I run `aruba-test-cli`[0m
[ 3226s] [32m          Then the output should contain:[0m
[ 3226s] [32m          """[0m
[ 3226s] [32m          long_value1[0m
[ 3226s] [32m          """[0m
[ 3226s] [32m      """[0m
[ 3236s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3236s]     [32mThen the features should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3236s] 
[ 3236s] Feature: Set environment variable via "cucumber"-step
[ 3236s]   It is quite handy to modify the environment of a process. To make this
[ 3236s]   possible, `aruba` provides several steps. One of these is
[ 3236s]   `I set the environment variables to:`-step. Using this step sets the values of a
[ 3236s]   non-existing variables and overwrites an existing values. Each variable name
[ 3236s]   and each value is converted to a string. Otherwise `ruby` would complain
[ 3236s]   about an invalid argument.
[ 3236s] 
[ 3236s]   Background: [90m                                         # features/03_testing_frameworks/cucumber/steps/environment/set_environment_variable.feature:10[0m
[ 3236s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m                  # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3236s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3236s] [32m      """[0m
[ 3236s] [32m      #!/bin/bash[0m
[ 3236s] [32m[0m
[ 3236s] [32m      echo $LONG_LONG_VARIABLE[0m
[ 3236s] [32m      """[0m
[ 3236s] 
[ 3236s]   Scenario: Set environment variable by using a step given in table[90m # features/03_testing_frameworks/cucumber/steps/environment/set_environment_variable.feature:19[0m
[ 3236s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3236s] [32m      """[0m
[ 3236s] [32m      Feature: Environment Variable[0m
[ 3236s] [32m        Scenario: Run command[0m
[ 3236s] [32m          Given I set the environment variables to:[0m
[ 3236s] [32m            | variable           | value      |[0m
[ 3236s] [32m            | LONG_LONG_VARIABLE | long_value |[0m
[ 3236s] [32m          When I run `aruba-test-cli`[0m
[ 3236s] [32m          Then the output should contain:[0m
[ 3236s] [32m          """[0m
[ 3236s] [32m          long_value[0m
[ 3236s] [32m          """[0m
[ 3236s] [32m      """[0m
[ 3247s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3247s]     [32mThen the features should all pass[90m                               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3247s] 
[ 3248s]   Scenario: Set single environment variable by using a step[90m   # features/03_testing_frameworks/cucumber/steps/environment/set_environment_variable.feature:36[0m
[ 3248s]     [32mGiven a file named "[32m[1mfeatures/home_variable.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3248s] [32m      """[0m
[ 3248s] [32m      Feature: Environment Variable[0m
[ 3248s] [32m        Scenario: Run command[0m
[ 3248s] [32m          Given I set the environment variable "LONG_LONG_VARIABLE" to "long_value"[0m
[ 3248s] [32m          When I run `aruba-test-cli`[0m
[ 3248s] [32m          Then the output should contain:[0m
[ 3248s] [32m          """[0m
[ 3248s] [32m          long_value[0m
[ 3248s] [32m          """[0m
[ 3248s] [32m      """[0m
[ 3258s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3258s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3258s] 
[ 3258s] Feature: Append content to file
[ 3258s]   You might want to append some content to a file.
[ 3258s] 
[ 3258s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/append_to_file.feature:5[0m
[ 3258s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3258s] 
[ 3258s]   Scenario: Append to a existing file[90m                         # features/03_testing_frameworks/cucumber/steps/filesystem/append_to_file.feature:8[0m
[ 3258s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3258s] [32m      """[0m
[ 3258s] [32m      Feature: Existence[0m
[ 3258s] [32m        Scenario: Existence[0m
[ 3258s] [32m          Given a file named "foo/bar/example.txt" with:[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m          hello world[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m          When I append to "foo/bar/example.txt" with:[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m          this was appended[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m          Then the file named "foo/bar/example.txt" should contain:[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m          hello worldthis was appended[0m
[ 3258s] [32m          """[0m
[ 3258s] [32m      """[0m
[ 3269s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3269s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3269s] 
[ 3269s]   Scenario: Append to a non-existing file[90m                     # features/03_testing_frameworks/cucumber/steps/filesystem/append_to_file.feature:29[0m
[ 3269s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3269s] [32m      """[0m
[ 3269s] [32m      Feature: Existence[0m
[ 3269s] [32m        Scenario: Existence[0m
[ 3269s] [32m          Given a file named "foo/bar/example.txt" does not exist[0m
[ 3269s] [32m          When I append to "foo/bar/example.txt" with:[0m
[ 3269s] [32m          """[0m
[ 3269s] [32m          this was appended[0m
[ 3269s] [32m          """[0m
[ 3269s] [32m          Then the file named "foo/bar/example.txt" should contain:[0m
[ 3269s] [32m          """[0m
[ 3269s] [32m          this was appended[0m
[ 3269s] [32m          """[0m
[ 3269s] [32m      """[0m
[ 3280s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3280s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3280s] 
[ 3280s] Feature: Change working directory
[ 3280s]   You might want to change the current working directory.
[ 3280s] 
[ 3280s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/cd_to_directory.feature:5[0m
[ 3280s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3280s] 
[ 3280s]   Scenario: Change to an existing sub directory[90m               # features/03_testing_frameworks/cucumber/steps/filesystem/cd_to_directory.feature:8[0m
[ 3280s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3280s] [32m      """[0m
[ 3280s] [32m      Feature: Working Directory[0m
[ 3280s] [32m        Scenario: Working Directory[0m
[ 3280s] [32m          Given a file named "foo/bar/example.txt" with:[0m
[ 3280s] [32m          """[0m
[ 3280s] [32m          hello world[0m
[ 3280s] [32m          """[0m
[ 3280s] [32m          When I cd to "foo/bar"[0m
[ 3280s] [32m          And I run `cat example.txt`[0m
[ 3280s] [32m          Then the output should contain "hello world"[0m
[ 3280s] [32m          And the file "example.txt" should exist[0m
[ 3280s] [32m      """[0m
[ 3291s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3291s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3291s] 
[ 3291s]   Scenario: Change to an non-existing sub directory[90m           # features/03_testing_frameworks/cucumber/steps/filesystem/cd_to_directory.feature:25[0m
[ 3291s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3291s] [32m      """[0m
[ 3291s] [32m      Feature: Working Directory[0m
[ 3291s] [32m        Scenario: Working Directory[0m
[ 3291s] [32m          When I cd to "foo/bar/non-existing"[0m
[ 3291s] [32m      """[0m
[ 3301s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3301s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3301s] 
[ 3302s] Feature: Make sure and check a directory exists
[ 3302s]   To setup a working environment, you may want to make sure, that a
[ 3302s]   directory exist.
[ 3302s] 
[ 3302s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_directory.feature:6[0m
[ 3302s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3302s] 
[ 3302s]   Scenario: Check for presence of a single directory[90m      # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_directory.feature:9[0m
[ 3302s]     [32mGiven a file named "[32m[1mfeatures/existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3302s] [32m      """[0m
[ 3302s] [32m      Feature: Existence[0m
[ 3302s] [32m        Background:[0m
[ 3302s] [32m          Given an empty directory "lorem/ipsum/dolor"[0m
[ 3302s] [32m[0m
[ 3302s] [32m        Scenario: Existence #1[0m
[ 3302s] [32m          Then the directory "lorem/ipsum/dolor" should exist[0m
[ 3302s] [32m[0m
[ 3302s] [32m        Scenario: Existence #2[0m
[ 3302s] [32m          Then the directory named "lorem/ipsum/dolor" should exist[0m
[ 3302s] [32m[0m
[ 3302s] [32m        Scenario: Existence #3[0m
[ 3302s] [32m          Then a directory named "lorem/ipsum/dolor" should exist[0m
[ 3302s] [32m      """[0m
[ 3313s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3313s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3313s] 
[ 3313s]   Scenario: Check for presence of a multiple directories[90m  # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_directory.feature:28[0m
[ 3313s]     [32mGiven a file named "[32m[1mfeatures/existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3313s] [32m      """[0m
[ 3313s] [32m      Feature: Existence[0m
[ 3313s] [32m        Scenario: Existence[0m
[ 3313s] [32m          Given an empty directory "lorem/ipsum/dolor"[0m
[ 3313s] [32m          And an empty directory "lorem/ipsum/amet"[0m
[ 3314s] [32m          Then the following directories should exist:[0m
[ 3314s] [32m            | lorem/ipsum/dolor |[0m
[ 3314s] [32m            | lorem/ipsum/amet  |[0m
[ 3314s] [32m      """[0m
[ 3324s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3324s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3324s] 
[ 3325s]   Scenario: Check for presence of a subset of directories[90m # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_directory.feature:43[0m
[ 3325s]     [32mGiven a file named "[32m[1mfeatures/existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3325s] [32m      """[0m
[ 3325s] [32m      Feature: Existence[0m
[ 3325s] [32m        Scenario: Existence[0m
[ 3325s] [32m          Given an empty directory "lorem/ipsum/dolor"[0m
[ 3325s] [32m          And an empty directory "lorem/ipsum/amet"[0m
[ 3325s] [32m          And an empty directory "lorem/ipsum/sit"[0m
[ 3325s] [32m          Then the following directories should exist:[0m
[ 3325s] [32m            | lorem/ipsum/dolor |[0m
[ 3325s] [32m            | lorem/ipsum/amet  |[0m
[ 3325s] [32m      """[0m
[ 3335s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3335s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3335s] 
[ 3335s] Feature: Make sure and check a file exists
[ 3335s]   To setup a working environment, you may want to make sure, that a
[ 3335s]   file exist or if you ran your command of a file
[ 3335s]   was deleted.
[ 3335s] 
[ 3336s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_file.feature:7[0m
[ 3336s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3336s] 
[ 3336s]   Scenario: Check for presence of a single file[90m        # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_file.feature:10[0m
[ 3336s]     [32mGiven an empty file named "[32m[1mlorem/ipsum/dolor[0m[0m[32m"[90m      # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3336s]     [32mThen a [32m[1mfile[0m[0m[32m named "[32m[1mlorem/ipsum/dolor[0m[0m[32m" should exist[90m # lib/aruba/cucumber/file.rb:91[0m[0m
[ 3336s] 
[ 3336s]   Scenario: Check for presence of a subset of files[90m       # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_file.feature:14[0m
[ 3336s]     [32mGiven a file named "[32m[1mfeatures/existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3336s] [32m      """[0m
[ 3336s] [32m      Feature: Existence[0m
[ 3336s] [32m        Scenario: Existence[0m
[ 3336s] [32m          Given an empty file named "lorem/ipsum/dolor"[0m
[ 3336s] [32m          And an empty file named "lorem/ipsum/sit"[0m
[ 3336s] [32m          And an empty file named "lorem/ipsum/amet"[0m
[ 3336s] [32m          Then the following files should exist:[0m
[ 3336s] [32m            | lorem/ipsum/dolor |[0m
[ 3336s] [32m            | lorem/ipsum/amet  |[0m
[ 3336s] [32m      """[0m
[ 3347s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3347s]     [32mThen the features should all pass[90m                     # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3347s] 
[ 3347s]   Scenario: Check for presence of a single file using a regex[90m # features/03_testing_frameworks/cucumber/steps/filesystem/check_existence_of_file.feature:29[0m
[ 3347s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3347s] [32m      """[0m
[ 3347s] [32m      Feature: Existence[0m
[ 3347s] [32m        Background:[0m
[ 3347s] [32m          Given an empty file named "lorem/ipsum/dolor"[0m
[ 3347s] [32m[0m
[ 3347s] [32m        Scenario: Existence #1[0m
[ 3347s] [32m          Then a file matching %r<dolor$> should exist[0m
[ 3347s] [32m[0m
[ 3347s] [32m        Scenario: Existence #2[0m
[ 3347s] [32m          Then a file matching %r<ipsum/dolor> should exist[0m
[ 3347s] [32m      """[0m
[ 3359s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3359s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3359s] 
[ 3359s] Feature: Check file content
[ 3359s] 
[ 3360s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:3[0m
[ 3360s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3360s] 
[ 3360s]   Scenario: Check file contents with plain text[90m               # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:6[0m
[ 3360s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3360s] [32m      """[0m
[ 3360s] [32m      Feature: Check[0m
[ 3360s] [32m        Scenario: Check[0m
[ 3360s] [32m          Given a file named "foo" with:[0m
[ 3360s] [32m          """[0m
[ 3360s] [32m          hello world[0m
[ 3360s] [32m          """[0m
[ 3360s] [32m          Then the file "foo" should contain "hello world"[0m
[ 3360s] [32m          And the file "foo" should not contain "HELLO WORLD"[0m
[ 3360s] [32m      """[0m
[ 3370s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3370s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3370s] 
[ 3370s]   Scenario: Check file contents with regular expression[90m       # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:21[0m
[ 3370s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3370s] [32m      """[0m
[ 3370s] [32m      Feature: Check[0m
[ 3370s] [32m        Background:[0m
[ 3370s] [32m          Given a file named "foo" with:[0m
[ 3370s] [32m          """[0m
[ 3370s] [32m          hello world[0m
[ 3370s] [32m          """[0m
[ 3370s] [32m[0m
[ 3370s] [32m        Scenario: Check #1[0m
[ 3370s] [32m          Then the file "foo" should match /hel.o world/[0m
[ 3370s] [32m          And the file "foo" should not match /HELLO WORLD/[0m
[ 3370s] [32m[0m
[ 3370s] [32m        Scenario: Check #2[0m
[ 3370s] [32m          Then the file "foo" should match %r<hel.o world>[0m
[ 3370s] [32m          And the file "foo" should not match %r<HELLO WORLD>[0m
[ 3370s] [32m      """[0m
[ 3380s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3380s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3380s] 
[ 3381s]   Scenario: Check file contents with cucumber doc string[90m      # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:42[0m
[ 3381s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3381s] [32m      """[0m
[ 3381s] [32m      Feature: Existence[0m
[ 3381s] [32m        Scenario: Existence[0m
[ 3381s] [32m          Given a file named "foo" with:[0m
[ 3381s] [32m          """[0m
[ 3381s] [32m          foo[0m
[ 3381s] [32m          bar[0m
[ 3381s] [32m          baz[0m
[ 3381s] [32m          foobar[0m
[ 3381s] [32m          """[0m
[ 3381s] [32m          Then the file "foo" should contain:[0m
[ 3381s] [32m          """[0m
[ 3381s] [32m          bar[0m
[ 3381s] [32m          baz[0m
[ 3381s] [32m          """[0m
[ 3381s] [32m      """[0m
[ 3391s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3391s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3391s] 
[ 3391s]   Scenario: Existing file having content[90m                     # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:63[0m
[ 3391s]     [32mGiven a file named "[32m[1mfeatures/file_content.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3391s] [32m      """[0m
[ 3391s] [32m      Feature: File content[0m
[ 3391s] [32m        Scenario: file content[0m
[ 3391s] [32m          Given a file named "test.txt" with:[0m
[ 3391s] [32m          """[0m
[ 3391s] [32m          Hello World[0m
[ 3391s] [32m          """[0m
[ 3391s] [32m          Then the file named "test.txt" should contain:[0m
[ 3391s] [32m          """[0m
[ 3391s] [32m          Hello World[0m
[ 3391s] [32m          """[0m
[ 3391s] [32m      """[0m
[ 3402s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3402s]     [32mThen the features should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3402s] 
[ 3402s]   Scenario: Existing file having content with special characters[90m # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:80[0m
[ 3402s]     [32mGiven a file named "[32m[1mfeatures/file_content.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3402s] [32m      """[0m
[ 3402s] [32m      Feature: File content[0m
[ 3402s] [32m        Scenario: file content[0m
[ 3402s] [32m          Given a file named "test.txt" with:[0m
[ 3402s] [32m          """[0m
[ 3402s] [32m          UUUUU[0m
[ 3402s] [32m[0m
[ 3402s] [32m          1 scenario (1 undefined)[0m
[ 3402s] [32m          5 steps (5 undefined)[0m
[ 3402s] [32m[0m
[ 3402s] [32m          """[0m
[ 3402s] [32m          Then the file named "test.txt" should contain:[0m
[ 3402s] [32m          """[0m
[ 3402s] [32m          UUUUU[0m
[ 3402s] [32m[0m
[ 3402s] [32m          1 scenario (1 undefined)[0m
[ 3402s] [32m          5 steps (5 undefined)[0m
[ 3402s] [32m[0m
[ 3402s] [32m          """[0m
[ 3402s] [32m      """[0m
[ 3412s]     [32mWhen I run `[32m[1mcucumber --format progress[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3412s]     [32mThen the features should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3412s] 
[ 3413s]   Scenario: Trailing white space is ignored[90m                  # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:105[0m
[ 3413s]     [32mGiven a file named "[32m[1mfeatures/file_content.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3413s] [32m      """[0m
[ 3413s] [32m      Feature: File content[0m
[ 3413s] [32m        Scenario: file content[0m
[ 3413s] [32m          Given a file named "test.txt" with:[0m
[ 3413s] [32m          """[0m
[ 3413s] [32m          UUUUU[0m
[ 3413s] [32m[0m
[ 3413s] [32m          """[0m
[ 3413s] [32m          Then the file named "test.txt" should contain:[0m
[ 3413s] [32m          """[0m
[ 3413s] [32m          UUUUU[0m
[ 3413s] [32m          """[0m
[ 3413s] [32m      """[0m
[ 3423s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3423s]     [32mThen the features should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3423s] 
[ 3423s]   Scenario: Use non-ASCII UTF-8 characters[90m                   # features/03_testing_frameworks/cucumber/steps/filesystem/check_file_content.feature:123[0m
[ 3423s]     [32mGiven a file named "[32m[1mfeatures/file_content.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3423s] [32m      """[0m
[ 3423s] [32m      Feature: File content[0m
[ 3423s] [32m        Scenario: file content[0m
[ 3423s] [32m          Given a file named "test.txt" with:[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m          フィーチャ[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m          When I run `cat test.txt`[0m
[ 3423s] [32m          Then the output should contain:[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m          フィーチャ[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m          And the file named "test.txt" should contain:[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m          フィーチャ[0m
[ 3423s] [32m          """[0m
[ 3423s] [32m      """[0m
[ 3434s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3434s]     [32mThen the features should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3434s] 
[ 3434s] Feature: Make sure and check a directory does not exist
[ 3434s]   To setup a working environment, you may want to make sure, that a
[ 3434s]   directory does not exist or if you ran your command of a directory
[ 3434s]   was deleted.
[ 3434s] 
[ 3434s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_directory.feature:7[0m
[ 3434s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3434s] 
[ 3434s]   Scenario: Delete existing directory[90m                         # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_directory.feature:10[0m
[ 3434s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3434s] [32m      """[0m
[ 3434s] [32m      Feature: Non-Existence[0m
[ 3434s] [32m        Background:[0m
[ 3434s] [32m          Given a directory named "example.d" does not exist[0m
[ 3434s] [32m[0m
[ 3434s] [32m        Scenario: Non-Existence #1[0m
[ 3434s] [32m          Then the directory "example.d" should not exist[0m
[ 3434s] [32m[0m
[ 3434s] [32m        Scenario: Non-Existence #2[0m
[ 3434s] [32m          Then the directory "example.d" should not exist[0m
[ 3434s] [32m[0m
[ 3434s] [32m        Scenario: Non-Existence #3[0m
[ 3434s] [32m          Then the directory "example.d" should not exist[0m
[ 3434s] [32m      """[0m
[ 3445s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3445s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3445s] 
[ 3445s]   Scenario: Check if a directory does not exists[90m              # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_directory.feature:29[0m
[ 3445s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3445s] [32m      """[0m
[ 3445s] [32m      Feature: Non-Existence[0m
[ 3445s] [32m        Background:[0m
[ 3445s] [32m          Given a directory named "example.d" does not exist[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #1[0m
[ 3445s] [32m          Then the directory "example.d" should not exist[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #2[0m
[ 3445s] [32m          Then the directory named "example.d" should not exist[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #3[0m
[ 3445s] [32m          Then a directory named "example.d" should not exist[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #4[0m
[ 3445s] [32m          Then a directory named "example.d" should not exist anymore[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #5[0m
[ 3445s] [32m          Then the directory named "example.d" should not exist anymore[0m
[ 3445s] [32m[0m
[ 3445s] [32m        Scenario: Non-Existence #6[0m
[ 3445s] [32m          Then the directory "example.d" should not exist anymore[0m
[ 3445s] [32m      """[0m
[ 3457s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3457s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3457s] 
[ 3458s]   Scenario: Check for absence of a subset of directories[90m      # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_directory.feature:57[0m
[ 3458s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3458s] [32m      """[0m
[ 3458s] [32m      Feature: Non-Existence[0m
[ 3458s] [32m        Scenario: Non-Existence[0m
[ 3458s] [32m          Given the directory "lorem/ipsum/dolor" does not exist[0m
[ 3458s] [32m          And the directory "lorem/ipsum/amet" does not exist[0m
[ 3458s] [32m          Then the following directories should not exist:[0m
[ 3458s] [32m            | lorem/ipsum/dolor |[0m
[ 3458s] [32m            | lorem/ipsum/amet  |[0m
[ 3458s] [32m      """[0m
[ 3468s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3468s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3468s] 
[ 3469s] Feature: Make sure and check a file does not exist
[ 3469s]   To setup a working environment, you may want to make sure, that a
[ 3469s]   file does not exist or if you ran your command of a file
[ 3469s]   was deleted.
[ 3469s] 
[ 3469s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature:7[0m
[ 3469s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3469s] 
[ 3469s]   Scenario: Delete existing file[90m                              # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature:10[0m
[ 3469s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3469s] [32m      """[0m
[ 3469s] [32m      Feature: Non-Existence[0m
[ 3469s] [32m        Background:[0m
[ 3469s] [32m          Given a file named "example.txt" does not exist[0m
[ 3469s] [32m[0m
[ 3469s] [32m        Scenario: Non-Existence #1[0m
[ 3469s] [32m          Then the file "example.txt" should not exist[0m
[ 3469s] [32m[0m
[ 3469s] [32m        Scenario: Non-Existence #2[0m
[ 3469s] [32m          Then the file "example.txt" should not exist[0m
[ 3469s] [32m[0m
[ 3469s] [32m        Scenario: Non-Existence #3[0m
[ 3469s] [32m          Then the file "example.txt" should not exist[0m
[ 3469s] [32m      """[0m
[ 3480s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3480s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3480s] 
[ 3480s]   Scenario: Check if a file does not exists[90m                   # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature:29[0m
[ 3480s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3480s] [32m      """[0m
[ 3480s] [32m      Feature: Non-Existence[0m
[ 3480s] [32m        Background:[0m
[ 3480s] [32m          Given a file named "example.txt" does not exist[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #1[0m
[ 3480s] [32m          Then the file "example.txt" should not exist[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #2[0m
[ 3480s] [32m          Then the file named "example.txt" should not exist[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #3[0m
[ 3480s] [32m          Then a file named "example.txt" should not exist[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #4[0m
[ 3480s] [32m          Then a file named "example.txt" should not exist anymore[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #5[0m
[ 3480s] [32m          Then the file named "example.txt" should not exist anymore[0m
[ 3480s] [32m[0m
[ 3480s] [32m        Scenario: Non-Existence #6[0m
[ 3480s] [32m          Then the file "example.txt" should not exist anymore[0m
[ 3480s] [32m      """[0m
[ 3491s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3491s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3491s] 
[ 3491s]   Scenario: Check for absence of multiple files[90m               # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature:57[0m
[ 3491s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3491s] [32m      """[0m
[ 3491s] [32m      Feature: Non-Existence[0m
[ 3491s] [32m        Scenario: Non-Existence[0m
[ 3491s] [32m          Given the file "lorem/ipsum/dolor.txt" does not exist[0m
[ 3491s] [32m          Given the file "lorem/ipsum/sit.txt" does not exist[0m
[ 3491s] [32m          Then the following files should not exist:[0m
[ 3491s] [32m            | lorem/ipsum/dolor.txt |[0m
[ 3491s] [32m            | lorem/ipsum/sit.txt |[0m
[ 3491s] [32m      """[0m
[ 3502s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3502s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3502s] 
[ 3502s]   Scenario: Check for absence of a single file using a regex[90m  # features/03_testing_frameworks/cucumber/steps/filesystem/check_non_existence_of_file.feature:71[0m
[ 3502s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3502s] [32m      """[0m
[ 3502s] [32m      Feature: Existence[0m
[ 3502s] [32m        Scenario: Existence[0m
[ 3502s] [32m          Given the file "lorem/ipsum/sit.txt" does not exist[0m
[ 3502s] [32m          Then a file matching %r<^ipsum> should not exist[0m
[ 3502s] [32m      """[0m
[ 3513s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3513s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3513s] 
[ 3513s] Feature: Check permissions of file
[ 3513s] 
[ 3513s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/check_permissions_of_file.feature:3[0m
[ 3513s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3513s] 
[ 3513s]   Scenario: Check mode of existing file[90m                     # features/03_testing_frameworks/cucumber/steps/filesystem/check_permissions_of_file.feature:6[0m
[ 3513s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3513s] [32m      """[0m
[ 3513s] [32m      Feature: Check[0m
[ 3513s] [32m        Background:[0m
[ 3513s] [32m          Given an empty file named "file1.txt" with mode "0644"[0m
[ 3513s] [32m[0m
[ 3513s] [32m        Scenario: Check #1[0m
[ 3513s] [32m          Then the file named "file1.txt" should have permissions "0644"[0m
[ 3513s] [32m[0m
[ 3513s] [32m        Scenario: Check #2[0m
[ 3513s] [32m          Then a file "file1.txt" should have permissions "0644"[0m
[ 3513s] [32m[0m
[ 3513s] [32m        Scenario: Check #3[0m
[ 3513s] [32m          Then a file "file1.txt" should not have permissions "0444"[0m
[ 3513s] [32m[0m
[ 3513s] [32m        Scenario: Check #4[0m
[ 3513s] [32m          Then the file "file1.txt" should not have permissions "0444"[0m
[ 3513s] [32m      """[0m
[ 3524s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3524s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3524s] 
[ 3524s]   Scenario: Check mode of non-existing file[90m                 # features/03_testing_frameworks/cucumber/steps/filesystem/check_permissions_of_file.feature:28[0m
[ 3524s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3524s] [32m      """[0m
[ 3524s] [32m      Feature: Check[0m
[ 3524s] [32m        Background:[0m
[ 3524s] [32m          Given a file named "file1.txt" does not exist[0m
[ 3524s] [32m[0m
[ 3524s] [32m        Scenario: Check [0m
[ 3524s] [32m          Then the file named "file1.txt" should have permissions "0644"[0m
[ 3524s] [32m      """[0m
[ 3534s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3534s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3534s] 
[ 3535s] Feature: Compare files
[ 3535s] 
[ 3535s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/compare_files.feature:3[0m
[ 3535s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3535s] 
[ 3535s]   Scenario: Compare existing files[90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/compare_files.feature:6[0m
[ 3535s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3535s] [32m      """[0m
[ 3535s] [32m      Feature: Existence[0m
[ 3535s] [32m        Scenario: Existence[0m
[ 3535s] [32m          Given a file named "foo" with:[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          hello world[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          And a file named "bar" with:[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          hello world[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          And a file named "nonbar" with:[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          hello another world[0m
[ 3535s] [32m          """[0m
[ 3535s] [32m          Then the file "foo" should be equal to file "bar"[0m
[ 3535s] [32m          And the file "foo" should not be equal to file "nonbar"[0m
[ 3535s] [32m      """[0m
[ 3545s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3545s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3545s] 
[ 3546s]   Scenario: Compare non-existing files[90m                        # features/03_testing_frameworks/cucumber/steps/filesystem/compare_files.feature:29[0m
[ 3546s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3546s] [32m      """[0m
[ 3546s] [32m      Feature: Existence[0m
[ 3546s] [32m        Scenario: Existence[0m
[ 3546s] [32m          Given a file named "foo" with:[0m
[ 3546s] [32m          """[0m
[ 3546s] [32m          hello world[0m
[ 3546s] [32m          """[0m
[ 3546s] [32m          Then the file "foo" should be equal to file "bar"[0m
[ 3546s] [32m      """[0m
[ 3556s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3556s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3556s] 
[ 3556s] Feature: Copy file or directory
[ 3556s]   As a user of aruba
[ 3556s]   I want ot copy a file or a directory
[ 3556s]   To setup my tests
[ 3556s] 
[ 3556s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/copy_file_or_directory.feature:7[0m
[ 3556s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3556s] 
[ 3556s]   Scenario: Copy file[90m                                # features/03_testing_frameworks/cucumber/steps/filesystem/copy_file_or_directory.feature:10[0m
[ 3556s]     [32mGiven a file named "[32m[1mfeatures/copy.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3556s] [32m      """[0m
[ 3556s] [32m      Feature: Copy[0m
[ 3556s] [32m        Scenario: Copy[0m
[ 3556s] [32m          Given an empty file named "file1.txt"[0m
[ 3556s] [32m          And an empty file named "file2.txt"[0m
[ 3556s] [32m          And an empty file named "file3.txt"[0m
[ 3556s] [32m          When I copy a file named "file1.txt" to "new_file1.txt"[0m
[ 3556s] [32m          When I copy a file from "file2.txt" to "new_file2.txt"[0m
[ 3556s] [32m          When I copy the file "file3.txt" to "new_file3.txt"[0m
[ 3556s] [32m          Then a file named "new_file1.txt" should exist[0m
[ 3556s] [32m          Then a file named "new_file2.txt" should exist[0m
[ 3556s] [32m          Then a file named "new_file3.txt" should exist[0m
[ 3556s] [32m      """[0m
[ 3567s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3567s]     [32mThen the features should all pass[90m                # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3567s] 
[ 3567s]   Scenario: Copy directory[90m                           # features/03_testing_frameworks/cucumber/steps/filesystem/copy_file_or_directory.feature:28[0m
[ 3567s]     [32mGiven a file named "[32m[1mfeatures/copy.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3567s] [32m      """[0m
[ 3567s] [32m      Feature: Copy[0m
[ 3567s] [32m        Scenario: Copy[0m
[ 3567s] [32m          Given a directory named "dir1.d"[0m
[ 3567s] [32m          And a directory named "dir2.d"[0m
[ 3567s] [32m          And a directory named "dir3.d"[0m
[ 3567s] [32m          When I copy a directory named "dir1.d" to "new_dir1.d"[0m
[ 3567s] [32m          When I copy a directory from "dir2.d" to "new_dir2.d"[0m
[ 3567s] [32m          When I copy the directory "dir3.d" to "new_dir3.d"[0m
[ 3567s] [32m          Then a directory named "new_dir1.d" should exist[0m
[ 3567s] [32m          Then a directory named "new_dir2.d" should exist[0m
[ 3567s] [32m          Then a directory named "new_dir3.d" should exist[0m
[ 3567s] [32m      """[0m
[ 3578s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3578s]     [32mThen the features should all pass[90m                # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3578s] 
[ 3578s] Feature: Create Directory
[ 3578s]   As a user of aruba
[ 3578s]   I want to create directories
[ 3578s] 
[ 3578s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/create_directory.feature:6[0m
[ 3578s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3578s] 
[ 3578s]   Scenario: Non-existing directory[90m                               # features/03_testing_frameworks/cucumber/steps/filesystem/create_directory.feature:9[0m
[ 3578s]     [32mGiven a file named "[32m[1mfeatures/create_directory.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3578s] [32m      """[0m
[ 3578s] [32m      Feature: Create directory[0m
[ 3578s] [32m        Background:[0m
[ 3578s] [32m          Given a directory named "dir1"[0m
[ 3578s] [32m[0m
[ 3578s] [32m        Scenario: Create directory #1[0m
[ 3578s] [32m          Then a directory named "dir1" should exist[0m
[ 3578s] [32m[0m
[ 3578s] [32m        Scenario: Create directory #2[0m
[ 3578s] [32m          Then a directory named "dir1" should exist[0m
[ 3578s] [32m[0m
[ 3578s] [32m        Scenario: Create directory #3[0m
[ 3578s] [32m          Then a directory named "dir1" should exist[0m
[ 3578s] [32m[0m
[ 3578s] [32m        Scenario: Create directory #4[0m
[ 3578s] [32m          Then a directory named "dir1" should exist[0m
[ 3578s] [32m[0m
[ 3578s] [32m        Scenario: Create directory #5[0m
[ 3578s] [32m          Then a directory named "dir1" should exist[0m
[ 3578s] [32m      """[0m
[ 3590s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3590s]     [32mThen the features should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3590s] 
[ 3590s]   Scenario: Existing directory[90m                                   # features/03_testing_frameworks/cucumber/steps/filesystem/create_directory.feature:34[0m
[ 3590s]     It doesn't matter if a directory already exist.
[ 3590s]     [32mGiven a file named "[32m[1mfeatures/create_directory.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3590s] [32m      """[0m
[ 3590s] [32m      Feature: Create directory[0m
[ 3590s] [32m        Scenario: Create directory[0m
[ 3590s] [32m          Given a directory named "dir1"[0m
[ 3590s] [32m          And a directory named "dir1"[0m
[ 3590s] [32m      """[0m
[ 3600s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3600s]     [32mThen the features should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3600s] 
[ 3601s]   Scenario: Change mode a long with creation of directory[90m        # features/03_testing_frameworks/cucumber/steps/filesystem/create_directory.feature:48[0m
[ 3601s]     [32mGiven a file named "[32m[1mfeatures/create_directory.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3601s] [32m      """[0m
[ 3601s] [32m      Feature: Create directory[0m
[ 3601s] [32m        Scenario: Create directory[0m
[ 3601s] [32m          Given a directory named "dir1" with mode "0644"[0m
[ 3601s] [32m          Then the directory named "dir1" should have permissions "0644"[0m
[ 3601s] [32m      """[0m
[ 3611s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3611s]     [32mThen the features should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3611s] 
[ 3611s] Feature: Create new File
[ 3611s]   As a user of aruba
[ 3611s]   I want to create files
[ 3611s] 
[ 3611s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:6[0m
[ 3611s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3611s] 
[ 3611s]   Scenario: Create empty file[90m                               # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:9[0m
[ 3611s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3611s] [32m      """[0m
[ 3611s] [32m      Feature: Create file[0m
[ 3611s] [32m        Scenario: Create file[0m
[ 3611s] [32m          Given an empty file named "file1.txt"[0m
[ 3611s] [32m          Then a file named "file1.txt" should exist[0m
[ 3611s] [32m      """[0m
[ 3621s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3621s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3621s] 
[ 3621s]   Scenario: Create file with content[90m                        # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:20[0m
[ 3621s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3621s] [32m      """[0m
[ 3621s] [32m      Feature: Create file[0m
[ 3621s] [32m        Scenario: Create file[0m
[ 3621s] [32m          Given a file named "file1.txt" with:[0m
[ 3621s] [32m          """[0m
[ 3621s] [32m          Hello World[0m
[ 3621s] [32m          """[0m
[ 3621s] [32m          Then the file named "file1.txt" should contain:[0m
[ 3621s] [32m          """[0m
[ 3621s] [32m          Hello World[0m
[ 3621s] [32m          """[0m
[ 3621s] [32m      """[0m
[ 3632s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3632s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3632s] 
[ 3632s]   Scenario: Change mode a long with creation of a file with content[90m # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:37[0m
[ 3632s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3632s] [32m      """[0m
[ 3632s] [32m      Feature: Create file[0m
[ 3632s] [32m        Scenario: Create file[0m
[ 3632s] [32m          Given a file named "file1.txt" with mode "0644" and with:[0m
[ 3632s] [32m          """[0m
[ 3632s] [32m          Hello World[0m
[ 3632s] [32m          """[0m
[ 3632s] [32m          Then the file named "file1.txt" should have permissions "0644"[0m
[ 3632s] [32m          And the file named "file1.txt" should contain:[0m
[ 3632s] [32m          """[0m
[ 3632s] [32m          Hello World[0m
[ 3632s] [32m          """[0m
[ 3632s] [32m      """[0m
[ 3642s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                           # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3642s]     [32mThen the features should all pass[90m                               # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3642s] 
[ 3642s]   Scenario: Change mode a long with creation of empty file[90m  # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:55[0m
[ 3642s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3642s] [32m      """[0m
[ 3642s] [32m      Feature: Create file[0m
[ 3642s] [32m        Scenario: Create file[0m
[ 3642s] [32m          Given an empty file named "file1.txt" with mode "0644"[0m
[ 3642s] [32m          Then the file named "file1.txt" should have permissions "0644"[0m
[ 3642s] [32m      """[0m
[ 3652s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3652s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3652s] 
[ 3653s]   Scenario: Create a fixed sized file[90m                         # features/03_testing_frameworks/cucumber/steps/filesystem/create_file.feature:66[0m
[ 3653s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3653s] [32m      """[0m
[ 3653s] [32m      Feature: Create file[0m
[ 3653s] [32m        Scenario: Create file[0m
[ 3653s] [32m          Given a 1048576 byte file named "test.txt"[0m
[ 3653s] [32m          Then a 1048576 byte file named "test.txt" should exist[0m
[ 3653s] [32m      """[0m
[ 3663s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3663s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3663s] 
[ 3663s] Feature: Move file or directory
[ 3663s]   As a user of aruba
[ 3663s]   I want ot move a file or a directory
[ 3663s]   To setup my tests
[ 3663s] 
[ 3663s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/move_file_or_directory.feature:7[0m
[ 3663s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3663s] 
[ 3663s]   Scenario: Move file[90m                                # features/03_testing_frameworks/cucumber/steps/filesystem/move_file_or_directory.feature:10[0m
[ 3663s]     [32mGiven a file named "[32m[1mfeatures/move.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3663s] [32m      """[0m
[ 3663s] [32m      Feature: Move[0m
[ 3663s] [32m        Scenario: Move[0m
[ 3663s] [32m          Given an empty file named "file1.txt"[0m
[ 3663s] [32m          And an empty file named "file2.txt"[0m
[ 3663s] [32m          And an empty file named "file3.txt"[0m
[ 3663s] [32m          When I move a file named "file1.txt" to "new_file1.txt"[0m
[ 3663s] [32m          When I move a file from "file2.txt" to "new_file2.txt"[0m
[ 3663s] [32m          When I move the file "file3.txt" to "new_file3.txt"[0m
[ 3663s] [32m          Then a file named "new_file1.txt" should exist[0m
[ 3663s] [32m          Then a file named "new_file2.txt" should exist[0m
[ 3663s] [32m          Then a file named "new_file3.txt" should exist[0m
[ 3663s] [32m      """[0m
[ 3674s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3674s]     [32mThen the features should all pass[90m                # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3674s] 
[ 3674s]   Scenario: Move directory[90m                           # features/03_testing_frameworks/cucumber/steps/filesystem/move_file_or_directory.feature:28[0m
[ 3674s]     [32mGiven a file named "[32m[1mfeatures/move.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3674s] [32m      """[0m
[ 3674s] [32m      Feature: Move[0m
[ 3674s] [32m        Scenario: Move[0m
[ 3674s] [32m          Given a directory named "dir1.d"[0m
[ 3674s] [32m          And a directory named "dir2.d"[0m
[ 3674s] [32m          And a directory named "dir3.d"[0m
[ 3674s] [32m          When I move a directory named "dir1.d" to "new_dir1.d"[0m
[ 3674s] [32m          When I move a directory from "dir2.d" to "new_dir2.d"[0m
[ 3674s] [32m          When I move the directory "dir3.d" to "new_dir3.d"[0m
[ 3674s] [32m          Then a directory named "new_dir1.d" should exist[0m
[ 3674s] [32m          Then a directory named "new_dir2.d" should exist[0m
[ 3674s] [32m          Then a directory named "new_dir3.d" should exist[0m
[ 3674s] [32m      """[0m
[ 3684s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3684s]     [32mThen the features should all pass[90m                # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3684s] 
[ 3684s] Feature: Overwrite a file
[ 3684s]   As a user of aruba
[ 3684s]   I want to overwrite a file
[ 3684s] 
[ 3685s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/overwrite_file.feature:6[0m
[ 3685s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3685s] 
[ 3685s]   Scenario: Overwrite an existing file[90m                      # features/03_testing_frameworks/cucumber/steps/filesystem/overwrite_file.feature:9[0m
[ 3685s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3685s] [32m      """[0m
[ 3685s] [32m      Feature: Overwrite file[0m
[ 3685s] [32m        Scenario: Overwrite file[0m
[ 3685s] [32m          Given a file named "file1.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello World[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          And a file named "file2.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello World[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          And a file named "file3.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello World[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          When I overwrite "file1.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          When I overwrite the file "file2.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          When I overwrite a file named "file3.txt" with:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Then the file named "file1.txt" should contain:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          And the file named "file2.txt" should contain:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          And the file named "file3.txt" should contain:[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m          Hello Universe[0m
[ 3685s] [32m          """[0m
[ 3685s] [32m      """[0m
[ 3695s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3695s]     [32mThen the features should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3695s] 
[ 3695s]   Scenario: Overwrite a non-existing file[90m                   # features/03_testing_frameworks/cucumber/steps/filesystem/overwrite_file.feature:54[0m
[ 3695s]     [32mGiven a file named "[32m[1mfeatures/create_file.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3695s] [32m      """[0m
[ 3695s] [32m      Feature: Overwrite file[0m
[ 3695s] [32m        Scenario: Overwrite file[0m
[ 3695s] [32m          When I overwrite "file1.txt" with:[0m
[ 3695s] [32m          """[0m
[ 3695s] [32m          Hello Universe[0m
[ 3695s] [32m          """[0m
[ 3695s] [32m          Then the file named "file1.txt" should contain:[0m
[ 3695s] [32m          """[0m
[ 3695s] [32m          Hello Universe[0m
[ 3695s] [32m          """[0m
[ 3695s] [32m      """[0m
[ 3705s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3705s]     [32mThen the features should[32m[1m not[0m[0m[32m all pass with[32m[1m regex[0m[0m[32m:[90m       # lib/aruba/cucumber/testing_frameworks.rb:14[0m[0m
[ 3705s] [32m      """[0m
[ 3705s] [32m      Expected [^ ]+ to be present[0m
[ 3705s] [32m      """[0m
[ 3705s] 
[ 3705s] Feature: Remove a directory
[ 3705s] 
[ 3705s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/remove_directory.feature:3[0m
[ 3705s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3705s] 
[ 3705s]   Scenario: Remove an existing directory[90m                      # features/03_testing_frameworks/cucumber/steps/filesystem/remove_directory.feature:6[0m
[ 3705s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3705s] [32m      """[0m
[ 3705s] [32m      Feature: Remove[0m
[ 3705s] [32m        Scenario: Remove[0m
[ 3705s] [32m          Given an empty directory named "foo"[0m
[ 3705s] [32m          When I remove the directory "foo"[0m
[ 3705s] [32m          Then the directory "foo" should not exist[0m
[ 3705s] [32m      """[0m
[ 3716s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3716s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3716s] 
[ 3717s]   Scenario: Remove an non-existing directory[90m                  # features/03_testing_frameworks/cucumber/steps/filesystem/remove_directory.feature:18[0m
[ 3717s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3717s] [32m      """[0m
[ 3717s] [32m      Feature: Remove[0m
[ 3717s] [32m        Scenario: Remove[0m
[ 3717s] [32m          When I remove the directory "foo"[0m
[ 3717s] [32m          Then the directory "foo" should not exist[0m
[ 3717s] [32m      """[0m
[ 3726s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3726s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3726s] 
[ 3727s]   Scenario: Force remove an non-existing directory[90m            # features/03_testing_frameworks/cucumber/steps/filesystem/remove_directory.feature:29[0m
[ 3727s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3727s] [32m      """[0m
[ 3727s] [32m      Feature: Remove[0m
[ 3727s] [32m        Scenario: Remove[0m
[ 3727s] [32m          When I remove the directory "foo" with full force[0m
[ 3727s] [32m          Then the directory "foo" should not exist[0m
[ 3727s] [32m      """[0m
[ 3737s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3737s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3737s] 
[ 3737s] Feature: Remove a file
[ 3737s] 
[ 3737s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/remove_file.feature:3[0m
[ 3737s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3737s] 
[ 3737s]   Scenario: Remove an existing file[90m                           # features/03_testing_frameworks/cucumber/steps/filesystem/remove_file.feature:6[0m
[ 3737s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3737s] [32m      """[0m
[ 3737s] [32m      Feature: Remove[0m
[ 3737s] [32m        Scenario: Remove[0m
[ 3737s] [32m          Given an empty file named "foo"[0m
[ 3737s] [32m          When I remove the file "foo"[0m
[ 3737s] [32m          Then the file "foo" should not exist[0m
[ 3737s] [32m      """[0m
[ 3748s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3748s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3748s] 
[ 3748s]   Scenario: Remove an non-existing file[90m                       # features/03_testing_frameworks/cucumber/steps/filesystem/remove_file.feature:18[0m
[ 3748s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3748s] [32m      """[0m
[ 3748s] [32m      Feature: Remove[0m
[ 3748s] [32m        Scenario: Remove[0m
[ 3748s] [32m          When I remove the file "foo"[0m
[ 3748s] [32m          Then the file "foo" should not exist[0m
[ 3748s] [32m      """[0m
[ 3758s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3758s]     [32mThen the features should[32m[1m not[0m[0m[32m pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3758s] 
[ 3758s]   Scenario: Force remove an non-existing file[90m                 # features/03_testing_frameworks/cucumber/steps/filesystem/remove_file.feature:29[0m
[ 3758s]     [32mGiven a file named "[32m[1mfeatures/non-existence.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3758s] [32m      """[0m
[ 3758s] [32m      Feature: Remove[0m
[ 3758s] [32m        Scenario: Remove[0m
[ 3758s] [32m          When I remove the file "foo" with full force[0m
[ 3758s] [32m          Then the file "foo" should not exist[0m
[ 3758s] [32m      """[0m
[ 3769s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3769s]     [32mThen the features should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3769s] 
[ 3769s] Feature: Use a fixture
[ 3769s]   As a user of aruba
[ 3769s]   I want to use a fixture
[ 3769s] 
[ 3769s]   Background: [90m                            # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:6[0m
[ 3769s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3769s] 
[ 3769s]   Scenario: Use the fixture if fixtures directory is in root directory[90m # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:9[0m
[ 3769s]     [32mGiven a file named "[32m[1mfeatures/use_fixtures.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3769s] [32m      """[0m
[ 3769s] [32m      Feature: Use Fixture[0m
[ 3769s] [32m        Scenario: Use Fixture[0m
[ 3769s] [32m          Given I use a fixture named "my-app"[0m
[ 3769s] [32m          Then a file named "MY-APP-README.md" should exist[0m
[ 3769s] [32m      """[0m
[ 3769s]     [32mAnd a directory named "[32m[1mfixtures[0m[0m[32m"[90m                                   # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3769s]     [32mAnd a directory named "[32m[1mfixtures/my-app[0m[0m[32m"[90m                            # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3769s]     [32mAnd an empty file named "[32m[1mfixtures/my-app/MY-APP-README.md[0m[0m[32m"[90m         # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3779s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3779s]     [32mThen the features should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3779s] 
[ 3780s]   Scenario: Use the fixture if fixtures directory is in features-directory[90m # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:23[0m
[ 3780s]     [32mGiven a file named "[32m[1mfeatures/use_fixtures.feature[0m[0m[32m" with:[90m               # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3780s] [32m      """[0m
[ 3780s] [32m      Feature: Use Fixture[0m
[ 3780s] [32m        Scenario: Use Fixture[0m
[ 3780s] [32m          Given I use a fixture named "my-app"[0m
[ 3780s] [32m          Then a file named "MY-APP-README.md" should exist[0m
[ 3780s] [32m      """[0m
[ 3780s]     [32mAnd a directory named "[32m[1mfeatures/fixtures[0m[0m[32m"[90m                              # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3780s]     [32mAnd a directory named "[32m[1mfeatures/fixtures/my-app[0m[0m[32m"[90m                       # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3780s]     [32mAnd an empty file named "[32m[1mfeatures/fixtures/my-app/MY-APP-README.md[0m[0m[32m"[90m    # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3790s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3790s]     [32mThen the features should all pass[90m                                      # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3790s] 
[ 3790s]   Scenario: Use the fixture if fixtures directory is in spec-directory[90m # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:37[0m
[ 3790s]     [32mGiven a file named "[32m[1mfeatures/use_fixtures.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3790s] [32m      """[0m
[ 3790s] [32m      Feature: Use Fixture[0m
[ 3790s] [32m        Scenario: Use Fixture[0m
[ 3790s] [32m          Given I use a fixture named "my-app"[0m
[ 3790s] [32m          Then a file named "MY-APP-README.md" should exist[0m
[ 3790s] [32m      """[0m
[ 3790s]     [32mAnd a directory named "[32m[1mspec/fixtures[0m[0m[32m"[90m                              # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3790s]     [32mAnd a directory named "[32m[1mspec/fixtures/my-app[0m[0m[32m"[90m                       # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3790s]     [32mAnd an empty file named "[32m[1mspec/fixtures/my-app/MY-APP-README.md[0m[0m[32m"[90m    # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3800s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3800s]     [32mThen the features should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3800s] 
[ 3801s]   Scenario: Use the fixture if fixtures directory is in test-directory[90m # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:51[0m
[ 3801s]     [32mGiven a file named "[32m[1mfeatures/use_fixtures.feature[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3801s] [32m      """[0m
[ 3801s] [32m      Feature: Use Fixture[0m
[ 3801s] [32m        Scenario: Use Fixture[0m
[ 3801s] [32m          Given I use a fixture named "my-app"[0m
[ 3801s] [32m          Then a file named "MY-APP-README.md" should exist[0m
[ 3801s] [32m      """[0m
[ 3801s]     [32mAnd a directory named "[32m[1mtest/fixtures[0m[0m[32m"[90m                              # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3801s]     [32mAnd a directory named "[32m[1mtest/fixtures/my-app[0m[0m[32m"[90m                       # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3801s]     [32mAnd an empty file named "[32m[1mtest/fixtures/my-app/MY-APP-README.md[0m[0m[32m"[90m    # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3812s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3812s]     [32mThen the features should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:2[0m[0m
[ 3812s] 
[ 3813s]   Scenario: Fails if fixture does not exist[90m                  # features/03_testing_frameworks/cucumber/steps/filesystem/use_fixtures_for_setup_test.feature:65[0m
[ 3813s]     [32mGiven a file named "[32m[1mfeatures/use_fixtures.feature[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3813s] [32m      """[0m
[ 3813s] [32m      Feature: Use Fixture[0m
[ 3813s] [32m        Scenario: Use Fixture[0m
[ 3813s] [32m          Given I use a fixture named "my-app"[0m
[ 3813s] [32m      """[0m
[ 3813s]     [32mAnd a directory named "[32m[1mfixtures[0m[0m[32m"[90m                         # lib/aruba/cucumber/file.rb:14[0m[0m
[ 3822s]     [32mWhen I run `[32m[1mcucumber[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3822s]     [32mThen the features should[32m[1m not[0m[0m[32m all pass with[32m[1m regex[0m[0m[32m:[90m        # lib/aruba/cucumber/testing_frameworks.rb:14[0m[0m
[ 3822s] [32m      """[0m
[ 3822s] [32m      Fixture "my-app" does not exist in fixtures directory ".+/fixtures"[0m
[ 3822s] [32m      """[0m
[ 3822s] 
[ 3823s] Feature: After command hooks
[ 3823s]   You can configure Aruba to run blocks of code after it has run
[ 3823s]   a command. The command will be passed to the block.
[ 3823s] 
[ 3823s]   You can hook into Aruba's lifecycle just before it runs a command and after it has run the command:
[ 3823s] 
[ 3823s]   ```ruby
[ 3823s]   Aruba.configure do |config|
[ 3823s]     config.after :command do |cmd|
[ 3823s]       puts "After the run of '#{cmd}'"
[ 3823s]     end
[ 3823s]   end
[ 3823s]   ```
[ 3823s] 
[ 3823s]   Background: [90m                            # features/03_testing_frameworks/rspec/hooks/define_after_hook_for_commands.feature:16[0m
[ 3823s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3823s] 
[ 3823s]   Scenario: Run a simple command with an "after(:command)"-hook[90m # features/03_testing_frameworks/rspec/hooks/define_after_hook_for_commands.feature:19[0m
[ 3823s]     [32mGiven a file named "[32m[1mspec/support/aruba_config.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3823s] [32m      """[0m
[ 3823s] [32m      Aruba.configure do |config|[0m
[ 3823s] [32m        config.after :command do |cmd|[0m
[ 3823s] [32m          puts "after the run of `#{cmd.commandline}`"[0m
[ 3823s] [32m        end[0m
[ 3823s] [32m      end[0m
[ 3823s] [32m      """[0m
[ 3823s]     [32mAnd a file named "[32m[1mspec/hook_spec.rb[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3823s] [32m      """[0m
[ 3823s] [32m      require 'spec_helper'[0m
[ 3823s] [32m[0m
[ 3823s] [32m      RSpec.describe 'Hooks', :type => :aruba do[0m
[ 3823s] [32m        before(:each) { run_command_and_stop 'echo running' }[0m
[ 3823s] [32m[0m
[ 3823s] [32m        it { expect(last_command_started.stdout.chomp).to eq 'running' }[0m
[ 3823s] [32m      end[0m
[ 3823s] [32m      """[0m
[ 3830s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3830s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3830s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                              # lib/aruba/cucumber/command.rb:187[0m[0m
[ 3830s] [32m      """[0m
[ 3830s] [32m      after the run of `echo running`[0m
[ 3830s] [32m      """[0m
[ 3830s] 
[ 3830s] Feature: before_cmd hooks
[ 3830s]   You can configure Aruba to run blocks of code before it runs
[ 3830s]   each command.
[ 3830s] 
[ 3830s]   The command will be passed to the block.
[ 3830s] 
[ 3830s]   You can hook into Aruba's lifecycle just before it runs a command and after it has run the command:
[ 3830s] 
[ 3830s]   ```ruby
[ 3830s]   Aruba.configure do |config|
[ 3830s]     config.before :command do |cmd|
[ 3830s]       puts "About to run '#{cmd}'"
[ 3830s]     end
[ 3830s]   end
[ 3830s]   ```
[ 3830s] 
[ 3831s]   Background: [90m                            # features/03_testing_frameworks/rspec/hooks/define_before_hook_for_commands.feature:18[0m
[ 3831s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3831s] 
[ 3831s]   Scenario: Run a simple command with a "before(:command)"-hook[90m # features/03_testing_frameworks/rspec/hooks/define_before_hook_for_commands.feature:21[0m
[ 3831s]     [32mGiven a file named "[32m[1mspec/support/aruba_config.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3831s] [32m      """[0m
[ 3831s] [32m      Aruba.configure do |config|[0m
[ 3831s] [32m        config.before :command do |cmd|[0m
[ 3831s] [32m          puts "before the run of `#{cmd.commandline}`"[0m
[ 3831s] [32m        end[0m
[ 3831s] [32m      end[0m
[ 3831s] [32m      """[0m
[ 3831s]     [32mAnd a file named "[32m[1mspec/hook_spec.rb[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3831s] [32m      """[0m
[ 3831s] [32m      require 'spec_helper'[0m
[ 3831s] [32m[0m
[ 3831s] [32m      RSpec.describe 'Hooks', :type => :aruba do[0m
[ 3831s] [32m        before(:each) { run_command_and_stop 'echo running' }[0m
[ 3831s] [32m[0m
[ 3831s] [32m        it { expect(last_command_started.stdout.chomp).to eq 'running' }[0m
[ 3831s] [32m      end[0m
[ 3831s] [32m      """[0m
[ 3841s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3841s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3841s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                              # lib/aruba/cucumber/command.rb:187[0m[0m
[ 3841s] [32m      """[0m
[ 3841s] [32m      before the run of `echo running`[0m
[ 3841s] [32m      """[0m
[ 3841s] 
[ 3841s]   Scenario: Run a simple command with a "before(:cmd)"-hook (deprecated)[90m # features/03_testing_frameworks/rspec/hooks/define_before_hook_for_commands.feature:47[0m
[ 3841s]     [32mGiven a file named "[32m[1mspec/support/hooks.rb[0m[0m[32m" with:[90m                     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3841s] [32m      """[0m
[ 3841s] [32m      Aruba.configure do |config|[0m
[ 3841s] [32m        config.before :cmd do |cmd|[0m
[ 3841s] [32m          puts "before the run of `#{cmd}`"[0m
[ 3841s] [32m        end[0m
[ 3841s] [32m      end[0m
[ 3841s] [32m      """[0m
[ 3841s]     [32mAnd a file named "[32m[1mspec/hook_spec.rb[0m[0m[32m" with:[90m                           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3842s] [32m      """[0m
[ 3842s] [32m      require 'spec_helper'[0m
[ 3842s] [32m[0m
[ 3842s] [32m      RSpec.describe 'Hooks', :type => :aruba do[0m
[ 3842s] [32m        before(:each) { run_command_and_stop 'echo running' }[0m
[ 3842s] [32m[0m
[ 3842s] [32m        it { expect(last_command_started.stdout.chomp).to eq 'running' }[0m
[ 3842s] [32m      end[0m
[ 3842s] [32m      """[0m
[ 3851s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3851s]     [32mThen the specs should all pass[90m                                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3851s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                                       # lib/aruba/cucumber/command.rb:187[0m[0m
[ 3851s] [32m      """[0m
[ 3851s] [32m      before the run of `echo running`[0m
[ 3851s] [32m      """[0m
[ 3851s] 
[ 3851s] Feature: Getting started with RSpec and aruba
[ 3851s] 
[ 3851s]   Background: [90m                          # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:3[0m
[ 3851s]     [32mGiven I use the fixture "[32m[1mempty-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3851s] 
[ 3851s]   Scenario: Simple Integration[90m                            # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:6[0m
[ 3851s]     To use the simple integration just require `aruba/rspec` in your
[ 3851s]     `spec_helper.rb`. After that you only need to flag your tests with `type:
[ 3851s]     :aruba` and some things are set up for.
[ 3851s] 
[ 3851s]     The simple integration adds some `before(:each)` hooks for you:
[ 3851s] 
[ 3851s]       \* Setup Aruba Test directory
[ 3851s]       \* Clear environment (ENV)
[ 3851s]       \* Make HOME variable configurable via `arub.config.home_directory`
[ 3851s]       \* Configure `aruba` via `RSpec` metadata
[ 3851s]       \* Activate announcers based on `RSpec` metadata
[ 3851s] 
[ 3851s]     Be careful, if you are going to use a `before(:all)` hook to set up
[ 3851s]     files/directories. Those will be deleted by the `setup_aruba` call within
[ 3851s]     the `before(:each)` hook. Look for some custom integration further down the
[ 3851s]     documentation for a solution.
[ 3851s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3851s] [32m      """[0m
[ 3851s] [32m      require 'aruba/rspec'[0m
[ 3851s] [32m      """[0m
[ 3851s]     [32mAnd a file named "[32m[1mspec/getting_started_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3851s] [32m      """[0m
[ 3851s] [32m      require 'spec_helper'[0m
[ 3851s] [32m[0m
[ 3851s] [32m      RSpec.describe 'Integrate Aruba into RSpec', :type => :aruba do[0m
[ 3851s] [32m        context 'when to be or not be...' do[0m
[ 3851s] [32m          it { expect(aruba).to be }[0m
[ 3851s] [32m        end[0m
[ 3851s] [32m[0m
[ 3851s] [32m        context 'when write file' do[0m
[ 3851s] [32m          let(:file) { 'file.txt' }[0m
[ 3851s] [32m[0m
[ 3851s] [32m          before(:each) { write_file file, 'Hello World' }[0m
[ 3851s] [32m[0m
[ 3851s] [32m          it { expect(file).to be_an_existing_file }[0m
[ 3851s] [32m          it { expect([file]).to include an_existing_file }[0m
[ 3851s] [32m        end[0m
[ 3851s] [32m      end[0m
[ 3851s] [32m      """[0m
[ 3859s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3859s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3859s] 
[ 3859s]   Scenario: Simple Custom Integration[90m                     # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:51[0m
[ 3859s]     There might be some use cases where you want to build an aruba integration
[ 3859s]     of your own. You need to include the API and make sure, that you run
[ 3859s] 
[ 3859s]       \* `restore_env` (only for aruba < 1.0.0)
[ 3859s]       \* `setup_aruba`
[ 3859s] 
[ 3859s]     before any method of aruba is used.
[ 3859s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3859s] [32m      """[0m
[ 3859s] [32m      require 'aruba/api'[0m
[ 3859s] [32m[0m
[ 3859s] [32m      RSpec.configure do |config|[0m
[ 3859s] [32m        config.include Aruba::Api[0m
[ 3859s] [32m      end[0m
[ 3859s] [32m      """[0m
[ 3859s]     [32mAnd a file named "[32m[1mspec/getting_started_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3859s] [32m      """[0m
[ 3859s] [32m      require 'spec_helper'[0m
[ 3859s] [32m[0m
[ 3859s] [32m      RSpec.describe 'Custom Integration of aruba' do[0m
[ 3859s] [32m        let(:file) { 'file.txt' }[0m
[ 3859s] [32m[0m
[ 3859s] [32m        before(:each) { setup_aruba }[0m
[ 3859s] [32m        before(:each) { write_file file, 'Hello World' }[0m
[ 3859s] [32m[0m
[ 3859s] [32m        it { expect(file).to be_an_existing_file }[0m
[ 3859s] [32m      end[0m
[ 3859s] [32m      """[0m
[ 3866s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3866s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3866s] 
[ 3866s]   Scenario: Custom Integration using before(:all) hook[90m    # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:85[0m
[ 3866s]     You can even use `aruba` within a `before(:all)` hook. But again, make sure
[ 3866s]     that `setup_aruba` is run before you use any method of `aruba`. Using
[ 3866s]     `setup_aruba` both in a `before(:all)` and a `before(:each)` hook is not
[ 3866s]     possible and therefore not supported:
[ 3866s] 
[ 3866s]     Running `setup_aruba` removes `tmp/aruba`, creates a new `tmp/aruba`, and
[ 3866s]     makes that the working directory. Running it within a `before(:all)` hook,
[ 3866s]     running some `aruba` method and, then running `setup_aruba` again within a
[ 3866s]     `before(:each)` hook, will remove the files and directories created within
[ 3866s]     the `before(:all)` hook.
[ 3866s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3866s] [32m      """[0m
[ 3866s] [32m      require 'aruba/api'[0m
[ 3866s] [32m[0m
[ 3866s] [32m      RSpec.configure do |config|[0m
[ 3866s] [32m        config.include Aruba::Api[0m
[ 3866s] [32m      end[0m
[ 3866s] [32m      """[0m
[ 3867s]     [32mAnd a file named "[32m[1mspec/getting_started_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3867s] [32m      """[0m
[ 3867s] [32m      require 'spec_helper'[0m
[ 3867s] [32m[0m
[ 3867s] [32m      RSpec.describe 'Custom Integration of aruba' do[0m
[ 3867s] [32m        before(:all) { setup_aruba }[0m
[ 3867s] [32m        before(:all) { write_file 'file.txt', 'Hello World' }[0m
[ 3867s] [32m[0m
[ 3867s] [32m        it { expect('file.txt').to be_an_existing_file }[0m
[ 3867s] [32m      end[0m
[ 3867s] [32m      """[0m
[ 3873s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3873s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3873s] 
[ 3873s]   Scenario: Setup aruba before use any of it's methods[90m            # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:120[0m
[ 3873s]     From 1.0.0 it will be required, that you setup aruba before you use it.
[ 3873s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3873s] [32m      """[0m
[ 3873s] [32m      require 'aruba/api'[0m
[ 3873s] [32m[0m
[ 3873s] [32m      RSpec.configure do |config|[0m
[ 3873s] [32m        config.include Aruba::Api[0m
[ 3873s] [32m      end[0m
[ 3873s] [32m      """[0m
[ 3873s]     [32mAnd a file named "[32m[1mspec/getting_started_spec.rb[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3873s] [32m      """[0m
[ 3873s] [32m      require 'spec_helper'[0m
[ 3873s] [32m[0m
[ 3873s] [32m      RSpec.describe 'Custom Integration of aruba' do[0m
[ 3873s] [32m        let(:file) { 'file.txt' }[0m
[ 3873s] [32m[0m
[ 3873s] [32m        before(:each) { setup_aruba }[0m
[ 3873s] [32m[0m
[ 3873s] [32m        it { expect(true).to be true }[0m
[ 3873s] [32m      end[0m
[ 3873s] [32m      """[0m
[ 3874s]     [32mAnd an empty file named "[32m[1mtmp/aruba/garbage.txt[0m[0m[32m"[90m               # lib/aruba/cucumber/file.rb:44[0m[0m
[ 3881s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3881s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3881s]     [32mAnd the [32m[1mfile[0m[0m[32m "[32m[1mtmp/aruba/garbage.txt[0m[0m[32m" should [32m[1mnot [0m[0m[32mexist anymore[90m # lib/aruba/cucumber/file.rb:91[0m[0m
[ 3881s] 
[ 3881s]   Scenario: Fail-safe use if "setup_aruba" is not used[90m    # features/03_testing_frameworks/rspec/setup_aruba_for_rspec.feature:149[0m
[ 3881s]     If you forgot to run `setup_aruba` before the first method of aruba is
[ 3881s]     used, you might see an error. Although we did our best to prevent this.
[ 3881s] 
[ 3881s]     Make sure that you run `setup_aruba` before any method of aruba is used. At
[ 3881s]     best before each and every test.
[ 3881s] 
[ 3881s]     This will be not supported anymore from 1.0.0 on.
[ 3881s]     [32mGiven a file named "[32m[1mspec/spec_helper.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3881s] [32m      """[0m
[ 3881s] [32m      require 'aruba/api'[0m
[ 3881s] [32m[0m
[ 3881s] [32m      RSpec.configure do |config|[0m
[ 3881s] [32m        config.include Aruba::Api[0m
[ 3881s] [32m      end[0m
[ 3881s] [32m      """[0m
[ 3881s]     [32mAnd a file named "[32m[1mspec/getting_started_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3881s] [32m      """[0m
[ 3881s] [32m      require 'spec_helper'[0m
[ 3881s] [32m[0m
[ 3881s] [32m      RSpec.describe 'Custom Integration of aruba' do[0m
[ 3881s] [32m        let(:file) { 'file.txt' }[0m
[ 3881s] [32m[0m
[ 3881s] [32m        it { expect { write_file file, 'Hello World' }.not_to raise_error }[0m
[ 3881s] [32m        it { expect(aruba.current_directory.directory?).to be true }[0m
[ 3881s] [32m      end[0m
[ 3881s] [32m      """[0m
[ 3888s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3888s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3888s] 
[ 3888s] Feature: Find a started command
[ 3888s]   This feature is experimental and may change without further notice.
[ 3888s] 
[ 3888s]   Background: [90m                            # features/04_aruba_api/command/find_a_started_command.feature:5[0m
[ 3888s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3888s] 
[ 3888s]   Scenario: Existing command[90m                    # features/04_aruba_api/command/find_a_started_command.feature:8[0m
[ 3888s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3888s] [32m      """[0m
[ 3888s] [32m      require 'spec_helper'[0m
[ 3888s] [32m[0m
[ 3888s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3888s] [32m        before(:each) { run_command('echo hello') }[0m
[ 3888s] [32m        let(:command) { find_command('echo hello') }[0m
[ 3888s] [32m[0m
[ 3888s] [32m        before(:each) { stop_all_commands }[0m
[ 3888s] [32m[0m
[ 3888s] [32m        it { expect(command).to be_successfully_executed }[0m
[ 3888s] [32m        it { expect(command.commandline).to eq 'echo hello' }[0m
[ 3888s] [32m      end[0m
[ 3888s] [32m      """[0m
[ 3897s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3897s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3897s] 
[ 3898s]   Scenario: Non-Existing command[90m                # features/04_aruba_api/command/find_a_started_command.feature:26[0m
[ 3898s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3898s] [32m      """[0m
[ 3898s] [32m      require 'spec_helper'[0m
[ 3898s] [32m[0m
[ 3898s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3898s] [32m        let(:command) { find_command('echo hello') }[0m
[ 3898s] [32m[0m
[ 3898s] [32m        it { expect{ command }.to raise_error Aruba::CommandNotFoundError }[0m
[ 3898s] [32m        it { expect{ command.commandline }.to raise_error Aruba::CommandNotFoundError }[0m
[ 3898s] [32m      end[0m
[ 3898s] [32m      """[0m
[ 3905s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3905s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3905s] 
[ 3905s]   Scenario: Multiple commands[90m                   # features/04_aruba_api/command/find_a_started_command.feature:41[0m
[ 3905s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3905s] [32m      """[0m
[ 3905s] [32m      require 'spec_helper'[0m
[ 3905s] [32m[0m
[ 3905s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3905s] [32m        before(:each) { run_command('echo hello1') }[0m
[ 3905s] [32m        before(:each) { run_command('echo hello2') }[0m
[ 3905s] [32m        let(:command) { find_command('echo hello1') }[0m
[ 3905s] [32m[0m
[ 3905s] [32m        before(:each) { stop_all_commands }[0m
[ 3905s] [32m[0m
[ 3905s] [32m        it { expect(command).to be_successfully_executed }[0m
[ 3905s] [32m        it { expect(command.commandline).to eq 'echo hello1' }[0m
[ 3905s] [32m      end[0m
[ 3905s] [32m      """[0m
[ 3913s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3913s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3913s] 
[ 3913s]   Scenario: Multiple commands with same commandline[90m # features/04_aruba_api/command/find_a_started_command.feature:60[0m
[ 3913s]     If searches in reverse. So it finds the last command started with the given commandline.
[ 3913s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3913s] [32m      """[0m
[ 3913s] [32m      require 'spec_helper'[0m
[ 3913s] [32m[0m
[ 3913s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3913s] [32m        before(:each) { set_environment_variable 'ENV_VAR', '1' }[0m
[ 3913s] [32m        before(:each) { run_command('bash -c "echo -n $ENV_VAR"') }[0m
[ 3913s] [32m        before(:each) { set_environment_variable 'ENV_VAR', '2' }[0m
[ 3913s] [32m        before(:each) { run_command('bash -c "echo -n $ENV_VAR"') }[0m
[ 3913s] [32m[0m
[ 3913s] [32m        let(:command) { find_command('bash -c "echo -n $ENV_VAR"') }[0m
[ 3913s] [32m[0m
[ 3913s] [32m        before(:each) { stop_all_commands }[0m
[ 3913s] [32m[0m
[ 3913s] [32m        it { expect(command).to be_successfully_executed }[0m
[ 3913s] [32m        it { expect(command.stdout).to eq '2' }[0m
[ 3913s] [32m      end[0m
[ 3913s] [32m      """[0m
[ 3922s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3922s]     [32mThen the specs should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3922s] 
[ 3922s] Feature: Get path to command
[ 3922s]   Sometimes you only know a commands name, but not where to find it. Here comes
[ 3922s]   `which` to the rescue.
[ 3922s] 
[ 3922s]   Background: [90m                            # features/04_aruba_api/command/find_command_in_PATH.feature:6[0m
[ 3922s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3922s] 
[ 3922s]   Scenario: Existing executable[90m                          # features/04_aruba_api/command/find_command_in_PATH.feature:9[0m
[ 3923s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3923s] [32m      """[0m
[ 3923s] [32m      #!/bin/bash[0m
[ 3923s] [32m      exit 0[0m
[ 3923s] [32m      """[0m
[ 3923s]     [32mAnd a file named "[32m[1mspec/which_spec.rb[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3923s] [32m      """[0m
[ 3923s] [32m      require 'spec_helper'[0m
[ 3923s] [32m[0m
[ 3923s] [32m      RSpec.describe 'Find path for command', :type => :aruba do[0m
[ 3923s] [32m        it { expect(which('aruba-test-cli')).to match %r{tmp/aruba/cli-app/bin/aruba-test-cli} }[0m
[ 3923s] [32m      end[0m
[ 3923s] [32m      """[0m
[ 3930s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3930s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3930s] 
[ 3930s]   Scenario: Non-existing executable[90m                        # features/04_aruba_api/command/find_command_in_PATH.feature:26[0m
[ 3930s]     [32mGiven a file named "[32m[1mbin/aruba-test-cli[0m[0m[32m" does not exist[90m # lib/aruba/cucumber/file.rb:73[0m[0m
[ 3930s]     [32mAnd a file named "[32m[1mspec/which_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3930s] [32m      """[0m
[ 3930s] [32m      require 'spec_helper'[0m
[ 3930s] [32m[0m
[ 3930s] [32m      RSpec.describe 'Find path for command', :type => :aruba do[0m
[ 3930s] [32m        it { expect(which('aruba-test-cli')).to be_nil }[0m
[ 3930s] [32m      end[0m
[ 3930s] [32m      """[0m
[ 3938s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3938s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3938s] 
[ 3939s] Feature: Access STDERR of command
[ 3939s]   You may need to `#stop_all_commands` before accessing `#stderr` of a single
[ 3939s]   command - e.g. `#last_command_started`.
[ 3939s] 
[ 3939s]   Background: [90m                                           # features/04_aruba_api/command/read_stderr_of_command.feature:6[0m
[ 3939s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m                # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3939s]     [32mAnd the default aruba io wait timeout is [32m[1m0.1[0m[0m[32m seconds[90m # lib/aruba/cucumber/command.rb:363[0m[0m
[ 3939s] 
[ 3939s]   Scenario: Existing executable[90m                          # features/04_aruba_api/command/read_stderr_of_command.feature:10[0m
[ 3939s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3939s] [32m      """[0m
[ 3939s] [32m      #!/bin/bash[0m
[ 3939s] [32m      echo 'Hello, Aruba!' >&2[0m
[ 3939s] [32m      """[0m
[ 3939s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3939s] [32m      """[0m
[ 3939s] [32m      require 'spec_helper'[0m
[ 3939s] [32m[0m
[ 3939s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3939s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 3939s] [32m        before(:each) { stop_all_commands }[0m
[ 3939s] [32m        it { expect(last_command_started.stderr).to start_with  'Hello' }[0m
[ 3939s] [32m      end[0m
[ 3939s] [32m      """[0m
[ 3947s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3947s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3947s] 
[ 3947s]   Scenario: Waiting for output to appear[90m                 # features/04_aruba_api/command/read_stderr_of_command.feature:29[0m
[ 3947s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3947s] [32m      """[0m
[ 3947s] [32m      #!/bin/bash[0m
[ 3947s] [32m      sleep 0.1[0m
[ 3947s] [32m      echo 'Hello, Aruba' >&2[0m
[ 3947s] [32m      """[0m
[ 3947s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3947s] [32m      """[0m
[ 3947s] [32m      require 'spec_helper'[0m
[ 3947s] [32m[0m
[ 3947s] [32m      RSpec.describe 'Run command', :type => :aruba, :io_wait_timeout => 0.2 do[0m
[ 3947s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 3947s] [32m        it { expect(last_command_started.stderr).to start_with 'Hello' }[0m
[ 3947s] [32m      end[0m
[ 3947s] [32m      """[0m
[ 3954s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3954s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3954s] 
[ 3954s] Feature: Access STDOUT of command
[ 3954s]   You may need to `#stop_all_commands` before accessing `#stdout` of a single
[ 3954s]   command - e.g. `#last_command_started`.
[ 3954s] 
[ 3955s]   Background: [90m                                         # features/04_aruba_api/command/read_stdout_of_command.feature:6[0m
[ 3955s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m              # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3955s]     [32mAnd the default aruba io wait timeout is [32m[1m1[0m[0m[32m seconds[90m # lib/aruba/cucumber/command.rb:363[0m[0m
[ 3955s] 
[ 3955s]   Scenario: Existing executable[90m                          # features/04_aruba_api/command/read_stdout_of_command.feature:10[0m
[ 3955s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3955s] [32m      """[0m
[ 3955s] [32m      #!/bin/bash[0m
[ 3955s] [32m      echo 'Hello, Aruba!'[0m
[ 3955s] [32m      """[0m
[ 3955s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3955s] [32m      """[0m
[ 3955s] [32m      require 'spec_helper'[0m
[ 3955s] [32m[0m
[ 3955s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3955s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 3955s] [32m        before(:each) { stop_all_commands }[0m
[ 3955s] [32m        it { expect(last_command_started.stdout).to start_with  'Hello' }[0m
[ 3955s] [32m      end[0m
[ 3955s] [32m      """[0m
[ 3962s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3962s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3962s] 
[ 3963s]   Scenario: Waiting for output to appear[90m                 # features/04_aruba_api/command/read_stdout_of_command.feature:29[0m
[ 3963s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3963s] [32m      """[0m
[ 3963s] [32m      #!/bin/bash[0m
[ 3963s] [32m      sleep 0.1[0m
[ 3963s] [32m      echo 'Hello, Aruba'[0m
[ 3963s] [32m      """[0m
[ 3963s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3963s] [32m      """[0m
[ 3963s] [32m      require 'spec_helper'[0m
[ 3963s] [32m[0m
[ 3963s] [32m      RSpec.describe 'Run command', :type => :aruba, :io_wait_timeout => 0.2 do[0m
[ 3963s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 3963s] [32m        it { expect(last_command_started.stdout).to start_with 'Hello' }[0m
[ 3963s] [32m      end[0m
[ 3963s] [32m      """[0m
[ 3971s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3971s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3971s] 
[ 3971s] Feature: Run command
[ 3971s]   To run a command use the `#run_command` method. There are some configuration options
[ 3971s]   which are relevant here:
[ 3971s] 
[ 3971s]   - `startup_wait_time`:
[ 3971s] 
[ 3971s]     Given this option `aruba` waits n seconds after it started the command.
[ 3971s]     This is most useful when using `#run_command()` and not really makes sense for
[ 3971s]     `#run_command_and_stop()`.
[ 3971s] 
[ 3971s]     You can use `#run_command()` + `startup_wait_time` to start background jobs.
[ 3971s] 
[ 3971s]   - `exit_timeout`:
[ 3971s] 
[ 3971s]     The exit timeout is used, when `aruba` waits for a command to finished.
[ 3971s] 
[ 3971s]   - `io_wait_timeout`:
[ 3971s] 
[ 3971s]     The io wait timeout is used, when you access `stdout` or `stderr` of a
[ 3971s]     command.
[ 3971s] 
[ 3971s]   Background: [90m                            # features/04_aruba_api/command/run_command.feature:23[0m
[ 3971s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 3971s] 
[ 3971s]   Scenario: Existing executable[90m                          # features/04_aruba_api/command/run_command.feature:26[0m
[ 3971s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3971s] [32m      """[0m
[ 3971s] [32m      #!/bin/bash[0m
[ 3971s] [32m      exit 0[0m
[ 3971s] [32m      """[0m
[ 3971s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3971s] [32m      """[0m
[ 3971s] [32m      require 'spec_helper'[0m
[ 3971s] [32m[0m
[ 3971s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3971s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 3971s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 3971s] [32m      end[0m
[ 3971s] [32m      """[0m
[ 3978s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3978s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3978s] 
[ 3979s]   Scenario: Relative path to executable[90m                  # features/04_aruba_api/command/run_command.feature:44[0m
[ 3979s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3979s] [32m      """[0m
[ 3979s] [32m      #!/bin/bash[0m
[ 3979s] [32m      exit 0[0m
[ 3979s] [32m      """[0m
[ 3979s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3979s] [32m      """[0m
[ 3979s] [32m      require 'spec_helper'[0m
[ 3979s] [32m[0m
[ 3979s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 3979s] [32m        before(:each) { run_command('bin/aruba-test-cli') }[0m
[ 3979s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 3979s] [32m      end[0m
[ 3979s] [32m      """[0m
[ 3987s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3987s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3987s] 
[ 3987s]   Scenario: Non-existing executable[90m                        # features/04_aruba_api/command/run_command.feature:62[0m
[ 3987s]     [32mGiven a file named "[32m[1mbin/aruba-test-cli[0m[0m[32m" does not exist[90m # lib/aruba/cucumber/file.rb:73[0m[0m
[ 3987s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m              # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3987s] [32m      """[0m
[ 3987s] [32m      require 'spec_helper'[0m
[ 3987s] [32m[0m
[ 3987s] [32m      RSpec.describe 'Find path for command', :type => :aruba do[0m
[ 3987s] [32m        it { expect { run_command('aruba-test-cli') }.to raise_error Aruba::LaunchError, /Command "aruba-test-cli" not found in PATH-variable/ }[0m
[ 3987s] [32m      end[0m
[ 3987s] [32m      """[0m
[ 3994s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 3994s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 3994s] 
[ 3995s]   Scenario: Command with long startup phase[90m              # features/04_aruba_api/command/run_command.feature:75[0m
[ 3995s]     If you have got a command with a long startup phase or use `ruby` together
[ 3995s]     with `bundler`, you should consider using the `startup_wait_time`-option.
[ 3995s]     Otherwise methods like `#send_signal` don't work since they require the
[ 3995s]     command to be running and have setup it's signal handler.
[ 3995s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 3995s] [32m      """[0m
[ 3995s] [32m      #!/usr/bin/env bash[0m
[ 3995s] [32m[0m
[ 3995s] [32m      function initialize_script {[0m
[ 3995s] [32m        sleep 0.2[0m
[ 3995s] [32m      }[0m
[ 3995s] [32m[0m
[ 3995s] [32m      function do_some_work {[0m
[ 3995s] [32m        echo "Hello, Aruba is working"[0m
[ 3995s] [32m      }[0m
[ 3995s] [32m[0m
[ 3995s] [32m      function recurring_work {[0m
[ 3995s] [32m        echo "Hello, Aruba here"[0m
[ 3995s] [32m      }[0m
[ 3995s] [32m[0m
[ 3995s] [32m      function stop_script {[0m
[ 3995s] [32m        exit 0[0m
[ 3995s] [32m      }[0m
[ 3995s] [32m[0m
[ 3995s] [32m      trap recurring_work HUP[0m
[ 3995s] [32m      trap stop_script TERM[0m
[ 3995s] [32m[0m
[ 3995s] [32m      initialize_script[0m
[ 3995s] [32m      do_some_work[0m
[ 3995s] [32m[0m
[ 3995s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 3995s] [32m      """[0m
[ 3995s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 3995s] [32m      """[0m
[ 3995s] [32m      require 'spec_helper'[0m
[ 3995s] [32m[0m
[ 3995s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.1, :startup_wait_time => 0.2 do[0m
[ 3995s] [32m        before do[0m
[ 3995s] [32m          run_command('aruba-test-cli')[0m
[ 3995s] [32m          last_command_started.send_signal 'HUP'[0m
[ 3995s] [32m        end[0m
[ 3995s] [32m[0m
[ 3995s] [32m        it 'runs the command with the expected results' do[0m
[ 3995s] [32m          aggregate_failures do[0m
[ 3995s] [32m            expect(last_command_started).to be_successfully_executed[0m
[ 3995s] [32m            expect(last_command_started).to have_output /Hello, Aruba is working/[0m
[ 3995s] [32m            expect(last_command_started).to have_output /Hello, Aruba here/[0m
[ 3995s] [32m          end[0m
[ 3995s] [32m        end[0m
[ 3995s] [32m      end[0m
[ 3995s] [32m      """[0m
[ 4004s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4004s]     [31mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4004s] [31m      expected "\nRun command\n  runs the command with the expected results (FAILED - 1)\n\nFailures:\n\n  1) Run co... examples:\n\nrspec ./spec/run_spec.rb:9 # Run command runs the command with the expected results\n" to string includes: "0 failures"[0m
[ 4004s] [31m      Diff:[0m
[ 4004s] [31m      @@ -1,2 +1,27 @@[0m
[ 4004s] [31m      -0 failures[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +Run command[0m
[ 4004s] [31m      +  runs the command with the expected results (FAILED - 1)[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +Failures:[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +  1) Run command runs the command with the expected results[0m
[ 4004s] [31m      +     Failure/Error: expect(last_command_started).to have_output /Hello, Aruba is working/[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +       expected "Hello, Aruba here[0m
[ 4004s] [31m      +Terminated" to have output: /Hello, Aruba is working/[0m
[ 4004s] [31m      +       Diff:[0m
[ 4004s] [31m      +       @@ -1,2 +1,3 @@[0m
[ 4004s] [31m      +       -/Hello, Aruba is working/[0m
[ 4004s] [31m      +       +Hello, Aruba here[0m
[ 4004s] [31m      +       +Terminated[0m
[ 4004s] [31m      +     # ./spec/run_spec.rb:12:in `block (3 levels) in <top (required)>'[0m
[ 4004s] [31m      +     # ./spec/run_spec.rb:10:in `block (2 levels) in <top (required)>'[0m
[ 4004s] [31m      +     # /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/rspec.rb:22:in `block (2 levels) in <top (required)>'[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +Finished in 1.04 seconds (files took 4.65 seconds to load)[0m
[ 4004s] [31m      +1 example, 1 failure[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +Failed examples:[0m
[ 4004s] [31m      +[0m
[ 4004s] [31m      +rspec ./spec/run_spec.rb:9 # Run command runs the command with the expected results[0m
[ 4004s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 4004s] [31m      ./lib/aruba/cucumber/command.rb:158:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 4004s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:42:in `/^the spec(?:s)? should( not)?(?: all)? pass(?: with (\d+) failures?)?$/'[0m
[ 4004s] [31m      features/04_aruba_api/command/run_command.feature:130:in `Then the specs should all pass'[0m
[ 4004s] 
[ 4004s]   Scenario: Long running command[90m                         # features/04_aruba_api/command/run_command.feature:132[0m
[ 4004s]     If you have got a "long running" command, you should consider using the
[ 4004s]     `exit_timeout`-option.
[ 4004s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4004s] [32m      """[0m
[ 4004s] [32m      #!/usr/bin/env bash[0m
[ 4004s] [32m[0m
[ 4004s] [32m      function do_some_work {[0m
[ 4004s] [32m        sleep 0.2[0m
[ 4004s] [32m        echo "Hello, Aruba here"[0m
[ 4004s] [32m      }[0m
[ 4004s] [32m[0m
[ 4004s] [32m      do_some_work[0m
[ 4004s] [32m      """[0m
[ 4004s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4004s] [32m      """[0m
[ 4004s] [32m      require 'spec_helper'[0m
[ 4004s] [32m[0m
[ 4004s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.3 do[0m
[ 4004s] [32m        before { run_command('aruba-test-cli') }[0m
[ 4004s] [32m[0m
[ 4004s] [32m        it 'runs the command with the expected results' do[0m
[ 4004s] [32m          aggregate_failures do[0m
[ 4004s] [32m            expect(last_command_started).to be_successfully_executed[0m
[ 4004s] [32m            expect(last_command_started).to have_output /Hello, Aruba here/[0m
[ 4004s] [32m          end[0m
[ 4004s] [32m        end[0m
[ 4004s] [32m      end[0m
[ 4004s] [32m      """[0m
[ 4013s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4013s]     [31mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4013s] [31m      expected "\nRun command\n  runs the command with the expected results (FAILED - 1)\n\nFailures:\n\n  1) Run co... examples:\n\nrspec ./spec/run_spec.rb:6 # Run command runs the command with the expected results\n" to string includes: "0 failures"[0m
[ 4013s] [31m      Diff:[0m
[ 4013s] [31m      @@ -1,2 +1,31 @@[0m
[ 4013s] [31m      -0 failures[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +Run command[0m
[ 4013s] [31m      +  runs the command with the expected results (FAILED - 1)[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +Failures:[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +  1) Run command runs the command with the expected results[0m
[ 4013s] [31m      +     Got 2 failures from failure aggregation block.[0m
[ 4013s] [31m      +     # ./spec/run_spec.rb:7:in `block (2 levels) in <top (required)>'[0m
[ 4013s] [31m      +     # /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/rspec.rb:22:in `block (2 levels) in <top (required)>'[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +     1.1) Failure/Error: expect(last_command_started).to be_successfully_executed[0m
[ 4013s] [31m      +            expected "aruba-test-cli" to be successfully executed[0m
[ 4013s] [31m      +          # ./spec/run_spec.rb:8:in `block (3 levels) in <top (required)>'[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +     1.2) Failure/Error: expect(last_command_started).to have_output /Hello, Aruba here/[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +            expected "" to have output: /Hello, Aruba here/[0m
[ 4013s] [31m      +            Diff:[0m
[ 4013s] [31m      +            @@ -1,2 +1,2 @@[0m
[ 4013s] [31m      +            -/Hello, Aruba here/[0m
[ 4013s] [31m      +            +""[0m
[ 4013s] [31m      +          # ./spec/run_spec.rb:9:in `block (3 levels) in <top (required)>'[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +Finished in 0.99196 seconds (files took 4.15 seconds to load)[0m
[ 4013s] [31m      +1 example, 1 failure[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +Failed examples:[0m
[ 4013s] [31m      +[0m
[ 4013s] [31m      +rspec ./spec/run_spec.rb:6 # Run command runs the command with the expected results[0m
[ 4013s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 4013s] [31m      ./lib/aruba/cucumber/command.rb:158:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 4013s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:42:in `/^the spec(?:s)? should( not)?(?: all)? pass(?: with (\d+) failures?)?$/'[0m
[ 4013s] [31m      features/04_aruba_api/command/run_command.feature:164:in `Then the specs should all pass'[0m
[ 4013s] 
[ 4013s]   Scenario: Mixing commands with long and short startup phase (deprecated)[90m # features/04_aruba_api/command/run_command.feature:166[0m
[ 4013s]     If you commands with a long and short startup phases, you should consider
[ 4013s]     using the `startup_wait_time`-option local to the `#run_command`-call.
[ 4013s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4013s] [32m      """[0m
[ 4013s] [32m      #!/usr/bin/env bash[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function initialize_script {[0m
[ 4013s] [32m        sleep 2[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function do_some_work {[0m
[ 4013s] [32m        echo "Hello, Aruba is working"[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function recurring_work {[0m
[ 4013s] [32m        echo "Hello, Aruba here"[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function stop_script {[0m
[ 4013s] [32m        exit 0[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      trap recurring_work HUP[0m
[ 4013s] [32m      trap stop_script TERM[0m
[ 4013s] [32m[0m
[ 4013s] [32m      initialize_script[0m
[ 4013s] [32m      do_some_work[0m
[ 4013s] [32m[0m
[ 4013s] [32m      while [ true ]; do sleep 0.2; done[0m
[ 4013s] [32m      """[0m
[ 4013s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m                    # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4013s] [32m      """[0m
[ 4013s] [32m      #!/usr/bin/env bash[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function initialize_script {[0m
[ 4013s] [32m        sleep 0[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function do_some_work {[0m
[ 4013s] [32m        echo "Hello, Aruba is working"[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function recurring_work {[0m
[ 4013s] [32m        echo "Hello, Aruba here"[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      function stop_script {[0m
[ 4013s] [32m        exit 0[0m
[ 4013s] [32m      }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      trap recurring_work HUP[0m
[ 4013s] [32m      trap stop_script TERM[0m
[ 4013s] [32m[0m
[ 4013s] [32m      initialize_script[0m
[ 4013s] [32m      do_some_work[0m
[ 4013s] [32m[0m
[ 4013s] [32m      while [ true ]; do sleep 0.2; done[0m
[ 4013s] [32m      """[0m
[ 4013s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                              # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4013s] [32m      """[0m
[ 4013s] [32m      require 'spec_helper'[0m
[ 4013s] [32m[0m
[ 4013s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 1 do[0m
[ 4013s] [32m        before(:each) { run_command('aruba-test-cli1', 3, 0.1, 'TERM', 2) }[0m
[ 4013s] [32m        before(:each) { run_command('aruba-test-cli2', 3, 0.1, 'TERM', 1) }[0m
[ 4013s] [32m        before(:each) { last_command_started.send_signal 'HUP' }[0m
[ 4013s] [32m[0m
[ 4013s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4013s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba is working/ }[0m
[ 4013s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba here/ }[0m
[ 4013s] [32m[0m
[ 4013s] [32m      end[0m
[ 4013s] [32m      """[0m
[ 4049s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4049s]     [32mThen the specs should all pass[90m                                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4049s] 
[ 4050s]   Scenario: Mixing commands with long and short startup phase[90m # features/04_aruba_api/command/run_command.feature:245[0m
[ 4050s]     If you commands with a long and short startup phases, you should consider
[ 4050s]     using the `startup_wait_time`-option local to the `#run_command`-call.
[ 4050s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4050s] [32m      """[0m
[ 4050s] [32m      #!/usr/bin/env bash[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function initialize_script {[0m
[ 4050s] [32m        sleep 2[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function do_some_work {[0m
[ 4050s] [32m        echo "Hello, Aruba is working"[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function recurring_work {[0m
[ 4050s] [32m        echo "Hello, Aruba here"[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function stop_script {[0m
[ 4050s] [32m        exit 0[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      trap recurring_work HUP[0m
[ 4050s] [32m      trap stop_script TERM[0m
[ 4050s] [32m[0m
[ 4050s] [32m      initialize_script[0m
[ 4050s] [32m      do_some_work[0m
[ 4050s] [32m[0m
[ 4050s] [32m      while [ true ]; do sleep 0.2; done[0m
[ 4050s] [32m      """[0m
[ 4050s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4050s] [32m      """[0m
[ 4050s] [32m      #!/usr/bin/env bash[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function initialize_script {[0m
[ 4050s] [32m        sleep 0[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function do_some_work {[0m
[ 4050s] [32m        echo "Hello, Aruba is working"[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function recurring_work {[0m
[ 4050s] [32m        echo "Hello, Aruba here"[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      function stop_script {[0m
[ 4050s] [32m        exit 0[0m
[ 4050s] [32m      }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      trap recurring_work HUP[0m
[ 4050s] [32m      trap stop_script TERM[0m
[ 4050s] [32m[0m
[ 4050s] [32m      initialize_script[0m
[ 4050s] [32m      do_some_work[0m
[ 4050s] [32m[0m
[ 4050s] [32m      while [ true ]; do sleep 0.2; done[0m
[ 4050s] [32m      """[0m
[ 4050s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                 # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4050s] [32m      """[0m
[ 4050s] [32m      require 'spec_helper'[0m
[ 4050s] [32m[0m
[ 4050s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 1 do[0m
[ 4050s] [32m        before(:each) { run_command('aruba-test-cli1', :startup_wait_time => 2) }[0m
[ 4050s] [32m        before(:each) { run_command('aruba-test-cli2', :startup_wait_time => 1) }[0m
[ 4050s] [32m        before(:each) { last_command_started.send_signal 'HUP' }[0m
[ 4050s] [32m[0m
[ 4050s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4050s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba is working/ }[0m
[ 4050s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba here/ }[0m
[ 4050s] [32m[0m
[ 4050s] [32m      end[0m
[ 4050s] [32m      """[0m
[ 4075s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4075s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4075s] 
[ 4076s]   Scenario: Mixing long and short running commands (deprecated)[90m # features/04_aruba_api/command/run_command.feature:324[0m
[ 4076s]     If need to mix "long running" and "short running" commands, you should consider using the
[ 4076s]     `exit_timeout`-option local to the `#run_command`-method.
[ 4076s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4076s] [32m      """[0m
[ 4076s] [32m      #!/usr/bin/env bash[0m
[ 4076s] [32m[0m
[ 4076s] [32m      function do_some_work {[0m
[ 4076s] [32m        sleep 2[0m
[ 4076s] [32m        echo "Hello, Aruba here"[0m
[ 4076s] [32m      }[0m
[ 4076s] [32m[0m
[ 4076s] [32m      do_some_work[0m
[ 4076s] [32m      """[0m
[ 4076s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4076s] [32m      """[0m
[ 4076s] [32m      #!/usr/bin/env bash[0m
[ 4076s] [32m[0m
[ 4076s] [32m      function do_some_work {[0m
[ 4076s] [32m        echo "Hello, Aruba here"[0m
[ 4076s] [32m      }[0m
[ 4076s] [32m[0m
[ 4076s] [32m      do_some_work[0m
[ 4076s] [32m      """[0m
[ 4076s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4076s] [32m      """[0m
[ 4076s] [32m      require 'spec_helper'[0m
[ 4076s] [32m[0m
[ 4076s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4076s] [32m        before(:each) { run_command('aruba-test-cli1', 3) }[0m
[ 4076s] [32m        before(:each) { run_command('aruba-test-cli2', 1) }[0m
[ 4076s] [32m[0m
[ 4076s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4076s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba here/ }[0m
[ 4076s] [32m      end[0m
[ 4076s] [32m      """[0m
[ 4089s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4089s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4089s] 
[ 4089s]   Scenario: Mixing long and short running commands[90m        # features/04_aruba_api/command/run_command.feature:365[0m
[ 4089s]     If need to mix "long running" and "short running" commands, you should consider using the
[ 4089s]     `exit_timeout`-option local to the `#run_command`-method.
[ 4089s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli1[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4089s] [32m      """[0m
[ 4089s] [32m      #!/usr/bin/env bash[0m
[ 4089s] [32m[0m
[ 4089s] [32m      function do_some_work {[0m
[ 4089s] [32m        sleep 2[0m
[ 4089s] [32m        echo "Hello, Aruba here"[0m
[ 4089s] [32m      }[0m
[ 4089s] [32m[0m
[ 4089s] [32m      do_some_work[0m
[ 4089s] [32m      """[0m
[ 4089s]     [32mAnd an executable named "[32m[1mbin/aruba-test-cli2[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4089s] [32m      """[0m
[ 4089s] [32m      #!/usr/bin/env bash[0m
[ 4089s] [32m[0m
[ 4089s] [32m      function do_some_work {[0m
[ 4089s] [32m        echo "Hello, Aruba here"[0m
[ 4089s] [32m      }[0m
[ 4089s] [32m[0m
[ 4089s] [32m      do_some_work[0m
[ 4089s] [32m      """[0m
[ 4089s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4089s] [32m      """[0m
[ 4089s] [32m      require 'spec_helper'[0m
[ 4089s] [32m[0m
[ 4089s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4089s] [32m        before(:each) { run_command('aruba-test-cli1', :exit_timeout => 3) }[0m
[ 4089s] [32m        before(:each) { run_command('aruba-test-cli2', :exit_timeout => 1) }[0m
[ 4089s] [32m[0m
[ 4089s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4089s] [32m        it { expect(last_command_started).to have_output /Hello, Aruba here/ }[0m
[ 4089s] [32m      end[0m
[ 4089s] [32m      """[0m
[ 4102s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4102s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4102s] 
[ 4103s]   Scenario: Starting command twice fails[90m                 # features/04_aruba_api/command/run_command.feature:406[0m
[ 4103s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4103s] [32m      """[0m
[ 4103s] [32m      #!/bin/bash[0m
[ 4103s] [32m      exit 0[0m
[ 4103s] [32m      """[0m
[ 4103s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4103s] [32m      """[0m
[ 4103s] [32m      require 'spec_helper'[0m
[ 4103s] [32m[0m
[ 4103s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4103s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4103s] [32m        let!(:found_command) { find_command('aruba-test-cli') }[0m
[ 4103s] [32m        it { expect { found_command.start }.to raise_error Aruba::CommandAlreadyStartedError }[0m
[ 4103s] [32m      end[0m
[ 4103s] [32m      """[0m
[ 4111s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4111s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4111s] 
[ 4111s] Feature: Run command in a simpler fashion
[ 4111s]   To run a command use the `#run_command_and_stop`-method. There are some configuration options
[ 4111s]   which are relevant here:
[ 4111s] 
[ 4111s]   - `fail_on_error`:
[ 4111s] 
[ 4111s]     Given this option is `true`, `aruba` fails if the `command` fails to run - exit code <> 0.
[ 4111s] 
[ 4111s]     For all other options see [run.feature](run.feature).
[ 4111s] 
[ 4111s]   Background: [90m                            # features/04_aruba_api/command/run_simple.feature:12[0m
[ 4111s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4111s] 
[ 4111s]   Scenario: Require executable to succeed (by default value)[90m # features/04_aruba_api/command/run_simple.feature:15[0m
[ 4111s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4111s] [32m      """[0m
[ 4111s] [32m      #!/bin/bash[0m
[ 4111s] [32m      exit 1[0m
[ 4111s] [32m      """[0m
[ 4111s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4111s] [32m      """[0m
[ 4111s] [32m      require 'spec_helper'[0m
[ 4111s] [32m[0m
[ 4111s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4111s] [32m        it { expect { run_command_and_stop('aruba-test-cli') }.to raise_error RSpec::Expectations::ExpectationNotMetError }[0m
[ 4111s] [32m      end[0m
[ 4111s] [32m      """[0m
[ 4119s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4119s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4119s] 
[ 4120s]   Scenario: Require executable to succeed (set by option)[90m # features/04_aruba_api/command/run_simple.feature:32[0m
[ 4120s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4120s] [32m      """[0m
[ 4120s] [32m      #!/bin/bash[0m
[ 4120s] [32m      exit 1[0m
[ 4120s] [32m      """[0m
[ 4120s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4120s] [32m      """[0m
[ 4120s] [32m      require 'spec_helper'[0m
[ 4120s] [32m[0m
[ 4120s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4120s] [32m        it { expect { run_command_and_stop('aruba-test-cli', :fail_on_error => true) }.to raise_error }[0m
[ 4120s] [32m      end[0m
[ 4120s] [32m      """[0m
[ 4128s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4128s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4128s] 
[ 4128s]   Scenario: Require executable to succeed (set by option, deprecated)[90m # features/04_aruba_api/command/run_simple.feature:49[0m
[ 4128s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m              # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4128s] [32m      """[0m
[ 4128s] [32m      #!/bin/bash[0m
[ 4128s] [32m      exit 1[0m
[ 4128s] [32m      """[0m
[ 4128s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4128s] [32m      """[0m
[ 4128s] [32m      require 'spec_helper'[0m
[ 4128s] [32m[0m
[ 4128s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4128s] [32m        it { expect { run_command_and_stop('aruba-test-cli', true) }.to raise_error }[0m
[ 4128s] [32m      end[0m
[ 4128s] [32m      """[0m
[ 4136s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4136s]     [32mThen the specs should all pass[90m                                    # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4136s] 
[ 4136s]   Scenario: Ignore failure of executable (set by option)[90m # features/04_aruba_api/command/run_simple.feature:66[0m
[ 4136s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4136s] [32m      """[0m
[ 4136s] [32m      #!/bin/bash[0m
[ 4136s] [32m      exit 1[0m
[ 4136s] [32m      """[0m
[ 4136s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4136s] [32m      """[0m
[ 4136s] [32m      require 'spec_helper'[0m
[ 4136s] [32m[0m
[ 4136s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4136s] [32m        it { expect { run_command_and_stop('aruba-test-cli', :fail_on_error => false) }.not_to raise_error }[0m
[ 4136s] [32m      end[0m
[ 4136s] [32m      """[0m
[ 4145s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4145s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4145s] 
[ 4145s]   Scenario: Ignore failure of executable (set by option, deprecated)[90m # features/04_aruba_api/command/run_simple.feature:83[0m
[ 4145s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4145s] [32m      """[0m
[ 4145s] [32m      #!/bin/bash[0m
[ 4145s] [32m      exit 1[0m
[ 4145s] [32m      """[0m
[ 4145s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4145s] [32m      """[0m
[ 4145s] [32m      require 'spec_helper'[0m
[ 4145s] [32m[0m
[ 4145s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4145s] [32m        it { expect { run_command_and_stop('aruba-test-cli', false) }.not_to raise_error }[0m
[ 4145s] [32m      end[0m
[ 4145s] [32m      """[0m
[ 4152s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                               # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4152s]     [32mThen the specs should all pass[90m                                   # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4152s] 
[ 4153s]   Scenario: Command with long startup phase[90m              # features/04_aruba_api/command/run_simple.feature:100[0m
[ 4153s]     If you have got a command with a long startup phase or use `ruby` together
[ 4153s]     with `bundler`, you should consider using the `startup_wait_time`-option.
[ 4153s]     Otherwise methods like `#send_signal` don't work since they require the
[ 4153s]     command to be running and have setup its signal handler.
[ 4153s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4153s] [32m      """[0m
[ 4153s] [32m      #!/usr/bin/env bash[0m
[ 4153s] [32m[0m
[ 4153s] [32m      function initialize_script {[0m
[ 4153s] [32m        sleep 0.2[0m
[ 4153s] [32m      }[0m
[ 4153s] [32m[0m
[ 4153s] [32m      function do_some_work {[0m
[ 4153s] [32m        echo "Hello, Aruba is working"[0m
[ 4153s] [32m      }[0m
[ 4153s] [32m[0m
[ 4153s] [32m      initialize_script[0m
[ 4153s] [32m      do_some_work[0m
[ 4153s] [32m[0m
[ 4153s] [32m      exit 0[0m
[ 4153s] [32m      """[0m
[ 4153s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4153s] [32m      """[0m
[ 4153s] [32m      require 'spec_helper'[0m
[ 4153s] [32m[0m
[ 4153s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.1, :startup_wait_time => 0.3 do[0m
[ 4153s] [32m        before(:each) { run_command_and_stop('aruba-test-cli') }[0m
[ 4153s] [32m[0m
[ 4153s] [32m        it 'runs the command with the expected results' do[0m
[ 4153s] [32m          aggregate_failures do[0m
[ 4153s] [32m            expect(last_command_started).to be_successfully_executed[0m
[ 4153s] [32m            expect(last_command_started).to have_output /Hello, Aruba is working/[0m
[ 4153s] [32m          end[0m
[ 4153s] [32m        end[0m
[ 4153s] [32m      end[0m
[ 4153s] [32m      """[0m
[ 4160s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4160s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4160s] 
[ 4160s]   Scenario: Long-running command[90m                         # features/04_aruba_api/command/run_simple.feature:142[0m
[ 4160s]     If you have got a long-running command, you should consider using the
[ 4160s]     `exit_timeout`-option.
[ 4160s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4160s] [32m      """[0m
[ 4160s] [32m      #!/usr/bin/env bash[0m
[ 4160s] [32m[0m
[ 4160s] [32m      function do_some_work {[0m
[ 4160s] [32m        sleep 0.2[0m
[ 4160s] [32m        echo "Hello, Aruba here"[0m
[ 4160s] [32m      }[0m
[ 4160s] [32m[0m
[ 4160s] [32m      do_some_work[0m
[ 4160s] [32m      """[0m
[ 4161s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4161s] [32m      """[0m
[ 4161s] [32m      require 'spec_helper'[0m
[ 4161s] [32m[0m
[ 4161s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.3 do[0m
[ 4161s] [32m        before(:each) { run_command_and_stop('aruba-test-cli') }[0m
[ 4161s] [32m[0m
[ 4161s] [32m        it 'runs the command with the expected results' do[0m
[ 4161s] [32m          aggregate_failures do[0m
[ 4161s] [32m            expect(last_command_started).to be_successfully_executed[0m
[ 4161s] [32m            expect(last_command_started).to have_output /Hello, Aruba here/[0m
[ 4161s] [32m          end[0m
[ 4161s] [32m        end[0m
[ 4161s] [32m      end[0m
[ 4161s] [32m      """[0m
[ 4169s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4169s]     [31mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4169s] [31m      expected "\nRun command\n  runs the command with the expected results (FAILED - 1)\n\nFailures:\n\n  1) Run co... examples:\n\nrspec ./spec/run_spec.rb:6 # Run command runs the command with the expected results\n" to string includes: "0 failures"[0m
[ 4169s] [31m      Diff:[0m
[ 4169s] [31m      @@ -1,2 +1,20 @@[0m
[ 4169s] [31m      -0 failures[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +Run command[0m
[ 4169s] [31m      +  runs the command with the expected results (FAILED - 1)[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +Failures:[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +  1) Run command runs the command with the expected results[0m
[ 4169s] [31m      +     Failure/Error: before(:each) { run_command_and_stop('aruba-test-cli') }[0m
[ 4169s] [31m      +       expected "aruba-test-cli" to have finished in time[0m
[ 4169s] [31m      +     # /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/api/commands.rb:306:in `run_command_and_stop'[0m
[ 4169s] [31m      +     # ./spec/run_spec.rb:4:in `block (2 levels) in <top (required)>'[0m
[ 4169s] [31m      +     # /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/rspec.rb:22:in `block (2 levels) in <top (required)>'[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +Finished in 0.95492 seconds (files took 4.12 seconds to load)[0m
[ 4169s] [31m      +1 example, 1 failure[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +Failed examples:[0m
[ 4169s] [31m      +[0m
[ 4169s] [31m      +rspec ./spec/run_spec.rb:6 # Run command runs the command with the expected results[0m
[ 4169s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 4169s] [31m      ./lib/aruba/cucumber/command.rb:158:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 4169s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:42:in `/^the spec(?:s)? should( not)?(?: all)? pass(?: with (\d+) failures?)?$/'[0m
[ 4169s] [31m      features/04_aruba_api/command/run_simple.feature:174:in `Then the specs should all pass'[0m
[ 4169s] 
[ 4169s]   Scenario: Sending signals to commands started with `#run_command_and_stop()`[90m # features/04_aruba_api/command/run_simple.feature:176[0m
[ 4169s]     Sending signals to a command which is started by
[ 4169s]     `#run_command_and_stop()` does not make sense. The command is stopped internally when
[ 4169s]     its exit status is checked.
[ 4169s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m                       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4169s] [32m      """[0m
[ 4169s] [32m      #!/usr/bin/env bash[0m
[ 4169s] [32m[0m
[ 4169s] [32m      function initialize_script {[0m
[ 4169s] [32m        sleep 0.1[0m
[ 4169s] [32m      }[0m
[ 4169s] [32m[0m
[ 4169s] [32m      function cleanup_script {[0m
[ 4169s] [32m        sleep 0.1[0m
[ 4169s] [32m      }[0m
[ 4169s] [32m[0m
[ 4169s] [32m      function do_some_work {[0m
[ 4169s] [32m        echo "Hello, Aruba is working"[0m
[ 4169s] [32m      }[0m
[ 4169s] [32m[0m
[ 4169s] [32m      trap stop_script TERM[0m
[ 4169s] [32m[0m
[ 4169s] [32m      initialize_script[0m
[ 4169s] [32m      do_some_work[0m
[ 4169s] [32m      cleanup_script[0m
[ 4169s] [32m      exit 0[0m
[ 4169s] [32m      """[0m
[ 4169s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4169s] [32m      """[0m
[ 4169s] [32m      require 'spec_helper'[0m
[ 4169s] [32m[0m
[ 4169s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.2, :startup_wait_time => 0.2 do[0m
[ 4169s] [32m        before { run_command_and_stop('aruba-test-cli') }[0m
[ 4169s] [32m[0m
[ 4169s] [32m        it 'refuses to send a signal' do[0m
[ 4169s] [32m          expect { last_command_started.send_signal 'HUP' }.[0m
[ 4169s] [32m            to raise_error Aruba::CommandAlreadyStoppedError[0m
[ 4169s] [32m        end[0m
[ 4169s] [32m      end[0m
[ 4169s] [32m      """[0m
[ 4177s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4177s]     [32mThen the specs should all pass[90m                                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4177s] 
[ 4178s]   Scenario: Activate announcer channels on failure[90m       # features/04_aruba_api/command/run_simple.feature:221[0m
[ 4178s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4178s] [32m      """[0m
[ 4178s] [32m      #!/bin/bash[0m
[ 4178s] [32m      echo "Hello, I'm STDOUT"[0m
[ 4178s] [32m      echo "Hello, I'm STDERR" 1>&2[0m
[ 4178s] [32m      exit 1[0m
[ 4178s] [32m      """[0m
[ 4178s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4178s] [32m      """[0m
[ 4178s] [32m      require 'spec_helper'[0m
[ 4178s] [32m[0m
[ 4178s] [32m      Aruba.configure do |config|[0m
[ 4178s] [32m        config.activate_announcer_on_command_failure = [:stdout, :stderr][0m
[ 4178s] [32m      end[0m
[ 4178s] [32m[0m
[ 4178s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4178s] [32m        it { expect { run_command_and_stop('aruba-test-cli', :fail_on_error => true) }.to_not raise_error }[0m
[ 4178s] [32m      end[0m
[ 4178s] [32m      """[0m
[ 4187s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4187s]     [32mThen the specs should[32m[1m not[0m[0m[32m pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4187s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m                       # lib/aruba/cucumber/command.rb:187[0m[0m
[ 4187s] [32m      """[0m
[ 4187s] [32m      <<-STDOUT[0m
[ 4187s] [32m      Hello, I'm STDOUT[0m
[ 4187s] [32m[0m
[ 4187s] [32m      STDOUT[0m
[ 4187s] [32m      <<-STDERR[0m
[ 4187s] [32m      Hello, I'm STDERR[0m
[ 4187s] [32m[0m
[ 4187s] [32m      STDERR[0m
[ 4187s] [32m      """[0m
[ 4187s] 
[ 4187s] Feature: Send running command a signal
[ 4187s]   You can send a running command a signal using
[ 4187s]   `last_command_started#send_signal`. This is only supported with
[ 4187s]   `aruba.config.command_launcher = :spawn` (default).
[ 4187s] 
[ 4187s]   Background: [90m                            # features/04_aruba_api/command/send_signal_to_command.feature:7[0m
[ 4187s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4187s] 
[ 4187s]   Scenario: Existing executable[90m                          # features/04_aruba_api/command/send_signal_to_command.feature:10[0m
[ 4187s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4187s] [32m      """[0m
[ 4187s] [32m      #!/usr/bin/env bash[0m
[ 4187s] [32m[0m
[ 4187s] [32m      function hup {[0m
[ 4187s] [32m        echo 'Exit...' >&2[0m
[ 4187s] [32m        exit 0[0m
[ 4187s] [32m      }[0m
[ 4187s] [32m[0m
[ 4187s] [32m      trap hup HUP[0m
[ 4187s] [32m[0m
[ 4187s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 4187s] [32m      """[0m
[ 4187s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4187s] [32m      """[0m
[ 4187s] [32m      require 'spec_helper'[0m
[ 4187s] [32m[0m
[ 4187s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 1, :startup_wait_time => 0.1 do[0m
[ 4187s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4187s] [32m        before(:each) { last_command_started.send_signal 'HUP' }[0m
[ 4187s] [32m        it { expect(last_command_started).to have_output /Exit/ }[0m
[ 4187s] [32m      end[0m
[ 4187s] [32m      """[0m
[ 4195s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4195s]     [31mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4195s] [31m      expected "\nRun command\n  should have output: /Exit/ (FAILED - 1)\n\nFailures:\n\n  1) Run command should hav...ailure\n\nFailed examples:\n\nrspec ./spec/run_spec.rb:6 # Run command should have output: /Exit/\n" to string includes: "0 failures"[0m
[ 4195s] [31m      Diff:[0m
[ 4195s] [31m      @@ -1,2 +1,24 @@[0m
[ 4195s] [31m      -0 failures[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +Run command[0m
[ 4195s] [31m      +  should have output: /Exit/ (FAILED - 1)[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +Failures:[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +  1) Run command should have output: /Exit/[0m
[ 4195s] [31m      +     Failure/Error: it { expect(last_command_started).to have_output /Exit/ }[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +       expected "" to have output: /Exit/[0m
[ 4195s] [31m      +       Diff:[0m
[ 4195s] [31m      +       @@ -1,2 +1,2 @@[0m
[ 4195s] [31m      +       -/Exit/[0m
[ 4195s] [31m      +       +""[0m
[ 4195s] [31m      +     # ./spec/run_spec.rb:6:in `block (2 levels) in <top (required)>'[0m
[ 4195s] [31m      +     # /home/abuild/rpmbuild/BUILD/aruba-0.14.14/usr/share/gems/gems/aruba-0.14.14/lib/aruba/rspec.rb:22:in `block (2 levels) in <top (required)>'[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +Finished in 0.63451 seconds (files took 4.06 seconds to load)[0m
[ 4195s] [31m      +1 example, 1 failure[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +Failed examples:[0m
[ 4195s] [31m      +[0m
[ 4195s] [31m      +rspec ./spec/run_spec.rb:6 # Run command should have output: /Exit/[0m
[ 4195s] [31m       (RSpec::Expectations::ExpectationNotMetError)[0m
[ 4195s] [31m      ./lib/aruba/cucumber/command.rb:158:in `/^(?:the )?(output|stderr|stdout) should( not)? contain( exactly)? "([^"]*)"$/'[0m
[ 4195s] [31m      ./lib/aruba/cucumber/testing_frameworks.rb:42:in `/^the spec(?:s)? should( not)?(?: all)? pass(?: with (\d+) failures?)?$/'[0m
[ 4195s] [31m      features/04_aruba_api/command/send_signal_to_command.feature:35:in `Then the specs should all pass'[0m
[ 4195s] 
[ 4195s]   Scenario: Dying command[90m                                # features/04_aruba_api/command/send_signal_to_command.feature:37[0m
[ 4195s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4195s] [32m      """[0m
[ 4195s] [32m      #!/usr/bin/env bash[0m
[ 4195s] [32m      exit 1[0m
[ 4195s] [32m      """[0m
[ 4195s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4195s] [32m      """[0m
[ 4195s] [32m      require 'spec_helper'[0m
[ 4195s] [32m[0m
[ 4195s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 1, :startup_wait_time => 0.1 do[0m
[ 4195s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4195s] [32m        it { expect { last_command_started.send_signal 'HUP' }.to raise_error Aruba::CommandAlreadyStoppedError, /Command "aruba-test-cli" with PID/ }[0m
[ 4195s] [32m      end[0m
[ 4195s] [32m      """[0m
[ 4203s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4203s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4203s] 
[ 4203s] Feature: Stop all commands
[ 4203s]   To stop all running commands use the `#stop_all_commands`-method.
[ 4203s] 
[ 4203s]   Background: [90m                            # features/04_aruba_api/command/stop_all_commands.feature:5[0m
[ 4203s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4203s] 
[ 4203s]   Scenario: Multiple commands are running[90m                # features/04_aruba_api/command/stop_all_commands.feature:8[0m
[ 4203s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4203s] [32m      """[0m
[ 4203s] [32m      #!/bin/bash[0m
[ 4203s] [32m      sleep 0.2[0m
[ 4203s] [32m      """[0m
[ 4203s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4203s] [32m      """[0m
[ 4203s] [32m      require 'spec_helper'[0m
[ 4203s] [32m[0m
[ 4203s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.3 do[0m
[ 4203s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4203s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4203s] [32m[0m
[ 4203s] [32m        before(:each) { stop_all_commands }[0m
[ 4203s] [32m[0m
[ 4203s] [32m        it { expect(all_commands).to all be_stopped }[0m
[ 4203s] [32m      end[0m
[ 4203s] [32m      """[0m
[ 4211s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4211s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4211s] 
[ 4212s]   Scenario: Stop all commands for which the block returns true[90m # features/04_aruba_api/command/stop_all_commands.feature:30[0m
[ 4212s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4212s] [32m      """[0m
[ 4212s] [32m      #!/bin/bash[0m
[ 4212s] [32m      sleep 0.1[0m
[ 4212s] [32m      """[0m
[ 4212s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4212s] [32m      """[0m
[ 4212s] [32m      require 'spec_helper'[0m
[ 4212s] [32m[0m
[ 4212s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.2 do[0m
[ 4212s] [32m        before(:each) { @cmd1 = run_command('aruba-test-cli') }[0m
[ 4212s] [32m        before(:each) { @cmd2 = run_command('aruba-test-cli') }[0m
[ 4212s] [32m        before(:each) { @cmd3 = run_command('sleep 1') }[0m
[ 4212s] [32m[0m
[ 4212s] [32m        before(:each) { stop_all_commands { |c| c.commandline == 'aruba-test-cli' } }[0m
[ 4212s] [32m[0m
[ 4212s] [32m        it 'only stops selected commands' do[0m
[ 4212s] [32m          aggregate_failures do[0m
[ 4212s] [32m            expect(@cmd1).to be_stopped[0m
[ 4212s] [32m            expect(@cmd2).to be_stopped[0m
[ 4212s] [32m            expect(@cmd3).not_to be_stopped[0m
[ 4212s] [32m          end[0m
[ 4212s] [32m        end[0m
[ 4212s] [32m      end[0m
[ 4212s] [32m      """[0m
[ 4220s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4220s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4220s] 
[ 4220s] Feature: Stop command
[ 4220s]   To stop commands via API you can do the following:
[ 4220s] 
[ 4220s]   - `last_command_started.stop`
[ 4220s]   - `find_command('command').stop`
[ 4220s] 
[ 4220s]   But normally there's no need to stop a command manually. All matchers
[ 4220s]   handling commands make sure, that they stop ALL commands before checking actual
[ 4220s]   against expected.
[ 4220s] 
[ 4220s]   Background: [90m                            # features/04_aruba_api/command/stop_single_command.feature:12[0m
[ 4220s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4220s] 
[ 4220s]   Scenario: Stop command started last[90m                    # features/04_aruba_api/command/stop_single_command.feature:15[0m
[ 4220s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4220s] [32m      """[0m
[ 4220s] [32m      #!/bin/bash[0m
[ 4220s] [32m      function term {[0m
[ 4220s] [32m        exit 0[0m
[ 4220s] [32m      }[0m
[ 4220s] [32m[0m
[ 4220s] [32m      trap term TERM[0m
[ 4220s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 4220s] [32m      """[0m
[ 4220s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4220s] [32m      """[0m
[ 4220s] [32m      require 'spec_helper'[0m
[ 4220s] [32m[0m
[ 4220s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.2 do[0m
[ 4220s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4220s] [32m        before(:each) { last_command_started.stop }[0m
[ 4220s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4220s] [32m      end[0m
[ 4220s] [32m      """[0m
[ 4229s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4229s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4229s] 
[ 4229s]   Scenario: Find and stop command[90m                        # features/04_aruba_api/command/stop_single_command.feature:39[0m
[ 4229s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4229s] [32m      """[0m
[ 4229s] [32m      #!/bin/bash[0m
[ 4229s] [32m      function term {[0m
[ 4229s] [32m        exit 0[0m
[ 4229s] [32m      }[0m
[ 4229s] [32m[0m
[ 4229s] [32m      trap term TERM[0m
[ 4229s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 4229s] [32m      exit 1[0m
[ 4229s] [32m      """[0m
[ 4229s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4229s] [32m      """[0m
[ 4229s] [32m      require 'spec_helper'[0m
[ 4229s] [32m[0m
[ 4229s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 0.2 do[0m
[ 4229s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4229s] [32m        before(:each) { find_command('aruba-test-cli').stop }[0m
[ 4229s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4229s] [32m      end[0m
[ 4229s] [32m      """[0m
[ 4237s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4237s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4237s] 
[ 4237s]   Scenario: Stop successful command with configured signal[90m # features/04_aruba_api/command/stop_single_command.feature:64[0m
[ 4237s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4237s] [32m      """[0m
[ 4237s] [32m      #!/bin/bash[0m
[ 4237s] [32m      function hup {[0m
[ 4237s] [32m        echo "Exit..."[0m
[ 4237s] [32m        exit 0[0m
[ 4237s] [32m      }[0m
[ 4237s] [32m[0m
[ 4237s] [32m      function term {[0m
[ 4237s] [32m        echo "No! No exit here. Try HUP. I stop the command with exit 1."[0m
[ 4237s] [32m        exit 1[0m
[ 4237s] [32m      }[0m
[ 4237s] [32m[0m
[ 4237s] [32m      trap hup HUP[0m
[ 4237s] [32m      trap term TERM[0m
[ 4237s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 4237s] [32m      """[0m
[ 4237s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m              # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4237s] [32m      """[0m
[ 4237s] [32m      require 'spec_helper'[0m
[ 4237s] [32m[0m
[ 4237s] [32m      Aruba.configure do |config|[0m
[ 4237s] [32m        config.stop_signal  = 'HUP'[0m
[ 4237s] [32m        config.exit_timeout = 0.2[0m
[ 4237s] [32m      end[0m
[ 4237s] [32m[0m
[ 4237s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4237s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4237s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4237s] [32m      end[0m
[ 4237s] [32m      """[0m
[ 4245s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4245s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4245s] 
[ 4245s]   Scenario: Stop unsuccessful command with configured signal[90m # features/04_aruba_api/command/stop_single_command.feature:99[0m
[ 4245s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4245s] [32m      """[0m
[ 4245s] [32m      #!/bin/bash[0m
[ 4245s] [32m      function hup {[0m
[ 4245s] [32m        echo "Exit..."[0m
[ 4245s] [32m        exit 2[0m
[ 4245s] [32m      }[0m
[ 4245s] [32m[0m
[ 4245s] [32m      function term {[0m
[ 4245s] [32m        echo "No! No exit here. Try HUP. I stop the command with exit 1."[0m
[ 4245s] [32m        exit 1[0m
[ 4245s] [32m      }[0m
[ 4245s] [32m[0m
[ 4245s] [32m      trap hup HUP[0m
[ 4245s] [32m      trap term TERM[0m
[ 4245s] [32m      while [ true ]; do sleep 0.1; done[0m
[ 4245s] [32m      """[0m
[ 4245s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4245s] [32m      """[0m
[ 4245s] [32m      require 'spec_helper'[0m
[ 4245s] [32m[0m
[ 4245s] [32m      Aruba.configure do |config|[0m
[ 4245s] [32m        config.stop_signal  = 'HUP'[0m
[ 4245s] [32m        config.exit_timeout = 0.2[0m
[ 4245s] [32m      end[0m
[ 4245s] [32m[0m
[ 4245s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4245s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4245s] [32m        it { expect(last_command_started).to have_exit_status 2 }[0m
[ 4245s] [32m      end[0m
[ 4245s] [32m      """[0m
[ 4253s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4253s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4253s] 
[ 4253s] Feature: Terminate all commands
[ 4253s]   To terminate all running commands use the `#terminate_all_commands`-method.
[ 4253s] 
[ 4253s]   Background: [90m                            # features/04_aruba_api/command/terminate_all_commands.feature:5[0m
[ 4253s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4253s] 
[ 4253s]   Scenario: Multiple commands are running[90m                # features/04_aruba_api/command/terminate_all_commands.feature:8[0m
[ 4253s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4253s] [32m      """[0m
[ 4253s] [32m      #!/bin/bash[0m
[ 4253s] [32m      sleep 3[0m
[ 4253s] [32m      """[0m
[ 4253s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4253s] [32m      """[0m
[ 4253s] [32m      require 'spec_helper'[0m
[ 4253s] [32m[0m
[ 4253s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 5 do[0m
[ 4253s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4253s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4253s] [32m[0m
[ 4253s] [32m        before(:each) { terminate_all_commands }[0m
[ 4253s] [32m[0m
[ 4253s] [32m        it { expect(all_commands).to all be_stopped }[0m
[ 4253s] [32m      end[0m
[ 4253s] [32m      """[0m
[ 4261s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4261s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4261s] 
[ 4261s]   Scenario: Terminate all commands for which the block returns true[90m # features/04_aruba_api/command/terminate_all_commands.feature:30[0m
[ 4261s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4261s] [32m      """[0m
[ 4261s] [32m      #!/bin/bash[0m
[ 4261s] [32m      sleep 0.5[0m
[ 4261s] [32m      """[0m
[ 4261s]     [32mAnd a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4261s] [32m      """[0m
[ 4261s] [32m      require 'spec_helper'[0m
[ 4261s] [32m[0m
[ 4261s] [32m      RSpec.describe 'Run command', :type => :aruba, :exit_timeout => 1 do[0m
[ 4261s] [32m        before(:each) { @cmd1 = run_command('aruba-test-cli') }[0m
[ 4261s] [32m        before(:each) { @cmd2 = run_command('aruba-test-cli') }[0m
[ 4261s] [32m        before(:each) { @cmd3 = run_command('sleep 1') }[0m
[ 4261s] [32m[0m
[ 4261s] [32m        before(:each) { terminate_all_commands { |c| c.commandline == 'aruba-test-cli' } }[0m
[ 4261s] [32m[0m
[ 4261s] [32m        it 'only terminates selected commands' do[0m
[ 4261s] [32m          aggregate_failures do[0m
[ 4261s] [32m            expect(@cmd1).to be_stopped[0m
[ 4261s] [32m            expect(@cmd2).to be_stopped[0m
[ 4261s] [32m            expect(@cmd3).not_to be_stopped[0m
[ 4261s] [32m          end[0m
[ 4261s] [32m        end[0m
[ 4261s] [32m      end[0m
[ 4261s] [32m      """[0m
[ 4270s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4270s]     [32mThen the specs should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4270s] 
[ 4271s] Feature: Return last command started
[ 4271s] 
[ 4271s]   Background: [90m                            # features/04_aruba_api/command/use_last_command_started.feature:3[0m
[ 4271s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4271s] 
[ 4271s]   Scenario: A command has been started[90m          # features/04_aruba_api/command/use_last_command_started.feature:6[0m
[ 4271s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4271s] [32m      """[0m
[ 4271s] [32m      require 'spec_helper'[0m
[ 4271s] [32m[0m
[ 4271s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4271s] [32m        before(:each) { run_command('echo hello') }[0m
[ 4271s] [32m        before(:each) { stop_all_commands }[0m
[ 4271s] [32m[0m
[ 4271s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4271s] [32m        it { expect(last_command_started.commandline).to eq 'echo hello' }[0m
[ 4271s] [32m      end[0m
[ 4271s] [32m      """[0m
[ 4279s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4279s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4279s] 
[ 4279s]   Scenario: Multiple commands have been started[90m # features/04_aruba_api/command/use_last_command_started.feature:22[0m
[ 4279s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4279s] [32m      """[0m
[ 4279s] [32m      require 'spec_helper'[0m
[ 4279s] [32m[0m
[ 4279s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4279s] [32m        before(:each) { run_command('echo hello') }[0m
[ 4279s] [32m        before(:each) { run_command('echo world') }[0m
[ 4279s] [32m[0m
[ 4279s] [32m        before(:each) { stop_all_commands }[0m
[ 4279s] [32m[0m
[ 4279s] [32m        it { expect(last_command_started).to be_successfully_executed }[0m
[ 4279s] [32m        it { expect(last_command_started.commandline).to eq 'echo world' }[0m
[ 4279s] [32m      end[0m
[ 4279s] [32m      """[0m
[ 4287s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4287s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4287s] 
[ 4288s]   Scenario: No command has been started[90m         # features/04_aruba_api/command/use_last_command_started.feature:40[0m
[ 4288s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4288s] [32m      """[0m
[ 4288s] [32m      require 'spec_helper'[0m
[ 4288s] [32m[0m
[ 4288s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4288s] [32m        it { expect{ last_command_started.commandline }.to raise_error Aruba::NoCommandHasBeenStartedError }[0m
[ 4288s] [32m      end[0m
[ 4288s] [32m      """[0m
[ 4296s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4296s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4296s] 
[ 4296s] Feature: Return last command stopped
[ 4296s] 
[ 4296s]   Background: [90m                            # features/04_aruba_api/command/use_last_command_stopped.feature:3[0m
[ 4296s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4296s] 
[ 4296s]   Scenario: A command has been started[90m          # features/04_aruba_api/command/use_last_command_stopped.feature:6[0m
[ 4296s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4296s] [32m      """[0m
[ 4296s] [32m      require 'spec_helper'[0m
[ 4296s] [32m[0m
[ 4296s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4296s] [32m        before(:each) { run_command('echo hello') }[0m
[ 4296s] [32m        before(:each) { stop_all_commands }[0m
[ 4296s] [32m[0m
[ 4296s] [32m        it { expect(last_command_stopped).to be_successfully_executed }[0m
[ 4296s] [32m        it { expect(last_command_stopped.commandline).to eq 'echo hello' }[0m
[ 4296s] [32m      end[0m
[ 4296s] [32m      """[0m
[ 4304s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4304s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4304s] 
[ 4304s]   Scenario: Multiple commands have been started and all are stopped[90m # features/04_aruba_api/command/use_last_command_stopped.feature:22[0m
[ 4304s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4304s] [32m      """[0m
[ 4304s] [32m      require 'spec_helper'[0m
[ 4304s] [32m[0m
[ 4304s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4304s] [32m        before(:each) { run_command('echo hello') }[0m
[ 4304s] [32m        before(:each) { run_command('echo world') }[0m
[ 4304s] [32m[0m
[ 4304s] [32m        before(:each) { stop_all_commands }[0m
[ 4304s] [32m[0m
[ 4304s] [32m        it { expect(last_command_stopped).to be_successfully_executed }[0m
[ 4304s] [32m        it { expect(last_command_stopped.commandline).to eq 'echo world' }[0m
[ 4304s] [32m      end[0m
[ 4304s] [32m      """[0m
[ 4314s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4314s]     [32mThen the specs should all pass[90m                                  # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4314s] 
[ 4315s]   Scenario: Multiple commands have been started and a single one is stopped[90m # features/04_aruba_api/command/use_last_command_stopped.feature:40[0m
[ 4315s]     [32mGiven a file named "[32m[1mspec/run_spec.rb[0m[0m[32m" with:[90m                             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4315s] [32m      """[0m
[ 4315s] [32m      require 'spec_helper'[0m
[ 4315s] [32m[0m
[ 4315s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4315s] [32m        before(:each) { run_command('echo hello') }[0m
[ 4315s] [32m        before(:each) { find_command('echo hello').stop }[0m
[ 4315s] [32m        before(:each) { run_command('echo world') }[0m
[ 4315s] [32m[0m
[ 4315s] [32m        it { expect(last_command_stopped).to be_successfully_executed }[0m
[ 4315s] [32m        it { expect(last_command_stopped.commandline).to eq 'echo hello' }[0m
[ 4315s] [32m      end[0m
[ 4315s] [32m      """[0m
[ 4323s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                      # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4323s]     [32mThen the specs should all pass[90m                                          # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4323s] 
[ 4323s] Feature: Expand paths with aruba
[ 4323s]   There are quite a few uses cases why you want to expand a path. `aruba` helps
[ 4323s]   you with this by providing you the `expand_path`-method. This method expands
[ 4323s]   paths relative to the `aruba.current_directory`-directory.
[ 4323s] 
[ 4323s]   Background: [90m                        # features/04_aruba_api/core/expand_path.feature:7[0m
[ 4323s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4323s] 
[ 4323s]   Scenario: Use relative path[90m                           # features/04_aruba_api/core/expand_path.feature:10[0m
[ 4323s]     [32mGiven a file named "[32m[1mspec/expand_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4323s] [32m      """[0m
[ 4323s] [32m      require 'spec_helper'[0m
[ 4323s] [32m[0m
[ 4323s] [32m      RSpec.describe 'Expand path', :type => :aruba do[0m
[ 4323s] [32m        let(:path) { 'path/to/dir' }[0m
[ 4323s] [32m        it { expect(expand_path(path)).to eq File.join(aruba.root_directory, aruba.current_directory, path) }[0m
[ 4323s] [32m      end[0m
[ 4323s] [32m      """[0m
[ 4331s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4331s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4331s] 
[ 4332s]   Scenario: Change directory using cd[90m                   # features/04_aruba_api/core/expand_path.feature:23[0m
[ 4332s]     [32mGiven a file named "[32m[1mspec/expand_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4332s] [32m      """[0m
[ 4332s] [32m      require 'spec_helper'[0m
[ 4332s] [32m[0m
[ 4332s] [32m      RSpec.describe 'Expand path', :type => :aruba do[0m
[ 4332s] [32m        let(:path) { 'path/to/dir' }[0m
[ 4332s] [32m        let(:directory) { 'dir1' }[0m
[ 4332s] [32m[0m
[ 4332s] [32m        before(:each) { create_directory(directory) }[0m
[ 4332s] [32m        before(:each) { cd(directory) }[0m
[ 4332s] [32m[0m
[ 4332s] [32m        it { expect(expand_path(path)).to eq File.join(aruba.root_directory, aruba.current_directory, path) }[0m
[ 4332s] [32m      end[0m
[ 4332s] [32m      """[0m
[ 4339s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4339s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4339s] 
[ 4340s]   Scenario: Warn if aruba's working directory does not exist[90m # features/04_aruba_api/core/expand_path.feature:41[0m
[ 4340s]     [32mGiven a file named "[32m[1mspec/expand_path_spec.rb[0m[0m[32m" with:[90m      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4340s] [32m      """[0m
[ 4340s] [32m      require 'spec_helper'[0m
[ 4340s] [32m[0m
[ 4340s] [32m      RSpec.describe 'Expand path', :type => :aruba do[0m
[ 4340s] [32m        before(:each) { remove('.') }[0m
[ 4340s] [32m[0m
[ 4340s] [32m        let(:path) { 'path/to/dir' }[0m
[ 4340s] [32m[0m
[ 4340s] [32m        it { expect { expand_path(path) }.to output(/working directory does not exist/).to_stderr }[0m
[ 4340s] [32m      end[0m
[ 4340s] [32m      """[0m
[ 4347s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4347s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4347s] 
[ 4348s]   Scenario: Use ~ in path[90m                               # features/04_aruba_api/core/expand_path.feature:57[0m
[ 4348s]     Now this useses the HOME-variable from your normal shell HOME-variable.
[ 4348s]     From 1.0.0 on HOME will be `File.join(aruba.config.root_directory,
[ 4348s]     aruba.config.working_directory)`. If you want HOME have some other value,
[ 4348s]     you need to configure it explicitly via `Aruba.configure {}`.
[ 4348s]     [32mGiven a file named "[32m[1mspec/expand_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4348s] [32m      """[0m
[ 4348s] [32m      require 'spec_helper'[0m
[ 4348s] [32m[0m
[ 4348s] [32m      # Old before 1.0.0[0m
[ 4348s] [32m      RSpec.describe 'Expand path', :type => :aruba do[0m
[ 4348s] [32m        let(:path) { '~/path/to/dir' }[0m
[ 4348s] [32m[0m
[ 4348s] [32m        it { expect(expand_path(path)).to match %r</home/abuild/path/to/dir> }[0m
[ 4348s] [32m      end[0m
[ 4348s] [32m[0m
[ 4348s] [32m      # New from 1.0.0[0m
[ 4348s] [32m      RSpec.describe 'Expand path', :type => :aruba do[0m
[ 4348s] [32m        let(:path) { '~/path/to/dir' }[0m
[ 4348s] [32m[0m
[ 4348s] [32m        before(:each) do[0m
[ 4348s] [32m          set_environment_variable('HOME', File.join(aruba.config.root_directory, aruba.config.working_directory))[0m
[ 4348s] [32m        end[0m
[ 4348s] [32m[0m
[ 4348s] [32m        it { expect(expand_path(path)).to eq File.join(aruba.config.root_directory, aruba.config.working_directory, 'path/to/dir') }[0m
[ 4348s] [32m      end[0m
[ 4348s] [32m      """[0m
[ 4356s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4356s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4356s] 
[ 4356s] Feature: Append environment variable
[ 4356s]   It is quite handy to modify the environment of a process. To make this
[ 4356s]   possible, `aruba` provides several methods. One of these is
[ 4356s]   `#append_environment_variable`. Using this variable appends a given value to
[ 4356s]   an existing one. If the variable does not exist, it is created with the given
[ 4356s]   value.
[ 4356s] 
[ 4356s]   Each variable name and each value is converted to a string. Otherwise `ruby`
[ 4356s]   would complain about an invalid argument. To make use of a variable you can
[ 4356s]   either use `#run` and the like or `#with_environment`.
[ 4356s] 
[ 4356s]   Background: [90m                        # features/04_aruba_api/environment/append_environment_variable.feature:13[0m
[ 4356s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4356s] 
[ 4356s]   Scenario: Non-existing variable[90m                       # features/04_aruba_api/environment/append_environment_variable.feature:16[0m
[ 4356s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4356s] [32m      """[0m
[ 4356s] [32m      require 'spec_helper'[0m
[ 4356s] [32m[0m
[ 4356s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4356s] [32m        before(:each) { append_environment_variable 'LONG_LONG_VARIABLE', 'a' }[0m
[ 4356s] [32m[0m
[ 4356s] [32m        before(:each) { run_command('env') }[0m
[ 4356s] [32m        before(:each) { stop_all_commands }[0m
[ 4356s] [32m[0m
[ 4356s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=a' }[0m
[ 4356s] [32m      end[0m
[ 4356s] [32m      """[0m
[ 4363s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4363s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4363s] 
[ 4364s]   Scenario: Existing inner variable[90m                     # features/04_aruba_api/environment/append_environment_variable.feature:33[0m
[ 4364s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4364s] [32m      """[0m
[ 4364s] [32m      require 'spec_helper'[0m
[ 4364s] [32m[0m
[ 4364s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4364s] [32m        before(:each) { append_environment_variable 'LONG_LONG_VARIABLE', 'a' }[0m
[ 4364s] [32m        before(:each) { append_environment_variable 'LONG_LONG_VARIABLE', 'b' }[0m
[ 4364s] [32m[0m
[ 4364s] [32m        before(:each) { run_command('env') }[0m
[ 4364s] [32m        before(:each) { stop_all_commands }[0m
[ 4364s] [32m[0m
[ 4364s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=ab' }[0m
[ 4364s] [32m      end[0m
[ 4364s] [32m      """[0m
[ 4372s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4372s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4372s] 
[ 4372s]   Scenario: Existing outer variable[90m                     # features/04_aruba_api/environment/append_environment_variable.feature:52[0m
[ 4372s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4372s] [32m      """[0m
[ 4372s] [32m      require 'spec_helper'[0m
[ 4372s] [32m[0m
[ 4372s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4372s] [32m[0m
[ 4372s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4372s] [32m        before(:each) { append_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4372s] [32m[0m
[ 4372s] [32m        before(:each) { run_command('env') }[0m
[ 4372s] [32m        before(:each) { stop_all_commands }[0m
[ 4372s] [32m[0m
[ 4372s] [32m        it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=ab' }[0m
[ 4372s] [32m[0m
[ 4372s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4372s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4372s] [32m      end[0m
[ 4372s] [32m      """[0m
[ 4380s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4380s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4380s] 
[ 4381s]   Scenario: Run some ruby code with previously set environment[90m # features/04_aruba_api/environment/append_environment_variable.feature:74[0m
[ 4381s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4381s] [32m      """[0m
[ 4381s] [32m      require 'spec_helper'[0m
[ 4381s] [32m[0m
[ 4381s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4381s] [32m[0m
[ 4381s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4381s] [32m        before(:each) { append_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4381s] [32m[0m
[ 4381s] [32m        before(:each) { run_command('env') }[0m
[ 4381s] [32m        before(:each) { stop_all_commands }[0m
[ 4381s] [32m[0m
[ 4381s] [32m        it do[0m
[ 4381s] [32m          with_environment do[0m
[ 4381s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'ab'[0m
[ 4381s] [32m          end[0m
[ 4381s] [32m        end[0m
[ 4381s] [32m[0m
[ 4381s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4381s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4381s] [32m      end[0m
[ 4381s] [32m      """[0m
[ 4389s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4389s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4389s] 
[ 4389s]   Scenario: Run some ruby code with local environment[90m   # features/04_aruba_api/environment/append_environment_variable.feature:100[0m
[ 4389s]     If you pass the same variable to the block it will not be appended, but
[ 4389s]     overwrites the variable
[ 4389s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4389s] [32m      """[0m
[ 4389s] [32m      require 'spec_helper'[0m
[ 4389s] [32m[0m
[ 4389s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4389s] [32m[0m
[ 4389s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4389s] [32m        before(:each) { append_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4389s] [32m[0m
[ 4389s] [32m        before(:each) { run_command('env') }[0m
[ 4389s] [32m        before(:each) { stop_all_commands }[0m
[ 4389s] [32m[0m
[ 4389s] [32m        it do[0m
[ 4389s] [32m          with_environment 'REALLY_LONG_LONG_VARIABLE' => 'a' do[0m
[ 4389s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a'[0m
[ 4389s] [32m          end[0m
[ 4389s] [32m        end[0m
[ 4389s] [32m[0m
[ 4389s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4389s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4389s] [32m      end[0m
[ 4389s] [32m      """[0m
[ 4398s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4398s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4398s] 
[ 4398s] Feature: Delete existing environment variable via API-method
[ 4398s]   It is quite handy to modify the environment of a process. To make this
[ 4398s]   possible, `aruba` provides several methods. One of these is
[ 4398s]   `#delete_environment_variable`. Using this remove an existing variable.
[ 4398s] 
[ 4398s]   Background: [90m                        # features/04_aruba_api/environment/delete_environment_variable.feature:7[0m
[ 4398s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4398s] 
[ 4398s]   Scenario: Non-existing variable[90m                       # features/04_aruba_api/environment/delete_environment_variable.feature:10[0m
[ 4398s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4398s] [32m      """[0m
[ 4398s] [32m      require 'spec_helper'[0m
[ 4398s] [32m[0m
[ 4398s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4398s] [32m        before(:each) { delete_environment_variable 'LONG_LONG_VARIABLE' }[0m
[ 4398s] [32m[0m
[ 4398s] [32m        before(:each) { run_command('env') }[0m
[ 4398s] [32m        before(:each) { stop_all_commands }[0m
[ 4398s] [32m[0m
[ 4398s] [32m        it { expect(last_command_started.output).not_to include 'LONG_LONG_VARIABLE=1' }[0m
[ 4398s] [32m      end[0m
[ 4398s] [32m      """[0m
[ 4406s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4406s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4406s] 
[ 4406s]   Scenario: Existing variable set from within the test[90m  # features/04_aruba_api/environment/delete_environment_variable.feature:27[0m
[ 4406s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4406s] [32m      """[0m
[ 4406s] [32m      require 'spec_helper'[0m
[ 4406s] [32m[0m
[ 4406s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4406s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '1' }[0m
[ 4406s] [32m        before(:each) { delete_environment_variable 'LONG_LONG_VARIABLE' }[0m
[ 4406s] [32m[0m
[ 4406s] [32m        before(:each) { run_command('env') }[0m
[ 4406s] [32m        before(:each) { stop_all_commands }[0m
[ 4406s] [32m[0m
[ 4406s] [32m        it { expect(last_command_started.output).not_to include 'LONG_LONG_VARIABLE' }[0m
[ 4406s] [32m      end[0m
[ 4406s] [32m      """[0m
[ 4414s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4414s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4414s] 
[ 4414s]   Scenario: Existing variable set by some outer parent process[90m # features/04_aruba_api/environment/delete_environment_variable.feature:45[0m
[ 4414s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4414s] [32m      """[0m
[ 4414s] [32m      require 'spec_helper'[0m
[ 4414s] [32m[0m
[ 4414s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4414s] [32m[0m
[ 4414s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4414s] [32m        before(:each) { delete_environment_variable 'REALLY_LONG_LONG_VARIABLE' }[0m
[ 4414s] [32m[0m
[ 4414s] [32m        before(:each) { run_command('env') }[0m
[ 4414s] [32m        before(:each) { stop_all_commands }[0m
[ 4414s] [32m[0m
[ 4414s] [32m        it { expect(last_command_started.output).not_to include 'REALLY_LONG_LONG_VARIABLE' }[0m
[ 4414s] [32m      end[0m
[ 4414s] [32m      """[0m
[ 4422s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4422s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4422s] 
[ 4422s] Feature: Prepend environment variable
[ 4422s]   It is quite handy to modify the environment of a process. To make this
[ 4422s]   possible, `aruba` provides several methods. One of these is
[ 4422s]   `#prepend_environment_variable`. Using this variable prepends a given value to
[ 4422s]   an existing one. If the variable does not exist, it is created with the given
[ 4422s]   value.
[ 4422s] 
[ 4422s]   Each variable name and each value is converted to a string. Otherwise `ruby`
[ 4422s]   would complain about an invalid argument. To make use of a variable you can
[ 4422s]   either use `#run_command` and the like or `#with_environment`.
[ 4422s] 
[ 4422s]   Background: [90m                        # features/04_aruba_api/environment/prepend_environment_variable.feature:13[0m
[ 4422s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4422s] 
[ 4422s]   Scenario: Non-existing variable[90m                       # features/04_aruba_api/environment/prepend_environment_variable.feature:16[0m
[ 4422s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4422s] [32m      """[0m
[ 4422s] [32m      require 'spec_helper'[0m
[ 4422s] [32m[0m
[ 4422s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4422s] [32m        before(:each) { prepend_environment_variable 'LONG_LONG_VARIABLE', 'a' }[0m
[ 4422s] [32m[0m
[ 4422s] [32m        before(:each) { run_command('env') }[0m
[ 4422s] [32m        before(:each) { stop_all_commands }[0m
[ 4422s] [32m[0m
[ 4422s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=a' }[0m
[ 4422s] [32m      end[0m
[ 4422s] [32m      """[0m
[ 4430s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4430s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4430s] 
[ 4430s]   Scenario: Existing inner variable[90m                     # features/04_aruba_api/environment/prepend_environment_variable.feature:33[0m
[ 4430s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4430s] [32m      """[0m
[ 4430s] [32m      require 'spec_helper'[0m
[ 4430s] [32m[0m
[ 4430s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4430s] [32m        before(:each) { prepend_environment_variable 'LONG_LONG_VARIABLE', 'a' }[0m
[ 4430s] [32m        before(:each) { prepend_environment_variable 'LONG_LONG_VARIABLE', 'b' }[0m
[ 4430s] [32m[0m
[ 4430s] [32m        before(:each) { run_command('env') }[0m
[ 4430s] [32m        before(:each) { stop_all_commands }[0m
[ 4430s] [32m[0m
[ 4430s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=ba' }[0m
[ 4430s] [32m      end[0m
[ 4430s] [32m      """[0m
[ 4437s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4437s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4437s] 
[ 4438s]   Scenario: Existing outer variable[90m                     # features/04_aruba_api/environment/prepend_environment_variable.feature:52[0m
[ 4438s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4438s] [32m      """[0m
[ 4438s] [32m      require 'spec_helper'[0m
[ 4438s] [32m[0m
[ 4438s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4438s] [32m[0m
[ 4438s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4438s] [32m        before(:each) { prepend_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4438s] [32m[0m
[ 4438s] [32m        before(:each) { run_command('env') }[0m
[ 4438s] [32m        before(:each) { stop_all_commands }[0m
[ 4438s] [32m[0m
[ 4438s] [32m        it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=ba' }[0m
[ 4438s] [32m[0m
[ 4438s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4438s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4438s] [32m      end[0m
[ 4438s] [32m      """[0m
[ 4446s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4446s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4446s] 
[ 4447s]   Scenario: Run some ruby code with previously set environment[90m # features/04_aruba_api/environment/prepend_environment_variable.feature:74[0m
[ 4447s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4447s] [32m      """[0m
[ 4447s] [32m      require 'spec_helper'[0m
[ 4447s] [32m[0m
[ 4447s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4447s] [32m[0m
[ 4447s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4447s] [32m        before(:each) { prepend_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4447s] [32m[0m
[ 4447s] [32m        before(:each) { run_command('env') }[0m
[ 4447s] [32m        before(:each) { stop_all_commands }[0m
[ 4447s] [32m[0m
[ 4447s] [32m        it do[0m
[ 4447s] [32m          with_environment do[0m
[ 4447s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'ba'[0m
[ 4447s] [32m          end[0m
[ 4447s] [32m        end[0m
[ 4447s] [32m[0m
[ 4447s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4447s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4447s] [32m      end[0m
[ 4447s] [32m      """[0m
[ 4454s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4454s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4454s] 
[ 4455s]   Scenario: Run some ruby code with local environment[90m   # features/04_aruba_api/environment/prepend_environment_variable.feature:100[0m
[ 4455s]     If you pass the same variable to the block it will not be prepended, but
[ 4455s]     overwrites the variable
[ 4455s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4455s] [32m      """[0m
[ 4455s] [32m      require 'spec_helper'[0m
[ 4455s] [32m[0m
[ 4455s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = 'a'[0m
[ 4455s] [32m[0m
[ 4455s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4455s] [32m        before(:each) { prepend_environment_variable 'REALLY_LONG_LONG_VARIABLE', 'b' }[0m
[ 4455s] [32m[0m
[ 4455s] [32m        before(:each) { run_command('env') }[0m
[ 4455s] [32m        before(:each) { stop_all_commands }[0m
[ 4455s] [32m[0m
[ 4455s] [32m        it do[0m
[ 4455s] [32m          with_environment 'REALLY_LONG_LONG_VARIABLE' => 'a' do[0m
[ 4455s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a'[0m
[ 4455s] [32m          end[0m
[ 4455s] [32m        end[0m
[ 4455s] [32m[0m
[ 4455s] [32m        # Has no effect here, is not in block and not a command `run`[0m
[ 4455s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq 'a' }[0m
[ 4455s] [32m      end[0m
[ 4455s] [32m      """[0m
[ 4463s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4463s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4463s] 
[ 4463s] Feature: Set environment variable via API-method
[ 4463s]   It is quite handy to modify the environment of a process. To make this
[ 4463s]   possible, `aruba` provides several methods. One of these is
[ 4463s]   `#set_environment_variable`. Using this sets the value of a
[ 4463s]   non-existing variable and overwrites an existing value. Each variable name
[ 4463s]   and each value is converted to a string. Otherwise `ruby` would complain
[ 4463s]   about an invalid argument. To make use of a variable you can either use `#run`
[ 4463s]   and the like or `#with_environment`. Besides setting a variable globally, you
[ 4463s]   can set one for a block of code only using `#with_environment`.
[ 4463s] 
[ 4463s]   Background: [90m                        # features/04_aruba_api/environment/set_environment_variable.feature:12[0m
[ 4463s]     [32mGiven I use the fixture "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4463s] 
[ 4463s]   Scenario: Non-existing variable[90m                       # features/04_aruba_api/environment/set_environment_variable.feature:15[0m
[ 4463s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4463s] [32m      """[0m
[ 4463s] [32m      require 'spec_helper'[0m
[ 4463s] [32m[0m
[ 4463s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4463s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '1' }[0m
[ 4463s] [32m[0m
[ 4463s] [32m        before(:each) { run_command('env') }[0m
[ 4463s] [32m        before(:each) { stop_all_commands }[0m
[ 4463s] [32m[0m
[ 4463s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=1' }[0m
[ 4463s] [32m      end[0m
[ 4463s] [32m      """[0m
[ 4471s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4471s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4471s] 
[ 4471s]   Scenario: Existing variable set from within the test[90m  # features/04_aruba_api/environment/set_environment_variable.feature:32[0m
[ 4471s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4471s] [32m      """[0m
[ 4471s] [32m      require 'spec_helper'[0m
[ 4471s] [32m[0m
[ 4471s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4471s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '1' }[0m
[ 4471s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '2' }[0m
[ 4471s] [32m[0m
[ 4471s] [32m        before(:each) { run_command('env') }[0m
[ 4471s] [32m        before(:each) { stop_all_commands }[0m
[ 4471s] [32m[0m
[ 4471s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=2' }[0m
[ 4471s] [32m      end[0m
[ 4471s] [32m      """[0m
[ 4479s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4479s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4479s] 
[ 4480s]   Scenario: Existing variable set by some outer parent process[90m # features/04_aruba_api/environment/set_environment_variable.feature:51[0m
[ 4480s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4480s] [32m      """[0m
[ 4480s] [32m      require 'spec_helper'[0m
[ 4480s] [32m[0m
[ 4480s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4480s] [32m[0m
[ 4480s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4480s] [32m        before(:each) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '2' }[0m
[ 4480s] [32m[0m
[ 4480s] [32m        before(:each) { run_command('env') }[0m
[ 4480s] [32m        before(:each) { stop_all_commands }[0m
[ 4480s] [32m[0m
[ 4480s] [32m        it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=2' }[0m
[ 4480s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4480s] [32m      end[0m
[ 4480s] [32m      """[0m
[ 4489s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4489s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4489s] 
[ 4489s]   Scenario: Set variable via ENV[90m                        # features/04_aruba_api/environment/set_environment_variable.feature:72[0m
[ 4489s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4489s] [32m      """[0m
[ 4489s] [32m      require 'spec_helper'[0m
[ 4489s] [32m[0m
[ 4489s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4489s] [32m        before(:each) { ENV['REALLY_LONG_LONG_VARIABLE'] = '2' }[0m
[ 4489s] [32m[0m
[ 4489s] [32m        before(:each) { run_command('env') }[0m
[ 4489s] [32m        before(:each) { stop_all_commands }[0m
[ 4489s] [32m[0m
[ 4489s] [32m        it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=2' }[0m
[ 4489s] [32m      end[0m
[ 4489s] [32m      """[0m
[ 4497s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4497s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4497s] 
[ 4497s]   Scenario: Existing variable set in before block in RSpec[90m # features/04_aruba_api/environment/set_environment_variable.feature:90[0m
[ 4497s]     Setting environment variables with `#set_environment_variable('VAR', 'value')` takes
[ 4497s]     precedence before setting variables with `ENV['VAR'] = 'value'`.
[ 4497s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m    # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4497s] [32m      """[0m
[ 4497s] [32m      require 'spec_helper'[0m
[ 4497s] [32m[0m
[ 4497s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4497s] [32m        before(:each) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '1' }[0m
[ 4497s] [32m        before(:each) { ENV['REALLY_LONG_LONG_VARIABLE'] = '2' }[0m
[ 4497s] [32m[0m
[ 4497s] [32m        before(:each) { run_command('env') }[0m
[ 4497s] [32m        before(:each) { stop_all_commands }[0m
[ 4497s] [32m[0m
[ 4497s] [32m        it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=1' }[0m
[ 4497s] [32m      end[0m
[ 4497s] [32m      """[0m
[ 4505s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4505s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4505s] 
[ 4505s]   Scenario: Run some ruby code in code with previously set environment[90m # features/04_aruba_api/environment/set_environment_variable.feature:112[0m
[ 4505s]     The `#with_environment`-block makes the change environment temporary
[ 4505s]     avaiable for the code run within the block.
[ 4505s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m                # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4505s] [32m      """[0m
[ 4505s] [32m      require 'spec_helper'[0m
[ 4505s] [32m[0m
[ 4505s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4505s] [32m[0m
[ 4505s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4505s] [32m        before(:each) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '2' }[0m
[ 4505s] [32m[0m
[ 4505s] [32m        before(:each) { run_command('env') }[0m
[ 4505s] [32m        before(:each) { stop_all_commands }[0m
[ 4505s] [32m[0m
[ 4505s] [32m        it do[0m
[ 4505s] [32m          with_environment do[0m
[ 4505s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '2'[0m
[ 4505s] [32m          end[0m
[ 4505s] [32m        end[0m
[ 4505s] [32m[0m
[ 4505s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4505s] [32m[0m
[ 4505s] [32m      end[0m
[ 4505s] [32m      """[0m
[ 4514s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                 # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4514s]     [32mThen the specs should all pass[90m                                     # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4514s] 
[ 4514s]   Scenario: Run some ruby code with local environment[90m   # features/04_aruba_api/environment/set_environment_variable.feature:142[0m
[ 4514s]     If you need to set some environment variables only for the given block.
[ 4514s]     Pass it an `Hash` containing the environment variables.
[ 4514s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4514s] [32m      """[0m
[ 4514s] [32m      require 'spec_helper'[0m
[ 4514s] [32m[0m
[ 4514s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4514s] [32m[0m
[ 4514s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4514s] [32m        before(:each) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '2' }[0m
[ 4514s] [32m[0m
[ 4514s] [32m        before(:each) { run_command('env') }[0m
[ 4514s] [32m        before(:each) { stop_all_commands }[0m
[ 4514s] [32m[0m
[ 4514s] [32m        it do[0m
[ 4514s] [32m          with_environment 'REALLY_LONG_LONG_VARIABLE' => '3' do[0m
[ 4514s] [32m            expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '3'[0m
[ 4514s] [32m          end[0m
[ 4514s] [32m        end[0m
[ 4514s] [32m[0m
[ 4514s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4514s] [32m      end[0m
[ 4514s] [32m      """[0m
[ 4522s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4522s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4522s] 
[ 4523s]   Scenario: Nested setup with rspec[90m                     # features/04_aruba_api/environment/set_environment_variable.feature:171[0m
[ 4523s]     It doesn't matter if you define an environment variable in some outer
[ 4523s]     scope, when you are using `RSpec`.
[ 4523s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4523s] [32m      """[0m
[ 4523s] [32m      require 'spec_helper'[0m
[ 4523s] [32m[0m
[ 4523s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4523s] [32m        before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '1' }[0m
[ 4523s] [32m[0m
[ 4523s] [32m        describe 'Method XX' do[0m
[ 4523s] [32m          before(:each) { run_command('env') }[0m
[ 4523s] [32m          before(:each) { stop_all_commands }[0m
[ 4523s] [32m[0m
[ 4523s] [32m          it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=1' }[0m
[ 4523s] [32m        end[0m
[ 4523s] [32m[0m
[ 4523s] [32m        describe 'Method YY' do[0m
[ 4523s] [32m          before(:each) { set_environment_variable 'LONG_LONG_VARIABLE', '2' }[0m
[ 4523s] [32m[0m
[ 4523s] [32m          before(:each) { run_command('env') }[0m
[ 4523s] [32m          before(:each) { stop_all_commands }[0m
[ 4523s] [32m[0m
[ 4523s] [32m          it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=2' }[0m
[ 4523s] [32m        end[0m
[ 4523s] [32m      end[0m
[ 4523s] [32m      """[0m
[ 4532s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4532s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4532s] 
[ 4532s]   Scenario: When an error occures the ENV is not polluted[90m # features/04_aruba_api/environment/set_environment_variable.feature:203[0m
[ 4532s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m   # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4532s] [32m      """[0m
[ 4532s] [32m      require 'spec_helper'[0m
[ 4532s] [32m[0m
[ 4532s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4532s] [32m[0m
[ 4532s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4532s] [32m        before(:each) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '2' }[0m
[ 4532s] [32m[0m
[ 4532s] [32m        before(:each) { run_command('env') }[0m
[ 4532s] [32m        before(:each) { stop_all_commands }[0m
[ 4532s] [32m[0m
[ 4532s] [32m        it do[0m
[ 4532s] [32m          begin[0m
[ 4532s] [32m            with_environment 'REALLY_LONG_LONG_VARIABLE' => '3' do[0m
[ 4532s] [32m              fail[0m
[ 4532s] [32m            end[0m
[ 4532s] [32m          rescue StandardError[0m
[ 4532s] [32m          end[0m
[ 4532s] [32m[0m
[ 4532s] [32m          expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1'[0m
[ 4532s] [32m        end[0m
[ 4532s] [32m[0m
[ 4532s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4532s] [32m      end[0m
[ 4532s] [32m      """[0m
[ 4540s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4540s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4540s] 
[ 4541s]   Scenario: Run some ruby code with nested environment blocks[90m # features/04_aruba_api/environment/set_environment_variable.feature:233[0m
[ 4541s]     It is possible to use a `#with_environment`-block with a
[ 4541s]     `#with_environment`-block. Each previously set variable is available with
[ 4541s]     the most inner block.
[ 4541s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4541s] [32m      """[0m
[ 4541s] [32m      require 'spec_helper'[0m
[ 4541s] [32m[0m
[ 4541s] [32m      ENV['LONG_LONG_VARIABLE'] = '1'[0m
[ 4541s] [32m      ENV['REALLY_LONG_LONG_VARIABLE'] = '1'[0m
[ 4541s] [32m[0m
[ 4541s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4541s] [32m        it do[0m
[ 4541s] [32m          with_environment 'REALLY_LONG_LONG_VARIABLE' => 2 do[0m
[ 4541s] [32m            with_environment 'LONG_LONG_VARIABLE' => 3 do[0m
[ 4541s] [32m              expect(ENV['LONG_LONG_VARIABLE']).to eq '3'[0m
[ 4541s] [32m              expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '2'[0m
[ 4541s] [32m            end[0m
[ 4541s] [32m          end[0m
[ 4541s] [32m        end[0m
[ 4541s] [32m[0m
[ 4541s] [32m        it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4541s] [32m      end[0m
[ 4541s] [32m      """[0m
[ 4549s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4549s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4549s] 
[ 4549s]   Scenario: Re-use `#with_environment` for multiple `RSpec`-`it`-blocks[90m # features/04_aruba_api/environment/set_environment_variable.feature:262[0m
[ 4549s]     If you chose to run wrap examples via `RSpec`'s `around`-hook, make sure you
[ 4549s]     use `before(:context) {}` instead of `before(:each)` to set an environment
[ 4549s]     variable. Only then the `before`-hook is run before the `around`-hook is
[ 4549s]     run.
[ 4549s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m                 # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4549s] [32m      """[0m
[ 4549s] [32m      require 'spec_helper'[0m
[ 4549s] [32m[0m
[ 4549s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4549s] [32m        # Please mind :context. This is run BEFORE the `around`-hook[0m
[ 4549s] [32m        before(:context) { set_environment_variable 'REALLY_LONG_LONG_VARIABLE', '1' }[0m
[ 4549s] [32m[0m
[ 4549s] [32m        context 'when no arguments are given' do[0m
[ 4549s] [32m          around(:each) do |example|[0m
[ 4549s] [32m            with_environment do[0m
[ 4549s] [32m              example.run[0m
[ 4549s] [32m            end[0m
[ 4549s] [32m          end[0m
[ 4549s] [32m[0m
[ 4549s] [32m          it { expect(ENV['REALLY_LONG_LONG_VARIABLE']).to eq '1' }[0m
[ 4549s] [32m[0m
[ 4549s] [32m          before(:each) { run_command('env') }[0m
[ 4549s] [32m          before(:each) { stop_all_commands }[0m
[ 4549s] [32m[0m
[ 4549s] [32m          it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=1' }[0m
[ 4549s] [32m        end[0m
[ 4549s] [32m[0m
[ 4549s] [32m        context 'when arguments given' do[0m
[ 4549s] [32m          around(:each) do |example|[0m
[ 4549s] [32m            with_environment 'LONG_LONG_VARIABLE' => 2 do[0m
[ 4549s] [32m              example.run[0m
[ 4549s] [32m            end[0m
[ 4549s] [32m          end[0m
[ 4549s] [32m[0m
[ 4549s] [32m          it { expect(ENV['LONG_LONG_VARIABLE']).to eq '2' }[0m
[ 4549s] [32m[0m
[ 4549s] [32m          before(:each) { run_command('env') }[0m
[ 4549s] [32m          before(:each) { stop_all_commands }[0m
[ 4549s] [32m[0m
[ 4549s] [32m          it { expect(last_command_started.output).to include 'REALLY_LONG_LONG_VARIABLE=1' }[0m
[ 4549s] [32m        end[0m
[ 4549s] [32m      end[0m
[ 4549s] [32m      """[0m
[ 4558s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4558s]     [32mThen the specs should all pass[90m                                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4558s] 
[ 4558s]   [36m@unsupported-on-platform-windows[0m
[ 4558s]   Scenario: Mixed-Case variable[90m                         # features/04_aruba_api/environment/set_environment_variable.feature:312[0m
[ 4558s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4558s] [32m      """[0m
[ 4558s] [32m      require 'spec_helper'[0m
[ 4558s] [32m[0m
[ 4558s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4558s] [32m        before(:each) { set_environment_variable 'long_LONG_VARIABLE', '1' }[0m
[ 4558s] [32m[0m
[ 4558s] [32m        before(:each) { run_command('env') }[0m
[ 4558s] [32m        before(:each) { stop_all_commands }[0m
[ 4558s] [32m[0m
[ 4558s] [32m        it { expect(last_command_started.output).to include 'long_LONG_VARIABLE=1' }[0m
[ 4558s] [32m      end[0m
[ 4558s] [32m      """[0m
[ 4566s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4566s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4566s] 
[ 4566s]   Scenario: External ruby file / ruby gem modifying ENV[90m # features/04_aruba_api/environment/set_environment_variable.feature:348[0m
[ 4566s]     There are some Rubygems around which need to modify ENV['NODE_PATH'] like
[ 4566s]     [`ruby-stylus`](https://github.com/forgecrafted/ruby-stylus/blob/e7293362dc8cbf550f7c317d721ba6b9087e8833/lib/stylus.rb#L168).
[ 4566s]     This is supported by aruba as well.
[ 4566s]     [32mGiven a file named "[32m[1mspec/environment_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4566s] [32m      """[0m
[ 4566s] [32m      require 'spec_helper'[0m
[ 4566s] [32m[0m
[ 4566s] [32m      $LOAD_PATH <<  File.expand_path('../../lib', __FILE__)[0m
[ 4566s] [32m[0m
[ 4566s] [32m      RSpec.describe 'Environment command', :type => :aruba do[0m
[ 4566s] [32m        before(:each) do[0m
[ 4566s] [32m          require 'my_library'[0m
[ 4566s] [32m        end[0m
[ 4566s] [32m[0m
[ 4566s] [32m        before(:each) { run_command('env') }[0m
[ 4566s] [32m        before(:each) { stop_all_commands }[0m
[ 4567s] [32m[0m
[ 4567s] [32m        it { expect(last_command_started.output).to include 'LONG_LONG_VARIABLE=1' }[0m
[ 4567s] [32m      end[0m
[ 4567s] [32m      """[0m
[ 4567s]     [32mAnd a file named "[32m[1mlib/my_library.rb[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4567s] [32m      """[0m
[ 4567s] [32m      ENV['LONG_LONG_VARIABLE'] = '1'[0m
[ 4567s] [32m      """[0m
[ 4575s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                  # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4575s]     [32mThen the specs should all pass[90m                      # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4575s] 
[ 4575s] Feature: Change current working directory
[ 4575s]   If you need to run some code in a different directory you can use the `cd`
[ 4575s]   command. It comes in two flavors:
[ 4575s] 
[ 4575s]   \* First can simply use `cd 'some-dir'`
[ 4575s]   \* Second can use the block notation `cd('some-dir') { Dir.getwd }`
[ 4575s] 
[ 4575s]   If you chose to use the latter one, the result of your block is returned. The
[ 4575s]   current working directory is only changed for the code inside the block -
[ 4575s]   it's use is side effect free.
[ 4575s] 
[ 4576s]   Background: [90m                            # features/04_aruba_api/filesystem/cd_to_directory.feature:13[0m
[ 4576s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4576s] 
[ 4576s]   Scenario: Existing directory[90m                 # features/04_aruba_api/filesystem/cd_to_directory.feature:16[0m
[ 4576s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4576s] [32m      """[0m
[ 4576s] [32m      require 'spec_helper'[0m
[ 4576s] [32m[0m
[ 4576s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4576s] [32m        before(:each) do [0m
[ 4576s] [32m          create_directory 'new_dir.d'[0m
[ 4576s] [32m          cd 'new_dir.d'[0m
[ 4576s] [32m        end[0m
[ 4576s] [32m[0m
[ 4576s] [32m        before(:each) { run_command_and_stop 'pwd' }[0m
[ 4576s] [32m[0m
[ 4576s] [32m        it { expect(last_command_started.output).to include 'new_dir.d' }[0m
[ 4576s] [32m      end[0m
[ 4576s] [32m      """[0m
[ 4584s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4584s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4584s] 
[ 4584s]   Scenario: Non-Existing directory[90m             # features/04_aruba_api/filesystem/cd_to_directory.feature:35[0m
[ 4584s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4584s] [32m      """[0m
[ 4584s] [32m      require 'spec_helper'[0m
[ 4584s] [32m[0m
[ 4584s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4584s] [32m        before(:each) { cd 'new_dir.d' }[0m
[ 4584s] [32m        before(:each) { run_command_and_stop 'pwd' }[0m
[ 4584s] [32m[0m
[ 4584s] [32m        it { expect(last_command_started.output).to include 'new_dir.d' }[0m
[ 4584s] [32m        it { expect(last_command_started).to be_executed_in_time }[0m
[ 4584s] [32m      end[0m
[ 4584s] [32m      """[0m
[ 4591s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4591s]     [32mThen the specs should[32m[1m not[0m[0m[32m pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4591s] 
[ 4592s]   Scenario: With block in it-block[90m             # features/04_aruba_api/filesystem/cd_to_directory.feature:51[0m
[ 4592s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4592s] [32m      """[0m
[ 4592s] [32m      require 'spec_helper'[0m
[ 4592s] [32m[0m
[ 4592s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4592s] [32m        before(:each) do[0m
[ 4592s] [32m          create_directory 'new_dir.d/subdir.d'[0m
[ 4592s] [32m        end[0m
[ 4592s] [32m[0m
[ 4592s] [32m        it do[0m
[ 4592s] [32m          cd('new_dir.d/subdir.d') { expect(Dir.getwd).to include 'new_dir.d/subdir.d'  }[0m
[ 4592s] [32m        end[0m
[ 4592s] [32m      end[0m
[ 4592s] [32m      """[0m
[ 4599s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4599s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4599s] 
[ 4600s]   Scenario: With block in before-block[90m         # features/04_aruba_api/filesystem/cd_to_directory.feature:69[0m
[ 4600s]     Running `cd` with a block does not change:
[ 4600s] 
[ 4600s]     \* The current directory - `Dir.getwd`
[ 4600s]     \* Aruba's current directory
[ 4600s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4600s] [32m      """[0m
[ 4600s] [32m      require 'spec_helper'[0m
[ 4600s] [32m[0m
[ 4600s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4600s] [32m        before(:each) do[0m
[ 4600s] [32m          create_directory 'new_dir.d/subdir.d'[0m
[ 4600s] [32m        end[0m
[ 4600s] [32m[0m
[ 4600s] [32m        before :each do[0m
[ 4600s] [32m          cd('new_dir.d/subdir.d') do[0m
[ 4600s] [32m            # you code[0m
[ 4600s] [32m          end[0m
[ 4600s] [32m        end[0m
[ 4600s] [32m[0m
[ 4600s] [32m        it { expect(Dir.getwd).not_to include 'new_dir.d/subdir.d' }[0m
[ 4600s] [32m        it { expect(expand_path('.')).not_to include 'new_dir.d/subdir.d' }[0m
[ 4600s] [32m      end[0m
[ 4600s] [32m      """[0m
[ 4608s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4608s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4608s] 
[ 4608s]   Scenario: The result of the block is returned[90m # features/04_aruba_api/filesystem/cd_to_directory.feature:98[0m
[ 4608s]     If you need to run some code in a different directory, you can also use the
[ 4608s]     block-notation of `cd`.
[ 4608s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4608s] [32m      """[0m
[ 4608s] [32m      require 'spec_helper'[0m
[ 4608s] [32m[0m
[ 4608s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4608s] [32m        before(:each) do[0m
[ 4608s] [32m          create_directory 'new_dir.d/subdir.d'[0m
[ 4608s] [32m        end[0m
[ 4608s] [32m[0m
[ 4608s] [32m        before :each do[0m
[ 4608s] [32m          @my_output = cd('new_dir.d/subdir.d') { Dir.getwd }[0m
[ 4608s] [32m        end[0m
[ 4608s] [32m[0m
[ 4608s] [32m        it { expect(@my_output).to include 'new_dir.d/subdir.d' }[0m
[ 4608s] [32m      end[0m
[ 4608s] [32m      """[0m
[ 4617s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4617s]     [32mThen the specs should all pass[90m              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4617s] 
[ 4618s]   Scenario: It changes the PWD- and OLDPWD-ENV-variable for a given block[90m # features/04_aruba_api/filesystem/cd_to_directory.feature:122[0m
[ 4618s]     If you need to run some code in a different directory, you can also use the
[ 4618s]     block-notation of `cd`.
[ 4618s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m                            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4618s] [32m      """[0m
[ 4618s] [32m      require 'spec_helper'[0m
[ 4618s] [32m[0m
[ 4618s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4618s] [32m        before(:each) do[0m
[ 4618s] [32m          create_directory 'new_dir.d'[0m
[ 4618s] [32m        end[0m
[ 4618s] [32m[0m
[ 4618s] [32m        before :each do[0m
[ 4618s] [32m          cd('new_dir.d/') do[0m
[ 4618s] [32m            @pwd    = ENV['PWD'] [0m
[ 4618s] [32m            @oldpwd = ENV['OLDPWD'] [0m
[ 4618s] [32m          end[0m
[ 4618s] [32m        end[0m
[ 4618s] [32m[0m
[ 4618s] [32m        it { expect(@pwd).to end_with 'new_dir.d' }[0m
[ 4618s] [32m        it { expect(@oldpwd).to end_with 'cli-app' }[0m
[ 4618s] [32m      end[0m
[ 4618s] [32m      """[0m
[ 4625s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4625s]     [32mThen the specs should all pass[90m                                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4625s] 
[ 4626s]   Scenario: Nested cd calls[90m                    # features/04_aruba_api/filesystem/cd_to_directory.feature:150[0m
[ 4626s]     If you need to run some code in a different directory, you can also use the
[ 4626s]     block-notation of `cd`.
[ 4626s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4626s] [32m      """[0m
[ 4626s] [32m      require 'spec_helper'[0m
[ 4626s] [32m[0m
[ 4626s] [32m      RSpec.describe 'cd to directory', :type => :aruba do[0m
[ 4626s] [32m        before(:each) do[0m
[ 4626s] [32m          create_directory 'new_dir.d/subdir.d'[0m
[ 4626s] [32m        end[0m
[ 4626s] [32m[0m
[ 4626s] [32m        before :each do[0m
[ 4626s] [32m          cd('new_dir.d') do[0m
[ 4626s] [32m            @oldpwd_1 = ENV['OLDPWD'] [0m
[ 4626s] [32m            @pwd_1    = ENV['PWD'] [0m
[ 4626s] [32m[0m
[ 4626s] [32m            cd('subdir.d') do[0m
[ 4626s] [32m              @oldpwd_2 = ENV['OLDPWD'] [0m
[ 4626s] [32m              @pwd_2    = ENV['PWD'] [0m
[ 4626s] [32m            end[0m
[ 4626s] [32m          end[0m
[ 4626s] [32m        end[0m
[ 4626s] [32m[0m
[ 4626s] [32m        it { expect(@oldpwd_1).to be_end_with 'cli-app' }[0m
[ 4626s] [32m        it { expect(@pwd_1).to be_end_with 'new_dir.d' }[0m
[ 4626s] [32m[0m
[ 4626s] [32m        it { expect(@oldpwd_2).to be_end_with 'new_dir.d' }[0m
[ 4626s] [32m        it { expect(@pwd_2).to be_end_with 'subdir.d' }[0m
[ 4626s] [32m      end[0m
[ 4626s] [32m      """[0m
[ 4634s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4634s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4634s] 
[ 4634s] Feature: Check existence of files and directories
[ 4634s]   Use the `#exist?` to check if a path exists within
[ 4634s]   `aruba`'s working directory. , May also want to look for `#file?` or
[ 4634s]   `#directory?` for some more specific tests.
[ 4634s] 
[ 4634s]   ```ruby
[ 4634s]   require 'spec_helper'
[ 4634s] 
[ 4634s]   RSpec.configure do |config|
[ 4634s]     config.include Aruba::Api
[ 4634s]   end
[ 4634s] 
[ 4634s]   RSpec.describe 'Check if directory and file exist' do
[ 4634s]     let(:directory) { 'dir.d' }
[ 4634s]     let(:file) { 'file.txt' }
[ 4634s] 
[ 4634s]     before(:each) { create_directory(directory) }
[ 4634s]     before(:each) { touch(file) }
[ 4634s] 
[ 4634s]     it { expect(exist?(directory)).to be true }
[ 4634s]     it { expect(exist?(file)).to be true }
[ 4634s]   end
[ 4634s]   ```
[ 4634s] 
[ 4634s]   Background: [90m                            # features/04_aruba_api/filesystem/check_existence_file_or_directory.feature:26[0m
[ 4634s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4634s] 
[ 4634s]   Scenario: Is file or directory and exists[90m                  # features/04_aruba_api/filesystem/check_existence_file_or_directory.feature:29[0m
[ 4634s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4634s] [32m      """[0m
[ 4634s] [32m      require 'spec_helper'[0m
[ 4634s] [32m[0m
[ 4634s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4634s] [32m        let(:directory) { 'dir.d' }[0m
[ 4634s] [32m        let(:file) { 'file.txt' }[0m
[ 4634s] [32m[0m
[ 4634s] [32m        before(:each) { create_directory(directory) }[0m
[ 4634s] [32m        before(:each) { touch(file) }[0m
[ 4634s] [32m[0m
[ 4634s] [32m        it { expect(exist?(directory)).to be true }[0m
[ 4634s] [32m        it { expect(exist?(file)).to be true }[0m
[ 4634s] [32m      end[0m
[ 4634s] [32m      """[0m
[ 4642s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4642s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4642s] 
[ 4643s]   Scenario: Is file or directory and does not exist[90m          # features/04_aruba_api/filesystem/check_existence_file_or_directory.feature:48[0m
[ 4643s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4643s] [32m      """[0m
[ 4643s] [32m      require 'spec_helper'[0m
[ 4643s] [32m[0m
[ 4643s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4643s] [32m        let(:directory) { 'dir.d' }[0m
[ 4643s] [32m        let(:file) { 'file.txt' }[0m
[ 4643s] [32m[0m
[ 4643s] [32m        it { expect(exist?(directory)).to be false }[0m
[ 4643s] [32m        it { expect(exist?(file)).to be false }[0m
[ 4643s] [32m      end[0m
[ 4643s] [32m      """[0m
[ 4650s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4650s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4650s] 
[ 4650s] Feature: Check if path is absolute
[ 4650s]   Use the `#absolute?`-method to check if a path is an absolute path.
[ 4650s] 
[ 4650s]   ```ruby
[ 4650s]   require 'spec_helper'
[ 4650s] 
[ 4650s]   RSpec.configure do |config|
[ 4650s]     config.include Aruba::Api
[ 4650s]   end
[ 4650s] 
[ 4650s]   RSpec.describe 'Check if directory or file is absolute' do
[ 4650s]     let(:path) { '/path/to/file.txt' }
[ 4650s] 
[ 4650s]     it { expect(absolute?(path)).to be true }
[ 4650s]   end
[ 4650s]   ```
[ 4650s] 
[ 4651s]   Background: [90m                            # features/04_aruba_api/filesystem/check_if_path_is_absolute.feature:19[0m
[ 4651s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4651s] 
[ 4651s]   Scenario: Is path absolute[90m                                 # features/04_aruba_api/filesystem/check_if_path_is_absolute.feature:22[0m
[ 4651s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4651s] [32m      """[0m
[ 4651s] [32m      require 'spec_helper'[0m
[ 4651s] [32m[0m
[ 4651s] [32m      RSpec.describe 'Check if directory or file is absolute', :type => :aruba do[0m
[ 4651s] [32m        let(:path) { '/path/to/file.txt' }[0m
[ 4651s] [32m[0m
[ 4651s] [32m        it { expect(absolute?(path)).to be true }[0m
[ 4651s] [32m      end[0m
[ 4651s] [32m      """[0m
[ 4659s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4659s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4659s] 
[ 4660s]   Scenario: Path should be absolute, but it's relative[90m       # features/04_aruba_api/filesystem/check_if_path_is_absolute.feature:36[0m
[ 4660s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4660s] [32m      """[0m
[ 4660s] [32m      require 'spec_helper'[0m
[ 4660s] [32m[0m
[ 4660s] [32m      RSpec.describe 'Check if directory or file is absolute', :type => :aruba do[0m
[ 4660s] [32m        let(:path) { 'file.txt' }[0m
[ 4660s] [32m[0m
[ 4660s] [32m        it { expect(absolute?(path)).to be false }[0m
[ 4660s] [32m      end[0m
[ 4660s] [32m      """[0m
[ 4668s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4668s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4668s] 
[ 4668s] Feature: Check existence of directories
[ 4668s]   Use the `#directory?` to check if a path is a directory and exists within
[ 4668s]   `aruba`'s working directory.
[ 4668s] 
[ 4668s]   ```ruby
[ 4668s]   require 'spec_helper'
[ 4668s] 
[ 4668s]   RSpec.configure do |config|
[ 4668s]     config.include Aruba::Api
[ 4668s]   end
[ 4668s] 
[ 4668s]   RSpec.describe 'Check if directory and file exist' do
[ 4668s]     let(:directory) { 'dir.d' }
[ 4668s] 
[ 4668s]     before(:each) { create_directory(directory) }
[ 4668s] 
[ 4668s]     it { expect(directory?(directory)).to be true }
[ 4668s]   end
[ 4668s]   ```
[ 4668s] 
[ 4668s]   Background: [90m                            # features/04_aruba_api/filesystem/check_if_path_is_directory.feature:22[0m
[ 4668s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4668s] 
[ 4668s]   Scenario: Is directory and exist[90m                           # features/04_aruba_api/filesystem/check_if_path_is_directory.feature:25[0m
[ 4668s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4668s] [32m      """[0m
[ 4668s] [32m      require 'spec_helper'[0m
[ 4668s] [32m[0m
[ 4668s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4668s] [32m        let(:directory) { 'dir.d' }[0m
[ 4668s] [32m        before(:each) { create_directory(directory) }[0m
[ 4668s] [32m[0m
[ 4668s] [32m        it { expect(directory?(directory)).to be true }[0m
[ 4668s] [32m      end[0m
[ 4668s] [32m      """[0m
[ 4676s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4676s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4676s] 
[ 4677s]   Scenario: Is file, but should be directory and exist[90m       # features/04_aruba_api/filesystem/check_if_path_is_directory.feature:40[0m
[ 4677s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4677s] [32m      """[0m
[ 4677s] [32m      require 'spec_helper'[0m
[ 4677s] [32m[0m
[ 4677s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4677s] [32m        let(:file) { 'file.txt' }[0m
[ 4677s] [32m        before(:each) { touch(file) }[0m
[ 4677s] [32m[0m
[ 4677s] [32m        it { expect(directory?(file)).to be false }[0m
[ 4677s] [32m      end[0m
[ 4677s] [32m      """[0m
[ 4684s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4684s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4684s] 
[ 4684s] Feature: Check existence of files
[ 4684s]   Use the `#file?` to check if a path is a file and exists within `aruba`'s
[ 4684s]   working directory.
[ 4684s] 
[ 4684s]   ```ruby
[ 4684s]   require 'spec_helper'
[ 4684s] 
[ 4684s]   RSpec.configure do |config|
[ 4684s]     config.include Aruba::Api
[ 4684s]   end
[ 4684s] 
[ 4684s]   RSpec.describe 'Check if directory and file exist' do
[ 4684s]     let(:file) { 'file.txt' }
[ 4684s] 
[ 4684s]     before(:each) { touch(file) }
[ 4684s] 
[ 4684s]     it { expect(file?(file)).to be true }
[ 4684s]   end
[ 4684s]   ```
[ 4684s] 
[ 4685s]   Background: [90m                            # features/04_aruba_api/filesystem/check_if_path_is_file.feature:22[0m
[ 4685s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4685s] 
[ 4685s]   Scenario: Is file and exist[90m                                # features/04_aruba_api/filesystem/check_if_path_is_file.feature:25[0m
[ 4685s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4685s] [32m      """[0m
[ 4685s] [32m      require 'spec_helper'[0m
[ 4685s] [32m[0m
[ 4685s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4685s] [32m        let(:file) { 'file.txt' }[0m
[ 4685s] [32m[0m
[ 4685s] [32m        before(:each) { touch(file) }[0m
[ 4685s] [32m[0m
[ 4685s] [32m        it { expect(file?(file)).to be true }[0m
[ 4685s] [32m      end[0m
[ 4685s] [32m      """[0m
[ 4693s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4693s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4693s] 
[ 4693s]   Scenario: Is directory, but should be file and exist[90m       # features/04_aruba_api/filesystem/check_if_path_is_file.feature:41[0m
[ 4693s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4693s] [32m      """[0m
[ 4693s] [32m      require 'spec_helper'[0m
[ 4693s] [32m[0m
[ 4693s] [32m      RSpec.describe 'Check if directory and file exist', :type => :aruba do[0m
[ 4693s] [32m        let(:directory) { 'dir.d' }[0m
[ 4693s] [32m        before(:each) { create_directory(directory) }[0m
[ 4693s] [32m[0m
[ 4693s] [32m        it { expect(file?(directory)).to be false }[0m
[ 4693s] [32m      end[0m
[ 4693s] [32m      """[0m
[ 4702s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4702s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4702s] 
[ 4703s] Feature: Check if path is relative
[ 4703s]   Use the `#relative?`-method to check if a path is an relative path.
[ 4703s] 
[ 4703s]   ```ruby
[ 4703s]   require 'spec_helper'
[ 4703s] 
[ 4703s]   RSpec.configure do |config|
[ 4703s]     config.include Aruba::Api
[ 4703s]   end
[ 4703s] 
[ 4703s]   RSpec.describe 'Check if directory or file is relative' do
[ 4703s]     let(:path) { '/path/to/file.txt' }
[ 4703s] 
[ 4703s]     it { expect(relative?(path)).to be true }
[ 4703s]   end
[ 4703s]   ```
[ 4703s] 
[ 4703s]   Background: [90m                            # features/04_aruba_api/filesystem/check_if_path_is_relative.feature:19[0m
[ 4703s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4703s] 
[ 4703s]   Scenario: Is path relative[90m                                 # features/04_aruba_api/filesystem/check_if_path_is_relative.feature:22[0m
[ 4703s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4703s] [32m      """[0m
[ 4703s] [32m      require 'spec_helper'[0m
[ 4703s] [32m[0m
[ 4703s] [32m      RSpec.describe 'Check if directory or file is relative', :type => :aruba do[0m
[ 4703s] [32m        let(:path) { 'file.txt' }[0m
[ 4703s] [32m[0m
[ 4703s] [32m        it { expect(relative?(path)).to be true }[0m
[ 4703s] [32m      end[0m
[ 4703s] [32m      """[0m
[ 4710s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4710s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4710s] 
[ 4711s]   Scenario: Path should be relative, but it's relative[90m       # features/04_aruba_api/filesystem/check_if_path_is_relative.feature:36[0m
[ 4711s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4711s] [32m      """[0m
[ 4711s] [32m      require 'spec_helper'[0m
[ 4711s] [32m[0m
[ 4711s] [32m      RSpec.describe 'Check if directory or file is relative', :type => :aruba do[0m
[ 4711s] [32m        let(:path) { '/path/to/file.txt' }[0m
[ 4711s] [32m[0m
[ 4711s] [32m        it { expect(relative?(path)).to be false }[0m
[ 4711s] [32m      end[0m
[ 4711s] [32m      """[0m
[ 4718s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4718s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4718s] 
[ 4719s] Feature: Create Directory
[ 4719s]   Use the `#create_directory`-method to create a directory within `aruba`'s
[ 4719s]   working directory.
[ 4719s] 
[ 4719s]   ```ruby
[ 4719s]   require 'spec_helper'
[ 4719s] 
[ 4719s]   RSpec.configure do |config|
[ 4719s]     config.include Aruba::Api
[ 4719s]   end
[ 4719s] 
[ 4719s]   RSpec.describe 'Create directory' do
[ 4719s]     let(:directory) { 'dir.d' }
[ 4719s]     before(:each) { create_directory(directory) }
[ 4719s] 
[ 4719s]     it { expect(directory).to be_an_existing_directory }
[ 4719s]   end
[ 4719s]   ```
[ 4719s] 
[ 4719s]   Background: [90m                            # features/04_aruba_api/filesystem/create_directory.feature:21[0m
[ 4719s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4719s] 
[ 4719s]   Scenario: New directory[90m                                    # features/04_aruba_api/filesystem/create_directory.feature:24[0m
[ 4719s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4719s] [32m      """[0m
[ 4719s] [32m      require 'spec_helper'[0m
[ 4719s] [32m[0m
[ 4719s] [32m      RSpec.describe 'Create directory', :type => :aruba do[0m
[ 4719s] [32m        let(:directory) { 'dir.d' }[0m
[ 4719s] [32m        before(:each) { create_directory(directory) }[0m
[ 4719s] [32m[0m
[ 4719s] [32m        it { expect(directory).to be_an_existing_directory }[0m
[ 4719s] [32m      end[0m
[ 4719s] [32m      """[0m
[ 4727s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4727s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4727s] 
[ 4728s]   Scenario: Existing directory[90m                               # features/04_aruba_api/filesystem/create_directory.feature:39[0m
[ 4728s]     It does not complain if a directory already exists.
[ 4728s]     [32mGiven a file named "[32m[1mspec/create_directory_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4728s] [32m      """[0m
[ 4728s] [32m      require 'spec_helper'[0m
[ 4728s] [32m[0m
[ 4728s] [32m      RSpec.describe 'Create directory', :type => :aruba do[0m
[ 4728s] [32m        let(:directory) { 'dir.d' }[0m
[ 4728s] [32m[0m
[ 4728s] [32m        before(:each) { create_directory(directory) }[0m
[ 4728s] [32m        before(:each) { create_directory(directory) }[0m
[ 4728s] [32m[0m
[ 4728s] [32m        it { expect(directory).to be_an_existing_directory }[0m
[ 4728s] [32m      end[0m
[ 4728s] [32m      """[0m
[ 4737s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4737s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4737s] 
[ 4737s] Feature: Move file/directory
[ 4737s]   If you need to move some files/directories you can use the `#move`-method
[ 4737s]   command. If multiple arguments are given, the last one needs to be a directory.
[ 4737s] 
[ 4737s]   Background: [90m                            # features/04_aruba_api/filesystem/move_file_or_directory.feature:6[0m
[ 4737s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4737s] 
[ 4737s]   Scenario: Non-existing destination[90m           # features/04_aruba_api/filesystem/move_file_or_directory.feature:9[0m
[ 4737s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4737s] [32m      """[0m
[ 4737s] [32m      require 'spec_helper'[0m
[ 4737s] [32m[0m
[ 4737s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4737s] [32m        let(:old_location) { 'old_dir.d' }[0m
[ 4737s] [32m        let(:new_location) { 'new_dir.d' }[0m
[ 4737s] [32m[0m
[ 4737s] [32m        before(:each) do [0m
[ 4737s] [32m          create_directory old_location[0m
[ 4737s] [32m          move old_location, new_location[0m
[ 4737s] [32m        end[0m
[ 4737s] [32m[0m
[ 4737s] [32m        it { expect(new_location).to be_an_existing_directory }[0m
[ 4737s] [32m      end[0m
[ 4737s] [32m      """[0m
[ 4746s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4746s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4746s] 
[ 4746s]   Scenario: Existing destination[90m               # features/04_aruba_api/filesystem/move_file_or_directory.feature:29[0m
[ 4746s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4746s] [32m      """[0m
[ 4746s] [32m      require 'spec_helper'[0m
[ 4746s] [32m[0m
[ 4746s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4746s] [32m        let(:old_location) { 'old_dir.d' }[0m
[ 4746s] [32m        let(:new_location) { 'new_dir.d' }[0m
[ 4746s] [32m[0m
[ 4746s] [32m        before(:each) do [0m
[ 4746s] [32m          create_directory old_location[0m
[ 4746s] [32m          create_directory new_location[0m
[ 4746s] [32m[0m
[ 4746s] [32m          move old_location, new_location[0m
[ 4746s] [32m        end[0m
[ 4746s] [32m[0m
[ 4746s] [32m        it { expect(File.join(new_location, old_location)).to be_an_existing_directory }[0m
[ 4746s] [32m      end[0m
[ 4746s] [32m      """[0m
[ 4754s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4754s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4754s] 
[ 4754s]   Scenario: Source is fixture path[90m             # features/04_aruba_api/filesystem/move_file_or_directory.feature:51[0m
[ 4754s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4754s] [32m      """[0m
[ 4754s] [32m      require 'spec_helper'[0m
[ 4754s] [32m[0m
[ 4754s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4754s] [32m        let(:old_location) { '%/old_dir.d' }[0m
[ 4754s] [32m        let(:new_location) { 'new_dir.d' }[0m
[ 4754s] [32m[0m
[ 4754s] [32m        it { expect { move old_location, new_location }.to raise_error ArgumentError, /fixture/ }[0m
[ 4754s] [32m      end[0m
[ 4754s] [32m      """[0m
[ 4762s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4762s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4762s] 
[ 4763s]   Scenario: Destination is fixture path[90m        # features/04_aruba_api/filesystem/move_file_or_directory.feature:66[0m
[ 4763s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4763s] [32m      """[0m
[ 4763s] [32m      require 'spec_helper'[0m
[ 4763s] [32m[0m
[ 4763s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4763s] [32m        let(:old_location) { 'old_dir.d' }[0m
[ 4763s] [32m        let(:new_location) { '%/new_dir.d' }[0m
[ 4763s] [32m[0m
[ 4763s] [32m        it { expect { move old_location, new_location }.to raise_error ArgumentError, /fixture/ }[0m
[ 4763s] [32m      end[0m
[ 4763s] [32m      """[0m
[ 4771s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4771s]     [32mThen the specs should all pass[90m             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4771s] 
[ 4772s]   Scenario: Multiple sources and destination is directory[90m # features/04_aruba_api/filesystem/move_file_or_directory.feature:81[0m
[ 4772s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m            # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4772s] [32m      """[0m
[ 4772s] [32m      require 'spec_helper'[0m
[ 4772s] [32m[0m
[ 4772s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4772s] [32m        let(:old_location) { %w(old_dir1.d old_dir2.d) }[0m
[ 4772s] [32m        let(:new_location) { 'new_dir.d' }[0m
[ 4772s] [32m[0m
[ 4772s] [32m        before :each do[0m
[ 4772s] [32m          old_location.each { |l| create_directory l }[0m
[ 4772s] [32m          move old_location, new_location[0m
[ 4772s] [32m        end[0m
[ 4772s] [32m[0m
[ 4772s] [32m        it { expect(old_location.map { |l| File.join(new_location, l) }).to all be_an_existing_directory }[0m
[ 4772s] [32m      end[0m
[ 4772s] [32m      """[0m
[ 4781s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4781s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4781s] 
[ 4782s]   Scenario: Multiple sources and destination is file[90m # features/04_aruba_api/filesystem/move_file_or_directory.feature:101[0m
[ 4782s]     [32mGiven a file named "[32m[1mspec/cd_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4782s] [32m      """[0m
[ 4782s] [32m      require 'spec_helper'[0m
[ 4782s] [32m[0m
[ 4782s] [32m      RSpec.describe 'Move', :type => :aruba do[0m
[ 4782s] [32m        let(:old_location) { %w(old_dir1.d old_dir2.d) }[0m
[ 4782s] [32m        let(:new_location) { 'new_file.txt' }[0m
[ 4782s] [32m[0m
[ 4782s] [32m        before :each do[0m
[ 4782s] [32m          old_location.each { |l| create_directory l }[0m
[ 4782s] [32m          touch new_location[0m
[ 4782s] [32m        end[0m
[ 4782s] [32m[0m
[ 4782s] [32m        it { expect { move old_location, new_location }.to raise_error ArgumentError, /Multiple sources/ }[0m
[ 4782s] [32m      end[0m
[ 4782s] [32m      """[0m
[ 4791s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                               # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4792s]     [32mThen the specs should all pass[90m                   # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4792s] 
[ 4792s] Feature: Use fixtures in your tests
[ 4792s]   Sometimes your tests need existing files to work - e.g binary data files you
[ 4792s]   cannot create programmatically. Since `aruba` >= 0.6.3 includes some basic
[ 4792s]   support for fixtures. All you need to do is the following:
[ 4792s]   
[ 4792s]   1. Create a `fixtures`-directory
[ 4792s]   2. Create fixture files in this directory
[ 4792s] 
[ 4792s]   Background: [90m                            # features/04_aruba_api/filesystem/use_fixtures.feature:11[0m
[ 4792s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4792s] 
[ 4792s]   Scenario: Use a fixture for your tests[90m                     # features/04_aruba_api/filesystem/use_fixtures.feature:14[0m
[ 4792s]     [32mGiven a file named "[32m[1mfeatures/fixtures.feature[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4792s] [32m      """[0m
[ 4792s] [32m      Feature: Fixture[0m
[ 4792s] [32m        Scenario: Fixture[0m
[ 4792s] [32m          Given a file named "fixtures_spec.rb" with:[0m
[ 4792s] [32m          """[0m
[ 4792s] [32m          RSpec.describe 'My Feature' do[0m
[ 4792s] [32m            describe '#read_music_file' do[0m
[ 4792s] [32m              context 'when the file exists' do[0m
[ 4792s] [32m                before :each { copy '%/song.mp3', 'file.mp3' }[0m
[ 4792s] [32m[0m
[ 4792s] [32m                it { expect('file.mp3').to be_an_existing_file }[0m
[ 4792s] [32m              end[0m
[ 4792s] [32m            end[0m
[ 4792s] [32m          end[0m
[ 4792s] [32m          """[0m
[ 4792s] [32m      """[0m
[ 4792s]     [32mAnd a directory named "[32m[1mfixtures[0m[0m[32m"[90m                         # lib/aruba/cucumber/file.rb:14[0m[0m
[ 4792s]     [32mAnd an empty file named "[32m[1mfixtures/fixtures-app/test.txt[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:44[0m[0m
[ 4797s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4797s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4797s] 
[ 4797s]   Scenario: Use a fixture for your tests in test/[90m                 # features/04_aruba_api/filesystem/use_fixtures.feature:37[0m
[ 4797s]     [32mGiven a file named "[32m[1mfeatures/fixtures.feature[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4797s] [32m      """[0m
[ 4797s] [32m      Feature: Fixture[0m
[ 4797s] [32m        Scenario: Fixture[0m
[ 4797s] [32m          Given a file named "fixtures_spec.rb" with:[0m
[ 4797s] [32m          """[0m
[ 4797s] [32m          RSpec.describe 'My Feature' do[0m
[ 4797s] [32m            describe '#read_music_file' do[0m
[ 4797s] [32m              context 'when the file exists' do[0m
[ 4797s] [32m                before :each { copy '%/song.mp3', 'file.mp3' }[0m
[ 4797s] [32m[0m
[ 4797s] [32m                it { expect('file.mp3').to be_an_existing_file }[0m
[ 4797s] [32m              end[0m
[ 4797s] [32m            end[0m
[ 4797s] [32m          end[0m
[ 4797s] [32m          """[0m
[ 4797s] [32m      """[0m
[ 4797s]     [32mAnd a directory named "[32m[1mtest/fixtures[0m[0m[32m"[90m                         # lib/aruba/cucumber/file.rb:14[0m[0m
[ 4797s]     [32mAnd an empty file named "[32m[1mtest/fixtures/fixtures-app/test.txt[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:44[0m[0m
[ 4802s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4802s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4802s] 
[ 4802s]   Scenario: Use a fixture for your tests in spec/[90m                 # features/04_aruba_api/filesystem/use_fixtures.feature:60[0m
[ 4802s]     [32mGiven a file named "[32m[1mfeatures/fixtures.feature[0m[0m[32m" with:[90m          # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4802s] [32m      """[0m
[ 4802s] [32m      Feature: Fixture[0m
[ 4802s] [32m        Scenario: Fixture[0m
[ 4802s] [32m          Given a file named "fixtures_spec.rb" with:[0m
[ 4802s] [32m          """[0m
[ 4802s] [32m          RSpec.describe 'My Feature' do[0m
[ 4802s] [32m            describe '#read_music_file' do[0m
[ 4802s] [32m              context 'when the file exists' do[0m
[ 4802s] [32m                before :each { copy '%/song.mp3', 'file.mp3' }[0m
[ 4802s] [32m[0m
[ 4802s] [32m                it { expect('file.mp3').to be_an_existing_file }[0m
[ 4802s] [32m              end[0m
[ 4802s] [32m            end[0m
[ 4802s] [32m          end[0m
[ 4802s] [32m          """[0m
[ 4802s] [32m      """[0m
[ 4802s]     [32mAnd a directory named "[32m[1mspec/fixtures[0m[0m[32m"[90m                         # lib/aruba/cucumber/file.rb:14[0m[0m
[ 4802s]     [32mAnd an empty file named "[32m[1mspec/fixtures/fixtures-app/test.txt[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:44[0m[0m
[ 4807s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4807s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4807s] 
[ 4807s]   Scenario: Use a fixture for your tests in features/[90m                 # features/04_aruba_api/filesystem/use_fixtures.feature:83[0m
[ 4807s]     [32mGiven a file named "[32m[1mfeatures/fixtures.feature[0m[0m[32m" with:[90m              # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4807s] [32m      """[0m
[ 4807s] [32m      Feature: Fixture[0m
[ 4807s] [32m        Scenario: Fixture[0m
[ 4807s] [32m          Given a file named "fixtures_spec.rb" with:[0m
[ 4807s] [32m          """[0m
[ 4807s] [32m          RSpec.describe 'My Feature' do[0m
[ 4807s] [32m            describe '#read_music_file' do[0m
[ 4807s] [32m              context 'when the file exists' do[0m
[ 4807s] [32m                before :each { copy '%/song.mp3', 'file.mp3' }[0m
[ 4807s] [32m[0m
[ 4807s] [32m                it { expect('file.mp3').to be_an_existing_file }[0m
[ 4807s] [32m              end[0m
[ 4807s] [32m            end[0m
[ 4807s] [32m          end[0m
[ 4807s] [32m          """[0m
[ 4807s] [32m      """[0m
[ 4807s]     [32mAnd a directory named "[32m[1mfeatures/fixtures[0m[0m[32m"[90m                         # lib/aruba/cucumber/file.rb:14[0m[0m
[ 4807s]     [32mAnd an empty file named "[32m[1mfeatures/fixtures/fixtures-app/test.txt[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:44[0m[0m
[ 4812s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4812s]     [32mThen the specs should all pass[90m                                    # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4812s] 
[ 4813s] Feature: Extract text from output
[ 4813s]   If you need to strip down some command output to plain text, you can use the
[ 4813s]   `#extract_text`-method for this.
[ 4813s] 
[ 4813s]   Background: [90m                            # features/04_aruba_api/text/extract_text.feature:6[0m
[ 4813s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4813s] 
[ 4813s]   Scenario: Output contains ansi escape codes prefixed by \e[90m # features/04_aruba_api/text/extract_text.feature:9[0m
[ 4813s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4813s] [32m      """[0m
[ 4813s] [32m      #!/bin/bash[0m
[ 4813s] [32m      echo -n "\e[31mText"[0m
[ 4813s] [32m      """[0m
[ 4813s]     [32mAnd a file named "[32m[1mspec/extract_text_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4813s] [32m      """[0m
[ 4813s] [32m      require 'spec_helper'[0m
[ 4813s] [32m[0m
[ 4813s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4813s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4813s] [32m        before(:each) { stop_all_commands }[0m
[ 4813s] [32m[0m
[ 4813s] [32m        it { expect(extract_text(unescape_text(last_command.output))).to eq "Text" }[0m
[ 4813s] [32m      end[0m
[ 4813s] [32m      """[0m
[ 4821s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4821s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4821s] 
[ 4822s]   Scenario: Output contains ansi escape codes prefixed by \033[90m # features/04_aruba_api/text/extract_text.feature:29[0m
[ 4822s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4822s] [32m      """[0m
[ 4822s] [32m      #!/bin/bash[0m
[ 4822s] [32m      echo -n "\033[31mText"[0m
[ 4822s] [32m      """[0m
[ 4822s]     [32mAnd a file named "[32m[1mspec/extract_text_spec.rb[0m[0m[32m" with:[90m         # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4822s] [32m      """[0m
[ 4822s] [32m      require 'spec_helper'[0m
[ 4822s] [32m[0m
[ 4822s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4822s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4822s] [32m        before(:each) { stop_all_commands }[0m
[ 4822s] [32m[0m
[ 4822s] [32m        it { expect(extract_text(unescape_text(last_command.output))).to eq "Text" }[0m
[ 4822s] [32m      end[0m
[ 4822s] [32m      """[0m
[ 4831s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4831s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4831s] 
[ 4831s] [36m@experimental[0m
[ 4831s] Feature: Replace variables
[ 4831s]   There are use cases where you need access to some information from aruba in
[ 4831s]   your command line. The `#replace_variables`-method makes this information
[ 4831s]   available.
[ 4831s] 
[ 4831s]   Please note, this feature is experimental for now. The implementation of this
[ 4831s]   feature and the name of variables may change without further notice.
[ 4831s] 
[ 4831s]   Background: [90m                            # features/04_aruba_api/text/replace_variables.feature:11[0m
[ 4831s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4831s] 
[ 4831s]   Scenario: PID of last command started[90m                  # features/04_aruba_api/text/replace_variables.feature:14[0m
[ 4831s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4831s] [32m      """[0m
[ 4831s] [32m      #!/bin/bash[0m
[ 4831s] [32m      exit 0[0m
[ 4831s] [32m      """[0m
[ 4831s]     [32mAnd a file named "[32m[1mspec/replace_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4831s] [32m      """[0m
[ 4831s] [32m      require 'spec_helper'[0m
[ 4831s] [32m[0m
[ 4831s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4831s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4831s] [32m        before(:each) { stop_all_commands }[0m
[ 4831s] [32m[0m
[ 4831s] [32m        it { expect(replace_variables('<pid-last-command-started>')).to eq last_command_started.pid.to_s }[0m
[ 4831s] [32m      end[0m
[ 4831s] [32m      """[0m
[ 4841s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4841s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4841s] 
[ 4842s]   Scenario: No last command started[90m                 # features/04_aruba_api/text/replace_variables.feature:34[0m
[ 4842s]     [32mGiven a file named "[32m[1mspec/replace_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4842s] [32m      """[0m
[ 4842s] [32m      require 'spec_helper'[0m
[ 4842s] [32m[0m
[ 4842s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4842s] [32m        it { expect { replace_variables('<pid-last-command-started>') }.to raise_error Aruba::NoCommandHasBeenStartedError }[0m
[ 4842s] [32m      end[0m
[ 4842s] [32m      """[0m
[ 4850s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                              # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4850s]     [32mThen the specs should all pass[90m                  # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4850s] 
[ 4850s] Feature: Sanitize text from output
[ 4850s]   If have got some text include \n, \t and the like and need them to become
[ 4850s]   special characters again and also want the text to be stripped down to bare
[ 4850s]   text, you can use the `#sanitize_text`-method for this.
[ 4850s] 
[ 4850s]   Background: [90m                            # features/04_aruba_api/text/sanitize_text.feature:7[0m
[ 4850s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4850s] 
[ 4850s]   Scenario: Output contains \n[90m                           # features/04_aruba_api/text/sanitize_text.feature:10[0m
[ 4851s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4851s] [32m      """[0m
[ 4851s] [32m      #!/bin/bash[0m
[ 4851s] [32m      echo -n 'text\ntext'[0m
[ 4851s] [32m      """[0m
[ 4851s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4851s] [32m      """[0m
[ 4851s] [32m      require 'spec_helper'[0m
[ 4851s] [32m[0m
[ 4851s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4851s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4851s] [32m        before(:each) { stop_all_commands }[0m
[ 4851s] [32m[0m
[ 4851s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "text\ntext" }[0m
[ 4851s] [32m      end[0m
[ 4851s] [32m      """[0m
[ 4859s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4859s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4859s] 
[ 4860s]   Scenario: Output contains \e[90m                           # features/04_aruba_api/text/sanitize_text.feature:30[0m
[ 4860s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4860s] [32m      """[0m
[ 4860s] [32m      #!/bin/bash[0m
[ 4860s] [32m      echo -n 'text\etext'[0m
[ 4860s] [32m      """[0m
[ 4860s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4860s] [32m      """[0m
[ 4860s] [32m      require 'spec_helper'[0m
[ 4860s] [32m[0m
[ 4860s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4860s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4860s] [32m        before(:each) { stop_all_commands }[0m
[ 4860s] [32m[0m
[ 4860s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "texttext" }[0m
[ 4860s] [32m      end[0m
[ 4860s] [32m      """[0m
[ 4869s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4869s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4869s] 
[ 4869s]   Scenario: Output contains \"[90m                           # features/04_aruba_api/text/sanitize_text.feature:50[0m
[ 4869s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4869s] [32m      """[0m
[ 4869s] [32m      #!/bin/bash[0m
[ 4869s] [32m      echo -n 'text\"text'[0m
[ 4869s] [32m      """[0m
[ 4869s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4869s] [32m      """[0m
[ 4869s] [32m      require 'spec_helper'[0m
[ 4869s] [32m[0m
[ 4869s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4869s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4869s] [32m        before(:each) { stop_all_commands }[0m
[ 4869s] [32m[0m
[ 4869s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "text\"text" }[0m
[ 4869s] [32m      end[0m
[ 4869s] [32m      """[0m
[ 4878s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4878s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4878s] 
[ 4878s]   Scenario: Output contains \033[90m                         # features/04_aruba_api/text/sanitize_text.feature:70[0m
[ 4878s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4878s] [32m      """[0m
[ 4878s] [32m      #!/bin/bash[0m
[ 4878s] [32m      echo -n 'text\033text'[0m
[ 4878s] [32m      """[0m
[ 4878s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4878s] [32m      """[0m
[ 4878s] [32m      require 'spec_helper'[0m
[ 4878s] [32m[0m
[ 4878s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4878s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4878s] [32m        before(:each) { stop_all_commands }[0m
[ 4878s] [32m[0m
[ 4878s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "texttext" }[0m
[ 4878s] [32m      end[0m
[ 4878s] [32m      """[0m
[ 4886s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4886s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4886s] 
[ 4888s]   Scenario: Output contains \017[90m                         # features/04_aruba_api/text/sanitize_text.feature:90[0m
[ 4888s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4888s] [32m      """[0m
[ 4888s] [32m      #!/bin/bash[0m
[ 4888s] [32m      echo -n 'text\017text'[0m
[ 4888s] [32m      """[0m
[ 4888s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4888s] [32m      """[0m
[ 4888s] [32m      require 'spec_helper'[0m
[ 4888s] [32m[0m
[ 4888s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4888s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4888s] [32m        before(:each) { stop_all_commands }[0m
[ 4888s] [32m[0m
[ 4888s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "texttext" }[0m
[ 4888s] [32m      end[0m
[ 4888s] [32m      """[0m
[ 4896s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4896s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4896s] 
[ 4896s]   Scenario: Output contains \016[90m                         # features/04_aruba_api/text/sanitize_text.feature:110[0m
[ 4896s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4896s] [32m      """[0m
[ 4896s] [32m      #!/bin/bash[0m
[ 4896s] [32m      echo -n 'text\016text'[0m
[ 4896s] [32m      """[0m
[ 4896s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4896s] [32m      """[0m
[ 4896s] [32m      require 'spec_helper'[0m
[ 4896s] [32m[0m
[ 4896s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4896s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4896s] [32m        before(:each) { stop_all_commands }[0m
[ 4896s] [32m[0m
[ 4896s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "texttext" }[0m
[ 4896s] [32m      end[0m
[ 4896s] [32m      """[0m
[ 4904s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4904s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4904s] 
[ 4904s]   Scenario: Output contains ansi escape codes prefixed by \e[90m # features/04_aruba_api/text/sanitize_text.feature:130[0m
[ 4904s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m     # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4904s] [32m      """[0m
[ 4904s] [32m      #!/bin/bash[0m
[ 4904s] [32m      echo -n "\e[31mText"[0m
[ 4904s] [32m      """[0m
[ 4904s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m           # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4904s] [32m      """[0m
[ 4904s] [32m      require 'spec_helper'[0m
[ 4904s] [32m[0m
[ 4904s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4904s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4904s] [32m        before(:each) { stop_all_commands }[0m
[ 4904s] [32m[0m
[ 4904s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "Text" }[0m
[ 4904s] [32m      end[0m
[ 4904s] [32m      """[0m
[ 4912s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                       # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4912s]     [32mThen the specs should all pass[90m                           # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4912s] 
[ 4912s]   Scenario: Output contains ansi escape codes prefixed by \033[90m # features/04_aruba_api/text/sanitize_text.feature:150[0m
[ 4912s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m       # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4912s] [32m      """[0m
[ 4912s] [32m      #!/bin/bash[0m
[ 4912s] [32m      echo -n "\033[31mText"[0m
[ 4912s] [32m      """[0m
[ 4912s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m             # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4912s] [32m      """[0m
[ 4912s] [32m      require 'spec_helper'[0m
[ 4912s] [32m[0m
[ 4912s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4912s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4912s] [32m        before(:each) { stop_all_commands }[0m
[ 4912s] [32m[0m
[ 4912s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "Text" }[0m
[ 4912s] [32m      end[0m
[ 4912s] [32m      """[0m
[ 4920s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                         # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4920s]     [32mThen the specs should all pass[90m                             # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4920s] 
[ 4920s]   Scenario: Output contains ansi escape codes prefixed by \e, but removable is disabled by configuration[90m # features/04_aruba_api/text/sanitize_text.feature:170[0m
[ 4920s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m                                                 # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4920s] [32m      """[0m
[ 4920s] [32m      #!/bin/bash[0m
[ 4920s] [32m      echo -n "\e[31mText"[0m
[ 4920s] [32m      """[0m
[ 4920s]     [32mAnd a file named "[32m[1mspec/sanitize_spec.rb[0m[0m[32m" with:[90m                                                       # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4920s] [32m      """[0m
[ 4920s] [32m      require 'spec_helper'[0m
[ 4920s] [32m[0m
[ 4920s] [32m      RSpec.describe 'Run command', :type => :aruba, :remove_ansi_escape_sequences => false, :keep_ansi => true do[0m
[ 4920s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4920s] [32m        before(:each) { stop_all_commands }[0m
[ 4920s] [32m[0m
[ 4920s] [32m        it { expect(sanitize_text(last_command_started.output)).to eq "\e[31mText" }[0m
[ 4920s] [32m      end[0m
[ 4920s] [32m      """[0m
[ 4928s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4928s]     [32mThen the specs should all pass[90m                                                                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4928s] 
[ 4928s] Feature: Unescape special characters in text
[ 4928s]   If have got some text include \n, \t and the like and need them to become
[ 4928s]   special characters again, you can use the `#unescape_text`-method for this.
[ 4928s] 
[ 4928s]   Background: [90m                            # features/04_aruba_api/text/unescape_text.feature:6[0m
[ 4928s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4928s] 
[ 4928s]   Scenario: Output contains \n[90m                           # features/04_aruba_api/text/unescape_text.feature:9[0m
[ 4928s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4928s] [32m      """[0m
[ 4928s] [32m      #!/bin/bash[0m
[ 4928s] [32m      echo -n 'text\ntext'[0m
[ 4928s] [32m      """[0m
[ 4928s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4928s] [32m      """[0m
[ 4928s] [32m      require 'spec_helper'[0m
[ 4928s] [32m[0m
[ 4928s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4928s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4928s] [32m        before(:each) { stop_all_commands }[0m
[ 4928s] [32m[0m
[ 4928s] [32m        it { expect(unescape_text(last_command.output)).to eq "text\ntext" }[0m
[ 4928s] [32m      end[0m
[ 4928s] [32m      """[0m
[ 4937s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4937s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4937s] 
[ 4937s]   Scenario: Output contains \e[90m                           # features/04_aruba_api/text/unescape_text.feature:29[0m
[ 4937s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4937s] [32m      """[0m
[ 4937s] [32m      #!/bin/bash[0m
[ 4937s] [32m      echo -n 'text\etext'[0m
[ 4937s] [32m      """[0m
[ 4937s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4937s] [32m      """[0m
[ 4937s] [32m      require 'spec_helper'[0m
[ 4937s] [32m[0m
[ 4937s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4937s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4937s] [32m        before(:each) { stop_all_commands }[0m
[ 4937s] [32m[0m
[ 4937s] [32m        it { expect(unescape_text(last_command.output)).to eq "texttext" }[0m
[ 4937s] [32m      end[0m
[ 4937s] [32m      """[0m
[ 4944s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4944s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4944s] 
[ 4945s]   Scenario: Output contains \"[90m                           # features/04_aruba_api/text/unescape_text.feature:49[0m
[ 4945s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4945s] [32m      """[0m
[ 4945s] [32m      #!/bin/bash[0m
[ 4945s] [32m      echo -n 'text\"text'[0m
[ 4945s] [32m      """[0m
[ 4945s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4945s] [32m      """[0m
[ 4945s] [32m      require 'spec_helper'[0m
[ 4945s] [32m[0m
[ 4945s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4945s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4945s] [32m        before(:each) { stop_all_commands }[0m
[ 4945s] [32m[0m
[ 4945s] [32m        it { expect(unescape_text(last_command.output)).to eq "text\"text" }[0m
[ 4945s] [32m      end[0m
[ 4945s] [32m      """[0m
[ 4953s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4953s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4953s] 
[ 4954s]   Scenario: Output contains \033[90m                         # features/04_aruba_api/text/unescape_text.feature:69[0m
[ 4954s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4954s] [32m      """[0m
[ 4954s] [32m      #!/bin/bash[0m
[ 4954s] [32m      echo -n 'text\033text'[0m
[ 4954s] [32m      """[0m
[ 4954s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4954s] [32m      """[0m
[ 4954s] [32m      require 'spec_helper'[0m
[ 4954s] [32m[0m
[ 4954s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4954s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4954s] [32m        before(:each) { stop_all_commands }[0m
[ 4954s] [32m[0m
[ 4954s] [32m        it { expect(unescape_text(last_command.output)).to eq "texttext" }[0m
[ 4954s] [32m      end[0m
[ 4954s] [32m      """[0m
[ 4962s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4962s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4962s] 
[ 4963s]   Scenario: Output contains \017[90m                         # features/04_aruba_api/text/unescape_text.feature:89[0m
[ 4963s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4963s] [32m      """[0m
[ 4963s] [32m      #!/bin/bash[0m
[ 4963s] [32m      echo -n 'text\017text'[0m
[ 4963s] [32m      """[0m
[ 4963s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4963s] [32m      """[0m
[ 4963s] [32m      require 'spec_helper'[0m
[ 4963s] [32m[0m
[ 4963s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4963s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4963s] [32m        before(:each) { stop_all_commands }[0m
[ 4963s] [32m[0m
[ 4963s] [32m        it { expect(unescape_text(last_command.output)).to eq "texttext" }[0m
[ 4963s] [32m      end[0m
[ 4963s] [32m      """[0m
[ 4973s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4973s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4973s] 
[ 4974s]   Scenario: Output contains \016[90m                         # features/04_aruba_api/text/unescape_text.feature:109[0m
[ 4974s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4974s] [32m      """[0m
[ 4974s] [32m      #!/bin/bash[0m
[ 4974s] [32m      echo -n 'text\016text'[0m
[ 4974s] [32m      """[0m
[ 4974s]     [32mAnd a file named "[32m[1mspec/unescape_text_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4974s] [32m      """[0m
[ 4974s] [32m      require 'spec_helper'[0m
[ 4974s] [32m[0m
[ 4974s] [32m      RSpec.describe 'Run command', :type => :aruba do[0m
[ 4974s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4974s] [32m        before(:each) { stop_all_commands }[0m
[ 4974s] [32m[0m
[ 4974s] [32m        it { expect(unescape_text(last_command.output)).to eq "texttext" }[0m
[ 4974s] [32m      end[0m
[ 4974s] [32m      """[0m
[ 4982s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4982s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4982s] 
[ 4982s] Feature: Check if a timeout occured during command execution
[ 4982s]   If you want to check if a command takes to long to finish it's work
[ 4982s] 
[ 4983s]   Background: [90m                            # features/05_use_rspec_matchers/command/check_timeouts.feature:5[0m
[ 4983s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4983s] 
[ 4983s]   Scenario: Check if command runs to long[90m                # features/05_use_rspec_matchers/command/check_timeouts.feature:8[0m
[ 4983s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4983s] [32m      """[0m
[ 4983s] [32m      #!/bin/bash[0m
[ 4983s] [32m      sleep 1[0m
[ 4983s] [32m      """[0m
[ 4983s]     [32mAnd a file named "[32m[1mspec/timeout_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4983s] [32m      """[0m
[ 4983s] [32m      require 'spec_helper'[0m
[ 4983s] [32m[0m
[ 4983s] [32m      RSpec.describe 'Long running command', :type => :aruba do[0m
[ 4983s] [32m        before(:each) { aruba.config.exit_timeout = 0 }[0m
[ 4983s] [32m[0m
[ 4983s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4983s] [32m[0m
[ 4983s] [32m        it { expect(last_command_started).to run_too_long }[0m
[ 4983s] [32m      end[0m
[ 4983s] [32m      """[0m
[ 4991s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4991s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4991s] 
[ 4991s]   Scenario: Check if command finishes in time[90m            # features/05_use_rspec_matchers/command/check_timeouts.feature:29[0m
[ 4991s]     [32mGiven an executable named "[32m[1mbin/aruba-test-cli[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:27[0m[0m
[ 4991s] [32m      """[0m
[ 4991s] [32m      #!/bin/bash[0m
[ 4991s] [32m      exit 0[0m
[ 4991s] [32m      """[0m
[ 4991s]     [32mAnd a file named "[32m[1mspec/timeout_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 4991s] [32m      """[0m
[ 4991s] [32m      require 'spec_helper'[0m
[ 4991s] [32m[0m
[ 4991s] [32m      RSpec.describe 'Short running command', :type => :aruba do[0m
[ 4991s] [32m        before(:each) { aruba.config.exit_timeout = 5 }[0m
[ 4991s] [32m[0m
[ 4991s] [32m        before(:each) { run_command('aruba-test-cli') }[0m
[ 4991s] [32m[0m
[ 4991s] [32m        it { expect(last_command_started).to have_finished_in_time }[0m
[ 4991s] [32m      end[0m
[ 4991s] [32m      """[0m
[ 4999s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 4999s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 4999s] 
[ 4999s] Feature: Check if directory has given sub directories
[ 4999s]   If you need to check if a given directory has given sub dirctories, you can
[ 4999s]   use the `have_sub_directory`-matcher.
[ 4999s] 
[ 4999s]   ```ruby
[ 4999s]   require 'spec_helper'
[ 4999s] 
[ 4999s]   RSpec.describe 'Check if directory has sub-directory', :type => :aruba do
[ 4999s]     let(:file) { 'file.txt' }
[ 4999s]     before(:each) { touch(file) }
[ 4999s] 
[ 4999s]     it { expect(file).to be_an_existing_file }
[ 4999s]   end
[ 4999s]   ```
[ 4999s] 
[ 4999s]   Background: [90m                            # features/05_use_rspec_matchers/directory/have_sub_directory.feature:17[0m
[ 4999s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 4999s] 
[ 4999s]   Scenario: Expect existing sub directory[90m                 # features/05_use_rspec_matchers/directory/have_sub_directory.feature:20[0m
[ 5000s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5000s] [32m      """[0m
[ 5000s] [32m      require 'spec_helper'[0m
[ 5000s] [32m[0m
[ 5000s] [32m      RSpec.describe 'Check if directory has sub-directory', :type => :aruba do[0m
[ 5000s] [32m        let(:directory) { 'dir.d' }[0m
[ 5000s] [32m        let(:sub_directory) { 'sub-dir.d' }[0m
[ 5000s] [32m[0m
[ 5000s] [32m        before(:each) { create_directory(File.join(directory, sub_directory)) }[0m
[ 5000s] [32m[0m
[ 5000s] [32m        it { expect(directory).to have_sub_directory sub_directory }[0m
[ 5000s] [32m      end[0m
[ 5000s] [32m      """[0m
[ 5007s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5007s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5007s] 
[ 5007s]   Scenario: Expect multiple existing sub directories[90m      # features/05_use_rspec_matchers/directory/have_sub_directory.feature:37[0m
[ 5008s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5008s] [32m      """[0m
[ 5008s] [32m      require 'spec_helper'[0m
[ 5008s] [32m[0m
[ 5008s] [32m      RSpec.describe 'Check if directory has sub-directory', :type => :aruba do[0m
[ 5008s] [32m        let(:directory) { 'dir.d' }[0m
[ 5008s] [32m        let(:sub_directories) { %w(sub-dir1.d sub-dir2.d) }[0m
[ 5008s] [32m[0m
[ 5008s] [32m        before(:each) do[0m
[ 5008s] [32m          sub_directories.each { |d| create_directory(File.join(directory, d)) }[0m
[ 5008s] [32m        end[0m
[ 5008s] [32m[0m
[ 5008s] [32m        it { expect(directory).to have_sub_directory sub_directories }[0m
[ 5008s] [32m      end[0m
[ 5008s] [32m      """[0m
[ 5015s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5015s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5015s] 
[ 5016s]   Scenario: Expect non-existing sub directory[90m             # features/05_use_rspec_matchers/directory/have_sub_directory.feature:56[0m
[ 5016s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5016s] [32m      """[0m
[ 5016s] [32m      require 'spec_helper'[0m
[ 5016s] [32m[0m
[ 5016s] [32m      RSpec.describe 'Check if directory has sub-directory', :type => :aruba do[0m
[ 5016s] [32m        let(:directory) { 'dir.d' }[0m
[ 5016s] [32m        let(:sub_directory) { 'sub-dir.d' }[0m
[ 5016s] [32m[0m
[ 5016s] [32m        before(:each) { create_directory(directory) }[0m
[ 5016s] [32m[0m
[ 5016s] [32m        it { expect(directory).not_to have_sub_directory sub_directory }[0m
[ 5016s] [32m      end[0m
[ 5016s] [32m      """[0m
[ 5025s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5025s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5025s] 
[ 5025s]   Scenario: Expect multiple directories have sub directory[90m # features/05_use_rspec_matchers/directory/have_sub_directory.feature:73[0m
[ 5025s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5025s] [32m      """[0m
[ 5025s] [32m      require 'spec_helper'[0m
[ 5025s] [32m[0m
[ 5025s] [32m      RSpec.describe 'Check if directory has sub-directory', :type => :aruba do[0m
[ 5025s] [32m        let(:directories) { %w(dir1.d dir2.d) }[0m
[ 5025s] [32m        let(:sub_directory) { 'sub-dir.d' }[0m
[ 5025s] [32m[0m
[ 5025s] [32m        before(:each) do[0m
[ 5025s] [32m          directories.each { |d| create_directory(File.join(d, sub_directory)) }[0m
[ 5025s] [32m        end[0m
[ 5025s] [32m[0m
[ 5025s] [32m        it { expect(directories).to all have_sub_directory sub_directory }[0m
[ 5025s] [32m      end[0m
[ 5025s] [32m      """[0m
[ 5032s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5032s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5032s] 
[ 5033s]   Scenario: Expect a least one directory has sub directory[90m # features/05_use_rspec_matchers/directory/have_sub_directory.feature:92[0m
[ 5033s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m  # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5033s] [32m      """[0m
[ 5033s] [32m      require 'spec_helper'[0m
[ 5033s] [32m[0m
[ 5033s] [32m      RSpec.describe 'Check if directory has sub-directory', :type => :aruba do[0m
[ 5033s] [32m        let(:directories) { %w(dir1.d dir2.d) }[0m
[ 5033s] [32m        let(:sub_directory) { 'sub-dir.d' }[0m
[ 5033s] [32m[0m
[ 5033s] [32m        before(:each) do[0m
[ 5033s] [32m          create_directory(File.join(directories.first, sub_directory))[0m
[ 5033s] [32m        end[0m
[ 5033s] [32m[0m
[ 5033s] [32m        it { expect(directories).to include a_directory_having_sub_directory sub_directory }[0m
[ 5033s] [32m      end[0m
[ 5033s] [32m      """[0m
[ 5040s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                     # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5040s]     [32mThen the specs should all pass[90m                         # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5040s] 
[ 5040s] Feature: Check if command can be found in PATH
[ 5040s]   If you need to check if a given command can be found in path, you can use the
[ 5040s]   `be_an_existing_executable`-matcher.
[ 5040s] 
[ 5040s]   ```ruby
[ 5040s]   require 'spec_helper'
[ 5040s] 
[ 5040s]   RSpec.describe 'Check if command can be found in PATH', :type => :aruba do
[ 5040s]     let(:file) { 'file.sh' }
[ 5040s]     before(:each) { touch(file) }
[ 5040s]     before(:each) { chmod(0755, file) }
[ 5040s]     before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.')) }
[ 5040s] 
[ 5040s]     it { expect(file).to be_an_existing_executable }
[ 5040s]   end
[ 5040s]   ```
[ 5040s] 
[ 5040s]   Background: [90m                            # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:19[0m
[ 5040s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5040s] 
[ 5040s]   Scenario: Expect single existing executable file[90m              # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:22[0m
[ 5040s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5040s] [32m      """[0m
[ 5040s] [32m      require 'spec_helper'[0m
[ 5040s] [32m[0m
[ 5040s] [32m      RSpec.describe 'Check if command can be found in PATH', :type => :aruba do[0m
[ 5040s] [32m        let(:file) { 'file.sh' }[0m
[ 5040s] [32m[0m
[ 5040s] [32m        before(:each) { touch(file) }[0m
[ 5040s] [32m        before(:each) { chmod(0755, file) }[0m
[ 5040s] [32m        before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.'))) }[0m
[ 5040s] [32m[0m
[ 5040s] [32m        it { expect(file).to be_a_command_found_in_path }[0m
[ 5040s] [32m      end[0m
[ 5040s] [32m      """[0m
[ 5048s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5048s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5048s] 
[ 5048s]   Scenario: Expect single non-existing executable file[90m          # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:40[0m
[ 5048s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5048s] [32m      """[0m
[ 5048s] [32m      require 'spec_helper'[0m
[ 5048s] [32m[0m
[ 5048s] [32m      RSpec.describe 'Check if command can be found in PATH', :type => :aruba do[0m
[ 5048s] [32m        let(:file) { 'file.sh' }[0m
[ 5048s] [32m[0m
[ 5048s] [32m        before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.'))) }[0m
[ 5048s] [32m[0m
[ 5048s] [32m        it { expect(file).not_to be_a_command_found_in_path }[0m
[ 5048s] [32m      end[0m
[ 5048s] [32m      """[0m
[ 5056s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5056s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5056s] 
[ 5056s]   Scenario: Expect single non-executable file[90m                   # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:56[0m
[ 5056s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5056s] [32m      """[0m
[ 5056s] [32m      require 'spec_helper'[0m
[ 5056s] [32m[0m
[ 5056s] [32m      RSpec.describe 'Check if command can be found in PATH', :type => :aruba do[0m
[ 5056s] [32m        let(:file) { 'file.sh' }[0m
[ 5056s] [32m[0m
[ 5056s] [32m        before(:each) { touch(file) }[0m
[ 5056s] [32m        before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.'))) }[0m
[ 5056s] [32m[0m
[ 5056s] [32m        it { expect(file).not_to be_a_command_found_in_path }[0m
[ 5056s] [32m      end[0m
[ 5056s] [32m      """[0m
[ 5063s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5063s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5063s] 
[ 5063s]   Scenario: Expect multiple existing executable files[90m           # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:73[0m
[ 5063s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5063s] [32m      """[0m
[ 5063s] [32m      require 'spec_helper'[0m
[ 5063s] [32m[0m
[ 5063s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5063s] [32m        let(:files) { %w(file1.sh file2.sh) }[0m
[ 5063s] [32m[0m
[ 5063s] [32m        before :each do[0m
[ 5063s] [32m          files.each do |f|[0m
[ 5063s] [32m            touch(f)[0m
[ 5063s] [32m            chmod(0755, f)[0m
[ 5063s] [32m          end[0m
[ 5063s] [32m        end[0m
[ 5063s] [32m[0m
[ 5063s] [32m        before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.'))) }[0m
[ 5063s] [32m[0m
[ 5063s] [32m        it { expect(files).to all be_a_command_found_in_path }[0m
[ 5063s] [32m      end[0m
[ 5063s] [32m      """[0m
[ 5071s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5071s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5071s] 
[ 5072s]   Scenario: Expect a least one existing executable file[90m         # features/05_use_rspec_matchers/file/be_a_command_found_in_path.feature:96[0m
[ 5072s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5072s] [32m      """[0m
[ 5072s] [32m      require 'spec_helper'[0m
[ 5072s] [32m[0m
[ 5072s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5072s] [32m        let(:files) { %w(file1.sh file2.sh) }[0m
[ 5072s] [32m[0m
[ 5072s] [32m        before :each do[0m
[ 5072s] [32m          touch(files.first)[0m
[ 5072s] [32m          chmod(0755, files.first)[0m
[ 5072s] [32m        end[0m
[ 5072s] [32m[0m
[ 5072s] [32m        before(:each) { prepend_environment_variable('PATH', format('%s:', expand_path('.'))) }[0m
[ 5072s] [32m[0m
[ 5072s] [32m        it { expect(files).to include a_command_found_in_path }[0m
[ 5072s] [32m      end[0m
[ 5072s] [32m      """[0m
[ 5078s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5078s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5078s] 
[ 5078s] Feature: Check if path exists and is an executable file
[ 5078s]   If you need to check if a given path exists and is a file, you can use the
[ 5078s]   `be_an_existing_executable`-matcher.
[ 5078s] 
[ 5078s]   ```ruby
[ 5078s]   require 'spec_helper'
[ 5078s] 
[ 5078s]   RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do
[ 5078s]     let(:file) { 'file.txt' }
[ 5078s]     before(:each) { touch(file) }
[ 5078s]     before(:each) { chmod(0755, file) }
[ 5078s] 
[ 5078s]     it { expect(file).to be_an_existing_executable }
[ 5078s]   end
[ 5078s]   ```
[ 5078s] 
[ 5079s]   Background: [90m                            # features/05_use_rspec_matchers/file/be_existing_executable.feature:18[0m
[ 5079s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5079s] 
[ 5079s]   Scenario: Expect single existing executable file[90m              # features/05_use_rspec_matchers/file/be_existing_executable.feature:21[0m
[ 5079s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5079s] [32m      """[0m
[ 5079s] [32m      require 'spec_helper'[0m
[ 5079s] [32m[0m
[ 5079s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5079s] [32m        let(:file) { 'file.txt' }[0m
[ 5079s] [32m        before(:each) { touch(file) }[0m
[ 5079s] [32m        before(:each) { chmod(0755, file) }[0m
[ 5079s] [32m[0m
[ 5079s] [32m        it { expect(file).to be_an_existing_executable }[0m
[ 5079s] [32m      end[0m
[ 5079s] [32m      """[0m
[ 5086s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5086s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5086s] 
[ 5086s]   Scenario: Expect single non-existing executable file[90m          # features/05_use_rspec_matchers/file/be_existing_executable.feature:37[0m
[ 5086s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5086s] [32m      """[0m
[ 5086s] [32m      require 'spec_helper'[0m
[ 5086s] [32m[0m
[ 5086s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5086s] [32m        let(:file) { 'file.txt' }[0m
[ 5086s] [32m        it { expect(file).not_to be_an_existing_executable }[0m
[ 5086s] [32m      end[0m
[ 5086s] [32m      """[0m
[ 5093s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5093s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5093s] 
[ 5094s]   Scenario: Expect multiple existing executable files[90m           # features/05_use_rspec_matchers/file/be_existing_executable.feature:50[0m
[ 5094s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5094s] [32m      """[0m
[ 5094s] [32m      require 'spec_helper'[0m
[ 5094s] [32m[0m
[ 5094s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5094s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5094s] [32m[0m
[ 5094s] [32m        before :each do[0m
[ 5094s] [32m          files.each do |f|[0m
[ 5094s] [32m            touch(f)[0m
[ 5094s] [32m            chmod(0755, f)[0m
[ 5094s] [32m          end[0m
[ 5094s] [32m        end[0m
[ 5094s] [32m[0m
[ 5094s] [32m        it { expect(files).to all be_an_existing_executable }[0m
[ 5094s] [32m      end[0m
[ 5094s] [32m      """[0m
[ 5101s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5101s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5101s] 
[ 5101s]   Scenario: Expect a least one existing executable file[90m         # features/05_use_rspec_matchers/file/be_existing_executable.feature:71[0m
[ 5101s]     [32mGiven a file named "[32m[1mspec/existing_executable_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5101s] [32m      """[0m
[ 5101s] [32m      require 'spec_helper'[0m
[ 5101s] [32m[0m
[ 5101s] [32m      RSpec.describe 'Check if file exists and is an executable file', :type => :aruba do[0m
[ 5101s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5101s] [32m[0m
[ 5101s] [32m        before :each do[0m
[ 5101s] [32m          touch(files.first)[0m
[ 5101s] [32m          chmod(0755, files.first)[0m
[ 5101s] [32m        end[0m
[ 5101s] [32m[0m
[ 5101s] [32m        it { expect(files).to include an_existing_executable }[0m
[ 5101s] [32m      end[0m
[ 5101s] [32m      """[0m
[ 5108s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5108s]     [32mThen the specs should all pass[90m                              # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5108s] 
[ 5108s] Feature: Check if path exists and is file
[ 5108s]   If you need to check if a given path exists and is a file, you can use the
[ 5108s]   `be_an_existing_file`-matcher.
[ 5108s] 
[ 5108s]   ```ruby
[ 5108s]   require 'spec_helper'
[ 5108s] 
[ 5108s]   RSpec.describe 'Check if file exists and is file', :type => :aruba do
[ 5108s]     let(:file) { 'file.txt' }
[ 5108s]     before(:each) { touch(file) }
[ 5108s] 
[ 5108s]     it { expect(file).to be_an_existing_file }
[ 5108s]   end
[ 5108s]   ```
[ 5108s] 
[ 5109s]   Background: [90m                            # features/05_use_rspec_matchers/file/be_existing_file.feature:17[0m
[ 5109s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5109s] 
[ 5109s]   Scenario: Expect single existing file[90m                   # features/05_use_rspec_matchers/file/be_existing_file.feature:20[0m
[ 5109s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5109s] [32m      """[0m
[ 5109s] [32m      require 'spec_helper'[0m
[ 5109s] [32m[0m
[ 5109s] [32m      RSpec.describe 'Check if file exists and is file', :type => :aruba do[0m
[ 5109s] [32m        let(:file) { 'file.txt' }[0m
[ 5109s] [32m        before(:each) { touch(file) }[0m
[ 5109s] [32m        it { expect(file).to be_an_existing_file }[0m
[ 5109s] [32m      end[0m
[ 5109s] [32m      """[0m
[ 5116s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5116s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5116s] 
[ 5117s]   Scenario: Expect single non-existing file[90m               # features/05_use_rspec_matchers/file/be_existing_file.feature:34[0m
[ 5117s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5117s] [32m      """[0m
[ 5117s] [32m      require 'spec_helper'[0m
[ 5117s] [32m[0m
[ 5117s] [32m      RSpec.describe 'Check if file exists and is file', :type => :aruba do[0m
[ 5117s] [32m        let(:file) { 'file.txt' }[0m
[ 5117s] [32m        it { expect(file).not_to be_an_existing_file }[0m
[ 5117s] [32m      end[0m
[ 5117s] [32m      """[0m
[ 5123s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5123s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5123s] 
[ 5124s]   Scenario: Expect multiple existing files[90m                # features/05_use_rspec_matchers/file/be_existing_file.feature:47[0m
[ 5124s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5124s] [32m      """[0m
[ 5124s] [32m      require 'spec_helper'[0m
[ 5124s] [32m[0m
[ 5124s] [32m      RSpec.describe 'Check if file exists and is file', :type => :aruba do[0m
[ 5124s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5124s] [32m[0m
[ 5124s] [32m        before :each do[0m
[ 5124s] [32m          files.each { |f| touch(f) }[0m
[ 5124s] [32m        end[0m
[ 5124s] [32m[0m
[ 5124s] [32m        it { expect(files).to all be_an_existing_file }[0m
[ 5124s] [32m      end[0m
[ 5124s] [32m      """[0m
[ 5131s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5131s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5131s] 
[ 5131s]   Scenario: Expect a least one existing file[90m              # features/05_use_rspec_matchers/file/be_existing_file.feature:65[0m
[ 5131s]     [32mGiven a file named "[32m[1mspec/existing_file_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5131s] [32m      """[0m
[ 5131s] [32m      require 'spec_helper'[0m
[ 5131s] [32m[0m
[ 5131s] [32m      RSpec.describe 'Check if file exists and is file', :type => :aruba do[0m
[ 5131s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5131s] [32m[0m
[ 5131s] [32m        before :each do[0m
[ 5131s] [32m          touch(files.first)[0m
[ 5131s] [32m        end[0m
[ 5131s] [32m[0m
[ 5131s] [32m        it { expect(files).to include an_existing_file }[0m
[ 5131s] [32m      end[0m
[ 5131s] [32m      """[0m
[ 5138s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5138s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5138s] 
[ 5139s] Feature: Check if file has content
[ 5139s]   If you need to check if a given file has content, you can use the
[ 5139s]   `have_file_content`-matcher. It accepts `Object`, `Regexp` or any other
[ 5139s]   `RSpec::Matcher`-matchers. It fails if file does not exist.
[ 5139s] 
[ 5139s]   ```ruby
[ 5139s]   require 'spec_helper'
[ 5139s] 
[ 5139s]   RSpec.describe 'Check if file has content', :type => :aruba do
[ 5139s]     let(:file) { 'file.txt' }
[ 5139s]     let(:content) { 'Hello World' }
[ 5139s] 
[ 5139s]     before(:each) { write_file(file, content) }
[ 5139s] 
[ 5139s]     it { expect(file).to have_file_content content }
[ 5139s]   end
[ 5139s]   ```
[ 5139s] 
[ 5139s]   Background: [90m                            # features/05_use_rspec_matchers/file/have_file_content.feature:20[0m
[ 5139s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5139s] 
[ 5139s]   Scenario: Expect existing file with content[90m                 # features/05_use_rspec_matchers/file/have_file_content.feature:23[0m
[ 5139s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5139s] [32m      """[0m
[ 5139s] [32m      require 'spec_helper'[0m
[ 5139s] [32m[0m
[ 5139s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5139s] [32m        let(:file) { 'file.txt' }[0m
[ 5139s] [32m        let(:content) { 'Hello World' }[0m
[ 5139s] [32m[0m
[ 5139s] [32m        before(:each) { write_file(file, content) }[0m
[ 5139s] [32m[0m
[ 5139s] [32m        it { expect(file).to have_file_content content }[0m
[ 5139s] [32m      end[0m
[ 5139s] [32m      """[0m
[ 5146s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5146s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5146s] 
[ 5146s]   Scenario: Expect existing file with partial content[90m         # features/05_use_rspec_matchers/file/have_file_content.feature:40[0m
[ 5146s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5146s] [32m      """[0m
[ 5146s] [32m      require 'spec_helper'[0m
[ 5146s] [32m[0m
[ 5146s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5146s] [32m        let(:file) { 'file.txt' }[0m
[ 5146s] [32m        let(:content) { 'Hello World' }[0m
[ 5146s] [32m[0m
[ 5146s] [32m        before(:each) { write_file(file, content) }[0m
[ 5146s] [32m[0m
[ 5146s] [32m        it { expect(file).to have_file_content /Hello/ }[0m
[ 5146s] [32m      end[0m
[ 5146s] [32m      """[0m
[ 5154s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5154s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5154s] 
[ 5155s]   Scenario: Expect existing file with partial content described by another matcher[90m # features/05_use_rspec_matchers/file/have_file_content.feature:57[0m
[ 5155s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m                      # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5155s] [32m      """[0m
[ 5155s] [32m      require 'spec_helper'[0m
[ 5155s] [32m[0m
[ 5155s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5155s] [32m        let(:file) { 'file.txt' }[0m
[ 5155s] [32m        let(:content) { 'Hello World' }[0m
[ 5155s] [32m[0m
[ 5155s] [32m        before(:each) { write_file(file, content) }[0m
[ 5155s] [32m[0m
[ 5155s] [32m        it { expect(file).to have_file_content a_string_starting_with('Hello') }[0m
[ 5155s] [32m      end[0m
[ 5155s] [32m      """[0m
[ 5162s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                                             # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5162s]     [32mThen the specs should all pass[90m                                                 # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5162s] 
[ 5163s]   Scenario: Expect multiple existing files with content[90m       # features/05_use_rspec_matchers/file/have_file_content.feature:74[0m
[ 5163s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5163s] [32m      """[0m
[ 5163s] [32m      require 'spec_helper'[0m
[ 5163s] [32m[0m
[ 5163s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5163s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5163s] [32m        let(:content) { 'Hello World' }[0m
[ 5163s] [32m[0m
[ 5163s] [32m        before :each do[0m
[ 5163s] [32m          files.each { |f| write_file(f, content) }[0m
[ 5163s] [32m        end[0m
[ 5163s] [32m[0m
[ 5163s] [32m        it { expect(files).to all have_file_content content }[0m
[ 5163s] [32m      end[0m
[ 5163s] [32m      """[0m
[ 5169s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5169s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5169s] 
[ 5170s]   Scenario: Expect at least one file with content[90m             # features/05_use_rspec_matchers/file/have_file_content.feature:93[0m
[ 5170s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5170s] [32m      """[0m
[ 5170s] [32m      require 'spec_helper'[0m
[ 5170s] [32m[0m
[ 5170s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5170s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5170s] [32m        let(:content) { 'Hello World' }[0m
[ 5170s] [32m[0m
[ 5170s] [32m        before(:each) { write_file(files.first, content) }[0m
[ 5170s] [32m[0m
[ 5170s] [32m        it { expect(files).to include a_file_having_content content }[0m
[ 5170s] [32m      end[0m
[ 5170s] [32m      """[0m
[ 5177s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5177s]     [32mThen the specs should all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5177s] 
[ 5178s]   Scenario: Fails if file does not exist[90m                      # features/05_use_rspec_matchers/file/have_file_content.feature:110[0m
[ 5178s]     [32mGiven a file named "[32m[1mspec/file_with_content_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5178s] [32m      """[0m
[ 5178s] [32m      require 'spec_helper'[0m
[ 5178s] [32m[0m
[ 5178s] [32m      RSpec.describe 'Check file content', :type => :aruba do[0m
[ 5178s] [32m        let(:file) { 'file.txt' }[0m
[ 5178s] [32m        let(:content) { 'Hello World' }[0m
[ 5178s] [32m[0m
[ 5178s] [32m        it { expect(file).to have_file_content content }[0m
[ 5178s] [32m      end[0m
[ 5178s] [32m      """[0m
[ 5185s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                        # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5185s]     [32mThen the specs should[32m[1m not[0m[0m[32m all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5185s] 
[ 5185s] Feature: Check if path has size
[ 5185s]   If you need to check if a given path has file size, you can use the
[ 5185s]   `have_file_size`-matcher. It fails if the file does not exist.
[ 5185s] 
[ 5185s]   ```ruby
[ 5185s]   require 'spec_helper'
[ 5185s] 
[ 5185s]   RSpec.describe 'Check if file has size', :type => :aruba do
[ 5185s]     let(:file) { 'file.txt' }
[ 5185s]     let(:size) { 1 }
[ 5185s] 
[ 5185s]     before(:each) { write_fixed_size_file(file, size) }
[ 5185s] 
[ 5185s]     it { expect(file).to have_file_size size }
[ 5185s]   end
[ 5185s]   ```
[ 5185s] 
[ 5186s]   Background: [90m                            # features/05_use_rspec_matchers/file/have_file_size.feature:19[0m
[ 5186s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5186s] 
[ 5186s]   Scenario: Expect file of given size[90m                    # features/05_use_rspec_matchers/file/have_file_size.feature:22[0m
[ 5186s]     [32mGiven a file named "[32m[1mspec/file_of_size_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5186s] [32m      """[0m
[ 5186s] [32m      require 'spec_helper'[0m
[ 5186s] [32m[0m
[ 5186s] [32m      RSpec.describe 'Check if file has size', :type => :aruba do[0m
[ 5186s] [32m        let(:file) { 'file.txt' }[0m
[ 5186s] [32m        let(:size) { 1 }[0m
[ 5186s] [32m[0m
[ 5186s] [32m        before(:each) { write_fixed_size_file(file, size) }[0m
[ 5186s] [32m[0m
[ 5186s] [32m        it { expect(file).to have_file_size size }[0m
[ 5186s] [32m      end[0m
[ 5186s] [32m      """[0m
[ 5194s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5194s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5194s] 
[ 5194s]   Scenario: Expect multiple files of given size[90m          # features/05_use_rspec_matchers/file/have_file_size.feature:39[0m
[ 5194s]     [32mGiven a file named "[32m[1mspec/file_of_size_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5194s] [32m      """[0m
[ 5194s] [32m      require 'spec_helper'[0m
[ 5194s] [32m[0m
[ 5194s] [32m      RSpec.describe 'Check if file has size', :type => :aruba do[0m
[ 5194s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5194s] [32m        let(:size) { 1 }[0m
[ 5194s] [32m[0m
[ 5194s] [32m        before :each do[0m
[ 5194s] [32m          files.each { |f| write_fixed_size_file(f, size) }[0m
[ 5194s] [32m        end[0m
[ 5194s] [32m[0m
[ 5194s] [32m        it { expect(files).to all have_file_size size }[0m
[ 5194s] [32m      end[0m
[ 5194s] [32m      """[0m
[ 5201s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5201s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5201s] 
[ 5201s]   Scenario: Expect a least one file of size[90m              # features/05_use_rspec_matchers/file/have_file_size.feature:58[0m
[ 5201s]     [32mGiven a file named "[32m[1mspec/file_of_size_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5201s] [32m      """[0m
[ 5201s] [32m      require 'spec_helper'[0m
[ 5201s] [32m[0m
[ 5201s] [32m      RSpec.describe 'Check if file has size', :type => :aruba do[0m
[ 5201s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5201s] [32m        let(:size) { 1 }[0m
[ 5201s] [32m[0m
[ 5201s] [32m        before :each do[0m
[ 5201s] [32m          write_fixed_size_file(files.first, size)[0m
[ 5201s] [32m        end[0m
[ 5201s] [32m[0m
[ 5201s] [32m        it { expect(files).to include a_file_of_size size }[0m
[ 5201s] [32m      end[0m
[ 5201s] [32m      """[0m
[ 5208s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5208s]     [32mThen the specs should all pass[90m                       # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5208s] 
[ 5209s]   Scenario: Fails because file has different size than expected[90m # features/05_use_rspec_matchers/file/have_file_size.feature:77[0m
[ 5209s]     [32mGiven a file named "[32m[1mspec/file_of_size_spec.rb[0m[0m[32m" with:[90m        # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5209s] [32m      """[0m
[ 5209s] [32m      require 'spec_helper'[0m
[ 5209s] [32m[0m
[ 5209s] [32m      RSpec.describe 'Check if file has size', :type => :aruba do[0m
[ 5209s] [32m        let(:file) { 'file.txt' }[0m
[ 5209s] [32m        let(:size) { 1 }[0m
[ 5209s] [32m[0m
[ 5209s] [32m        before(:each) { write_fixed_size_file(file, size) }[0m
[ 5209s] [32m[0m
[ 5209s] [32m        it { expect(file).to have_file_size 2 }[0m
[ 5209s] [32m      end[0m
[ 5209s] [32m      """[0m
[ 5216s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                          # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5216s]     [32mThen the specs should[32m[1m not[0m[0m[32m all pass[90m                          # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5216s] 
[ 5217s]   Scenario: Fails if file does not exist[90m                 # features/05_use_rspec_matchers/file/have_file_size.feature:94[0m
[ 5217s]     [32mGiven a file named "[32m[1mspec/file_of_size_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5217s] [32m      """[0m
[ 5217s] [32m      require 'spec_helper'[0m
[ 5217s] [32m[0m
[ 5217s] [32m      RSpec.describe 'Check if file has size', :type => :aruba do[0m
[ 5217s] [32m        let(:file) { 'file.txt' }[0m
[ 5217s] [32m        let(:size) { 1 }[0m
[ 5217s] [32m[0m
[ 5217s] [32m        it { expect(file).to have_file_size size }[0m
[ 5217s] [32m      end[0m
[ 5217s] [32m      """[0m
[ 5225s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                   # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5225s]     [32mThen the specs should[32m[1m not[0m[0m[32m all pass[90m                   # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5225s] 
[ 5225s] Feature: Check if path is absolute
[ 5225s]   If you need to check if a given path is absolute , you can use the
[ 5225s]   `be_an_absolute_path`-matcher. It doesn't care if the path is a directory or
[ 5225s]   a path.
[ 5225s] 
[ 5225s]   ```ruby
[ 5225s]   require 'spec_helper'
[ 5225s] 
[ 5225s]   RSpec.describe 'Check if path is absolute', :type => :aruba do
[ 5225s]     let(:path) { 'file.txt' }
[ 5225s]     before(:each) { touch(path) }
[ 5225s] 
[ 5225s]     it { expect(path).to be_an_absolute_path }
[ 5225s]   end
[ 5225s]   ```
[ 5225s] 
[ 5225s]   Background: [90m                            # features/05_use_rspec_matchers/path/be_an_absolute_path.feature:18[0m
[ 5225s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5225s] 
[ 5225s]   Scenario: Expect single existing path[90m                   # features/05_use_rspec_matchers/path/be_an_absolute_path.feature:21[0m
[ 5225s]     [32mGiven a file named "[32m[1mspec/absolute_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5225s] [32m      """[0m
[ 5225s] [32m      require 'spec_helper'[0m
[ 5225s] [32m[0m
[ 5225s] [32m      RSpec.describe 'Check if path is absolute', :type => :aruba do[0m
[ 5225s] [32m        let(:path) { '/path/to/file.txt' }[0m
[ 5225s] [32m        it { expect(path).to be_an_absolute_path }[0m
[ 5225s] [32m      end[0m
[ 5225s] [32m      """[0m
[ 5233s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5233s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5233s] 
[ 5233s]   Scenario: Expect multiple absolute paths[90m                # features/05_use_rspec_matchers/path/be_an_absolute_path.feature:34[0m
[ 5233s]     [32mGiven a file named "[32m[1mspec/absolute_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5233s] [32m      """[0m
[ 5233s] [32m      require 'spec_helper'[0m
[ 5233s] [32m[0m
[ 5233s] [32m      RSpec.describe 'Check if path is absolute', :type => :aruba do[0m
[ 5233s] [32m        let(:paths) { %w(/path/to/path1.txt /path/to/path2.txt) }[0m
[ 5233s] [32m[0m
[ 5233s] [32m        it { expect(paths).to all be_an_absolute_path }[0m
[ 5233s] [32m      end[0m
[ 5233s] [32m      """[0m
[ 5241s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5241s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5241s] 
[ 5242s]   Scenario: Expect a least one existing path[90m              # features/05_use_rspec_matchers/path/be_an_absolute_path.feature:48[0m
[ 5242s]     [32mGiven a file named "[32m[1mspec/absolute_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5242s] [32m      """[0m
[ 5242s] [32m      require 'spec_helper'[0m
[ 5242s] [32m[0m
[ 5242s] [32m      RSpec.describe 'Check if path is absolute', :type => :aruba do[0m
[ 5242s] [32m        let(:paths) { %w(/path/to/path1.txt path2.txt) }[0m
[ 5242s] [32m[0m
[ 5242s] [32m        it { expect(paths).to include an_absolute_path }[0m
[ 5242s] [32m      end[0m
[ 5242s] [32m      """[0m
[ 5249s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5249s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5249s] 
[ 5249s]   Scenario: Expect failure on relative path[90m               # features/05_use_rspec_matchers/path/be_an_absolute_path.feature:62[0m
[ 5249s]     [32mGiven a file named "[32m[1mspec/absolute_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5249s] [32m      """[0m
[ 5249s] [32m      require 'spec_helper'[0m
[ 5249s] [32m[0m
[ 5249s] [32m      RSpec.describe 'Check if path is absolute', :type => :aruba do[0m
[ 5249s] [32m        let(:paths) { %w(path2.txt) }[0m
[ 5249s] [32m[0m
[ 5249s] [32m        it { expect(paths).to be_an_absolute_path }[0m
[ 5249s] [32m      end[0m
[ 5249s] [32m      """[0m
[ 5257s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5257s]     [32mThen the specs should[32m[1m not[0m[0m[32m all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5257s] 
[ 5257s] Feature: Check if path exists
[ 5257s]   If you need to check if a given path exists, you can use the
[ 5257s]   `be_an_existing_path`-matcher. It doesn't care if the path is a directory or
[ 5257s]   a path.
[ 5257s] 
[ 5257s]   ```ruby
[ 5257s]   require 'spec_helper'
[ 5257s] 
[ 5257s]   RSpec.describe 'Check if path exists', :type => :aruba do
[ 5257s]     let(:path) { 'file.txt' }
[ 5257s]     before(:each) { touch(path) }
[ 5257s] 
[ 5257s]     it { expect(path).to be_an_existing_path }
[ 5257s]   end
[ 5257s]   ```
[ 5257s] 
[ 5257s]   Background: [90m                            # features/05_use_rspec_matchers/path/be_an_existing_path.feature:18[0m
[ 5257s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5257s] 
[ 5257s]   Scenario: Expect single existing path[90m                   # features/05_use_rspec_matchers/path/be_an_existing_path.feature:21[0m
[ 5257s]     [32mGiven a file named "[32m[1mspec/existing_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5257s] [32m      """[0m
[ 5257s] [32m      require 'spec_helper'[0m
[ 5257s] [32m[0m
[ 5257s] [32m      RSpec.describe 'Check if path exists', :type => :aruba do[0m
[ 5257s] [32m        let(:path) { 'file.txt' }[0m
[ 5257s] [32m        before(:each) { touch(path) }[0m
[ 5257s] [32m        it { expect(path).to be_an_existing_path }[0m
[ 5257s] [32m      end[0m
[ 5257s] [32m      """[0m
[ 5264s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5264s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5264s] 
[ 5265s]   Scenario: Expect single existing directory[90m              # features/05_use_rspec_matchers/path/be_an_existing_path.feature:35[0m
[ 5265s]     [32mGiven a file named "[32m[1mspec/existing_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5265s] [32m      """[0m
[ 5265s] [32m      require 'spec_helper'[0m
[ 5265s] [32m[0m
[ 5265s] [32m      RSpec.describe 'Check if path exists', :type => :aruba do[0m
[ 5265s] [32m        let(:path) { 'dir.d' }[0m
[ 5265s] [32m        before(:each) { create_directory(path) }[0m
[ 5265s] [32m        it { expect(path).to be_an_existing_path }[0m
[ 5265s] [32m      end[0m
[ 5265s] [32m      """[0m
[ 5272s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5272s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5272s] 
[ 5272s]   Scenario: Expect single non-existing path[90m               # features/05_use_rspec_matchers/path/be_an_existing_path.feature:49[0m
[ 5272s]     [32mGiven a file named "[32m[1mspec/existing_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5272s] [32m      """[0m
[ 5272s] [32m      require 'spec_helper'[0m
[ 5272s] [32m[0m
[ 5272s] [32m      RSpec.describe 'Check if path exists', :type => :aruba do[0m
[ 5272s] [32m        let(:path) { 'file.txt' }[0m
[ 5272s] [32m        it { expect(path).not_to be_an_existing_path }[0m
[ 5272s] [32m      end[0m
[ 5272s] [32m      """[0m
[ 5280s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5280s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5280s] 
[ 5280s]   Scenario: Expect multiple existing paths[90m                # features/05_use_rspec_matchers/path/be_an_existing_path.feature:62[0m
[ 5280s]     [32mGiven a file named "[32m[1mspec/existing_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5280s] [32m      """[0m
[ 5280s] [32m      require 'spec_helper'[0m
[ 5280s] [32m[0m
[ 5280s] [32m      RSpec.describe 'Check if path exists', :type => :aruba do[0m
[ 5280s] [32m        let(:paths) { %w(path1.txt path2.txt) }[0m
[ 5280s] [32m[0m
[ 5280s] [32m        before :each do[0m
[ 5280s] [32m          paths.each { |f| touch(f) }[0m
[ 5280s] [32m        end[0m
[ 5280s] [32m[0m
[ 5280s] [32m        it { expect(paths).to all be_an_existing_path }[0m
[ 5280s] [32m      end[0m
[ 5280s] [32m      """[0m
[ 5288s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5288s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5288s] 
[ 5288s]   Scenario: Expect a least one existing path[90m              # features/05_use_rspec_matchers/path/be_an_existing_path.feature:80[0m
[ 5288s]     [32mGiven a file named "[32m[1mspec/existing_path_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5288s] [32m      """[0m
[ 5288s] [32m      require 'spec_helper'[0m
[ 5288s] [32m[0m
[ 5288s] [32m      RSpec.describe 'Check if path exists', :type => :aruba do[0m
[ 5288s] [32m        let(:paths) { %w(path1.txt path2.txt) }[0m
[ 5288s] [32m[0m
[ 5288s] [32m        before :each do[0m
[ 5288s] [32m          touch(paths.first)[0m
[ 5288s] [32m        end[0m
[ 5288s] [32m[0m
[ 5288s] [32m        it { expect(paths).to include an_existing_path }[0m
[ 5288s] [32m      end[0m
[ 5288s] [32m      """[0m
[ 5295s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                    # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5295s]     [32mThen the specs should all pass[90m                        # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5295s] 
[ 5295s] Feature: Check if path has permissions in filesystem
[ 5295s]   If you need to check if a given path has some permissions in filesystem, you
[ 5295s]   can use the `have_permissions`-matcher. It fails if the file or directory
[ 5295s]   does not exist. You need to pass it the permissions either as `Octal`
[ 5295s]   (`0700`) or `String` (`'0700'`).
[ 5295s] 
[ 5295s]   ```ruby
[ 5295s]   require 'spec_helper'
[ 5295s] 
[ 5295s]   RSpec.describe 'Check if path has permissions', :type => :aruba do
[ 5295s]     context 'when is file' do
[ 5295s]       let(:file) { 'file.txt' }
[ 5295s]       let(:permissions) { 0700 }
[ 5295s] 
[ 5295s]       before(:each) { touch(file) }
[ 5295s]       before(:each) { chmod(permissions, file }
[ 5295s] 
[ 5295s]       it { expect(file).to have_permissions permissions }
[ 5295s]     end
[ 5295s]   end
[ 5295s]   ```
[ 5295s] 
[ 5296s]   Background: [90m                            # features/05_use_rspec_matchers/path/have_permissions.feature:24[0m
[ 5296s]     [32mGiven I use a fixture named "[32m[1mcli-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5296s] 
[ 5296s]   Scenario: Expect file with permissions[90m                          # features/05_use_rspec_matchers/path/have_permissions.feature:27[0m
[ 5296s]     [32mGiven a file named "[32m[1mspec/path_with_permissions_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5296s] [32m      """[0m
[ 5296s] [32m      require 'spec_helper'[0m
[ 5296s] [32m[0m
[ 5296s] [32m      RSpec.describe 'Check if path has permissions', :type => :aruba do[0m
[ 5296s] [32m        let(:file) { 'file.txt' }[0m
[ 5296s] [32m        let(:permissions) { 0600 }[0m
[ 5296s] [32m[0m
[ 5296s] [32m        before(:each) { touch(file) }[0m
[ 5296s] [32m        before(:each) { chmod(permissions, file) }[0m
[ 5296s] [32m[0m
[ 5296s] [32m        it { expect(file).to have_permissions permissions }[0m
[ 5296s] [32m      end[0m
[ 5296s] [32m      """[0m
[ 5302s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5302s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5302s] 
[ 5303s]   Scenario: Expect directory with permissions[90m                     # features/05_use_rspec_matchers/path/have_permissions.feature:45[0m
[ 5303s]     [32mGiven a file named "[32m[1mspec/path_with_permissions_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5303s] [32m      """[0m
[ 5303s] [32m      require 'spec_helper'[0m
[ 5303s] [32m[0m
[ 5303s] [32m      RSpec.describe 'Check if path has permissions', :type => :aruba do[0m
[ 5303s] [32m        let(:directory) { 'directory.d' }[0m
[ 5303s] [32m        let(:permissions) { 0700 }[0m
[ 5303s] [32m[0m
[ 5303s] [32m        before(:each) { create_directory(directory) }[0m
[ 5303s] [32m        before(:each) { chmod(permissions, directory) }[0m
[ 5303s] [32m[0m
[ 5303s] [32m        it { expect(directory).to have_permissions permissions }[0m
[ 5303s] [32m      end[0m
[ 5303s] [32m      """[0m
[ 5310s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5310s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5310s] 
[ 5311s]   Scenario: Expect multiple files with given permissions[90m          # features/05_use_rspec_matchers/path/have_permissions.feature:63[0m
[ 5311s]     [32mGiven a file named "[32m[1mspec/path_with_permissions_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5311s] [32m      """[0m
[ 5311s] [32m      require 'spec_helper'[0m
[ 5311s] [32m[0m
[ 5311s] [32m      RSpec.describe 'Check if path has permissions', :type => :aruba do[0m
[ 5311s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5311s] [32m        let(:permissions) { 0600 }[0m
[ 5311s] [32m[0m
[ 5311s] [32m        before :each do[0m
[ 5311s] [32m          files.each do |f|[0m
[ 5311s] [32m            touch(f)[0m
[ 5311s] [32m            chmod(permissions, f)[0m
[ 5311s] [32m          end[0m
[ 5311s] [32m        end[0m
[ 5311s] [32m[0m
[ 5311s] [32m        it { expect(files).to all have_permissions permissions }[0m
[ 5311s] [32m      end[0m
[ 5311s] [32m      """[0m
[ 5319s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5319s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5319s] 
[ 5320s]   Scenario: Expect a least one file with permissions[90m              # features/05_use_rspec_matchers/path/have_permissions.feature:85[0m
[ 5320s]     [32mGiven a file named "[32m[1mspec/path_with_permissions_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5320s] [32m      """[0m
[ 5320s] [32m      require 'spec_helper'[0m
[ 5320s] [32m[0m
[ 5320s] [32m      RSpec.describe 'Check if path has permissions', :type => :aruba do[0m
[ 5320s] [32m        let(:files) { %w(file1.txt file2.txt) }[0m
[ 5320s] [32m        let(:permissions) { 0600 }[0m
[ 5320s] [32m[0m
[ 5320s] [32m        before :each do[0m
[ 5320s] [32m          touch(files.first)[0m
[ 5320s] [32m          chmod(permissions, files.first)[0m
[ 5320s] [32m        end[0m
[ 5320s] [32m[0m
[ 5320s] [32m        it { expect(files).to include a_path_having_permissions permissions }[0m
[ 5320s] [32m      end[0m
[ 5320s] [32m      """[0m
[ 5326s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5326s]     [32mThen the specs should all pass[90m                                # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5326s] 
[ 5327s]   Scenario: Fails if path does not exist[90m                          # features/05_use_rspec_matchers/path/have_permissions.feature:105[0m
[ 5327s]     [32mGiven a file named "[32m[1mspec/path_with_permissions_spec.rb[0m[0m[32m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5327s] [32m      """[0m
[ 5327s] [32m      require 'spec_helper'[0m
[ 5327s] [32m[0m
[ 5327s] [32m      RSpec.describe 'Check if path has permissions', :type => :aruba do[0m
[ 5327s] [32m        let(:path) { 'file.txt' }[0m
[ 5327s] [32m        let(:permissions) { 0700 }[0m
[ 5327s] [32m[0m
[ 5327s] [32m        it { expect(path).to have_permissions permissions }[0m
[ 5327s] [32m      end[0m
[ 5327s] [32m      """[0m
[ 5334s]     [32mWhen I run `[32m[1mrspec[0m[0m[32m`[90m                                            # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5334s]     [32mThen the specs should[32m[1m not[0m[0m[32m all pass[90m                            # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5334s] 
[ 5334s] Feature: Initialize project with aruba
[ 5334s]   To add `aruba` to your project you can use the `aruba init`-command.
[ 5334s] 
[ 5334s]   Background: [90m                          # features/06_use_aruba_cli/initialize_project_with_aruba.feature:5[0m
[ 5334s]     [32mGiven I use the fixture "[32m[1mempty-app[0m[0m[32m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5340s] 
[ 5340s]   Scenario: Create files for RSpec[90m                              # features/06_use_aruba_cli/initialize_project_with_aruba.feature:8[0m
[ 5340s]     [32mWhen I successfully run `[32m[1maruba init --test-framework rspec[0m[0m[32m`[90m # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5340s]     [32mThen the following files should exist:[90m                      # lib/aruba/cucumber/file.rb:81[0m[0m
[ 5340s]       | [36mspec/spec_helper.rb[0m[0m |[0m
[ 5340s]     [32mAnd the file "[32m[1mspec/support/aruba.rb[0m[0m[32m" should contain:[90m        # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5340s] [32m      """[0m
[ 5340s] [32m      require 'aruba/rspec'[0m
[ 5340s] [32m      """[0m
[ 5340s]     [32mAnd the file "[32m[1mGemfile[0m[0m[32m" should contain:[90m                      # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5340s] [32m      """[0m
[ 5340s] [32m      gem 'aruba'[0m
[ 5340s] [32m      """[0m
[ 5344s]     [32mWhen I successfully run `[32m[1mrspec[0m[0m[32m`[90m                             # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5344s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                             # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5344s] [32m      """[0m
[ 5344s] [32m      0 examples, 0 failures[0m
[ 5344s] [32m      """[0m
[ 5344s] 
[ 5350s]   Scenario: Create files for Cucumber[90m                              # features/06_use_aruba_cli/initialize_project_with_aruba.feature:26[0m
[ 5350s]     [32mWhen I successfully run `[32m[1maruba init --test-framework cucumber[0m[0m[32m`[90m # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5350s]     [32mThen the file "[32m[1mfeatures/support/aruba.rb[0m[0m[32m" should contain:[90m      # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5350s] [32m      """[0m
[ 5350s] [32m      require 'aruba/cucumber'[0m
[ 5350s] [32m      """[0m
[ 5350s]     [32mAnd the file "[32m[1mGemfile[0m[0m[32m" should contain:[90m                         # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5350s] [32m      """[0m
[ 5350s] [32m      gem 'aruba'[0m
[ 5350s] [32m      """[0m
[ 5361s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                             # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5361s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                                # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5361s] [32m      """[0m
[ 5361s] [32m      0 scenarios[0m
[ 5361s] [32m      0 steps[0m
[ 5361s] [32m      """[0m
[ 5361s] 
[ 5367s]   Scenario: Create files for Cucumber (Default)[90m               # features/06_use_aruba_cli/initialize_project_with_aruba.feature:43[0m
[ 5367s]     [32mWhen I successfully run `[32m[1maruba init[0m[0m[32m`[90m                      # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5367s]     [32mThen the file "[32m[1mfeatures/support/aruba.rb[0m[0m[32m" should contain:[90m # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5367s] [32m      """[0m
[ 5367s] [32m      require 'aruba/cucumber'[0m
[ 5367s] [32m      """[0m
[ 5367s]     [32mAnd the file "[32m[1mGemfile[0m[0m[32m" should contain:[90m                    # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5367s] [32m      """[0m
[ 5367s] [32m      gem 'aruba'[0m
[ 5367s] [32m      """[0m
[ 5376s]     [32mWhen I successfully run `[32m[1mcucumber[0m[0m[32m`[90m                        # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5376s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5376s] [32m      """[0m
[ 5376s] [32m      0 scenarios[0m
[ 5376s] [32m      0 steps[0m
[ 5376s] [32m      """[0m
[ 5376s] 
[ 5382s]   Scenario: Create files for Minitest[90m                                         # features/06_use_aruba_cli/initialize_project_with_aruba.feature:60[0m
[ 5383s]     [32mWhen I successfully run `[32m[1maruba init --test-framework minitest[0m[0m[32m`[90m            # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5383s]     [32mThen the following files should exist:[90m                                    # lib/aruba/cucumber/file.rb:81[0m[0m
[ 5383s]       | [36mtest/test_helper.rb[0m[0m |[0m
[ 5383s]     [32mAnd the file "[32m[1mGemfile[0m[0m[32m" should contain:[90m                                    # lib/aruba/cucumber/file.rb:143[0m[0m
[ 5383s] [32m      """[0m
[ 5383s] [32m      gem 'aruba'[0m
[ 5383s] [32m      """[0m
[ 5388s]     [32mWhen I successfully run `[32m[1mruby -Ilib:test test/use_aruba_with_minitest.rb[0m[0m[32m`[90m # lib/aruba/cucumber/command.rb:13[0m[0m
[ 5388s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                                           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5388s] [32m      """[0m
[ 5388s] [32m      0 runs, 0 assertions, 0 failures, 0 errors, 0 skips[0m
[ 5388s] [32m      """[0m
[ 5388s] 
[ 5394s]   Scenario: Unknown Test Framework[90m                   # features/06_use_aruba_cli/initialize_project_with_aruba.feature:74[0m
[ 5394s]     [32mWhen I run `[32m[1maruba init --test-framework unknown[0m[0m[32m`[90m # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5394s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m                  # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5394s] [32m      """[0m
[ 5394s] [32m      got unknown[0m
[ 5394s] [32m      """[0m
[ 5394s] 
[ 5395s] Feature: Aruba Console
[ 5395s] 
[ 5395s]   Background: [90m                    # features/06_use_aruba_cli/open_console.feature:3[0m
[ 5395s]     [32mGiven a mocked home directory[90m # lib/aruba/cucumber/environment.rb:1[0m[0m
[ 5395s] 
[ 5395s]   Scenario: Start console[90m                     # features/06_use_aruba_cli/open_console.feature:6[0m
[ 5401s]     [32mGiven I run `[32m[1maruba console[0m[0m[32m` interactively[90m # lib/aruba/cucumber/command.rb:29[0m[0m
[ 5401s]     [32mWhen I close the stdin stream[90m             # lib/aruba/cucumber/command.rb:43[0m[0m
[ 5401s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5401s] [32m      """[0m
[ 5401s] [32m      aruba:001:0>[0m
[ 5401s] [32m      """[0m
[ 5401s] 
[ 5402s]   [36m@unsupported-on-platform-java[0m
[ 5402s]   Scenario: Show help[90m                         # features/06_use_aruba_cli/open_console.feature:15[0m
[ 5408s]     [32mGiven I run `[32m[1maruba console[0m[0m[32m` interactively[90m # lib/aruba/cucumber/command.rb:29[0m[0m
[ 5408s]     [32mAnd I type "[32m[1maruba_help[0m[0m[32m"[90m                   # lib/aruba/cucumber/command.rb:39[0m[0m
[ 5408s]     [32mWhen I close the stdin stream[90m             # lib/aruba/cucumber/command.rb:43[0m[0m
[ 5408s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5408s] [32m      """[0m
[ 5408s] [32m      Version:[0m
[ 5408s] [32m      """[0m
[ 5408s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m            # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5408s] [32m      """[0m
[ 5408s] [32m      Issue Tracker:[0m
[ 5408s] [32m      """[0m
[ 5408s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m            # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5408s] [32m      """[0m
[ 5408s] [32m      Documentation:[0m
[ 5408s] [32m      """[0m
[ 5408s] 
[ 5409s]   [36m@unsupported-on-platform-java[0m
[ 5409s]   Scenario: Show methods[90m                      # features/06_use_aruba_cli/open_console.feature:33[0m
[ 5414s]     [32mGiven I run `[32m[1maruba console[0m[0m[32m` interactively[90m # lib/aruba/cucumber/command.rb:29[0m[0m
[ 5414s]     [32mAnd I type "[32m[1maruba_methods[0m[0m[32m"[90m                # lib/aruba/cucumber/command.rb:39[0m[0m
[ 5414s]     [32mWhen I close the stdin stream[90m             # lib/aruba/cucumber/command.rb:43[0m[0m
[ 5414s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5414s] [32m      """[0m
[ 5414s] [32m      Methods:[0m
[ 5414s] [32m      """[0m
[ 5414s]     [32mAnd the [32m[1moutput[0m[0m[32m should contain:[90m            # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5414s] [32m      """[0m
[ 5414s] [32m      * setup_aruba[0m
[ 5414s] [32m      """[0m
[ 5414s] 
[ 5415s]   [36m@unsupported-on-platform-java[0m
[ 5415s]   Scenario: Has its own history file[90m          # features/06_use_aruba_cli/open_console.feature:47[0m
[ 5421s]     [32mGiven I run `[32m[1maruba console[0m[0m[32m` interactively[90m # lib/aruba/cucumber/command.rb:29[0m[0m
[ 5421s]     [32mAnd I type "[32m[1mIRB.conf[:HISTORY_FILE][0m[0m[32m"[90m      # lib/aruba/cucumber/command.rb:39[0m[0m
[ 5421s]     [32mAnd I type "[32m[1mexit[0m[0m[32m"[90m                         # lib/aruba/cucumber/command.rb:39[0m[0m
[ 5421s]     [32mWhen I close the stdin stream[90m             # lib/aruba/cucumber/command.rb:43[0m[0m
[ 5421s]     [32mThen the [32m[1moutput[0m[0m[32m should contain:[90m           # lib/aruba/cucumber/command.rb:187[0m[0m
[ 5421s] [32m      """[0m
[ 5421s] [32m      ~/.aruba_history[0m
[ 5421s] [32m      """[0m
[ 5421s] 
[ 5421s] Feature: Support for JRuby
[ 5421s]   Improve startup time by disabling JIT and forcing client JVM mode.  This can
[ 5421s]   be accomplished by adding
[ 5421s] 
[ 5421s]   ```ruby
[ 5421s]   require 'aruba/config/jruby'
[ 5421s]   ```
[ 5421s] 
[ 5421s]   *Note* - no conflict resolution on the JAVA/JRuby environment options is
[ 5421s]   done; only merging. For more complex settings please manually set the
[ 5421s]   environment variables in the hook or externally.
[ 5421s] 
[ 5421s]   Refer to http://blog.headius.com/2010/03/jruby-startup-time-tips.html for other tips on startup time.
[ 5421s] 
[ 5421s]   Background: [90m                            # features/08_other/improve_performance_if_using_jruby.feature:16[0m
[ 5421s]     [36mGiven I use a fixture named "[36m[1mcli-app[0m[0m[36m"[90m # lib/aruba/cucumber/file.rb:1[0m[0m
[ 5421s] 
[ 5421s]   [36m@requires-ruby-platform-java[0m
[ 5421s]   Scenario: [90m                                          # features/08_other/improve_performance_if_using_jruby.feature:20[0m
[ 5421s]     [36mGiven a file named "[36m[1mspec/jruby_env_spec.rb[0m[0m[36m" with:[90m # lib/aruba/cucumber/file.rb:23[0m[0m
[ 5421s] [36m      """[0m
[ 5421s] [36m      require 'spec_helper'[0m
[ 5421s] [36m      require 'aruba/config/jruby'[0m
[ 5421s] [36m[0m
[ 5421s] [36m      RSpec.describe 'running commands with before :command hook', :type => :aruba do[0m
[ 5421s] [36m        it 'sets up for efficient JRuby startup' do[0m
[ 5421s] [36m          with_environment 'JRUBY_OPTS' => '-d' do[0m
[ 5421s] [36m            run_command_and_stop('env')[0m
[ 5421s] [36m[0m
[ 5421s] [36m            expect(last_command_started.output).to include 'JRUBY_OPTS=--dev -X-C -d'[0m
[ 5421s] [36m          end[0m
[ 5421s] [36m        end[0m
[ 5421s] [36m      end[0m
[ 5421s] [36m      """[0m
[ 5421s]     [36mWhen I run `[36m[1mrspec[0m[0m[36m`[90m                                # lib/aruba/cucumber/command.rb:6[0m[0m
[ 5421s]     [36mThen the specs should all pass[90m                    # lib/aruba/cucumber/testing_frameworks.rb:32[0m[0m
[ 5421s] 
[ 5421s] [31mFailing Scenarios:[0m
[ 5421s] [31mcucumber features/02_configure_aruba/basics.feature:116[0m[90m # Scenario: Setting option during runtime for Cucumber[0m
[ 5421s] [31mcucumber features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:431[0m[90m # Scenario: Handle tons of output[0m
[ 5421s] [31mcucumber features/03_testing_frameworks/cucumber/steps/command/check_output_of_command.feature:458[0m[90m # Scenario: Handle tons of interactive output[0m
[ 5421s] [31mcucumber features/04_aruba_api/command/run_command.feature:75[0m[90m # Scenario: Command with long startup phase[0m
[ 5421s] [31mcucumber features/04_aruba_api/command/run_command.feature:132[0m[90m # Scenario: Long running command[0m
[ 5421s] [31mcucumber features/04_aruba_api/command/run_simple.feature:142[0m[90m # Scenario: Long-running command[0m
[ 5421s] [31mcucumber features/04_aruba_api/command/send_signal_to_command.feature:10[0m[90m # Scenario: Existing executable[0m
[ 5421s] 
[ 5421s] 388 scenarios ([31m7 failed[0m, [36m4 skipped[0m, [32m377 passed[0m)
[ 5421s] 1832 steps ([31m7 failed[0m, [36m17 skipped[0m, [32m1808 passed[0m)
[ 5421s] 61m12.881s
[ 5421s] error: Bad exit status from /var/tmp/rpm-tmp.cMFr7J (%check)
[ 5421s] 
[ 5421s] 
[ 5421s] RPM build errors:
[ 5421s]     bad date in %changelog: Thur Mar 3 2022 liqiuyu <liqiuyu@kylinos.cn> - 0.14.14-1
[ 5421s]     Bad exit status from /var/tmp/rpm-tmp.cMFr7J (%check)
[ 5422s] 
[ 5422s] oe-RISCV-worker28 failed "build rubygem-aruba.spec" at Sat Apr 23 01:06:20 UTC 2022.
[ 5422s] 
